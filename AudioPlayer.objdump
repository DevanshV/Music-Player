
AudioPlayer.elf:     file format elf32-littlenios2
AudioPlayer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001c3d4 memsz 0x0001c3d4 flags r-x
    LOAD off    0x0001d3f4 vaddr 0x0081c3f4 paddr 0x0081e138 align 2**12
         filesz 0x00001d44 memsz 0x00001d44 flags rw-
    LOAD off    0x0001fe7c vaddr 0x0081fe7c paddr 0x0081fe7c align 2**12
         filesz 0x00000000 memsz 0x00002b78 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001bab4  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006fc  0081bcf8  0081bcf8  0001ccf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d44  0081c3f4  0081e138  0001d3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00002b78  0081fe7c  0081fe7c  0001fe7c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  008229f4  008229f4  0001f138  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001f138  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000012d0  00000000  00000000  0001f160  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00030c11  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bec6  00000000  00000000  00051041  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ff60  00000000  00000000  0005cf07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003a04  00000000  00000000  0006ce68  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004ea0  00000000  00000000  0007086c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019188  00000000  00000000  0007570c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0008e894  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001d08  00000000  00000000  0008e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009556c  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0009556f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009557b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009557c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009557d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00095581  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00095585  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00095589  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00095594  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0009559f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000955aa  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002a  00000000  00000000  000955b5  2**0
                  CONTENTS, READONLY
 29 .jdi          00004244  00000000  00000000  000955df  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008ff91  00000000  00000000  00099823  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0081bcf8 l    d  .rodata	00000000 .rodata
0081c3f4 l    d  .rwdata	00000000 .rwdata
0081fe7c l    d  .bss	00000000 .bss
008229f4 l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../AudioPlayer_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008004ac l     F .text	00000208 altera_avalon_jtag_uart_irq
008006b4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081e0e4 l     O .rwdata	00000004 colstart
00800cd4 l     F .text	000000b4 lcd_write_command
00800d88 l     F .text	000000d4 lcd_write_data
00800e5c l     F .text	000000cc lcd_clear_screen
00800f28 l     F .text	000001e8 lcd_repaint_screen
00801110 l     F .text	000000c8 lcd_scroll_up
008011d8 l     F .text	000002a0 lcd_handle_escape
00801960 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_sysid_qsys.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00801ba4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00801e4c l     F .text	0000009c altera_avalon_uart_irq
00801ee8 l     F .text	000000e0 altera_avalon_uart_rxirq
00801fc8 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00802160 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080238c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 fatfs.c
00000000 l    df *ABS*	00000000 fatfs_diskio.c
0081e0e8 l     O .rwdata	00000001 Stat
0081fe84 l     O .bss	00000001 CardType
0081fe86 l     O .bss	00000002 Timer1
0081fe88 l     O .bss	00000002 Timer2
0081fe8a l     O .bss	00000001 XMITDummy
0081fe8c l     O .bss	00000004 Control1
00803448 l     F .text	0000004c SetLowSpeed
00803494 l     F .text	0000006c SetHighSpeed
00803500 l     F .text	00000044 InitDiskIOHardware
00803544 l     F .text	0000003c Set8BitTransfer
00803580 l     F .text	00000038 Set32BitTransfer
008035b8 l     F .text	00000050 ReceiveU8
00803608 l     F .text	0000012c ReceiveDatablock
00803734 l     F .text	00000188 TransmitDatablock
008038e0 l     F .text	00000054 WaitReady
008038bc l     F .text	00000024 GetCDWP
00803934 l     F .text	00000044 ReleaseBus
00803978 l     F .text	00000250 SendCMD
0081fe90 l     O .bss	00000004 pvm.1830
00000000 l    df *ABS*	00000000 fatfs_nios2_de0_nano_spi.c
00000000 l    df *ABS*	00000000 fatfs_nios2_de1_pio.c
00000000 l    df *ABS*	00000000 fatfs_nios2_de1_spi.c
00000000 l    df *ABS*	00000000 ff.c
0081fe94 l     O .bss	00000004 FatFs
0081fe98 l     O .bss	00000002 Fsid
008046dc l     F .text	0000006c mem_cpy
00804748 l     F .text	00000058 mem_set
008047a0 l     F .text	0000008c mem_cmp
0080482c l     F .text	0000007c chk_chr
008048a8 l     F .text	0000015c move_window
00804a04 l     F .text	0000021c sync
00805280 l     F .text	00000114 remove_chain
00805394 l     F .text	000001e4 create_chain
00805578 l     F .text	000001ec dir_sdi
00805764 l     F .text	000002e8 dir_next
00805a4c l     F .text	000000f4 dir_find
00805b40 l     F .text	000000fc dir_read
00805c3c l     F .text	00000120 dir_register
00805d5c l     F .text	00000098 dir_remove
00805df4 l     F .text	000002ec create_name
0081bd3c l     O .rodata	00000080 excvt.1856
008060e0 l     F .text	00000230 get_fileinfo
00806310 l     F .text	000001d0 follow_path
008064e0 l     F .text	00000174 check_fs
00806654 l     F .text	0000093c chk_mounted
00806f90 l     F .text	00000090 validate
0081bdbc l     O .rodata	00000016 vst.2095
0081bdd2 l     O .rodata	00000016 cst.2096
00000000 l    df *ABS*	00000000 hello_world.c
0081ff28 l     O .bss	00000018 alarm
0081fe9c l     O .bss	00000004 Systick
0081fea0 l     O .bss	00000002 Timer
0080b188 l     F .text	00000068 TimerFunction
0081feb2 l     O .bss	00000002 wTimer10ms.3511
0080b1f0 l     F .text	00000050 IoInit
0080b240 l     F .text	00000140 scan_files
0081e0f0 l     O .rwdata	00000004 ft.3604
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 uart_nios2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080c514 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 ctype_.c
0081bf31 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0081c3f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 refill.c
0080d9b0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcasestr.c
0080ddb8 l     F .text	0000018c critical_factorization
0080df44 l     F .text	00000454 two_way_long_needle
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncasecmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0081c0fa l     O .rodata	00000010 zeroes.4255
0081093c l     F .text	000000bc __sbprintf
0081c10a l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00810bfc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008127b8 l     F .text	00000008 __fp_lock
008127c0 l     F .text	00000008 __fp_unlock
008127d4 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0081cc40 l     O .rwdata	00000020 lc_ctype_charset
0081cc20 l     O .rwdata	00000020 lc_message_charset
0081cc60 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
0081c138 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00814698 l     F .text	000000fc __sprint_r.part.0
0081c26c l     O .rodata	00000010 blanks.4199
0081c25c l     O .rodata	00000010 zeroes.4200
00815aa0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0081a054 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0081a174 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0081a230 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0081a4e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0081a5d4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0081a6b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0081a894 l     F .text	00000050 alt_get_errno
0081a8e4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0081ab08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081e12c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0081af30 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081b078 l     F .text	00000038 alt_dev_reg
0081ce40 l     O .rwdata	00001060 jtag_uart_0
0081dea0 l     O .rwdata	00000120 lcd_display
0081dfc0 l     O .rwdata	000000c4 uart
0081e084 l     O .rwdata	00000030 audio_i2c_config
0081e0b4 l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081b330 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081b6d4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081ff24 g     O .bss	00000004 alt_instruction_exception_handler
00802e64 g     F .text	00000038 alt_up_av_config_reset
0080d998 g     F .text	00000018 putchar
00814240 g     F .text	00000074 _mprec_log10
008032c4 g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
0081432c g     F .text	0000008c __any_on
008131a0 g     F .text	00000054 _isatty_r
0081c144 g     O .rodata	00000028 __mprec_tinytens
0080a95c g     F .text	000000d0 f_gets
00802ed4 g     F .text	00000034 alt_up_av_config_disable_interrupt
0081a7dc g     F .text	00000078 alt_main
0080e824 g     F .text	00000090 strcpy
008200f8 g     O .bss	00000230 Fatfs
008228f4 g     O .bss	00000100 alt_irq
008132d4 g     F .text	0000005c _lseek_r
00804c8c g     F .text	00000284 get_fat
0081e138 g       *ABS*	00000000 __flash_rwdata_start
00812b58 g     F .text	000000ac __sflags
00818a7c g     F .text	00000084 .hidden __eqdf2
00802820 g     F .text	00000060 alt_up_audio_read_fifo_avail
008229f4 g       *ABS*	00000000 __alt_heap_start
00802f98 g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
0080c484 g     F .text	00000038 uart0_put
0080ab38 g     F .text	00000650 f_printf
00802880 g     F .text	00000068 alt_up_audio_record_r
00816bdc g     F .text	0000009c _wcrtomb_r
0080dd54 g     F .text	0000005c __sseek
00812b08 g     F .text	00000010 __sinit
00815b5c g     F .text	00000138 __swbuf_r
0081feb4 g     O .bss	00000004 lcd
008131f4 g     F .text	0000007c _setlocale_r
00812970 g     F .text	00000068 __sfmoreglue
0081a874 g     F .text	00000020 __malloc_unlock
0081feb8 g     O .bss	00000002 w1
00820328 g     O .bss	00000224 File1
00802790 g     F .text	00000090 alt_up_audio_reset_audio_core
0081fe80 g     O .bss	00000004 altera_avalon_timer_ts_freq
00816518 g     F .text	0000015c memmove
00812af0 g     F .text	00000018 _cleanup
00813418 g     F .text	000000a8 _Balloc
00818b00 g     F .text	000000e0 .hidden __gtdf2
0081b80c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0081febc g     O .bss	00000004 p2
0080cc28 g     F .text	00000058 _fstat_r
0081fef0 g     O .bss	00000004 errno
0080dc14 g     F .text	00000014 __srget
0080dcd0 g     F .text	00000008 __seofread
0080409c g     F .text	0000016c ffs_DiskIOWrite
00802750 g     F .text	00000040 alt_up_audio_write_interrupt_pending
0081ff14 g     O .bss	00000004 alt_argv
008260e4 g       *ABS*	00000000 _gp
0081af00 g     F .text	00000030 usleep
0081ccc0 g     O .rwdata	00000180 alt_fd_list
0082054c g     O .bss	00000018 Finfo
0080cc80 g     F .text	00000070 _getc_r
0080ccf0 g     F .text	00000088 getc
0080d990 g     F .text	00000008 _putchar_r
00804208 g     F .text	000004a8 ffs_DiskIOIoctl
0081a1a0 g     F .text	00000090 alt_find_dev
0080d6d8 g     F .text	00000138 memcpy
008127c8 g     F .text	0000000c _cleanup_r
00819d3c g     F .text	000000d0 .hidden __floatsidf
0081b794 g     F .text	00000078 alt_io_redirect
00818be0 g     F .text	000000e0 .hidden __ltdf2
0081bcf8 g       *ABS*	00000000 __DTOR_END__
0081b8b8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00814580 g     F .text	00000074 __fpclassifyd
0081419c g     F .text	000000a4 __ratio
00815a7c g     F .text	00000024 __vfiprintf_internal
0080978c g     F .text	00000314 f_rename
00802c68 g     F .text	00000050 alt_up_audio_read_fifo_head
008008b0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0080c630 g     F .text	00000008 .hidden __udivsi3
0081a530 g     F .text	000000a4 isatty
00820564 g     O .bss	00000050 fileSize
0081c194 g     O .rodata	000000c8 __mprec_tens
0081fec0 g     O .bss	00000002 acc_dirs
0081fec2 g     O .bss	00000001 b1
00813270 g     F .text	0000000c __locale_charset
0081fea8 g     O .bss	00000004 currIndex
0080be28 g     F .text	000001b8 xitoa
0081fec4 g     O .bss	00000004 cnt
0081b82c g     F .text	0000008c alt_icache_flush
0081fefc g     O .bss	00000004 __malloc_top_pad
00808d34 g     F .text	000001e8 f_truncate
0080baec g     F .text	00000284 xatoi
00802de4 g     F .text	00000080 alt_up_av_config_read_data
0080b8d0 g     F .text	00000058 isWav
0081e108 g     O .rwdata	00000004 __mb_cur_max
008132a0 g     F .text	0000000c _localeconv_r
00816058 g     F .text	000004c0 __sfvwrite_r
00813824 g     F .text	0000003c __i2b
0081fec8 g     O .bss	00000004 audio_dev
0080dc28 g     F .text	00000054 _sbrk_r
0080c28c g     F .text	0000011c put_dump
00814524 g     F .text	0000005c _read_r
0081e120 g     O .rwdata	00000004 alt_max_fd
00802cb8 g     F .text	00000064 alt_up_audio_write_fifo_head
00815d74 g     F .text	000000f0 _fclose_r
0081fecc g     O .bss	00000002 acc_files
00812788 g     F .text	00000030 fflush
0081fef8 g     O .bss	00000004 __malloc_max_sbrked_mem
0081a330 g     F .text	000001b0 alt_irq_register
00817914 g     F .text	0000089c .hidden __adddf3
00813f44 g     F .text	0000011c __b2d
00817384 g     F .text	00000590 .hidden __umoddi3
0081a708 g     F .text	000000d4 lseek
0081e0f8 g     O .rwdata	00000004 _global_impure_ptr
00816674 g     F .text	00000568 _realloc_r
0080e94c g     F .text	0000007c strncasecmp
008229f4 g       *ABS*	00000000 __bss_end
0081adfc g     F .text	00000104 alt_tick
00816dc4 g     F .text	000005c0 .hidden __udivdi3
00815e78 g     F .text	00000184 _fputwc_r
0081c16c g     O .rodata	00000028 __mprec_bigtens
00813608 g     F .text	00000104 __s2b
00819e0c g     F .text	000000a4 .hidden __floatunsidf
00813cec g     F .text	00000060 __mcmp
00801dac g     F .text	000000a0 altera_avalon_uart_init
00802588 g     F .text	00000040 alt_up_audio_open_dev
00812b28 g     F .text	00000018 __fp_lock_all
00808f1c g     F .text	00000218 f_unlink
008029b0 g     F .text	00000068 alt_up_audio_play_r
0081ad64 g     F .text	00000098 alt_alarm_stop
0080bfe0 g     F .text	000002ac xprintf
0081ff0c g     O .bss	00000004 alt_irq_active
0080c7c0 g     F .text	00000444 _fseeko_r
0081fed0 g     O .bss	00000004 s1
0080c3a8 g     F .text	000000bc get_line
008000fc g     F .exceptions	000000d4 alt_irq_handler
0081cc98 g     O .rwdata	00000028 alt_dev_null
0080aa2c g     F .text	00000074 f_putc
0080aaa0 g     F .text	00000098 f_puts
0081b2ec g     F .text	00000044 alt_dcache_flush_all
0081370c g     F .text	00000068 __hi0bits
00819cb4 g     F .text	00000088 .hidden __fixdfsi
0081fed4 g     O .bss	00000004 p1
0081ff40 g     O .bss	00000190 filename
0081e138 g       *ABS*	00000000 __ram_rwdata_end
0081e118 g     O .rwdata	00000008 alt_dev_list
0081af80 g     F .text	000000f8 write
008143b8 g     F .text	000000a0 _putc_r
0081c3f4 g       *ABS*	00000000 __ram_rodata_end
0081a280 g     F .text	000000b0 fstat
0080c774 g     F .text	00000024 fprintf
00818be0 g     F .text	000000e0 .hidden __ledf2
00813a5c g     F .text	00000140 __pow5mult
008147ac g     F .text	000012d0 ___vfiprintf_internal_r
0081ff08 g     O .bss	00000004 __nlocale_changed
0080c638 g     F .text	00000008 .hidden __umodsi3
008229f4 g       *ABS*	00000000 end
00801478 g     F .text	000004e8 altera_avalon_lcd_16207_write
0080cc04 g     F .text	00000024 fseeko
0081fed8 g     O .bss	00000004 r_buf
008023dc g     F .text	000001ac altera_avalon_uart_write
0080c79c g     F .text	00000024 fseek
008003f4 g     F .text	000000b8 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0081bcf8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00801c1c g     F .text	00000080 alt_avalon_timer_sc_init
00819eb0 g     F .text	00000064 .hidden __clzsi2
00801cfc g     F .text	00000060 altera_avalon_uart_write_fd
00801d5c g     F .text	00000050 altera_avalon_uart_close_fd
00800abc g     F .text	00000218 altera_avalon_jtag_uart_write
00812b18 g     F .text	00000004 __sfp_lock_acquire
00813330 g     F .text	000000e8 memchr
0080e9c8 g     F .text	00001f50 ___vfprintf_internal_r
00812d28 g     F .text	000002f0 _free_r
0081327c g     F .text	00000010 __locale_mb_cur_max
0080bdc0 g     F .text	00000068 xputs
0081bb30 g     F .text	00000194 __call_exitprocs
0080dba0 g     F .text	00000074 __srget_r
0081e0ec g     O .rwdata	00000004 blen
0080c464 g     F .text	00000020 uart0_init
008205b4 g     O .bss	00002000 Buff
0081ff04 g     O .bss	00000004 __mlocale_changed
00808220 g     F .text	00000048 f_close
0080e398 g     F .text	0000048c strcasestr
0081e100 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0081ff1c g     O .bss	00000004 _alt_tick_rate
00802b60 g     F .text	00000108 alt_up_audio_write_fifo
00813b9c g     F .text	00000150 __lshift
00802d80 g     F .text	00000064 alt_up_av_config_write_data
0081ff20 g     O .bss	00000004 _alt_nticks
0081ab58 g     F .text	000000fc read
0081b0e4 g     F .text	000000b0 alt_sys_init
00802a80 g     F .text	000000e0 alt_up_audio_read_fifo
0080d934 g     F .text	0000005c _open_r
0081ba1c g     F .text	00000114 __register_exitproc
008033cc g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
00807538 g     F .text	000004e4 f_read
008026bc g     F .text	00000054 alt_up_audio_disable_write_interrupt
00813860 g     F .text	000001fc __multiply
008088c4 g     F .text	000000e4 f_readdir
0080075c g     F .text	00000068 altera_avalon_jtag_uart_close
0081c3f4 g       *ABS*	00000000 __ram_rwdata_start
00803f80 g     F .text	0000011c ffs_DiskIORead
0081bcf8 g       *ABS*	00000000 __ram_rodata_start
008200d0 g     O .bss	00000028 __malloc_current_mallinfo
00814060 g     F .text	0000013c __d2b
00809574 g     F .text	00000104 f_chmod
008225b4 g     O .bss	00000224 File2
00800290 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081b5f0 g     F .text	000000b4 alt_get_fd
00803bf4 g     F .text	00000108 ffs_DiskIOTimerproc
0081b194 g     F .text	00000158 alt_busy_sleep
00810ba8 g     F .text	00000054 _close_r
0080266c g     F .text	00000050 alt_up_audio_enable_write_interrupt
00803cfc g     F .text	0000025c ffs_DiskIOInitialize
0081b9a0 g     F .text	0000007c memcmp
00800350 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008229f4 g       *ABS*	00000000 __alt_stack_base
008003a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00810a54 g     F .text	00000154 __swsetup_r
008227d8 g     O .bss	0000001c Dir
008181b0 g     F .text	000008cc .hidden __divdf3
00802618 g     F .text	00000054 alt_up_audio_disable_read_interrupt
008129d8 g     F .text	00000118 __sfp
008142b4 g     F .text	00000078 __copybits
0081c818 g     O .rwdata	00000408 __malloc_av_
00812b24 g     F .text	00000004 __sinit_lock_release
00818cc0 g     F .text	00000724 .hidden __muldf3
0080dc7c g     F .text	00000054 __sread
0081fedc g     O .bss	00000004 acc_size
008046b0 g     F .text	0000002c get_fattime
0081b4dc g     F .text	00000114 alt_find_file
0081feac g     O .bss	00000004 currSong
0081b380 g     F .text	000000a4 alt_dev_llist_insert
0081a854 g     F .text	00000020 __malloc_lock
0080c74c g     F .text	00000028 _fprintf_r
0081acb4 g     F .text	000000b0 sbrk
0081272c g     F .text	0000005c _fflush_r
00815cb0 g     F .text	000000c4 _calloc_r
0080b928 g     F .text	000000ec getFileList
0080c730 g     F .text	0000001c fopen
0081fe7c g       *ABS*	00000000 __bss_start
0080d810 g     F .text	00000124 memset
0080ba14 g     F .text	000000d8 main
00802950 g     F .text	00000060 alt_up_audio_write_fifo_space
0081ff18 g     O .bss	00000004 alt_envp
0081fef4 g     O .bss	00000004 __malloc_max_total_mem
008002f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00815c94 g     F .text	0000001c __swbuf
00807f98 g     F .text	00000288 f_sync
00801a0c g     F .text	00000138 altera_avalon_lcd_16207_init
0080ddb0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00815e64 g     F .text	00000014 fclose
00810dfc g     F .text	00001728 _dtoa_r
0080cf30 g     F .text	000007a8 _malloc_r
00816d38 g     F .text	00000030 __ascii_wctomb
008227f4 g     O .bss	00000100 Line
00809aa0 g     F .text	00000ebc f_mkfs
0081e124 g     O .rwdata	00000004 alt_errno
00807020 g     F .text	00000094 f_mount
00813018 g     F .text	000000c4 _fwalk
00808754 g     F .text	00000170 f_opendir
00814458 g     F .text	000000cc putc
0080c580 g     F .text	00000054 .hidden __divsi3
00812c04 g     F .text	00000124 _malloc_trim_r
0081bcf8 g       *ABS*	00000000 __CTOR_END__
008145f4 g     F .text	000000a4 strcmp
0081bcf8 g       *ABS*	00000000 __flash_rodata_start
0081bcf8 g       *ABS*	00000000 __DTOR_LIST__
00804f10 g     F .text	00000370 put_fat
0080bd70 g     F .text	00000050 xputc
00818a7c g     F .text	00000084 .hidden __nedf2
00802d1c g     F .text	00000064 alt_up_av_config_open_dev
0081b0b0 g     F .text	00000034 alt_irq_init
0081ac54 g     F .text	00000060 alt_release_fd
00808268 g     F .text	000004ec f_lseek
0081c27c g     O .rodata	00000100 .hidden __clz_tab
0081ff00 g     O .bss	00000004 _PathLocale
0081b954 g     F .text	00000014 atexit
008109f8 g     F .text	0000005c _write_r
00802f60 g     F .text	00000038 alt_up_av_config_read_ready
008132ac g     F .text	0000001c setlocale
0081fee0 g     O .bss	00000004 s2
0081e0fc g     O .rwdata	00000004 _impure_ptr
0081ff10 g     O .bss	00000004 alt_argc
00812524 g     F .text	00000208 __sflush_r
0081fe7c g     O .bss	00000004 altera_avalon_timer_ts_base
0081b480 g     F .text	0000005c _do_dtors
00813298 g     F .text	00000008 __locale_cjk_lang
0080c798 g     F .text	00000004 _fseek_r
0080d9cc g     F .text	000001d4 __srefill_r
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00803f58 g     F .text	00000028 ffs_DiskIOStatus
00813ee4 g     F .text	00000060 __ulp
008089a8 g     F .text	000000a0 f_stat
00812b40 g     F .text	00000018 __fp_unlock_all
00801b44 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0081e110 g     O .rwdata	00000008 alt_fs_list
008028e8 g     F .text	00000068 alt_up_audio_record_l
0081fea4 g     O .bss	00000004 filenum
00800020 g       *ABS*	00000000 __ram_exceptions_start
008132c8 g     F .text	0000000c localeconv
00804c20 g     F .text	0000006c clust2sect
0081fee4 g     O .bss	00000004 p3
00802e9c g     F .text	00000038 alt_up_av_config_enable_interrupt
00802f08 g     F .text	00000058 alt_up_av_config_read_acknowledge
0080326c g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
0081e138 g       *ABS*	00000000 _edata
00809678 g     F .text	00000114 f_utime
00801c9c g     F .text	00000060 altera_avalon_uart_read_fd
008229f4 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00807a1c g     F .text	0000057c f_write
008007c4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0081fee8 g     O .bss	00000004 l_buf
00802a18 g     F .text	00000068 alt_up_audio_play_l
0080dcd8 g     F .text	0000007c __swrite
0081e104 g     O .rwdata	00000004 __malloc_trim_threshold
008070b4 g     F .text	00000484 f_open
0081feec g     O .bss	00000001 res
0081328c g     F .text	0000000c __locale_msgcharset
0081b968 g     F .text	00000038 exit
008130dc g     F .text	000000c4 _fwalk_reent
00813d4c g     F .text	00000198 __mdiff
00803374 g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
0080b380 g     F .text	000001a4 selectLCD
0080c5d4 g     F .text	0000005c .hidden __modsi3
0081e0f4 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00812b1c g     F .text	00000004 __sfp_lock_release
0081feb0 g     O .bss	00000001 drv
0081be30 g     O .rodata	00000101 _ctype_
0080c4bc g     F .text	00000058 uart0_get
00809134 g     F .text	00000440 f_mkdir
0080210c g     F .text	00000054 altera_avalon_uart_close
0080c640 g     F .text	000000f0 _fopen_r
0081bcc4 g     F .text	00000034 _exit
00803424 g     F .text	00000024 ffs_Init
00819f14 g     F .text	00000140 alt_alarm_start
0080cd78 g     F .text	000001b8 __smakebuf_r
0080e8b4 g     F .text	00000098 strlen
0081a9b0 g     F .text	00000158 open
00818b00 g     F .text	000000e0 .hidden __gedf2
0080b524 g     F .text	000003ac playSong
0080303c g     F .text	000000ec alt_up_av_config_read_video_cfg_register
0081e10c g     O .rwdata	00000004 __wctomb
00814794 g     F .text	00000018 __sprint_r
0081b6a4 g     F .text	00000030 alt_icache_flush_all
00808a48 g     F .text	000002ec f_getfree
0081e128 g     O .rwdata	00000004 alt_priority_mask
00810918 g     F .text	00000024 __vfprintf_internal
0080331c g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
00816d68 g     F .text	0000005c _wctomb_r
008021b0 g     F .text	000001dc altera_avalon_uart_read
008193e4 g     F .text	000008d0 .hidden __subdf3
00803bc8 g     F .text	0000002c ffs_DiskIOInit
00813774 g     F .text	000000b0 __lo0bits
0081e130 g     O .rwdata	00000008 alt_alarm_list
0081b424 g     F .text	0000005c _do_ctors
00816c78 g     F .text	000000c0 wcrtomb
0081a0a4 g     F .text	000000d0 close
0081a638 g     F .text	00000080 alt_load
008025c8 g     F .text	00000050 alt_up_audio_enable_read_interrupt
00803128 g     F .text	000000ec alt_up_av_config_write_video_cfg_register
00815ffc g     F .text	0000005c fputwc
00000000  w      *UND*	00000000 free
00812b20 g     F .text	00000004 __sinit_lock_acquire
008134e8 g     F .text	00000120 __multadd
008134c0 g     F .text	00000028 _Bfree
00803214 g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register
00802710 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	008020b4 	movhi	r2,130
  800140:	108a3d04 	addi	r2,r2,10484
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	108a3d04 	addi	r2,r2,10484
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	21000104 	addi	r4,r4,4
  800168:	1105883a 	add	r2,r2,r4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	e17ffd17 	ldw	r5,-12(fp)
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a79017 	ldw	r2,-25024(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a79017 	ldw	r2,-25024(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	1809883a 	mov	r4,r3
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	e1bffe17 	ldw	r6,-8(fp)
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  800260:	d6983914 	ori	gp,gp,24804
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10bf9f14 	ori	r2,r2,65148

    movhi r3, %hi(__bss_end)
  80026c:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  800270:	18ca7d14 	ori	r3,r3,10740

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	081a6380 	call	81a638 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	081a7dc0 	call	81a7dc <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  800290:	defffa04 	addi	sp,sp,-24
  800294:	dfc00515 	stw	ra,20(sp)
  800298:	df000415 	stw	fp,16(sp)
  80029c:	df000404 	addi	fp,sp,16
  8002a0:	e13ffd15 	stw	r4,-12(fp)
  8002a4:	e17ffe15 	stw	r5,-8(fp)
  8002a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8002ac:	e0bffd17 	ldw	r2,-12(fp)
  8002b0:	10800017 	ldw	r2,0(r2)
  8002b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8002b8:	e0bffc17 	ldw	r2,-16(fp)
  8002bc:	10c00a04 	addi	r3,r2,40
  8002c0:	e0bffd17 	ldw	r2,-12(fp)
  8002c4:	10800217 	ldw	r2,8(r2)
  8002c8:	1809883a 	mov	r4,r3
  8002cc:	e17ffe17 	ldw	r5,-8(fp)
  8002d0:	e1bfff17 	ldw	r6,-4(fp)
  8002d4:	100f883a 	mov	r7,r2
  8002d8:	08008b00 	call	8008b0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8002dc:	e037883a 	mov	sp,fp
  8002e0:	dfc00117 	ldw	ra,4(sp)
  8002e4:	df000017 	ldw	fp,0(sp)
  8002e8:	dec00204 	addi	sp,sp,8
  8002ec:	f800283a 	ret

008002f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8002f0:	defffa04 	addi	sp,sp,-24
  8002f4:	dfc00515 	stw	ra,20(sp)
  8002f8:	df000415 	stw	fp,16(sp)
  8002fc:	df000404 	addi	fp,sp,16
  800300:	e13ffd15 	stw	r4,-12(fp)
  800304:	e17ffe15 	stw	r5,-8(fp)
  800308:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80030c:	e0bffd17 	ldw	r2,-12(fp)
  800310:	10800017 	ldw	r2,0(r2)
  800314:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  800318:	e0bffc17 	ldw	r2,-16(fp)
  80031c:	10c00a04 	addi	r3,r2,40
  800320:	e0bffd17 	ldw	r2,-12(fp)
  800324:	10800217 	ldw	r2,8(r2)
  800328:	1809883a 	mov	r4,r3
  80032c:	e17ffe17 	ldw	r5,-8(fp)
  800330:	e1bfff17 	ldw	r6,-4(fp)
  800334:	100f883a 	mov	r7,r2
  800338:	0800abc0 	call	800abc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80033c:	e037883a 	mov	sp,fp
  800340:	dfc00117 	ldw	ra,4(sp)
  800344:	df000017 	ldw	fp,0(sp)
  800348:	dec00204 	addi	sp,sp,8
  80034c:	f800283a 	ret

00800350 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  800350:	defffc04 	addi	sp,sp,-16
  800354:	dfc00315 	stw	ra,12(sp)
  800358:	df000215 	stw	fp,8(sp)
  80035c:	df000204 	addi	fp,sp,8
  800360:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800364:	e0bfff17 	ldw	r2,-4(fp)
  800368:	10800017 	ldw	r2,0(r2)
  80036c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  800370:	e0bffe17 	ldw	r2,-8(fp)
  800374:	10c00a04 	addi	r3,r2,40
  800378:	e0bfff17 	ldw	r2,-4(fp)
  80037c:	10800217 	ldw	r2,8(r2)
  800380:	1809883a 	mov	r4,r3
  800384:	100b883a 	mov	r5,r2
  800388:	080075c0 	call	80075c <altera_avalon_jtag_uart_close>
}
  80038c:	e037883a 	mov	sp,fp
  800390:	dfc00117 	ldw	ra,4(sp)
  800394:	df000017 	ldw	fp,0(sp)
  800398:	dec00204 	addi	sp,sp,8
  80039c:	f800283a 	ret

008003a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8003a0:	defffa04 	addi	sp,sp,-24
  8003a4:	dfc00515 	stw	ra,20(sp)
  8003a8:	df000415 	stw	fp,16(sp)
  8003ac:	df000404 	addi	fp,sp,16
  8003b0:	e13ffd15 	stw	r4,-12(fp)
  8003b4:	e17ffe15 	stw	r5,-8(fp)
  8003b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8003bc:	e0bffd17 	ldw	r2,-12(fp)
  8003c0:	10800017 	ldw	r2,0(r2)
  8003c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8003c8:	e0bffc17 	ldw	r2,-16(fp)
  8003cc:	10800a04 	addi	r2,r2,40
  8003d0:	1009883a 	mov	r4,r2
  8003d4:	e17ffe17 	ldw	r5,-8(fp)
  8003d8:	e1bfff17 	ldw	r6,-4(fp)
  8003dc:	08007c40 	call	8007c4 <altera_avalon_jtag_uart_ioctl>
}
  8003e0:	e037883a 	mov	sp,fp
  8003e4:	dfc00117 	ldw	ra,4(sp)
  8003e8:	df000017 	ldw	fp,0(sp)
  8003ec:	dec00204 	addi	sp,sp,8
  8003f0:	f800283a 	ret

008003f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8003f4:	defffb04 	addi	sp,sp,-20
  8003f8:	dfc00415 	stw	ra,16(sp)
  8003fc:	df000315 	stw	fp,12(sp)
  800400:	df000304 	addi	fp,sp,12
  800404:	e13ffd15 	stw	r4,-12(fp)
  800408:	e17ffe15 	stw	r5,-8(fp)
  80040c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800410:	e0bffd17 	ldw	r2,-12(fp)
  800414:	00c00044 	movi	r3,1
  800418:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80041c:	e0bffd17 	ldw	r2,-12(fp)
  800420:	10800017 	ldw	r2,0(r2)
  800424:	10800104 	addi	r2,r2,4
  800428:	1007883a 	mov	r3,r2
  80042c:	e0bffd17 	ldw	r2,-12(fp)
  800430:	10800817 	ldw	r2,32(r2)
  800434:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  800438:	e0bfff17 	ldw	r2,-4(fp)
  80043c:	1009883a 	mov	r4,r2
  800440:	e17ffd17 	ldw	r5,-12(fp)
  800444:	01802034 	movhi	r6,128
  800448:	31812b04 	addi	r6,r6,1196
  80044c:	081a3300 	call	81a330 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  800450:	e0bffd17 	ldw	r2,-12(fp)
  800454:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  800458:	e0bffd17 	ldw	r2,-12(fp)
  80045c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  800460:	008020b4 	movhi	r2,130
  800464:	10bfc704 	addi	r2,r2,-228
  800468:	10800017 	ldw	r2,0(r2)
  80046c:	1809883a 	mov	r4,r3
  800470:	100b883a 	mov	r5,r2
  800474:	01802034 	movhi	r6,128
  800478:	3181ad04 	addi	r6,r6,1716
  80047c:	e1fffd17 	ldw	r7,-12(fp)
  800480:	0819f140 	call	819f14 <alt_alarm_start>
  800484:	1000040e 	bge	r2,zero,800498 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  800488:	e0fffd17 	ldw	r3,-12(fp)
  80048c:	00a00034 	movhi	r2,32768
  800490:	10bfffc4 	addi	r2,r2,-1
  800494:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  800498:	e037883a 	mov	sp,fp
  80049c:	dfc00117 	ldw	ra,4(sp)
  8004a0:	df000017 	ldw	fp,0(sp)
  8004a4:	dec00204 	addi	sp,sp,8
  8004a8:	f800283a 	ret

008004ac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8004ac:	defff704 	addi	sp,sp,-36
  8004b0:	df000815 	stw	fp,32(sp)
  8004b4:	df000804 	addi	fp,sp,32
  8004b8:	e13ffe15 	stw	r4,-8(fp)
  8004bc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8004c0:	e0bffe17 	ldw	r2,-8(fp)
  8004c4:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  8004c8:	e0bffa17 	ldw	r2,-24(fp)
  8004cc:	10800017 	ldw	r2,0(r2)
  8004d0:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8004d4:	e0bffb17 	ldw	r2,-20(fp)
  8004d8:	10800104 	addi	r2,r2,4
  8004dc:	10800037 	ldwio	r2,0(r2)
  8004e0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8004e4:	e0bffc17 	ldw	r2,-16(fp)
  8004e8:	1080c00c 	andi	r2,r2,768
  8004ec:	1000011e 	bne	r2,zero,8004f4 <altera_avalon_jtag_uart_irq+0x48>
      break;
  8004f0:	00006c06 	br	8006a4 <altera_avalon_jtag_uart_irq+0x1f8>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8004f4:	e0bffc17 	ldw	r2,-16(fp)
  8004f8:	1080400c 	andi	r2,r2,256
  8004fc:	10003426 	beq	r2,zero,8005d0 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  800500:	00800074 	movhi	r2,1
  800504:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800508:	e0bffa17 	ldw	r2,-24(fp)
  80050c:	10800a17 	ldw	r2,40(r2)
  800510:	10800044 	addi	r2,r2,1
  800514:	1081ffcc 	andi	r2,r2,2047
  800518:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  80051c:	e0bffa17 	ldw	r2,-24(fp)
  800520:	10c00b17 	ldw	r3,44(r2)
  800524:	e0bffd17 	ldw	r2,-12(fp)
  800528:	1880011e 	bne	r3,r2,800530 <altera_avalon_jtag_uart_irq+0x84>
          break;
  80052c:	00001606 	br	800588 <altera_avalon_jtag_uart_irq+0xdc>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  800530:	e0bffb17 	ldw	r2,-20(fp)
  800534:	10800037 	ldwio	r2,0(r2)
  800538:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80053c:	e0bff817 	ldw	r2,-32(fp)
  800540:	10a0000c 	andi	r2,r2,32768
  800544:	1000011e 	bne	r2,zero,80054c <altera_avalon_jtag_uart_irq+0xa0>
          break;
  800548:	00000f06 	br	800588 <altera_avalon_jtag_uart_irq+0xdc>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80054c:	e0bffa17 	ldw	r2,-24(fp)
  800550:	10800a17 	ldw	r2,40(r2)
  800554:	e0fff817 	ldw	r3,-32(fp)
  800558:	1809883a 	mov	r4,r3
  80055c:	e0fffa17 	ldw	r3,-24(fp)
  800560:	1885883a 	add	r2,r3,r2
  800564:	10800e04 	addi	r2,r2,56
  800568:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80056c:	e0bffa17 	ldw	r2,-24(fp)
  800570:	10800a17 	ldw	r2,40(r2)
  800574:	10800044 	addi	r2,r2,1
  800578:	10c1ffcc 	andi	r3,r2,2047
  80057c:	e0bffa17 	ldw	r2,-24(fp)
  800580:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  800584:	003fe006 	br	800508 <__alt_data_end+0xff800508>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  800588:	e0bff817 	ldw	r2,-32(fp)
  80058c:	10bfffec 	andhi	r2,r2,65535
  800590:	10000f26 	beq	r2,zero,8005d0 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800594:	e0bffa17 	ldw	r2,-24(fp)
  800598:	10c00817 	ldw	r3,32(r2)
  80059c:	00bfff84 	movi	r2,-2
  8005a0:	1886703a 	and	r3,r3,r2
  8005a4:	e0bffa17 	ldw	r2,-24(fp)
  8005a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8005ac:	e0bffb17 	ldw	r2,-20(fp)
  8005b0:	10800104 	addi	r2,r2,4
  8005b4:	1007883a 	mov	r3,r2
  8005b8:	e0bffa17 	ldw	r2,-24(fp)
  8005bc:	10800817 	ldw	r2,32(r2)
  8005c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8005c4:	e0bffb17 	ldw	r2,-20(fp)
  8005c8:	10800104 	addi	r2,r2,4
  8005cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8005d0:	e0bffc17 	ldw	r2,-16(fp)
  8005d4:	1080800c 	andi	r2,r2,512
  8005d8:	10003126 	beq	r2,zero,8006a0 <altera_avalon_jtag_uart_irq+0x1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8005dc:	e0bffc17 	ldw	r2,-16(fp)
  8005e0:	1004d43a 	srli	r2,r2,16
  8005e4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8005e8:	00001406 	br	80063c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8005ec:	e0bffb17 	ldw	r2,-20(fp)
  8005f0:	e0fffa17 	ldw	r3,-24(fp)
  8005f4:	18c00d17 	ldw	r3,52(r3)
  8005f8:	e13ffa17 	ldw	r4,-24(fp)
  8005fc:	20c7883a 	add	r3,r4,r3
  800600:	18c20e04 	addi	r3,r3,2104
  800604:	18c00003 	ldbu	r3,0(r3)
  800608:	18c03fcc 	andi	r3,r3,255
  80060c:	18c0201c 	xori	r3,r3,128
  800610:	18ffe004 	addi	r3,r3,-128
  800614:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800618:	e0bffa17 	ldw	r2,-24(fp)
  80061c:	10800d17 	ldw	r2,52(r2)
  800620:	10800044 	addi	r2,r2,1
  800624:	10c1ffcc 	andi	r3,r2,2047
  800628:	e0bffa17 	ldw	r2,-24(fp)
  80062c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  800630:	e0bff917 	ldw	r2,-28(fp)
  800634:	10bfffc4 	addi	r2,r2,-1
  800638:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80063c:	e0bff917 	ldw	r2,-28(fp)
  800640:	10000526 	beq	r2,zero,800658 <altera_avalon_jtag_uart_irq+0x1ac>
  800644:	e0bffa17 	ldw	r2,-24(fp)
  800648:	10c00d17 	ldw	r3,52(r2)
  80064c:	e0bffa17 	ldw	r2,-24(fp)
  800650:	10800c17 	ldw	r2,48(r2)
  800654:	18bfe51e 	bne	r3,r2,8005ec <__alt_data_end+0xff8005ec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  800658:	e0bff917 	ldw	r2,-28(fp)
  80065c:	10001026 	beq	r2,zero,8006a0 <altera_avalon_jtag_uart_irq+0x1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  800660:	e0bffa17 	ldw	r2,-24(fp)
  800664:	10c00817 	ldw	r3,32(r2)
  800668:	00bfff44 	movi	r2,-3
  80066c:	1886703a 	and	r3,r3,r2
  800670:	e0bffa17 	ldw	r2,-24(fp)
  800674:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800678:	e0bffa17 	ldw	r2,-24(fp)
  80067c:	10800017 	ldw	r2,0(r2)
  800680:	10800104 	addi	r2,r2,4
  800684:	1007883a 	mov	r3,r2
  800688:	e0bffa17 	ldw	r2,-24(fp)
  80068c:	10800817 	ldw	r2,32(r2)
  800690:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800694:	e0bffb17 	ldw	r2,-20(fp)
  800698:	10800104 	addi	r2,r2,4
  80069c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8006a0:	003f8c06 	br	8004d4 <__alt_data_end+0xff8004d4>
}
  8006a4:	e037883a 	mov	sp,fp
  8006a8:	df000017 	ldw	fp,0(sp)
  8006ac:	dec00104 	addi	sp,sp,4
  8006b0:	f800283a 	ret

008006b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8006b4:	defff804 	addi	sp,sp,-32
  8006b8:	df000715 	stw	fp,28(sp)
  8006bc:	df000704 	addi	fp,sp,28
  8006c0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8006c4:	e0bffb17 	ldw	r2,-20(fp)
  8006c8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8006cc:	e0bff917 	ldw	r2,-28(fp)
  8006d0:	10800017 	ldw	r2,0(r2)
  8006d4:	10800104 	addi	r2,r2,4
  8006d8:	10800037 	ldwio	r2,0(r2)
  8006dc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8006e0:	e0bffa17 	ldw	r2,-24(fp)
  8006e4:	1081000c 	andi	r2,r2,1024
  8006e8:	10000b26 	beq	r2,zero,800718 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8006ec:	e0bff917 	ldw	r2,-28(fp)
  8006f0:	10800017 	ldw	r2,0(r2)
  8006f4:	10800104 	addi	r2,r2,4
  8006f8:	1007883a 	mov	r3,r2
  8006fc:	e0bff917 	ldw	r2,-28(fp)
  800700:	10800817 	ldw	r2,32(r2)
  800704:	10810014 	ori	r2,r2,1024
  800708:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80070c:	e0bff917 	ldw	r2,-28(fp)
  800710:	10000915 	stw	zero,36(r2)
  800714:	00000a06 	br	800740 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  800718:	e0bff917 	ldw	r2,-28(fp)
  80071c:	10c00917 	ldw	r3,36(r2)
  800720:	00a00034 	movhi	r2,32768
  800724:	10bfff04 	addi	r2,r2,-4
  800728:	10c00536 	bltu	r2,r3,800740 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80072c:	e0bff917 	ldw	r2,-28(fp)
  800730:	10800917 	ldw	r2,36(r2)
  800734:	10c00044 	addi	r3,r2,1
  800738:	e0bff917 	ldw	r2,-28(fp)
  80073c:	10c00915 	stw	r3,36(r2)
  800740:	008020b4 	movhi	r2,130
  800744:	10bfc704 	addi	r2,r2,-228
  800748:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80074c:	e037883a 	mov	sp,fp
  800750:	df000017 	ldw	fp,0(sp)
  800754:	dec00104 	addi	sp,sp,4
  800758:	f800283a 	ret

0080075c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80075c:	defffd04 	addi	sp,sp,-12
  800760:	df000215 	stw	fp,8(sp)
  800764:	df000204 	addi	fp,sp,8
  800768:	e13ffe15 	stw	r4,-8(fp)
  80076c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800770:	00000506 	br	800788 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  800774:	e0bfff17 	ldw	r2,-4(fp)
  800778:	1090000c 	andi	r2,r2,16384
  80077c:	10000226 	beq	r2,zero,800788 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  800780:	00bffd44 	movi	r2,-11
  800784:	00000b06 	br	8007b4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800788:	e0bffe17 	ldw	r2,-8(fp)
  80078c:	10c00d17 	ldw	r3,52(r2)
  800790:	e0bffe17 	ldw	r2,-8(fp)
  800794:	10800c17 	ldw	r2,48(r2)
  800798:	18800526 	beq	r3,r2,8007b0 <altera_avalon_jtag_uart_close+0x54>
  80079c:	e0bffe17 	ldw	r2,-8(fp)
  8007a0:	10c00917 	ldw	r3,36(r2)
  8007a4:	e0bffe17 	ldw	r2,-8(fp)
  8007a8:	10800117 	ldw	r2,4(r2)
  8007ac:	18bff136 	bltu	r3,r2,800774 <__alt_data_end+0xff800774>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8007b0:	0005883a 	mov	r2,zero
}
  8007b4:	e037883a 	mov	sp,fp
  8007b8:	df000017 	ldw	fp,0(sp)
  8007bc:	dec00104 	addi	sp,sp,4
  8007c0:	f800283a 	ret

008007c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8007c4:	defffa04 	addi	sp,sp,-24
  8007c8:	df000515 	stw	fp,20(sp)
  8007cc:	df000504 	addi	fp,sp,20
  8007d0:	e13ffd15 	stw	r4,-12(fp)
  8007d4:	e17ffe15 	stw	r5,-8(fp)
  8007d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  8007dc:	00bff9c4 	movi	r2,-25
  8007e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  8007e4:	e0bffe17 	ldw	r2,-8(fp)
  8007e8:	10da8060 	cmpeqi	r3,r2,27137
  8007ec:	1800031e 	bne	r3,zero,8007fc <altera_avalon_jtag_uart_ioctl+0x38>
  8007f0:	109a80a0 	cmpeqi	r2,r2,27138
  8007f4:	1000191e 	bne	r2,zero,80085c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  8007f8:	00002806 	br	80089c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8007fc:	e0bffd17 	ldw	r2,-12(fp)
  800800:	10c00117 	ldw	r3,4(r2)
  800804:	00a00034 	movhi	r2,32768
  800808:	10bfffc4 	addi	r2,r2,-1
  80080c:	18801226 	beq	r3,r2,800858 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
  800810:	e0bfff17 	ldw	r2,-4(fp)
  800814:	10800017 	ldw	r2,0(r2)
  800818:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80081c:	e0bffc17 	ldw	r2,-16(fp)
  800820:	10800090 	cmplti	r2,r2,2
  800824:	1000061e 	bne	r2,zero,800840 <altera_avalon_jtag_uart_ioctl+0x7c>
  800828:	e0fffc17 	ldw	r3,-16(fp)
  80082c:	00a00034 	movhi	r2,32768
  800830:	10bfffc4 	addi	r2,r2,-1
  800834:	18800226 	beq	r3,r2,800840 <altera_avalon_jtag_uart_ioctl+0x7c>
  800838:	e0bffc17 	ldw	r2,-16(fp)
  80083c:	00000206 	br	800848 <altera_avalon_jtag_uart_ioctl+0x84>
  800840:	00a00034 	movhi	r2,32768
  800844:	10bfff84 	addi	r2,r2,-2
  800848:	e0fffd17 	ldw	r3,-12(fp)
  80084c:	18800115 	stw	r2,4(r3)
      rc = 0;
  800850:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  800854:	00001106 	br	80089c <altera_avalon_jtag_uart_ioctl+0xd8>
  800858:	00001006 	br	80089c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80085c:	e0bffd17 	ldw	r2,-12(fp)
  800860:	10c00117 	ldw	r3,4(r2)
  800864:	00a00034 	movhi	r2,32768
  800868:	10bfffc4 	addi	r2,r2,-1
  80086c:	18800a26 	beq	r3,r2,800898 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  800870:	e0bffd17 	ldw	r2,-12(fp)
  800874:	10c00917 	ldw	r3,36(r2)
  800878:	e0bffd17 	ldw	r2,-12(fp)
  80087c:	10800117 	ldw	r2,4(r2)
  800880:	1885803a 	cmpltu	r2,r3,r2
  800884:	10c03fcc 	andi	r3,r2,255
  800888:	e0bfff17 	ldw	r2,-4(fp)
  80088c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  800890:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  800894:	00000006 	br	800898 <altera_avalon_jtag_uart_ioctl+0xd4>
  800898:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80089c:	e0bffb17 	ldw	r2,-20(fp)
}
  8008a0:	e037883a 	mov	sp,fp
  8008a4:	df000017 	ldw	fp,0(sp)
  8008a8:	dec00104 	addi	sp,sp,4
  8008ac:	f800283a 	ret

008008b0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8008b0:	defff304 	addi	sp,sp,-52
  8008b4:	dfc00c15 	stw	ra,48(sp)
  8008b8:	df000b15 	stw	fp,44(sp)
  8008bc:	df000b04 	addi	fp,sp,44
  8008c0:	e13ffc15 	stw	r4,-16(fp)
  8008c4:	e17ffd15 	stw	r5,-12(fp)
  8008c8:	e1bffe15 	stw	r6,-8(fp)
  8008cc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  8008d0:	e0bffd17 	ldw	r2,-12(fp)
  8008d4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8008d8:	00004906 	br	800a00 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8008dc:	e0bffc17 	ldw	r2,-16(fp)
  8008e0:	10800a17 	ldw	r2,40(r2)
  8008e4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8008e8:	e0bffc17 	ldw	r2,-16(fp)
  8008ec:	10800b17 	ldw	r2,44(r2)
  8008f0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  8008f4:	e0fff717 	ldw	r3,-36(fp)
  8008f8:	e0bff817 	ldw	r2,-32(fp)
  8008fc:	18800536 	bltu	r3,r2,800914 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  800900:	e0fff717 	ldw	r3,-36(fp)
  800904:	e0bff817 	ldw	r2,-32(fp)
  800908:	1885c83a 	sub	r2,r3,r2
  80090c:	e0bff615 	stw	r2,-40(fp)
  800910:	00000406 	br	800924 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  800914:	00c20004 	movi	r3,2048
  800918:	e0bff817 	ldw	r2,-32(fp)
  80091c:	1885c83a 	sub	r2,r3,r2
  800920:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  800924:	e0bff617 	ldw	r2,-40(fp)
  800928:	1000011e 	bne	r2,zero,800930 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
  80092c:	00001d06 	br	8009a4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
  800930:	e0fffe17 	ldw	r3,-8(fp)
  800934:	e0bff617 	ldw	r2,-40(fp)
  800938:	1880022e 	bgeu	r3,r2,800944 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80093c:	e0bffe17 	ldw	r2,-8(fp)
  800940:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  800944:	e0bff817 	ldw	r2,-32(fp)
  800948:	10800e04 	addi	r2,r2,56
  80094c:	e0fffc17 	ldw	r3,-16(fp)
  800950:	1885883a 	add	r2,r3,r2
  800954:	e13ff517 	ldw	r4,-44(fp)
  800958:	100b883a 	mov	r5,r2
  80095c:	e1bff617 	ldw	r6,-40(fp)
  800960:	080d6d80 	call	80d6d8 <memcpy>
      ptr   += n;
  800964:	e0fff517 	ldw	r3,-44(fp)
  800968:	e0bff617 	ldw	r2,-40(fp)
  80096c:	1885883a 	add	r2,r3,r2
  800970:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  800974:	e0fffe17 	ldw	r3,-8(fp)
  800978:	e0bff617 	ldw	r2,-40(fp)
  80097c:	1885c83a 	sub	r2,r3,r2
  800980:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800984:	e0fff817 	ldw	r3,-32(fp)
  800988:	e0bff617 	ldw	r2,-40(fp)
  80098c:	1885883a 	add	r2,r3,r2
  800990:	10c1ffcc 	andi	r3,r2,2047
  800994:	e0bffc17 	ldw	r2,-16(fp)
  800998:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80099c:	e0bffe17 	ldw	r2,-8(fp)
  8009a0:	00bfce16 	blt	zero,r2,8008dc <__alt_data_end+0xff8008dc>

    /* If we read any data then return it */
    if (ptr != buffer)
  8009a4:	e0fff517 	ldw	r3,-44(fp)
  8009a8:	e0bffd17 	ldw	r2,-12(fp)
  8009ac:	18800126 	beq	r3,r2,8009b4 <altera_avalon_jtag_uart_read+0x104>
      break;
  8009b0:	00001506 	br	800a08 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8009b4:	e0bfff17 	ldw	r2,-4(fp)
  8009b8:	1090000c 	andi	r2,r2,16384
  8009bc:	10000126 	beq	r2,zero,8009c4 <altera_avalon_jtag_uart_read+0x114>
      break;
  8009c0:	00001106 	br	800a08 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8009c4:	0001883a 	nop
  8009c8:	e0bffc17 	ldw	r2,-16(fp)
  8009cc:	10c00a17 	ldw	r3,40(r2)
  8009d0:	e0bff717 	ldw	r2,-36(fp)
  8009d4:	1880051e 	bne	r3,r2,8009ec <altera_avalon_jtag_uart_read+0x13c>
  8009d8:	e0bffc17 	ldw	r2,-16(fp)
  8009dc:	10c00917 	ldw	r3,36(r2)
  8009e0:	e0bffc17 	ldw	r2,-16(fp)
  8009e4:	10800117 	ldw	r2,4(r2)
  8009e8:	18bff736 	bltu	r3,r2,8009c8 <__alt_data_end+0xff8009c8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8009ec:	e0bffc17 	ldw	r2,-16(fp)
  8009f0:	10c00a17 	ldw	r3,40(r2)
  8009f4:	e0bff717 	ldw	r2,-36(fp)
  8009f8:	1880011e 	bne	r3,r2,800a00 <altera_avalon_jtag_uart_read+0x150>
      break;
  8009fc:	00000206 	br	800a08 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800a00:	e0bffe17 	ldw	r2,-8(fp)
  800a04:	00bfb516 	blt	zero,r2,8008dc <__alt_data_end+0xff8008dc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  800a08:	e0fff517 	ldw	r3,-44(fp)
  800a0c:	e0bffd17 	ldw	r2,-12(fp)
  800a10:	18801826 	beq	r3,r2,800a74 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800a14:	0005303a 	rdctl	r2,status
  800a18:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800a1c:	e0fffa17 	ldw	r3,-24(fp)
  800a20:	00bfff84 	movi	r2,-2
  800a24:	1884703a 	and	r2,r3,r2
  800a28:	1001703a 	wrctl	status,r2
  
  return context;
  800a2c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  800a30:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800a34:	e0bffc17 	ldw	r2,-16(fp)
  800a38:	10800817 	ldw	r2,32(r2)
  800a3c:	10c00054 	ori	r3,r2,1
  800a40:	e0bffc17 	ldw	r2,-16(fp)
  800a44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800a48:	e0bffc17 	ldw	r2,-16(fp)
  800a4c:	10800017 	ldw	r2,0(r2)
  800a50:	10800104 	addi	r2,r2,4
  800a54:	1007883a 	mov	r3,r2
  800a58:	e0bffc17 	ldw	r2,-16(fp)
  800a5c:	10800817 	ldw	r2,32(r2)
  800a60:	18800035 	stwio	r2,0(r3)
  800a64:	e0bff917 	ldw	r2,-28(fp)
  800a68:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800a6c:	e0bffb17 	ldw	r2,-20(fp)
  800a70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  800a74:	e0fff517 	ldw	r3,-44(fp)
  800a78:	e0bffd17 	ldw	r2,-12(fp)
  800a7c:	18800426 	beq	r3,r2,800a90 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
  800a80:	e0fff517 	ldw	r3,-44(fp)
  800a84:	e0bffd17 	ldw	r2,-12(fp)
  800a88:	1885c83a 	sub	r2,r3,r2
  800a8c:	00000606 	br	800aa8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
  800a90:	e0bfff17 	ldw	r2,-4(fp)
  800a94:	1090000c 	andi	r2,r2,16384
  800a98:	10000226 	beq	r2,zero,800aa4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
  800a9c:	00bffd44 	movi	r2,-11
  800aa0:	00000106 	br	800aa8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
  800aa4:	00bffec4 	movi	r2,-5
}
  800aa8:	e037883a 	mov	sp,fp
  800aac:	dfc00117 	ldw	ra,4(sp)
  800ab0:	df000017 	ldw	fp,0(sp)
  800ab4:	dec00204 	addi	sp,sp,8
  800ab8:	f800283a 	ret

00800abc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  800abc:	defff304 	addi	sp,sp,-52
  800ac0:	dfc00c15 	stw	ra,48(sp)
  800ac4:	df000b15 	stw	fp,44(sp)
  800ac8:	df000b04 	addi	fp,sp,44
  800acc:	e13ffc15 	stw	r4,-16(fp)
  800ad0:	e17ffd15 	stw	r5,-12(fp)
  800ad4:	e1bffe15 	stw	r6,-8(fp)
  800ad8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  800adc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  800ae0:	e0bffd17 	ldw	r2,-12(fp)
  800ae4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  800ae8:	00003806 	br	800bcc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  800aec:	e0bffc17 	ldw	r2,-16(fp)
  800af0:	10800c17 	ldw	r2,48(r2)
  800af4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
  800af8:	e0bffc17 	ldw	r2,-16(fp)
  800afc:	10800d17 	ldw	r2,52(r2)
  800b00:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  800b04:	e0fff817 	ldw	r3,-32(fp)
  800b08:	e0bff517 	ldw	r2,-44(fp)
  800b0c:	1880062e 	bgeu	r3,r2,800b28 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  800b10:	e0fff517 	ldw	r3,-44(fp)
  800b14:	e0bff817 	ldw	r2,-32(fp)
  800b18:	1885c83a 	sub	r2,r3,r2
  800b1c:	10bfffc4 	addi	r2,r2,-1
  800b20:	e0bff615 	stw	r2,-40(fp)
  800b24:	00000b06 	br	800b54 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  800b28:	e0bff517 	ldw	r2,-44(fp)
  800b2c:	10000526 	beq	r2,zero,800b44 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  800b30:	00c20004 	movi	r3,2048
  800b34:	e0bff817 	ldw	r2,-32(fp)
  800b38:	1885c83a 	sub	r2,r3,r2
  800b3c:	e0bff615 	stw	r2,-40(fp)
  800b40:	00000406 	br	800b54 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  800b44:	00c1ffc4 	movi	r3,2047
  800b48:	e0bff817 	ldw	r2,-32(fp)
  800b4c:	1885c83a 	sub	r2,r3,r2
  800b50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  800b54:	e0bff617 	ldw	r2,-40(fp)
  800b58:	1000011e 	bne	r2,zero,800b60 <altera_avalon_jtag_uart_write+0xa4>
        break;
  800b5c:	00001d06 	br	800bd4 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
  800b60:	e0fffe17 	ldw	r3,-8(fp)
  800b64:	e0bff617 	ldw	r2,-40(fp)
  800b68:	1880022e 	bgeu	r3,r2,800b74 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
  800b6c:	e0bffe17 	ldw	r2,-8(fp)
  800b70:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  800b74:	e0bff817 	ldw	r2,-32(fp)
  800b78:	10820e04 	addi	r2,r2,2104
  800b7c:	e0fffc17 	ldw	r3,-16(fp)
  800b80:	1885883a 	add	r2,r3,r2
  800b84:	1009883a 	mov	r4,r2
  800b88:	e17ffd17 	ldw	r5,-12(fp)
  800b8c:	e1bff617 	ldw	r6,-40(fp)
  800b90:	080d6d80 	call	80d6d8 <memcpy>
      ptr   += n;
  800b94:	e0fffd17 	ldw	r3,-12(fp)
  800b98:	e0bff617 	ldw	r2,-40(fp)
  800b9c:	1885883a 	add	r2,r3,r2
  800ba0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  800ba4:	e0fffe17 	ldw	r3,-8(fp)
  800ba8:	e0bff617 	ldw	r2,-40(fp)
  800bac:	1885c83a 	sub	r2,r3,r2
  800bb0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800bb4:	e0fff817 	ldw	r3,-32(fp)
  800bb8:	e0bff617 	ldw	r2,-40(fp)
  800bbc:	1885883a 	add	r2,r3,r2
  800bc0:	10c1ffcc 	andi	r3,r2,2047
  800bc4:	e0bffc17 	ldw	r2,-16(fp)
  800bc8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  800bcc:	e0bffe17 	ldw	r2,-8(fp)
  800bd0:	00bfc616 	blt	zero,r2,800aec <__alt_data_end+0xff800aec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800bd4:	0005303a 	rdctl	r2,status
  800bd8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800bdc:	e0fffa17 	ldw	r3,-24(fp)
  800be0:	00bfff84 	movi	r2,-2
  800be4:	1884703a 	and	r2,r3,r2
  800be8:	1001703a 	wrctl	status,r2
  
  return context;
  800bec:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  800bf0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  800bf4:	e0bffc17 	ldw	r2,-16(fp)
  800bf8:	10800817 	ldw	r2,32(r2)
  800bfc:	10c00094 	ori	r3,r2,2
  800c00:	e0bffc17 	ldw	r2,-16(fp)
  800c04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800c08:	e0bffc17 	ldw	r2,-16(fp)
  800c0c:	10800017 	ldw	r2,0(r2)
  800c10:	10800104 	addi	r2,r2,4
  800c14:	1007883a 	mov	r3,r2
  800c18:	e0bffc17 	ldw	r2,-16(fp)
  800c1c:	10800817 	ldw	r2,32(r2)
  800c20:	18800035 	stwio	r2,0(r3)
  800c24:	e0bff917 	ldw	r2,-28(fp)
  800c28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800c2c:	e0bffb17 	ldw	r2,-20(fp)
  800c30:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  800c34:	e0bffe17 	ldw	r2,-8(fp)
  800c38:	0080120e 	bge	zero,r2,800c84 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  800c3c:	e0bfff17 	ldw	r2,-4(fp)
  800c40:	1090000c 	andi	r2,r2,16384
  800c44:	10000126 	beq	r2,zero,800c4c <altera_avalon_jtag_uart_write+0x190>
        break;
  800c48:	00001006 	br	800c8c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  800c4c:	0001883a 	nop
  800c50:	e0bffc17 	ldw	r2,-16(fp)
  800c54:	10c00d17 	ldw	r3,52(r2)
  800c58:	e0bff517 	ldw	r2,-44(fp)
  800c5c:	1880051e 	bne	r3,r2,800c74 <altera_avalon_jtag_uart_write+0x1b8>
  800c60:	e0bffc17 	ldw	r2,-16(fp)
  800c64:	10c00917 	ldw	r3,36(r2)
  800c68:	e0bffc17 	ldw	r2,-16(fp)
  800c6c:	10800117 	ldw	r2,4(r2)
  800c70:	18bff736 	bltu	r3,r2,800c50 <__alt_data_end+0xff800c50>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  800c74:	e0bffc17 	ldw	r2,-16(fp)
  800c78:	10800917 	ldw	r2,36(r2)
  800c7c:	10000126 	beq	r2,zero,800c84 <altera_avalon_jtag_uart_write+0x1c8>
         break;
  800c80:	00000206 	br	800c8c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
  800c84:	e0bffe17 	ldw	r2,-8(fp)
  800c88:	00bf9716 	blt	zero,r2,800ae8 <__alt_data_end+0xff800ae8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  800c8c:	e0fffd17 	ldw	r3,-12(fp)
  800c90:	e0bff717 	ldw	r2,-36(fp)
  800c94:	18800426 	beq	r3,r2,800ca8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
  800c98:	e0fffd17 	ldw	r3,-12(fp)
  800c9c:	e0bff717 	ldw	r2,-36(fp)
  800ca0:	1885c83a 	sub	r2,r3,r2
  800ca4:	00000606 	br	800cc0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
  800ca8:	e0bfff17 	ldw	r2,-4(fp)
  800cac:	1090000c 	andi	r2,r2,16384
  800cb0:	10000226 	beq	r2,zero,800cbc <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
  800cb4:	00bffd44 	movi	r2,-11
  800cb8:	00000106 	br	800cc0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  800cbc:	00bffec4 	movi	r2,-5
}
  800cc0:	e037883a 	mov	sp,fp
  800cc4:	dfc00117 	ldw	ra,4(sp)
  800cc8:	df000017 	ldw	fp,0(sp)
  800ccc:	dec00204 	addi	sp,sp,8
  800cd0:	f800283a 	ret

00800cd4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  800cd4:	defffa04 	addi	sp,sp,-24
  800cd8:	dfc00515 	stw	ra,20(sp)
  800cdc:	df000415 	stw	fp,16(sp)
  800ce0:	df000404 	addi	fp,sp,16
  800ce4:	e13ffe15 	stw	r4,-8(fp)
  800ce8:	2805883a 	mov	r2,r5
  800cec:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  800cf0:	e0bffe17 	ldw	r2,-8(fp)
  800cf4:	10800017 	ldw	r2,0(r2)
  800cf8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  800cfc:	008003f4 	movhi	r2,15
  800d00:	10909004 	addi	r2,r2,16960
  800d04:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  800d08:	e0bffe17 	ldw	r2,-8(fp)
  800d0c:	10800803 	ldbu	r2,32(r2)
  800d10:	10803fcc 	andi	r2,r2,255
  800d14:	1080201c 	xori	r2,r2,128
  800d18:	10bfe004 	addi	r2,r2,-128
  800d1c:	10000126 	beq	r2,zero,800d24 <lcd_write_command+0x50>
    return;
  800d20:	00001406 	br	800d74 <lcd_write_command+0xa0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  800d24:	00000906 	br	800d4c <lcd_write_command+0x78>
    if (--i == 0)
  800d28:	e0bffc17 	ldw	r2,-16(fp)
  800d2c:	10bfffc4 	addi	r2,r2,-1
  800d30:	e0bffc15 	stw	r2,-16(fp)
  800d34:	e0bffc17 	ldw	r2,-16(fp)
  800d38:	1000041e 	bne	r2,zero,800d4c <lcd_write_command+0x78>
    {
      sp->broken = 1;
  800d3c:	e0bffe17 	ldw	r2,-8(fp)
  800d40:	00c00044 	movi	r3,1
  800d44:	10c00805 	stb	r3,32(r2)
      return;
  800d48:	00000a06 	br	800d74 <lcd_write_command+0xa0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  800d4c:	e0bffd17 	ldw	r2,-12(fp)
  800d50:	10800104 	addi	r2,r2,4
  800d54:	10800037 	ldwio	r2,0(r2)
  800d58:	1080200c 	andi	r2,r2,128
  800d5c:	103ff21e 	bne	r2,zero,800d28 <__alt_data_end+0xff800d28>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  800d60:	01001904 	movi	r4,100
  800d64:	081af000 	call	81af00 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  800d68:	e0bffd17 	ldw	r2,-12(fp)
  800d6c:	e0ffff03 	ldbu	r3,-4(fp)
  800d70:	10c00035 	stwio	r3,0(r2)
}
  800d74:	e037883a 	mov	sp,fp
  800d78:	dfc00117 	ldw	ra,4(sp)
  800d7c:	df000017 	ldw	fp,0(sp)
  800d80:	dec00204 	addi	sp,sp,8
  800d84:	f800283a 	ret

00800d88 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  800d88:	defffa04 	addi	sp,sp,-24
  800d8c:	dfc00515 	stw	ra,20(sp)
  800d90:	df000415 	stw	fp,16(sp)
  800d94:	df000404 	addi	fp,sp,16
  800d98:	e13ffe15 	stw	r4,-8(fp)
  800d9c:	2805883a 	mov	r2,r5
  800da0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  800da4:	e0bffe17 	ldw	r2,-8(fp)
  800da8:	10800017 	ldw	r2,0(r2)
  800dac:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  800db0:	008003f4 	movhi	r2,15
  800db4:	10909004 	addi	r2,r2,16960
  800db8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  800dbc:	e0bffe17 	ldw	r2,-8(fp)
  800dc0:	10800803 	ldbu	r2,32(r2)
  800dc4:	10803fcc 	andi	r2,r2,255
  800dc8:	1080201c 	xori	r2,r2,128
  800dcc:	10bfe004 	addi	r2,r2,-128
  800dd0:	10000126 	beq	r2,zero,800dd8 <lcd_write_data+0x50>
    return;
  800dd4:	00001c06 	br	800e48 <lcd_write_data+0xc0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  800dd8:	00000906 	br	800e00 <lcd_write_data+0x78>
    if (--i == 0)
  800ddc:	e0bffc17 	ldw	r2,-16(fp)
  800de0:	10bfffc4 	addi	r2,r2,-1
  800de4:	e0bffc15 	stw	r2,-16(fp)
  800de8:	e0bffc17 	ldw	r2,-16(fp)
  800dec:	1000041e 	bne	r2,zero,800e00 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  800df0:	e0bffe17 	ldw	r2,-8(fp)
  800df4:	00c00044 	movi	r3,1
  800df8:	10c00805 	stb	r3,32(r2)
      return;
  800dfc:	00001206 	br	800e48 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  800e00:	e0bffd17 	ldw	r2,-12(fp)
  800e04:	10800104 	addi	r2,r2,4
  800e08:	10800037 	ldwio	r2,0(r2)
  800e0c:	1080200c 	andi	r2,r2,128
  800e10:	103ff21e 	bne	r2,zero,800ddc <__alt_data_end+0xff800ddc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  800e14:	01001904 	movi	r4,100
  800e18:	081af000 	call	81af00 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  800e1c:	e0bffd17 	ldw	r2,-12(fp)
  800e20:	10800204 	addi	r2,r2,8
  800e24:	1007883a 	mov	r3,r2
  800e28:	e0bfff03 	ldbu	r2,-4(fp)
  800e2c:	18800035 	stwio	r2,0(r3)

  sp->address++;
  800e30:	e0bffe17 	ldw	r2,-8(fp)
  800e34:	108008c3 	ldbu	r2,35(r2)
  800e38:	10800044 	addi	r2,r2,1
  800e3c:	1007883a 	mov	r3,r2
  800e40:	e0bffe17 	ldw	r2,-8(fp)
  800e44:	10c008c5 	stb	r3,35(r2)
}
  800e48:	e037883a 	mov	sp,fp
  800e4c:	dfc00117 	ldw	ra,4(sp)
  800e50:	df000017 	ldw	fp,0(sp)
  800e54:	dec00204 	addi	sp,sp,8
  800e58:	f800283a 	ret

00800e5c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  800e5c:	defffc04 	addi	sp,sp,-16
  800e60:	dfc00315 	stw	ra,12(sp)
  800e64:	df000215 	stw	fp,8(sp)
  800e68:	df000204 	addi	fp,sp,8
  800e6c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  800e70:	e13fff17 	ldw	r4,-4(fp)
  800e74:	01400044 	movi	r5,1
  800e78:	0800cd40 	call	800cd4 <lcd_write_command>

  sp->x = 0;
  800e7c:	e0bfff17 	ldw	r2,-4(fp)
  800e80:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  800e84:	e0bfff17 	ldw	r2,-4(fp)
  800e88:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  800e8c:	e0bfff17 	ldw	r2,-4(fp)
  800e90:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  800e94:	e03ffe15 	stw	zero,-8(fp)
  800e98:	00001b06 	br	800f08 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  800e9c:	e0bffe17 	ldw	r2,-8(fp)
  800ea0:	108018e4 	muli	r2,r2,99
  800ea4:	10801004 	addi	r2,r2,64
  800ea8:	e0ffff17 	ldw	r3,-4(fp)
  800eac:	1885883a 	add	r2,r3,r2
  800eb0:	1009883a 	mov	r4,r2
  800eb4:	01400804 	movi	r5,32
  800eb8:	01801444 	movi	r6,81
  800ebc:	080d8100 	call	80d810 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  800ec0:	e0bffe17 	ldw	r2,-8(fp)
  800ec4:	108018e4 	muli	r2,r2,99
  800ec8:	10800c04 	addi	r2,r2,48
  800ecc:	e0ffff17 	ldw	r3,-4(fp)
  800ed0:	1885883a 	add	r2,r3,r2
  800ed4:	1009883a 	mov	r4,r2
  800ed8:	01400804 	movi	r5,32
  800edc:	01800404 	movi	r6,16
  800ee0:	080d8100 	call	80d810 <memset>
    sp->line[y].width = 0;
  800ee4:	e0ffff17 	ldw	r3,-4(fp)
  800ee8:	e0bffe17 	ldw	r2,-8(fp)
  800eec:	108018e4 	muli	r2,r2,99
  800ef0:	10802404 	addi	r2,r2,144
  800ef4:	1885883a 	add	r2,r3,r2
  800ef8:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  800efc:	e0bffe17 	ldw	r2,-8(fp)
  800f00:	10800044 	addi	r2,r2,1
  800f04:	e0bffe15 	stw	r2,-8(fp)
  800f08:	e0bffe17 	ldw	r2,-8(fp)
  800f0c:	10800090 	cmplti	r2,r2,2
  800f10:	103fe21e 	bne	r2,zero,800e9c <__alt_data_end+0xff800e9c>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  800f14:	e037883a 	mov	sp,fp
  800f18:	dfc00117 	ldw	ra,4(sp)
  800f1c:	df000017 	ldw	fp,0(sp)
  800f20:	dec00204 	addi	sp,sp,8
  800f24:	f800283a 	ret

00800f28 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  800f28:	defff704 	addi	sp,sp,-36
  800f2c:	dfc00815 	stw	ra,32(sp)
  800f30:	df000715 	stw	fp,28(sp)
  800f34:	df000704 	addi	fp,sp,28
  800f38:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  800f3c:	e0bfff17 	ldw	r2,-4(fp)
  800f40:	10800943 	ldbu	r2,37(r2)
  800f44:	10803fcc 	andi	r2,r2,255
  800f48:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  800f4c:	e03ff915 	stw	zero,-28(fp)
  800f50:	00006706 	br	8010f0 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  800f54:	e0ffff17 	ldw	r3,-4(fp)
  800f58:	e0bff917 	ldw	r2,-28(fp)
  800f5c:	108018e4 	muli	r2,r2,99
  800f60:	10802404 	addi	r2,r2,144
  800f64:	1885883a 	add	r2,r3,r2
  800f68:	10800043 	ldbu	r2,1(r2)
  800f6c:	10803fcc 	andi	r2,r2,255
  800f70:	1080201c 	xori	r2,r2,128
  800f74:	10bfe004 	addi	r2,r2,-128
  800f78:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  800f7c:	e0ffff17 	ldw	r3,-4(fp)
  800f80:	e0bff917 	ldw	r2,-28(fp)
  800f84:	108018e4 	muli	r2,r2,99
  800f88:	10802404 	addi	r2,r2,144
  800f8c:	1885883a 	add	r2,r3,r2
  800f90:	10800083 	ldbu	r2,2(r2)
  800f94:	10c03fcc 	andi	r3,r2,255
  800f98:	e0bffc17 	ldw	r2,-16(fp)
  800f9c:	1885383a 	mul	r2,r3,r2
  800fa0:	1005d23a 	srai	r2,r2,8
  800fa4:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  800fa8:	e0fffb17 	ldw	r3,-20(fp)
  800fac:	e0bffd17 	ldw	r2,-12(fp)
  800fb0:	18800116 	blt	r3,r2,800fb8 <lcd_repaint_screen+0x90>
      offset = 0;
  800fb4:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  800fb8:	e03ffa15 	stw	zero,-24(fp)
  800fbc:	00004606 	br	8010d8 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  800fc0:	e0fffa17 	ldw	r3,-24(fp)
  800fc4:	e0bffb17 	ldw	r2,-20(fp)
  800fc8:	1885883a 	add	r2,r3,r2
  800fcc:	1009883a 	mov	r4,r2
  800fd0:	e17ffd17 	ldw	r5,-12(fp)
  800fd4:	080c5d40 	call	80c5d4 <__modsi3>
  800fd8:	1009883a 	mov	r4,r2
  800fdc:	e0ffff17 	ldw	r3,-4(fp)
  800fe0:	e0bff917 	ldw	r2,-28(fp)
  800fe4:	108018e4 	muli	r2,r2,99
  800fe8:	1885883a 	add	r2,r3,r2
  800fec:	1105883a 	add	r2,r2,r4
  800ff0:	10801004 	addi	r2,r2,64
  800ff4:	10800003 	ldbu	r2,0(r2)
  800ff8:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  800ffc:	e0ffff17 	ldw	r3,-4(fp)
  801000:	e0bff917 	ldw	r2,-28(fp)
  801004:	108018e4 	muli	r2,r2,99
  801008:	1887883a 	add	r3,r3,r2
  80100c:	e0bffa17 	ldw	r2,-24(fp)
  801010:	1885883a 	add	r2,r3,r2
  801014:	10800c04 	addi	r2,r2,48
  801018:	10800003 	ldbu	r2,0(r2)
  80101c:	10c03fcc 	andi	r3,r2,255
  801020:	18c0201c 	xori	r3,r3,128
  801024:	18ffe004 	addi	r3,r3,-128
  801028:	e0bffe07 	ldb	r2,-8(fp)
  80102c:	18802726 	beq	r3,r2,8010cc <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  801030:	e0fff917 	ldw	r3,-28(fp)
  801034:	d0a00004 	addi	r2,gp,-32768
  801038:	1885883a 	add	r2,r3,r2
  80103c:	10800003 	ldbu	r2,0(r2)
  801040:	1007883a 	mov	r3,r2
  801044:	e0bffa17 	ldw	r2,-24(fp)
  801048:	1885883a 	add	r2,r3,r2
  80104c:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  801050:	e0fffe43 	ldbu	r3,-7(fp)
  801054:	e0bfff17 	ldw	r2,-4(fp)
  801058:	108008c3 	ldbu	r2,35(r2)
  80105c:	10803fcc 	andi	r2,r2,255
  801060:	1080201c 	xori	r2,r2,128
  801064:	10bfe004 	addi	r2,r2,-128
  801068:	18800a26 	beq	r3,r2,801094 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80106c:	e0fffe43 	ldbu	r3,-7(fp)
  801070:	00bfe004 	movi	r2,-128
  801074:	1884b03a 	or	r2,r3,r2
  801078:	10803fcc 	andi	r2,r2,255
  80107c:	e13fff17 	ldw	r4,-4(fp)
  801080:	100b883a 	mov	r5,r2
  801084:	0800cd40 	call	800cd4 <lcd_write_command>
          sp->address = address;
  801088:	e0fffe43 	ldbu	r3,-7(fp)
  80108c:	e0bfff17 	ldw	r2,-4(fp)
  801090:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  801094:	e0bffe03 	ldbu	r2,-8(fp)
  801098:	10803fcc 	andi	r2,r2,255
  80109c:	e13fff17 	ldw	r4,-4(fp)
  8010a0:	100b883a 	mov	r5,r2
  8010a4:	0800d880 	call	800d88 <lcd_write_data>
        sp->line[y].visible[x] = c;
  8010a8:	e0ffff17 	ldw	r3,-4(fp)
  8010ac:	e0bff917 	ldw	r2,-28(fp)
  8010b0:	108018e4 	muli	r2,r2,99
  8010b4:	1887883a 	add	r3,r3,r2
  8010b8:	e0bffa17 	ldw	r2,-24(fp)
  8010bc:	1885883a 	add	r2,r3,r2
  8010c0:	10800c04 	addi	r2,r2,48
  8010c4:	e0fffe03 	ldbu	r3,-8(fp)
  8010c8:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8010cc:	e0bffa17 	ldw	r2,-24(fp)
  8010d0:	10800044 	addi	r2,r2,1
  8010d4:	e0bffa15 	stw	r2,-24(fp)
  8010d8:	e0bffa17 	ldw	r2,-24(fp)
  8010dc:	10800410 	cmplti	r2,r2,16
  8010e0:	103fb71e 	bne	r2,zero,800fc0 <__alt_data_end+0xff800fc0>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8010e4:	e0bff917 	ldw	r2,-28(fp)
  8010e8:	10800044 	addi	r2,r2,1
  8010ec:	e0bff915 	stw	r2,-28(fp)
  8010f0:	e0bff917 	ldw	r2,-28(fp)
  8010f4:	10800090 	cmplti	r2,r2,2
  8010f8:	103f961e 	bne	r2,zero,800f54 <__alt_data_end+0xff800f54>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8010fc:	e037883a 	mov	sp,fp
  801100:	dfc00117 	ldw	ra,4(sp)
  801104:	df000017 	ldw	fp,0(sp)
  801108:	dec00204 	addi	sp,sp,8
  80110c:	f800283a 	ret

00801110 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  801110:	defffc04 	addi	sp,sp,-16
  801114:	dfc00315 	stw	ra,12(sp)
  801118:	df000215 	stw	fp,8(sp)
  80111c:	df000204 	addi	fp,sp,8
  801120:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801124:	e03ffe15 	stw	zero,-8(fp)
  801128:	00001d06 	br	8011a0 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80112c:	e0bffe17 	ldw	r2,-8(fp)
  801130:	00800f16 	blt	zero,r2,801170 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  801134:	e0bffe17 	ldw	r2,-8(fp)
  801138:	108018e4 	muli	r2,r2,99
  80113c:	10801004 	addi	r2,r2,64
  801140:	e0ffff17 	ldw	r3,-4(fp)
  801144:	1889883a 	add	r4,r3,r2
  801148:	e0bffe17 	ldw	r2,-8(fp)
  80114c:	10800044 	addi	r2,r2,1
  801150:	108018e4 	muli	r2,r2,99
  801154:	10801004 	addi	r2,r2,64
  801158:	e0ffff17 	ldw	r3,-4(fp)
  80115c:	1885883a 	add	r2,r3,r2
  801160:	100b883a 	mov	r5,r2
  801164:	01801404 	movi	r6,80
  801168:	080d6d80 	call	80d6d8 <memcpy>
  80116c:	00000906 	br	801194 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  801170:	e0bffe17 	ldw	r2,-8(fp)
  801174:	108018e4 	muli	r2,r2,99
  801178:	10801004 	addi	r2,r2,64
  80117c:	e0ffff17 	ldw	r3,-4(fp)
  801180:	1885883a 	add	r2,r3,r2
  801184:	1009883a 	mov	r4,r2
  801188:	01400804 	movi	r5,32
  80118c:	01801404 	movi	r6,80
  801190:	080d8100 	call	80d810 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801194:	e0bffe17 	ldw	r2,-8(fp)
  801198:	10800044 	addi	r2,r2,1
  80119c:	e0bffe15 	stw	r2,-8(fp)
  8011a0:	e0bffe17 	ldw	r2,-8(fp)
  8011a4:	10800090 	cmplti	r2,r2,2
  8011a8:	103fe01e 	bne	r2,zero,80112c <__alt_data_end+0xff80112c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8011ac:	e0bfff17 	ldw	r2,-4(fp)
  8011b0:	10800883 	ldbu	r2,34(r2)
  8011b4:	10bfffc4 	addi	r2,r2,-1
  8011b8:	1007883a 	mov	r3,r2
  8011bc:	e0bfff17 	ldw	r2,-4(fp)
  8011c0:	10c00885 	stb	r3,34(r2)
}
  8011c4:	e037883a 	mov	sp,fp
  8011c8:	dfc00117 	ldw	ra,4(sp)
  8011cc:	df000017 	ldw	fp,0(sp)
  8011d0:	dec00204 	addi	sp,sp,8
  8011d4:	f800283a 	ret

008011d8 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8011d8:	defff904 	addi	sp,sp,-28
  8011dc:	dfc00615 	stw	ra,24(sp)
  8011e0:	df000515 	stw	fp,20(sp)
  8011e4:	df000504 	addi	fp,sp,20
  8011e8:	e13ffe15 	stw	r4,-8(fp)
  8011ec:	2805883a 	mov	r2,r5
  8011f0:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8011f4:	e03ffb15 	stw	zero,-20(fp)
  8011f8:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8011fc:	e0bffe17 	ldw	r2,-8(fp)
  801200:	10800a03 	ldbu	r2,40(r2)
  801204:	10803fcc 	andi	r2,r2,255
  801208:	1080201c 	xori	r2,r2,128
  80120c:	10bfe004 	addi	r2,r2,-128
  801210:	108016d8 	cmpnei	r2,r2,91
  801214:	1000441e 	bne	r2,zero,801328 <lcd_handle_escape+0x150>
  {
    char * ptr = sp->escape+1;
  801218:	e0bffe17 	ldw	r2,-8(fp)
  80121c:	10800a44 	addi	r2,r2,41
  801220:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  801224:	00000c06 	br	801258 <lcd_handle_escape+0x80>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  801228:	e0bffb17 	ldw	r2,-20(fp)
  80122c:	10c002a4 	muli	r3,r2,10
  801230:	e0bffd17 	ldw	r2,-12(fp)
  801234:	11000044 	addi	r4,r2,1
  801238:	e13ffd15 	stw	r4,-12(fp)
  80123c:	10800003 	ldbu	r2,0(r2)
  801240:	10803fcc 	andi	r2,r2,255
  801244:	1080201c 	xori	r2,r2,128
  801248:	10bfe004 	addi	r2,r2,-128
  80124c:	10bff404 	addi	r2,r2,-48
  801250:	1885883a 	add	r2,r3,r2
  801254:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  801258:	008020b4 	movhi	r2,130
  80125c:	10b83d04 	addi	r2,r2,-7948
  801260:	10c00017 	ldw	r3,0(r2)
  801264:	e0bffd17 	ldw	r2,-12(fp)
  801268:	10800003 	ldbu	r2,0(r2)
  80126c:	10803fcc 	andi	r2,r2,255
  801270:	1080201c 	xori	r2,r2,128
  801274:	10bfe004 	addi	r2,r2,-128
  801278:	10800044 	addi	r2,r2,1
  80127c:	1885883a 	add	r2,r3,r2
  801280:	10800003 	ldbu	r2,0(r2)
  801284:	10803fcc 	andi	r2,r2,255
  801288:	1080010c 	andi	r2,r2,4
  80128c:	103fe61e 	bne	r2,zero,801228 <__alt_data_end+0xff801228>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  801290:	e0bffd17 	ldw	r2,-12(fp)
  801294:	10800003 	ldbu	r2,0(r2)
  801298:	10803fcc 	andi	r2,r2,255
  80129c:	1080201c 	xori	r2,r2,128
  8012a0:	10bfe004 	addi	r2,r2,-128
  8012a4:	10800ed8 	cmpnei	r2,r2,59
  8012a8:	10001e1e 	bne	r2,zero,801324 <lcd_handle_escape+0x14c>
    {
      ptr++;
  8012ac:	e0bffd17 	ldw	r2,-12(fp)
  8012b0:	10800044 	addi	r2,r2,1
  8012b4:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  8012b8:	00000c06 	br	8012ec <lcd_handle_escape+0x114>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8012bc:	e0bffc17 	ldw	r2,-16(fp)
  8012c0:	10c002a4 	muli	r3,r2,10
  8012c4:	e0bffd17 	ldw	r2,-12(fp)
  8012c8:	11000044 	addi	r4,r2,1
  8012cc:	e13ffd15 	stw	r4,-12(fp)
  8012d0:	10800003 	ldbu	r2,0(r2)
  8012d4:	10803fcc 	andi	r2,r2,255
  8012d8:	1080201c 	xori	r2,r2,128
  8012dc:	10bfe004 	addi	r2,r2,-128
  8012e0:	10bff404 	addi	r2,r2,-48
  8012e4:	1885883a 	add	r2,r3,r2
  8012e8:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8012ec:	008020b4 	movhi	r2,130
  8012f0:	10b83d04 	addi	r2,r2,-7948
  8012f4:	10c00017 	ldw	r3,0(r2)
  8012f8:	e0bffd17 	ldw	r2,-12(fp)
  8012fc:	10800003 	ldbu	r2,0(r2)
  801300:	10803fcc 	andi	r2,r2,255
  801304:	1080201c 	xori	r2,r2,128
  801308:	10bfe004 	addi	r2,r2,-128
  80130c:	10800044 	addi	r2,r2,1
  801310:	1885883a 	add	r2,r3,r2
  801314:	10800003 	ldbu	r2,0(r2)
  801318:	10803fcc 	andi	r2,r2,255
  80131c:	1080010c 	andi	r2,r2,4
  801320:	103fe61e 	bne	r2,zero,8012bc <__alt_data_end+0xff8012bc>
  801324:	00000206 	br	801330 <lcd_handle_escape+0x158>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  801328:	00bfffc4 	movi	r2,-1
  80132c:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  801330:	e0bfff07 	ldb	r2,-4(fp)
  801334:	10c012a0 	cmpeqi	r3,r2,74
  801338:	1800281e 	bne	r3,zero,8013dc <lcd_handle_escape+0x204>
  80133c:	10c012c8 	cmpgei	r3,r2,75
  801340:	1800031e 	bne	r3,zero,801350 <lcd_handle_escape+0x178>
  801344:	10801220 	cmpeqi	r2,r2,72
  801348:	1000051e 	bne	r2,zero,801360 <lcd_handle_escape+0x188>
  80134c:	00004506 	br	801464 <lcd_handle_escape+0x28c>
  801350:	10c012e0 	cmpeqi	r3,r2,75
  801354:	1800281e 	bne	r3,zero,8013f8 <lcd_handle_escape+0x220>
  801358:	108019a0 	cmpeqi	r2,r2,102
  80135c:	10004126 	beq	r2,zero,801464 <lcd_handle_escape+0x28c>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  801360:	e0bffc17 	ldw	r2,-16(fp)
  801364:	0080050e 	bge	zero,r2,80137c <lcd_handle_escape+0x1a4>
      sp->x = parm2 - 1;
  801368:	e0bffc17 	ldw	r2,-16(fp)
  80136c:	10bfffc4 	addi	r2,r2,-1
  801370:	1007883a 	mov	r3,r2
  801374:	e0bffe17 	ldw	r2,-8(fp)
  801378:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80137c:	e0bffb17 	ldw	r2,-20(fp)
  801380:	0080150e 	bge	zero,r2,8013d8 <lcd_handle_escape+0x200>
    {
      sp->y = parm1 - 1;
  801384:	e0bffb17 	ldw	r2,-20(fp)
  801388:	10bfffc4 	addi	r2,r2,-1
  80138c:	1007883a 	mov	r3,r2
  801390:	e0bffe17 	ldw	r2,-8(fp)
  801394:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  801398:	e0bffe17 	ldw	r2,-8(fp)
  80139c:	10800883 	ldbu	r2,34(r2)
  8013a0:	10803fcc 	andi	r2,r2,255
  8013a4:	10800170 	cmpltui	r2,r2,5
  8013a8:	1000031e 	bne	r2,zero,8013b8 <lcd_handle_escape+0x1e0>
        sp->y = ALT_LCD_HEIGHT * 2;
  8013ac:	e0bffe17 	ldw	r2,-8(fp)
  8013b0:	00c00104 	movi	r3,4
  8013b4:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  8013b8:	00000206 	br	8013c4 <lcd_handle_escape+0x1ec>
        lcd_scroll_up(sp);
  8013bc:	e13ffe17 	ldw	r4,-8(fp)
  8013c0:	08011100 	call	801110 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  8013c4:	e0bffe17 	ldw	r2,-8(fp)
  8013c8:	10800883 	ldbu	r2,34(r2)
  8013cc:	10803fcc 	andi	r2,r2,255
  8013d0:	108000e8 	cmpgeui	r2,r2,3
  8013d4:	103ff91e 	bne	r2,zero,8013bc <__alt_data_end+0xff8013bc>
        lcd_scroll_up(sp);
    }
    break;
  8013d8:	00002206 	br	801464 <lcd_handle_escape+0x28c>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8013dc:	e0bffb17 	ldw	r2,-20(fp)
  8013e0:	10800098 	cmpnei	r2,r2,2
  8013e4:	1000031e 	bne	r2,zero,8013f4 <lcd_handle_escape+0x21c>
      lcd_clear_screen(sp);
  8013e8:	e13ffe17 	ldw	r4,-8(fp)
  8013ec:	0800e5c0 	call	800e5c <lcd_clear_screen>
    break;
  8013f0:	00001c06 	br	801464 <lcd_handle_escape+0x28c>
  8013f4:	00001b06 	br	801464 <lcd_handle_escape+0x28c>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8013f8:	e0bffb17 	ldw	r2,-20(fp)
  8013fc:	00801816 	blt	zero,r2,801460 <lcd_handle_escape+0x288>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  801400:	e0bffe17 	ldw	r2,-8(fp)
  801404:	10800843 	ldbu	r2,33(r2)
  801408:	10803fcc 	andi	r2,r2,255
  80140c:	10801428 	cmpgeui	r2,r2,80
  801410:	1000131e 	bne	r2,zero,801460 <lcd_handle_escape+0x288>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  801414:	e0bffe17 	ldw	r2,-8(fp)
  801418:	10800883 	ldbu	r2,34(r2)
  80141c:	10803fcc 	andi	r2,r2,255
  801420:	108018e4 	muli	r2,r2,99
  801424:	10801004 	addi	r2,r2,64
  801428:	e0fffe17 	ldw	r3,-8(fp)
  80142c:	1887883a 	add	r3,r3,r2
  801430:	e0bffe17 	ldw	r2,-8(fp)
  801434:	10800843 	ldbu	r2,33(r2)
  801438:	10803fcc 	andi	r2,r2,255
  80143c:	1889883a 	add	r4,r3,r2
  801440:	e0bffe17 	ldw	r2,-8(fp)
  801444:	10800843 	ldbu	r2,33(r2)
  801448:	10803fcc 	andi	r2,r2,255
  80144c:	00c01404 	movi	r3,80
  801450:	1885c83a 	sub	r2,r3,r2
  801454:	01400804 	movi	r5,32
  801458:	100d883a 	mov	r6,r2
  80145c:	080d8100 	call	80d810 <memset>
    }
    break;
  801460:	0001883a 	nop
  }
}
  801464:	e037883a 	mov	sp,fp
  801468:	dfc00117 	ldw	ra,4(sp)
  80146c:	df000017 	ldw	fp,0(sp)
  801470:	dec00204 	addi	sp,sp,8
  801474:	f800283a 	ret

00801478 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  801478:	defff304 	addi	sp,sp,-52
  80147c:	dfc00c15 	stw	ra,48(sp)
  801480:	df000b15 	stw	fp,44(sp)
  801484:	df000b04 	addi	fp,sp,44
  801488:	e13ffc15 	stw	r4,-16(fp)
  80148c:	e17ffd15 	stw	r5,-12(fp)
  801490:	e1bffe15 	stw	r6,-8(fp)
  801494:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  801498:	e0bffe17 	ldw	r2,-8(fp)
  80149c:	e0fffd17 	ldw	r3,-12(fp)
  8014a0:	1885883a 	add	r2,r3,r2
  8014a4:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  8014a8:	e0bffc17 	ldw	r2,-16(fp)
  8014ac:	00c00044 	movi	r3,1
  8014b0:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  8014b4:	00009e06 	br	801730 <altera_avalon_lcd_16207_write+0x2b8>
  {
    char c = *ptr;
  8014b8:	e0bffd17 	ldw	r2,-12(fp)
  8014bc:	10800003 	ldbu	r2,0(r2)
  8014c0:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  8014c4:	e0bffc17 	ldw	r2,-16(fp)
  8014c8:	10800903 	ldbu	r2,36(r2)
  8014cc:	10803fcc 	andi	r2,r2,255
  8014d0:	1080201c 	xori	r2,r2,128
  8014d4:	10bfe004 	addi	r2,r2,-128
  8014d8:	10003a16 	blt	r2,zero,8015c4 <altera_avalon_lcd_16207_write+0x14c>
    {
      unsigned int esccount = sp->esccount;
  8014dc:	e0bffc17 	ldw	r2,-16(fp)
  8014e0:	10800903 	ldbu	r2,36(r2)
  8014e4:	10803fcc 	andi	r2,r2,255
  8014e8:	1080201c 	xori	r2,r2,128
  8014ec:	10bfe004 	addi	r2,r2,-128
  8014f0:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8014f4:	e0bffa17 	ldw	r2,-24(fp)
  8014f8:	1000031e 	bne	r2,zero,801508 <altera_avalon_lcd_16207_write+0x90>
  8014fc:	e0bff907 	ldb	r2,-28(fp)
  801500:	108016d8 	cmpnei	r2,r2,91
  801504:	10000f1e 	bne	r2,zero,801544 <altera_avalon_lcd_16207_write+0xcc>
  801508:	e0bffa17 	ldw	r2,-24(fp)
  80150c:	10001a26 	beq	r2,zero,801578 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
  801510:	008020b4 	movhi	r2,130
  801514:	10b83d04 	addi	r2,r2,-7948
  801518:	10c00017 	ldw	r3,0(r2)
  80151c:	e0bff907 	ldb	r2,-28(fp)
  801520:	10800044 	addi	r2,r2,1
  801524:	1885883a 	add	r2,r3,r2
  801528:	10800003 	ldbu	r2,0(r2)
  80152c:	10803fcc 	andi	r2,r2,255
  801530:	1080010c 	andi	r2,r2,4
  801534:	1000101e 	bne	r2,zero,801578 <altera_avalon_lcd_16207_write+0x100>
  801538:	e0bff907 	ldb	r2,-28(fp)
  80153c:	10800ee0 	cmpeqi	r2,r2,59
  801540:	10000d1e 	bne	r2,zero,801578 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
  801544:	e0fffc17 	ldw	r3,-16(fp)
  801548:	e0bffa17 	ldw	r2,-24(fp)
  80154c:	1885883a 	add	r2,r3,r2
  801550:	10800a04 	addi	r2,r2,40
  801554:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  801558:	e0bff907 	ldb	r2,-28(fp)
  80155c:	e13ffc17 	ldw	r4,-16(fp)
  801560:	100b883a 	mov	r5,r2
  801564:	08011d80 	call	8011d8 <lcd_handle_escape>

        sp->esccount = -1;
  801568:	e0bffc17 	ldw	r2,-16(fp)
  80156c:	00ffffc4 	movi	r3,-1
  801570:	10c00905 	stb	r3,36(r2)
  801574:	00001206 	br	8015c0 <altera_avalon_lcd_16207_write+0x148>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  801578:	e0bffc17 	ldw	r2,-16(fp)
  80157c:	10800903 	ldbu	r2,36(r2)
  801580:	10803fcc 	andi	r2,r2,255
  801584:	108001e8 	cmpgeui	r2,r2,7
  801588:	10000d1e 	bne	r2,zero,8015c0 <altera_avalon_lcd_16207_write+0x148>
      {
        sp->escape[esccount] = c;
  80158c:	e0fffc17 	ldw	r3,-16(fp)
  801590:	e0bffa17 	ldw	r2,-24(fp)
  801594:	1885883a 	add	r2,r3,r2
  801598:	10800a04 	addi	r2,r2,40
  80159c:	e0fff903 	ldbu	r3,-28(fp)
  8015a0:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  8015a4:	e0bffc17 	ldw	r2,-16(fp)
  8015a8:	10800903 	ldbu	r2,36(r2)
  8015ac:	10800044 	addi	r2,r2,1
  8015b0:	1007883a 	mov	r3,r2
  8015b4:	e0bffc17 	ldw	r2,-16(fp)
  8015b8:	10c00905 	stb	r3,36(r2)
  8015bc:	00005906 	br	801724 <altera_avalon_lcd_16207_write+0x2ac>
  8015c0:	00005806 	br	801724 <altera_avalon_lcd_16207_write+0x2ac>
      }
    }
    else if (c == 27) /* ESC */
  8015c4:	e0bff907 	ldb	r2,-28(fp)
  8015c8:	108006d8 	cmpnei	r2,r2,27
  8015cc:	1000031e 	bne	r2,zero,8015dc <altera_avalon_lcd_16207_write+0x164>
    {
      sp->esccount = 0;
  8015d0:	e0bffc17 	ldw	r2,-16(fp)
  8015d4:	10000905 	stb	zero,36(r2)
  8015d8:	00005206 	br	801724 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\r')
  8015dc:	e0bff907 	ldb	r2,-28(fp)
  8015e0:	10800358 	cmpnei	r2,r2,13
  8015e4:	1000031e 	bne	r2,zero,8015f4 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->x = 0;
  8015e8:	e0bffc17 	ldw	r2,-16(fp)
  8015ec:	10000845 	stb	zero,33(r2)
  8015f0:	00004c06 	br	801724 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\n')
  8015f4:	e0bff907 	ldb	r2,-28(fp)
  8015f8:	10800298 	cmpnei	r2,r2,10
  8015fc:	1000101e 	bne	r2,zero,801640 <altera_avalon_lcd_16207_write+0x1c8>
    {
      sp->x = 0;
  801600:	e0bffc17 	ldw	r2,-16(fp)
  801604:	10000845 	stb	zero,33(r2)
      sp->y++;
  801608:	e0bffc17 	ldw	r2,-16(fp)
  80160c:	10800883 	ldbu	r2,34(r2)
  801610:	10800044 	addi	r2,r2,1
  801614:	1007883a 	mov	r3,r2
  801618:	e0bffc17 	ldw	r2,-16(fp)
  80161c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  801620:	e0bffc17 	ldw	r2,-16(fp)
  801624:	10800883 	ldbu	r2,34(r2)
  801628:	10803fcc 	andi	r2,r2,255
  80162c:	108000f0 	cmpltui	r2,r2,3
  801630:	10003c1e 	bne	r2,zero,801724 <altera_avalon_lcd_16207_write+0x2ac>
        lcd_scroll_up(sp);
  801634:	e13ffc17 	ldw	r4,-16(fp)
  801638:	08011100 	call	801110 <lcd_scroll_up>
  80163c:	00003906 	br	801724 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\b')
  801640:	e0bff907 	ldb	r2,-28(fp)
  801644:	10800218 	cmpnei	r2,r2,8
  801648:	10000b1e 	bne	r2,zero,801678 <altera_avalon_lcd_16207_write+0x200>
    {
      if (sp->x > 0)
  80164c:	e0bffc17 	ldw	r2,-16(fp)
  801650:	10800843 	ldbu	r2,33(r2)
  801654:	10803fcc 	andi	r2,r2,255
  801658:	10003226 	beq	r2,zero,801724 <altera_avalon_lcd_16207_write+0x2ac>
        sp->x--;
  80165c:	e0bffc17 	ldw	r2,-16(fp)
  801660:	10800843 	ldbu	r2,33(r2)
  801664:	10bfffc4 	addi	r2,r2,-1
  801668:	1007883a 	mov	r3,r2
  80166c:	e0bffc17 	ldw	r2,-16(fp)
  801670:	10c00845 	stb	r3,33(r2)
  801674:	00002b06 	br	801724 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (isprint(c))
  801678:	008020b4 	movhi	r2,130
  80167c:	10b83d04 	addi	r2,r2,-7948
  801680:	10c00017 	ldw	r3,0(r2)
  801684:	e0bff907 	ldb	r2,-28(fp)
  801688:	10800044 	addi	r2,r2,1
  80168c:	1885883a 	add	r2,r3,r2
  801690:	10800003 	ldbu	r2,0(r2)
  801694:	10803fcc 	andi	r2,r2,255
  801698:	1080201c 	xori	r2,r2,128
  80169c:	10bfe004 	addi	r2,r2,-128
  8016a0:	108025cc 	andi	r2,r2,151
  8016a4:	10001f26 	beq	r2,zero,801724 <altera_avalon_lcd_16207_write+0x2ac>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  8016a8:	e0bffc17 	ldw	r2,-16(fp)
  8016ac:	10800883 	ldbu	r2,34(r2)
  8016b0:	10803fcc 	andi	r2,r2,255
  8016b4:	108000b0 	cmpltui	r2,r2,2
  8016b8:	1000021e 	bne	r2,zero,8016c4 <altera_avalon_lcd_16207_write+0x24c>
        lcd_scroll_up(sp);
  8016bc:	e13ffc17 	ldw	r4,-16(fp)
  8016c0:	08011100 	call	801110 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8016c4:	e0bffc17 	ldw	r2,-16(fp)
  8016c8:	10800843 	ldbu	r2,33(r2)
  8016cc:	10803fcc 	andi	r2,r2,255
  8016d0:	10801428 	cmpgeui	r2,r2,80
  8016d4:	10000d1e 	bne	r2,zero,80170c <altera_avalon_lcd_16207_write+0x294>
        sp->line[sp->y].data[sp->x] = c;
  8016d8:	e0bffc17 	ldw	r2,-16(fp)
  8016dc:	10800883 	ldbu	r2,34(r2)
  8016e0:	10c03fcc 	andi	r3,r2,255
  8016e4:	e0bffc17 	ldw	r2,-16(fp)
  8016e8:	10800843 	ldbu	r2,33(r2)
  8016ec:	10803fcc 	andi	r2,r2,255
  8016f0:	e13ffc17 	ldw	r4,-16(fp)
  8016f4:	18c018e4 	muli	r3,r3,99
  8016f8:	20c7883a 	add	r3,r4,r3
  8016fc:	1885883a 	add	r2,r3,r2
  801700:	10801004 	addi	r2,r2,64
  801704:	e0fff903 	ldbu	r3,-28(fp)
  801708:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80170c:	e0bffc17 	ldw	r2,-16(fp)
  801710:	10800843 	ldbu	r2,33(r2)
  801714:	10800044 	addi	r2,r2,1
  801718:	1007883a 	mov	r3,r2
  80171c:	e0bffc17 	ldw	r2,-16(fp)
  801720:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  801724:	e0bffd17 	ldw	r2,-12(fp)
  801728:	10800044 	addi	r2,r2,1
  80172c:	e0bffd15 	stw	r2,-12(fp)
  801730:	e0fffd17 	ldw	r3,-12(fp)
  801734:	e0bff817 	ldw	r2,-32(fp)
  801738:	18bf5f36 	bltu	r3,r2,8014b8 <__alt_data_end+0xff8014b8>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80173c:	00800404 	movi	r2,16
  801740:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801744:	e03ff515 	stw	zero,-44(fp)
  801748:	00003606 	br	801824 <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80174c:	00801404 	movi	r2,80
  801750:	e0bff715 	stw	r2,-36(fp)
  801754:	00001206 	br	8017a0 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
  801758:	e0bff717 	ldw	r2,-36(fp)
  80175c:	10bfffc4 	addi	r2,r2,-1
  801760:	e13ffc17 	ldw	r4,-16(fp)
  801764:	e0fff517 	ldw	r3,-44(fp)
  801768:	18c018e4 	muli	r3,r3,99
  80176c:	20c7883a 	add	r3,r4,r3
  801770:	1885883a 	add	r2,r3,r2
  801774:	10801004 	addi	r2,r2,64
  801778:	10800003 	ldbu	r2,0(r2)
  80177c:	10803fcc 	andi	r2,r2,255
  801780:	1080201c 	xori	r2,r2,128
  801784:	10bfe004 	addi	r2,r2,-128
  801788:	10800820 	cmpeqi	r2,r2,32
  80178c:	1000011e 	bne	r2,zero,801794 <altera_avalon_lcd_16207_write+0x31c>
        break;
  801790:	00000506 	br	8017a8 <altera_avalon_lcd_16207_write+0x330>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801794:	e0bff717 	ldw	r2,-36(fp)
  801798:	10bfffc4 	addi	r2,r2,-1
  80179c:	e0bff715 	stw	r2,-36(fp)
  8017a0:	e0bff717 	ldw	r2,-36(fp)
  8017a4:	00bfec16 	blt	zero,r2,801758 <__alt_data_end+0xff801758>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  8017a8:	e0bff717 	ldw	r2,-36(fp)
  8017ac:	10800448 	cmpgei	r2,r2,17
  8017b0:	1000031e 	bne	r2,zero,8017c0 <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
  8017b4:	00800404 	movi	r2,16
  8017b8:	e0bff715 	stw	r2,-36(fp)
  8017bc:	00000306 	br	8017cc <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
  8017c0:	e0bff717 	ldw	r2,-36(fp)
  8017c4:	10800044 	addi	r2,r2,1
  8017c8:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  8017cc:	e0bff717 	ldw	r2,-36(fp)
  8017d0:	1009883a 	mov	r4,r2
  8017d4:	e0fffc17 	ldw	r3,-16(fp)
  8017d8:	e0bff517 	ldw	r2,-44(fp)
  8017dc:	108018e4 	muli	r2,r2,99
  8017e0:	10802404 	addi	r2,r2,144
  8017e4:	1885883a 	add	r2,r3,r2
  8017e8:	11000045 	stb	r4,1(r2)
    if (widthmax < width)
  8017ec:	e0fff617 	ldw	r3,-40(fp)
  8017f0:	e0bff717 	ldw	r2,-36(fp)
  8017f4:	1880020e 	bge	r3,r2,801800 <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
  8017f8:	e0bff717 	ldw	r2,-36(fp)
  8017fc:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  801800:	e0fffc17 	ldw	r3,-16(fp)
  801804:	e0bff517 	ldw	r2,-44(fp)
  801808:	108018e4 	muli	r2,r2,99
  80180c:	10802404 	addi	r2,r2,144
  801810:	1885883a 	add	r2,r3,r2
  801814:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801818:	e0bff517 	ldw	r2,-44(fp)
  80181c:	10800044 	addi	r2,r2,1
  801820:	e0bff515 	stw	r2,-44(fp)
  801824:	e0bff517 	ldw	r2,-44(fp)
  801828:	10800090 	cmplti	r2,r2,2
  80182c:	103fc71e 	bne	r2,zero,80174c <__alt_data_end+0xff80174c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  801830:	e0bff617 	ldw	r2,-40(fp)
  801834:	10800448 	cmpgei	r2,r2,17
  801838:	1000031e 	bne	r2,zero,801848 <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
  80183c:	e0bffc17 	ldw	r2,-16(fp)
  801840:	10000985 	stb	zero,38(r2)
  801844:	00002e06 	br	801900 <altera_avalon_lcd_16207_write+0x488>
  else
  {
    widthmax *= 2;
  801848:	e0bff617 	ldw	r2,-40(fp)
  80184c:	1085883a 	add	r2,r2,r2
  801850:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  801854:	e0bff617 	ldw	r2,-40(fp)
  801858:	1007883a 	mov	r3,r2
  80185c:	e0bffc17 	ldw	r2,-16(fp)
  801860:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801864:	e03ff515 	stw	zero,-44(fp)
  801868:	00002206 	br	8018f4 <altera_avalon_lcd_16207_write+0x47c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80186c:	e0fffc17 	ldw	r3,-16(fp)
  801870:	e0bff517 	ldw	r2,-44(fp)
  801874:	108018e4 	muli	r2,r2,99
  801878:	10802404 	addi	r2,r2,144
  80187c:	1885883a 	add	r2,r3,r2
  801880:	10800043 	ldbu	r2,1(r2)
  801884:	10803fcc 	andi	r2,r2,255
  801888:	1080201c 	xori	r2,r2,128
  80188c:	10bfe004 	addi	r2,r2,-128
  801890:	10800450 	cmplti	r2,r2,17
  801894:	1000141e 	bne	r2,zero,8018e8 <altera_avalon_lcd_16207_write+0x470>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  801898:	e0fffc17 	ldw	r3,-16(fp)
  80189c:	e0bff517 	ldw	r2,-44(fp)
  8018a0:	108018e4 	muli	r2,r2,99
  8018a4:	10802404 	addi	r2,r2,144
  8018a8:	1885883a 	add	r2,r3,r2
  8018ac:	10800043 	ldbu	r2,1(r2)
  8018b0:	10803fcc 	andi	r2,r2,255
  8018b4:	1080201c 	xori	r2,r2,128
  8018b8:	10bfe004 	addi	r2,r2,-128
  8018bc:	1004923a 	slli	r2,r2,8
  8018c0:	1009883a 	mov	r4,r2
  8018c4:	e17ff617 	ldw	r5,-40(fp)
  8018c8:	080c5800 	call	80c580 <__divsi3>
  8018cc:	1009883a 	mov	r4,r2
  8018d0:	e0fffc17 	ldw	r3,-16(fp)
  8018d4:	e0bff517 	ldw	r2,-44(fp)
  8018d8:	108018e4 	muli	r2,r2,99
  8018dc:	10802404 	addi	r2,r2,144
  8018e0:	1885883a 	add	r2,r3,r2
  8018e4:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8018e8:	e0bff517 	ldw	r2,-44(fp)
  8018ec:	10800044 	addi	r2,r2,1
  8018f0:	e0bff515 	stw	r2,-44(fp)
  8018f4:	e0bff517 	ldw	r2,-44(fp)
  8018f8:	10800090 	cmplti	r2,r2,2
  8018fc:	103fdb1e 	bne	r2,zero,80186c <__alt_data_end+0xff80186c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  801900:	e0bffc17 	ldw	r2,-16(fp)
  801904:	10800943 	ldbu	r2,37(r2)
  801908:	10803fcc 	andi	r2,r2,255
  80190c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  801910:	e13ffc17 	ldw	r4,-16(fp)
  801914:	0800f280 	call	800f28 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  801918:	e0bffc17 	ldw	r2,-16(fp)
  80191c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  801920:	e0bffc17 	ldw	r2,-16(fp)
  801924:	10800943 	ldbu	r2,37(r2)
  801928:	10c03fcc 	andi	r3,r2,255
  80192c:	e0bffb17 	ldw	r2,-20(fp)
  801930:	1880011e 	bne	r3,r2,801938 <altera_avalon_lcd_16207_write+0x4c0>
      break;
  801934:	00000406 	br	801948 <altera_avalon_lcd_16207_write+0x4d0>

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  801938:	e0bffc17 	ldw	r2,-16(fp)
  80193c:	00c00044 	movi	r3,1
  801940:	10c009c5 	stb	r3,39(r2)
  }
  801944:	003fee06 	br	801900 <__alt_data_end+0xff801900>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  801948:	e0bffe17 	ldw	r2,-8(fp)
}
  80194c:	e037883a 	mov	sp,fp
  801950:	dfc00117 	ldw	ra,4(sp)
  801954:	df000017 	ldw	fp,0(sp)
  801958:	dec00204 	addi	sp,sp,8
  80195c:	f800283a 	ret

00801960 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  801960:	defffc04 	addi	sp,sp,-16
  801964:	dfc00315 	stw	ra,12(sp)
  801968:	df000215 	stw	fp,8(sp)
  80196c:	df000204 	addi	fp,sp,8
  801970:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  801974:	e0bfff17 	ldw	r2,-4(fp)
  801978:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80197c:	e0bffe17 	ldw	r2,-8(fp)
  801980:	10800943 	ldbu	r2,37(r2)
  801984:	10803fcc 	andi	r2,r2,255
  801988:	10c00044 	addi	r3,r2,1
  80198c:	e0bffe17 	ldw	r2,-8(fp)
  801990:	10800983 	ldbu	r2,38(r2)
  801994:	10803fcc 	andi	r2,r2,255
  801998:	18800316 	blt	r3,r2,8019a8 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80199c:	e0bffe17 	ldw	r2,-8(fp)
  8019a0:	10000945 	stb	zero,37(r2)
  8019a4:	00000606 	br	8019c0 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8019a8:	e0bffe17 	ldw	r2,-8(fp)
  8019ac:	10800943 	ldbu	r2,37(r2)
  8019b0:	10800044 	addi	r2,r2,1
  8019b4:	1007883a 	mov	r3,r2
  8019b8:	e0bffe17 	ldw	r2,-8(fp)
  8019bc:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8019c0:	e0bffe17 	ldw	r2,-8(fp)
  8019c4:	10800983 	ldbu	r2,38(r2)
  8019c8:	10803fcc 	andi	r2,r2,255
  8019cc:	10000826 	beq	r2,zero,8019f0 <alt_lcd_16207_timeout+0x90>
  8019d0:	e0bffe17 	ldw	r2,-8(fp)
  8019d4:	108009c3 	ldbu	r2,39(r2)
  8019d8:	10803fcc 	andi	r2,r2,255
  8019dc:	1080201c 	xori	r2,r2,128
  8019e0:	10bfe004 	addi	r2,r2,-128
  8019e4:	1000021e 	bne	r2,zero,8019f0 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8019e8:	e13ffe17 	ldw	r4,-8(fp)
  8019ec:	0800f280 	call	800f28 <lcd_repaint_screen>

  return sp->period;
  8019f0:	e0bffe17 	ldw	r2,-8(fp)
  8019f4:	10800717 	ldw	r2,28(r2)
}
  8019f8:	e037883a 	mov	sp,fp
  8019fc:	dfc00117 	ldw	ra,4(sp)
  801a00:	df000017 	ldw	fp,0(sp)
  801a04:	dec00204 	addi	sp,sp,8
  801a08:	f800283a 	ret

00801a0c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  801a0c:	defffc04 	addi	sp,sp,-16
  801a10:	dfc00315 	stw	ra,12(sp)
  801a14:	df000215 	stw	fp,8(sp)
  801a18:	df000204 	addi	fp,sp,8
  801a1c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  801a20:	e0bfff17 	ldw	r2,-4(fp)
  801a24:	10800017 	ldw	r2,0(r2)
  801a28:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  801a2c:	e0bfff17 	ldw	r2,-4(fp)
  801a30:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  801a34:	010ea604 	movi	r4,15000
  801a38:	081af000 	call	81af00 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801a3c:	e0bffe17 	ldw	r2,-8(fp)
  801a40:	00c00c04 	movi	r3,48
  801a44:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  801a48:	01040104 	movi	r4,4100
  801a4c:	081af000 	call	81af00 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801a50:	e0bffe17 	ldw	r2,-8(fp)
  801a54:	00c00c04 	movi	r3,48
  801a58:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  801a5c:	0100fa04 	movi	r4,1000
  801a60:	081af000 	call	81af00 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801a64:	e0bffe17 	ldw	r2,-8(fp)
  801a68:	00c00c04 	movi	r3,48
  801a6c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  801a70:	e13fff17 	ldw	r4,-4(fp)
  801a74:	01400e04 	movi	r5,56
  801a78:	0800cd40 	call	800cd4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  801a7c:	e13fff17 	ldw	r4,-4(fp)
  801a80:	01400204 	movi	r5,8
  801a84:	0800cd40 	call	800cd4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  801a88:	e13fff17 	ldw	r4,-4(fp)
  801a8c:	0800e5c0 	call	800e5c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  801a90:	e13fff17 	ldw	r4,-4(fp)
  801a94:	01400184 	movi	r5,6
  801a98:	0800cd40 	call	800cd4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  801a9c:	e13fff17 	ldw	r4,-4(fp)
  801aa0:	01400304 	movi	r5,12
  801aa4:	0800cd40 	call	800cd4 <lcd_write_command>

  sp->esccount = -1;
  801aa8:	e0bfff17 	ldw	r2,-4(fp)
  801aac:	00ffffc4 	movi	r3,-1
  801ab0:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  801ab4:	e0bfff17 	ldw	r2,-4(fp)
  801ab8:	10800a04 	addi	r2,r2,40
  801abc:	1009883a 	mov	r4,r2
  801ac0:	000b883a 	mov	r5,zero
  801ac4:	01800204 	movi	r6,8
  801ac8:	080d8100 	call	80d810 <memset>

  sp->scrollpos = 0;
  801acc:	e0bfff17 	ldw	r2,-4(fp)
  801ad0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  801ad4:	e0bfff17 	ldw	r2,-4(fp)
  801ad8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  801adc:	e0bfff17 	ldw	r2,-4(fp)
  801ae0:	100009c5 	stb	zero,39(r2)
  801ae4:	008020b4 	movhi	r2,130
  801ae8:	10bfc704 	addi	r2,r2,-228
  801aec:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  801af0:	1009883a 	mov	r4,r2
  801af4:	01400284 	movi	r5,10
  801af8:	080c6300 	call	80c630 <__udivsi3>
  801afc:	1007883a 	mov	r3,r2
  801b00:	e0bfff17 	ldw	r2,-4(fp)
  801b04:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  801b08:	e0bfff17 	ldw	r2,-4(fp)
  801b0c:	10c00104 	addi	r3,r2,4
  801b10:	e0bfff17 	ldw	r2,-4(fp)
  801b14:	10800717 	ldw	r2,28(r2)
  801b18:	1809883a 	mov	r4,r3
  801b1c:	100b883a 	mov	r5,r2
  801b20:	01802034 	movhi	r6,128
  801b24:	31865804 	addi	r6,r6,6496
  801b28:	e1ffff17 	ldw	r7,-4(fp)
  801b2c:	0819f140 	call	819f14 <alt_alarm_start>
}
  801b30:	e037883a 	mov	sp,fp
  801b34:	dfc00117 	ldw	ra,4(sp)
  801b38:	df000017 	ldw	fp,0(sp)
  801b3c:	dec00204 	addi	sp,sp,8
  801b40:	f800283a 	ret

00801b44 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  801b44:	defffa04 	addi	sp,sp,-24
  801b48:	dfc00515 	stw	ra,20(sp)
  801b4c:	df000415 	stw	fp,16(sp)
  801b50:	df000404 	addi	fp,sp,16
  801b54:	e13ffd15 	stw	r4,-12(fp)
  801b58:	e17ffe15 	stw	r5,-8(fp)
  801b5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  801b60:	e0bffd17 	ldw	r2,-12(fp)
  801b64:	10800017 	ldw	r2,0(r2)
  801b68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  801b6c:	e0bffc17 	ldw	r2,-16(fp)
  801b70:	10c00a04 	addi	r3,r2,40
  801b74:	e0bffd17 	ldw	r2,-12(fp)
  801b78:	10800217 	ldw	r2,8(r2)
  801b7c:	1809883a 	mov	r4,r3
  801b80:	e17ffe17 	ldw	r5,-8(fp)
  801b84:	e1bfff17 	ldw	r6,-4(fp)
  801b88:	100f883a 	mov	r7,r2
  801b8c:	08014780 	call	801478 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  801b90:	e037883a 	mov	sp,fp
  801b94:	dfc00117 	ldw	ra,4(sp)
  801b98:	df000017 	ldw	fp,0(sp)
  801b9c:	dec00204 	addi	sp,sp,8
  801ba0:	f800283a 	ret

00801ba4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  801ba4:	defff904 	addi	sp,sp,-28
  801ba8:	dfc00615 	stw	ra,24(sp)
  801bac:	df000515 	stw	fp,20(sp)
  801bb0:	df000504 	addi	fp,sp,20
  801bb4:	e13ffe15 	stw	r4,-8(fp)
  801bb8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  801bbc:	0007883a 	mov	r3,zero
  801bc0:	e0bffe17 	ldw	r2,-8(fp)
  801bc4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  801bc8:	e0bffe17 	ldw	r2,-8(fp)
  801bcc:	10800104 	addi	r2,r2,4
  801bd0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801bd4:	0005303a 	rdctl	r2,status
  801bd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801bdc:	e0fffc17 	ldw	r3,-16(fp)
  801be0:	00bfff84 	movi	r2,-2
  801be4:	1884703a 	and	r2,r3,r2
  801be8:	1001703a 	wrctl	status,r2
  
  return context;
  801bec:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  801bf0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  801bf4:	081adfc0 	call	81adfc <alt_tick>
  801bf8:	e0bffb17 	ldw	r2,-20(fp)
  801bfc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801c00:	e0bffd17 	ldw	r2,-12(fp)
  801c04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  801c08:	e037883a 	mov	sp,fp
  801c0c:	dfc00117 	ldw	ra,4(sp)
  801c10:	df000017 	ldw	fp,0(sp)
  801c14:	dec00204 	addi	sp,sp,8
  801c18:	f800283a 	ret

00801c1c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  801c1c:	defff904 	addi	sp,sp,-28
  801c20:	dfc00615 	stw	ra,24(sp)
  801c24:	df000515 	stw	fp,20(sp)
  801c28:	df000504 	addi	fp,sp,20
  801c2c:	e13ffc15 	stw	r4,-16(fp)
  801c30:	e17ffd15 	stw	r5,-12(fp)
  801c34:	e1bffe15 	stw	r6,-8(fp)
  801c38:	e1ffff15 	stw	r7,-4(fp)
  801c3c:	e0bfff17 	ldw	r2,-4(fp)
  801c40:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  801c44:	008020b4 	movhi	r2,130
  801c48:	10bfc704 	addi	r2,r2,-228
  801c4c:	10800017 	ldw	r2,0(r2)
  801c50:	1000041e 	bne	r2,zero,801c64 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  801c54:	008020b4 	movhi	r2,130
  801c58:	10bfc704 	addi	r2,r2,-228
  801c5c:	e0fffb17 	ldw	r3,-20(fp)
  801c60:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  801c64:	e0bffc17 	ldw	r2,-16(fp)
  801c68:	10800104 	addi	r2,r2,4
  801c6c:	00c001c4 	movi	r3,7
  801c70:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  801c74:	e13ffe17 	ldw	r4,-8(fp)
  801c78:	e17ffc17 	ldw	r5,-16(fp)
  801c7c:	01802034 	movhi	r6,128
  801c80:	3186e904 	addi	r6,r6,7076
  801c84:	081a3300 	call	81a330 <alt_irq_register>
#endif  
}
  801c88:	e037883a 	mov	sp,fp
  801c8c:	dfc00117 	ldw	ra,4(sp)
  801c90:	df000017 	ldw	fp,0(sp)
  801c94:	dec00204 	addi	sp,sp,8
  801c98:	f800283a 	ret

00801c9c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  801c9c:	defffa04 	addi	sp,sp,-24
  801ca0:	dfc00515 	stw	ra,20(sp)
  801ca4:	df000415 	stw	fp,16(sp)
  801ca8:	df000404 	addi	fp,sp,16
  801cac:	e13ffd15 	stw	r4,-12(fp)
  801cb0:	e17ffe15 	stw	r5,-8(fp)
  801cb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  801cb8:	e0bffd17 	ldw	r2,-12(fp)
  801cbc:	10800017 	ldw	r2,0(r2)
  801cc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  801cc4:	e0bffc17 	ldw	r2,-16(fp)
  801cc8:	10c00a04 	addi	r3,r2,40
  801ccc:	e0bffd17 	ldw	r2,-12(fp)
  801cd0:	10800217 	ldw	r2,8(r2)
  801cd4:	1809883a 	mov	r4,r3
  801cd8:	e17ffe17 	ldw	r5,-8(fp)
  801cdc:	e1bfff17 	ldw	r6,-4(fp)
  801ce0:	100f883a 	mov	r7,r2
  801ce4:	08021b00 	call	8021b0 <altera_avalon_uart_read>
      fd->fd_flags);
}
  801ce8:	e037883a 	mov	sp,fp
  801cec:	dfc00117 	ldw	ra,4(sp)
  801cf0:	df000017 	ldw	fp,0(sp)
  801cf4:	dec00204 	addi	sp,sp,8
  801cf8:	f800283a 	ret

00801cfc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  801cfc:	defffa04 	addi	sp,sp,-24
  801d00:	dfc00515 	stw	ra,20(sp)
  801d04:	df000415 	stw	fp,16(sp)
  801d08:	df000404 	addi	fp,sp,16
  801d0c:	e13ffd15 	stw	r4,-12(fp)
  801d10:	e17ffe15 	stw	r5,-8(fp)
  801d14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  801d18:	e0bffd17 	ldw	r2,-12(fp)
  801d1c:	10800017 	ldw	r2,0(r2)
  801d20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  801d24:	e0bffc17 	ldw	r2,-16(fp)
  801d28:	10c00a04 	addi	r3,r2,40
  801d2c:	e0bffd17 	ldw	r2,-12(fp)
  801d30:	10800217 	ldw	r2,8(r2)
  801d34:	1809883a 	mov	r4,r3
  801d38:	e17ffe17 	ldw	r5,-8(fp)
  801d3c:	e1bfff17 	ldw	r6,-4(fp)
  801d40:	100f883a 	mov	r7,r2
  801d44:	08023dc0 	call	8023dc <altera_avalon_uart_write>
      fd->fd_flags);
}
  801d48:	e037883a 	mov	sp,fp
  801d4c:	dfc00117 	ldw	ra,4(sp)
  801d50:	df000017 	ldw	fp,0(sp)
  801d54:	dec00204 	addi	sp,sp,8
  801d58:	f800283a 	ret

00801d5c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  801d5c:	defffc04 	addi	sp,sp,-16
  801d60:	dfc00315 	stw	ra,12(sp)
  801d64:	df000215 	stw	fp,8(sp)
  801d68:	df000204 	addi	fp,sp,8
  801d6c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  801d70:	e0bfff17 	ldw	r2,-4(fp)
  801d74:	10800017 	ldw	r2,0(r2)
  801d78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  801d7c:	e0bffe17 	ldw	r2,-8(fp)
  801d80:	10c00a04 	addi	r3,r2,40
  801d84:	e0bfff17 	ldw	r2,-4(fp)
  801d88:	10800217 	ldw	r2,8(r2)
  801d8c:	1809883a 	mov	r4,r3
  801d90:	100b883a 	mov	r5,r2
  801d94:	080210c0 	call	80210c <altera_avalon_uart_close>
}
  801d98:	e037883a 	mov	sp,fp
  801d9c:	dfc00117 	ldw	ra,4(sp)
  801da0:	df000017 	ldw	fp,0(sp)
  801da4:	dec00204 	addi	sp,sp,8
  801da8:	f800283a 	ret

00801dac <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  801dac:	defff904 	addi	sp,sp,-28
  801db0:	dfc00615 	stw	ra,24(sp)
  801db4:	df000515 	stw	fp,20(sp)
  801db8:	df000504 	addi	fp,sp,20
  801dbc:	e13ffd15 	stw	r4,-12(fp)
  801dc0:	e17ffe15 	stw	r5,-8(fp)
  801dc4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  801dc8:	e0bffd17 	ldw	r2,-12(fp)
  801dcc:	10800017 	ldw	r2,0(r2)
  801dd0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  801dd4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  801dd8:	1000041e 	bne	r2,zero,801dec <altera_avalon_uart_init+0x40>
  801ddc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  801de0:	1000021e 	bne	r2,zero,801dec <altera_avalon_uart_init+0x40>
  801de4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  801de8:	10000226 	beq	r2,zero,801df4 <altera_avalon_uart_init+0x48>
  801dec:	00800044 	movi	r2,1
  801df0:	00000106 	br	801df8 <altera_avalon_uart_init+0x4c>
  801df4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  801df8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  801dfc:	e0bffc17 	ldw	r2,-16(fp)
  801e00:	10000d1e 	bne	r2,zero,801e38 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  801e04:	e0bffd17 	ldw	r2,-12(fp)
  801e08:	00c32004 	movi	r3,3200
  801e0c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  801e10:	e0bffb17 	ldw	r2,-20(fp)
  801e14:	10800304 	addi	r2,r2,12
  801e18:	e0fffd17 	ldw	r3,-12(fp)
  801e1c:	18c00117 	ldw	r3,4(r3)
  801e20:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  801e24:	e13fff17 	ldw	r4,-4(fp)
  801e28:	e17ffd17 	ldw	r5,-12(fp)
  801e2c:	01802034 	movhi	r6,128
  801e30:	31879304 	addi	r6,r6,7756
  801e34:	081a3300 	call	81a330 <alt_irq_register>
#endif  
  }
}
  801e38:	e037883a 	mov	sp,fp
  801e3c:	dfc00117 	ldw	ra,4(sp)
  801e40:	df000017 	ldw	fp,0(sp)
  801e44:	dec00204 	addi	sp,sp,8
  801e48:	f800283a 	ret

00801e4c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  801e4c:	defff904 	addi	sp,sp,-28
  801e50:	dfc00615 	stw	ra,24(sp)
  801e54:	df000515 	stw	fp,20(sp)
  801e58:	df000504 	addi	fp,sp,20
  801e5c:	e13ffe15 	stw	r4,-8(fp)
  801e60:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  801e64:	e0bffe17 	ldw	r2,-8(fp)
  801e68:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  801e6c:	e0bffb17 	ldw	r2,-20(fp)
  801e70:	10800017 	ldw	r2,0(r2)
  801e74:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  801e78:	e0bffc17 	ldw	r2,-16(fp)
  801e7c:	10800204 	addi	r2,r2,8
  801e80:	10800037 	ldwio	r2,0(r2)
  801e84:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  801e88:	e0bffc17 	ldw	r2,-16(fp)
  801e8c:	10800204 	addi	r2,r2,8
  801e90:	0007883a 	mov	r3,zero
  801e94:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  801e98:	e0bffc17 	ldw	r2,-16(fp)
  801e9c:	10800204 	addi	r2,r2,8
  801ea0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  801ea4:	e0bffd17 	ldw	r2,-12(fp)
  801ea8:	1080200c 	andi	r2,r2,128
  801eac:	10000326 	beq	r2,zero,801ebc <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  801eb0:	e13ffb17 	ldw	r4,-20(fp)
  801eb4:	e17ffd17 	ldw	r5,-12(fp)
  801eb8:	0801ee80 	call	801ee8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  801ebc:	e0bffd17 	ldw	r2,-12(fp)
  801ec0:	1081100c 	andi	r2,r2,1088
  801ec4:	10000326 	beq	r2,zero,801ed4 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  801ec8:	e13ffb17 	ldw	r4,-20(fp)
  801ecc:	e17ffd17 	ldw	r5,-12(fp)
  801ed0:	0801fc80 	call	801fc8 <altera_avalon_uart_txirq>
  }
  

}
  801ed4:	e037883a 	mov	sp,fp
  801ed8:	dfc00117 	ldw	ra,4(sp)
  801edc:	df000017 	ldw	fp,0(sp)
  801ee0:	dec00204 	addi	sp,sp,8
  801ee4:	f800283a 	ret

00801ee8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  801ee8:	defffc04 	addi	sp,sp,-16
  801eec:	df000315 	stw	fp,12(sp)
  801ef0:	df000304 	addi	fp,sp,12
  801ef4:	e13ffe15 	stw	r4,-8(fp)
  801ef8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  801efc:	e0bfff17 	ldw	r2,-4(fp)
  801f00:	108000cc 	andi	r2,r2,3
  801f04:	10000126 	beq	r2,zero,801f0c <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  801f08:	00002b06 	br	801fb8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  801f0c:	e0bffe17 	ldw	r2,-8(fp)
  801f10:	10800317 	ldw	r2,12(r2)
  801f14:	e0bffe17 	ldw	r2,-8(fp)
  801f18:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  801f1c:	e0bffe17 	ldw	r2,-8(fp)
  801f20:	10800317 	ldw	r2,12(r2)
  801f24:	10800044 	addi	r2,r2,1
  801f28:	10800fcc 	andi	r2,r2,63
  801f2c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  801f30:	e0bffe17 	ldw	r2,-8(fp)
  801f34:	10800317 	ldw	r2,12(r2)
  801f38:	e0fffe17 	ldw	r3,-8(fp)
  801f3c:	18c00017 	ldw	r3,0(r3)
  801f40:	18c00037 	ldwio	r3,0(r3)
  801f44:	1809883a 	mov	r4,r3
  801f48:	e0fffe17 	ldw	r3,-8(fp)
  801f4c:	1885883a 	add	r2,r3,r2
  801f50:	10800704 	addi	r2,r2,28
  801f54:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  801f58:	e0bffe17 	ldw	r2,-8(fp)
  801f5c:	e0fffd17 	ldw	r3,-12(fp)
  801f60:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  801f64:	e0bffe17 	ldw	r2,-8(fp)
  801f68:	10800317 	ldw	r2,12(r2)
  801f6c:	10800044 	addi	r2,r2,1
  801f70:	10800fcc 	andi	r2,r2,63
  801f74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  801f78:	e0bffe17 	ldw	r2,-8(fp)
  801f7c:	10c00217 	ldw	r3,8(r2)
  801f80:	e0bffd17 	ldw	r2,-12(fp)
  801f84:	18800c1e 	bne	r3,r2,801fb8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  801f88:	e0bffe17 	ldw	r2,-8(fp)
  801f8c:	10c00117 	ldw	r3,4(r2)
  801f90:	00bfdfc4 	movi	r2,-129
  801f94:	1886703a 	and	r3,r3,r2
  801f98:	e0bffe17 	ldw	r2,-8(fp)
  801f9c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  801fa0:	e0bffe17 	ldw	r2,-8(fp)
  801fa4:	10800017 	ldw	r2,0(r2)
  801fa8:	10800304 	addi	r2,r2,12
  801fac:	e0fffe17 	ldw	r3,-8(fp)
  801fb0:	18c00117 	ldw	r3,4(r3)
  801fb4:	10c00035 	stwio	r3,0(r2)
  }   
}
  801fb8:	e037883a 	mov	sp,fp
  801fbc:	df000017 	ldw	fp,0(sp)
  801fc0:	dec00104 	addi	sp,sp,4
  801fc4:	f800283a 	ret

00801fc8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  801fc8:	defffb04 	addi	sp,sp,-20
  801fcc:	df000415 	stw	fp,16(sp)
  801fd0:	df000404 	addi	fp,sp,16
  801fd4:	e13ffc15 	stw	r4,-16(fp)
  801fd8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  801fdc:	e0bffc17 	ldw	r2,-16(fp)
  801fe0:	10c00417 	ldw	r3,16(r2)
  801fe4:	e0bffc17 	ldw	r2,-16(fp)
  801fe8:	10800517 	ldw	r2,20(r2)
  801fec:	18803226 	beq	r3,r2,8020b8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  801ff0:	e0bffc17 	ldw	r2,-16(fp)
  801ff4:	10800617 	ldw	r2,24(r2)
  801ff8:	1080008c 	andi	r2,r2,2
  801ffc:	10000326 	beq	r2,zero,80200c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  802000:	e0bffd17 	ldw	r2,-12(fp)
  802004:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  802008:	10001d26 	beq	r2,zero,802080 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80200c:	e0bffc17 	ldw	r2,-16(fp)
  802010:	10800417 	ldw	r2,16(r2)
  802014:	e0bffc17 	ldw	r2,-16(fp)
  802018:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80201c:	e0bffc17 	ldw	r2,-16(fp)
  802020:	10800017 	ldw	r2,0(r2)
  802024:	10800104 	addi	r2,r2,4
  802028:	e0fffc17 	ldw	r3,-16(fp)
  80202c:	18c00417 	ldw	r3,16(r3)
  802030:	e13ffc17 	ldw	r4,-16(fp)
  802034:	20c7883a 	add	r3,r4,r3
  802038:	18c01704 	addi	r3,r3,92
  80203c:	18c00003 	ldbu	r3,0(r3)
  802040:	18c03fcc 	andi	r3,r3,255
  802044:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  802048:	e0bffc17 	ldw	r2,-16(fp)
  80204c:	10800417 	ldw	r2,16(r2)
  802050:	10800044 	addi	r2,r2,1
  802054:	e0fffc17 	ldw	r3,-16(fp)
  802058:	18800415 	stw	r2,16(r3)
  80205c:	10c00fcc 	andi	r3,r2,63
  802060:	e0bffc17 	ldw	r2,-16(fp)
  802064:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  802068:	e0bffc17 	ldw	r2,-16(fp)
  80206c:	10800117 	ldw	r2,4(r2)
  802070:	10c01014 	ori	r3,r2,64
  802074:	e0bffc17 	ldw	r2,-16(fp)
  802078:	10c00115 	stw	r3,4(r2)
  80207c:	00000e06 	br	8020b8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  802080:	e0bffc17 	ldw	r2,-16(fp)
  802084:	10800017 	ldw	r2,0(r2)
  802088:	10800204 	addi	r2,r2,8
  80208c:	10800037 	ldwio	r2,0(r2)
  802090:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  802094:	e0bffd17 	ldw	r2,-12(fp)
  802098:	1082000c 	andi	r2,r2,2048
  80209c:	1000061e 	bne	r2,zero,8020b8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8020a0:	e0bffc17 	ldw	r2,-16(fp)
  8020a4:	10c00117 	ldw	r3,4(r2)
  8020a8:	00bfefc4 	movi	r2,-65
  8020ac:	1886703a 	and	r3,r3,r2
  8020b0:	e0bffc17 	ldw	r2,-16(fp)
  8020b4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8020b8:	e0bffc17 	ldw	r2,-16(fp)
  8020bc:	10c00417 	ldw	r3,16(r2)
  8020c0:	e0bffc17 	ldw	r2,-16(fp)
  8020c4:	10800517 	ldw	r2,20(r2)
  8020c8:	1880061e 	bne	r3,r2,8020e4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8020cc:	e0bffc17 	ldw	r2,-16(fp)
  8020d0:	10c00117 	ldw	r3,4(r2)
  8020d4:	00beefc4 	movi	r2,-1089
  8020d8:	1886703a 	and	r3,r3,r2
  8020dc:	e0bffc17 	ldw	r2,-16(fp)
  8020e0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8020e4:	e0bffc17 	ldw	r2,-16(fp)
  8020e8:	10800017 	ldw	r2,0(r2)
  8020ec:	10800304 	addi	r2,r2,12
  8020f0:	e0fffc17 	ldw	r3,-16(fp)
  8020f4:	18c00117 	ldw	r3,4(r3)
  8020f8:	10c00035 	stwio	r3,0(r2)
}
  8020fc:	e037883a 	mov	sp,fp
  802100:	df000017 	ldw	fp,0(sp)
  802104:	dec00104 	addi	sp,sp,4
  802108:	f800283a 	ret

0080210c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80210c:	defffd04 	addi	sp,sp,-12
  802110:	df000215 	stw	fp,8(sp)
  802114:	df000204 	addi	fp,sp,8
  802118:	e13ffe15 	stw	r4,-8(fp)
  80211c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  802120:	00000506 	br	802138 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  802124:	e0bfff17 	ldw	r2,-4(fp)
  802128:	1090000c 	andi	r2,r2,16384
  80212c:	10000226 	beq	r2,zero,802138 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  802130:	00bffd44 	movi	r2,-11
  802134:	00000606 	br	802150 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  802138:	e0bffe17 	ldw	r2,-8(fp)
  80213c:	10c00417 	ldw	r3,16(r2)
  802140:	e0bffe17 	ldw	r2,-8(fp)
  802144:	10800517 	ldw	r2,20(r2)
  802148:	18bff61e 	bne	r3,r2,802124 <__alt_data_end+0xff802124>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80214c:	0005883a 	mov	r2,zero
}
  802150:	e037883a 	mov	sp,fp
  802154:	df000017 	ldw	fp,0(sp)
  802158:	dec00104 	addi	sp,sp,4
  80215c:	f800283a 	ret

00802160 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802160:	defffe04 	addi	sp,sp,-8
  802164:	dfc00115 	stw	ra,4(sp)
  802168:	df000015 	stw	fp,0(sp)
  80216c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802170:	008020b4 	movhi	r2,130
  802174:	10b84904 	addi	r2,r2,-7900
  802178:	10800017 	ldw	r2,0(r2)
  80217c:	10000526 	beq	r2,zero,802194 <alt_get_errno+0x34>
  802180:	008020b4 	movhi	r2,130
  802184:	10b84904 	addi	r2,r2,-7900
  802188:	10800017 	ldw	r2,0(r2)
  80218c:	103ee83a 	callr	r2
  802190:	00000206 	br	80219c <alt_get_errno+0x3c>
  802194:	008020b4 	movhi	r2,130
  802198:	10bfbc04 	addi	r2,r2,-272
}
  80219c:	e037883a 	mov	sp,fp
  8021a0:	dfc00117 	ldw	ra,4(sp)
  8021a4:	df000017 	ldw	fp,0(sp)
  8021a8:	dec00204 	addi	sp,sp,8
  8021ac:	f800283a 	ret

008021b0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8021b0:	defff204 	addi	sp,sp,-56
  8021b4:	dfc00d15 	stw	ra,52(sp)
  8021b8:	df000c15 	stw	fp,48(sp)
  8021bc:	df000c04 	addi	fp,sp,48
  8021c0:	e13ffc15 	stw	r4,-16(fp)
  8021c4:	e17ffd15 	stw	r5,-12(fp)
  8021c8:	e1bffe15 	stw	r6,-8(fp)
  8021cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  8021d0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  8021d4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8021d8:	e0bfff17 	ldw	r2,-4(fp)
  8021dc:	1090000c 	andi	r2,r2,16384
  8021e0:	1005003a 	cmpeq	r2,r2,zero
  8021e4:	10803fcc 	andi	r2,r2,255
  8021e8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8021ec:	00001306 	br	80223c <altera_avalon_uart_read+0x8c>
    {
      count++;
  8021f0:	e0bff517 	ldw	r2,-44(fp)
  8021f4:	10800044 	addi	r2,r2,1
  8021f8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8021fc:	e0bffd17 	ldw	r2,-12(fp)
  802200:	10c00044 	addi	r3,r2,1
  802204:	e0fffd15 	stw	r3,-12(fp)
  802208:	e0fffc17 	ldw	r3,-16(fp)
  80220c:	18c00217 	ldw	r3,8(r3)
  802210:	e13ffc17 	ldw	r4,-16(fp)
  802214:	20c7883a 	add	r3,r4,r3
  802218:	18c00704 	addi	r3,r3,28
  80221c:	18c00003 	ldbu	r3,0(r3)
  802220:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  802224:	e0bffc17 	ldw	r2,-16(fp)
  802228:	10800217 	ldw	r2,8(r2)
  80222c:	10800044 	addi	r2,r2,1
  802230:	10c00fcc 	andi	r3,r2,63
  802234:	e0bffc17 	ldw	r2,-16(fp)
  802238:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80223c:	e0fff517 	ldw	r3,-44(fp)
  802240:	e0bffe17 	ldw	r2,-8(fp)
  802244:	1880050e 	bge	r3,r2,80225c <altera_avalon_uart_read+0xac>
  802248:	e0bffc17 	ldw	r2,-16(fp)
  80224c:	10c00217 	ldw	r3,8(r2)
  802250:	e0bffc17 	ldw	r2,-16(fp)
  802254:	10800317 	ldw	r2,12(r2)
  802258:	18bfe51e 	bne	r3,r2,8021f0 <__alt_data_end+0xff8021f0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80225c:	e0bff517 	ldw	r2,-44(fp)
  802260:	1000251e 	bne	r2,zero,8022f8 <altera_avalon_uart_read+0x148>
  802264:	e0bffc17 	ldw	r2,-16(fp)
  802268:	10c00217 	ldw	r3,8(r2)
  80226c:	e0bffc17 	ldw	r2,-16(fp)
  802270:	10800317 	ldw	r2,12(r2)
  802274:	1880201e 	bne	r3,r2,8022f8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  802278:	e0bff617 	ldw	r2,-40(fp)
  80227c:	1000071e 	bne	r2,zero,80229c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  802280:	08021600 	call	802160 <alt_get_errno>
  802284:	1007883a 	mov	r3,r2
  802288:	008002c4 	movi	r2,11
  80228c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  802290:	00800044 	movi	r2,1
  802294:	e0bff405 	stb	r2,-48(fp)
        break;
  802298:	00001b06 	br	802308 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80229c:	0005303a 	rdctl	r2,status
  8022a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8022a4:	e0fff817 	ldw	r3,-32(fp)
  8022a8:	00bfff84 	movi	r2,-2
  8022ac:	1884703a 	and	r2,r3,r2
  8022b0:	1001703a 	wrctl	status,r2
  
  return context;
  8022b4:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8022b8:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8022bc:	e0bffc17 	ldw	r2,-16(fp)
  8022c0:	10800117 	ldw	r2,4(r2)
  8022c4:	10c02014 	ori	r3,r2,128
  8022c8:	e0bffc17 	ldw	r2,-16(fp)
  8022cc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8022d0:	e0bffc17 	ldw	r2,-16(fp)
  8022d4:	10800017 	ldw	r2,0(r2)
  8022d8:	10800304 	addi	r2,r2,12
  8022dc:	e0fffc17 	ldw	r3,-16(fp)
  8022e0:	18c00117 	ldw	r3,4(r3)
  8022e4:	10c00035 	stwio	r3,0(r2)
  8022e8:	e0bff717 	ldw	r2,-36(fp)
  8022ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8022f0:	e0bff917 	ldw	r2,-28(fp)
  8022f4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8022f8:	e0bff517 	ldw	r2,-44(fp)
  8022fc:	1000021e 	bne	r2,zero,802308 <altera_avalon_uart_read+0x158>
  802300:	e0bffe17 	ldw	r2,-8(fp)
  802304:	103fb91e 	bne	r2,zero,8021ec <__alt_data_end+0xff8021ec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802308:	0005303a 	rdctl	r2,status
  80230c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802310:	e0fffa17 	ldw	r3,-24(fp)
  802314:	00bfff84 	movi	r2,-2
  802318:	1884703a 	and	r2,r3,r2
  80231c:	1001703a 	wrctl	status,r2
  
  return context;
  802320:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  802324:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802328:	e0bffc17 	ldw	r2,-16(fp)
  80232c:	10800117 	ldw	r2,4(r2)
  802330:	10c02014 	ori	r3,r2,128
  802334:	e0bffc17 	ldw	r2,-16(fp)
  802338:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80233c:	e0bffc17 	ldw	r2,-16(fp)
  802340:	10800017 	ldw	r2,0(r2)
  802344:	10800304 	addi	r2,r2,12
  802348:	e0fffc17 	ldw	r3,-16(fp)
  80234c:	18c00117 	ldw	r3,4(r3)
  802350:	10c00035 	stwio	r3,0(r2)
  802354:	e0bff717 	ldw	r2,-36(fp)
  802358:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80235c:	e0bffb17 	ldw	r2,-20(fp)
  802360:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  802364:	e0bff403 	ldbu	r2,-48(fp)
  802368:	10000226 	beq	r2,zero,802374 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80236c:	00bffd44 	movi	r2,-11
  802370:	00000106 	br	802378 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  802374:	e0bff517 	ldw	r2,-44(fp)
  }
}
  802378:	e037883a 	mov	sp,fp
  80237c:	dfc00117 	ldw	ra,4(sp)
  802380:	df000017 	ldw	fp,0(sp)
  802384:	dec00204 	addi	sp,sp,8
  802388:	f800283a 	ret

0080238c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80238c:	defffe04 	addi	sp,sp,-8
  802390:	dfc00115 	stw	ra,4(sp)
  802394:	df000015 	stw	fp,0(sp)
  802398:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80239c:	008020b4 	movhi	r2,130
  8023a0:	10b84904 	addi	r2,r2,-7900
  8023a4:	10800017 	ldw	r2,0(r2)
  8023a8:	10000526 	beq	r2,zero,8023c0 <alt_get_errno+0x34>
  8023ac:	008020b4 	movhi	r2,130
  8023b0:	10b84904 	addi	r2,r2,-7900
  8023b4:	10800017 	ldw	r2,0(r2)
  8023b8:	103ee83a 	callr	r2
  8023bc:	00000206 	br	8023c8 <alt_get_errno+0x3c>
  8023c0:	008020b4 	movhi	r2,130
  8023c4:	10bfbc04 	addi	r2,r2,-272
}
  8023c8:	e037883a 	mov	sp,fp
  8023cc:	dfc00117 	ldw	ra,4(sp)
  8023d0:	df000017 	ldw	fp,0(sp)
  8023d4:	dec00204 	addi	sp,sp,8
  8023d8:	f800283a 	ret

008023dc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8023dc:	defff204 	addi	sp,sp,-56
  8023e0:	dfc00d15 	stw	ra,52(sp)
  8023e4:	df000c15 	stw	fp,48(sp)
  8023e8:	df000c04 	addi	fp,sp,48
  8023ec:	e13ffc15 	stw	r4,-16(fp)
  8023f0:	e17ffd15 	stw	r5,-12(fp)
  8023f4:	e1bffe15 	stw	r6,-8(fp)
  8023f8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8023fc:	e0bffe17 	ldw	r2,-8(fp)
  802400:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  802404:	e0bfff17 	ldw	r2,-4(fp)
  802408:	1090000c 	andi	r2,r2,16384
  80240c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  802410:	00003c06 	br	802504 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802414:	e0bffc17 	ldw	r2,-16(fp)
  802418:	10800517 	ldw	r2,20(r2)
  80241c:	10800044 	addi	r2,r2,1
  802420:	10800fcc 	andi	r2,r2,63
  802424:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  802428:	e0bffc17 	ldw	r2,-16(fp)
  80242c:	10c00417 	ldw	r3,16(r2)
  802430:	e0bff617 	ldw	r2,-40(fp)
  802434:	1880221e 	bne	r3,r2,8024c0 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  802438:	e0bff517 	ldw	r2,-44(fp)
  80243c:	10000526 	beq	r2,zero,802454 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  802440:	080238c0 	call	80238c <alt_get_errno>
  802444:	1007883a 	mov	r3,r2
  802448:	008002c4 	movi	r2,11
  80244c:	18800015 	stw	r2,0(r3)
        break;
  802450:	00002e06 	br	80250c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802454:	0005303a 	rdctl	r2,status
  802458:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80245c:	e0fff817 	ldw	r3,-32(fp)
  802460:	00bfff84 	movi	r2,-2
  802464:	1884703a 	and	r2,r3,r2
  802468:	1001703a 	wrctl	status,r2
  
  return context;
  80246c:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  802470:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  802474:	e0bffc17 	ldw	r2,-16(fp)
  802478:	10800117 	ldw	r2,4(r2)
  80247c:	10c11014 	ori	r3,r2,1088
  802480:	e0bffc17 	ldw	r2,-16(fp)
  802484:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802488:	e0bffc17 	ldw	r2,-16(fp)
  80248c:	10800017 	ldw	r2,0(r2)
  802490:	10800304 	addi	r2,r2,12
  802494:	e0fffc17 	ldw	r3,-16(fp)
  802498:	18c00117 	ldw	r3,4(r3)
  80249c:	10c00035 	stwio	r3,0(r2)
  8024a0:	e0bff717 	ldw	r2,-36(fp)
  8024a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8024a8:	e0bff917 	ldw	r2,-28(fp)
  8024ac:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  8024b0:	e0bffc17 	ldw	r2,-16(fp)
  8024b4:	10c00417 	ldw	r3,16(r2)
  8024b8:	e0bff617 	ldw	r2,-40(fp)
  8024bc:	18bffc26 	beq	r3,r2,8024b0 <__alt_data_end+0xff8024b0>
      }
    }

    count--;
  8024c0:	e0bff417 	ldw	r2,-48(fp)
  8024c4:	10bfffc4 	addi	r2,r2,-1
  8024c8:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  8024cc:	e0bffc17 	ldw	r2,-16(fp)
  8024d0:	10c00517 	ldw	r3,20(r2)
  8024d4:	e0bffd17 	ldw	r2,-12(fp)
  8024d8:	11000044 	addi	r4,r2,1
  8024dc:	e13ffd15 	stw	r4,-12(fp)
  8024e0:	10800003 	ldbu	r2,0(r2)
  8024e4:	1009883a 	mov	r4,r2
  8024e8:	e0bffc17 	ldw	r2,-16(fp)
  8024ec:	10c5883a 	add	r2,r2,r3
  8024f0:	10801704 	addi	r2,r2,92
  8024f4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  8024f8:	e0bffc17 	ldw	r2,-16(fp)
  8024fc:	e0fff617 	ldw	r3,-40(fp)
  802500:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  802504:	e0bff417 	ldw	r2,-48(fp)
  802508:	103fc21e 	bne	r2,zero,802414 <__alt_data_end+0xff802414>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80250c:	0005303a 	rdctl	r2,status
  802510:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802514:	e0fffa17 	ldw	r3,-24(fp)
  802518:	00bfff84 	movi	r2,-2
  80251c:	1884703a 	and	r2,r3,r2
  802520:	1001703a 	wrctl	status,r2
  
  return context;
  802524:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  802528:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80252c:	e0bffc17 	ldw	r2,-16(fp)
  802530:	10800117 	ldw	r2,4(r2)
  802534:	10c11014 	ori	r3,r2,1088
  802538:	e0bffc17 	ldw	r2,-16(fp)
  80253c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802540:	e0bffc17 	ldw	r2,-16(fp)
  802544:	10800017 	ldw	r2,0(r2)
  802548:	10800304 	addi	r2,r2,12
  80254c:	e0fffc17 	ldw	r3,-16(fp)
  802550:	18c00117 	ldw	r3,4(r3)
  802554:	10c00035 	stwio	r3,0(r2)
  802558:	e0bff717 	ldw	r2,-36(fp)
  80255c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802560:	e0bffb17 	ldw	r2,-20(fp)
  802564:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  802568:	e0fffe17 	ldw	r3,-8(fp)
  80256c:	e0bff417 	ldw	r2,-48(fp)
  802570:	1885c83a 	sub	r2,r3,r2
}
  802574:	e037883a 	mov	sp,fp
  802578:	dfc00117 	ldw	ra,4(sp)
  80257c:	df000017 	ldw	fp,0(sp)
  802580:	dec00204 	addi	sp,sp,8
  802584:	f800283a 	ret

00802588 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  802588:	defffc04 	addi	sp,sp,-16
  80258c:	dfc00315 	stw	ra,12(sp)
  802590:	df000215 	stw	fp,8(sp)
  802594:	df000204 	addi	fp,sp,8
  802598:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  80259c:	e13fff17 	ldw	r4,-4(fp)
  8025a0:	014020b4 	movhi	r5,130
  8025a4:	29784604 	addi	r5,r5,-7912
  8025a8:	081a1a00 	call	81a1a0 <alt_find_dev>
  8025ac:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  8025b0:	e0bffe17 	ldw	r2,-8(fp)
}
  8025b4:	e037883a 	mov	sp,fp
  8025b8:	dfc00117 	ldw	ra,4(sp)
  8025bc:	df000017 	ldw	fp,0(sp)
  8025c0:	dec00204 	addi	sp,sp,8
  8025c4:	f800283a 	ret

008025c8 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  8025c8:	defffd04 	addi	sp,sp,-12
  8025cc:	df000215 	stw	fp,8(sp)
  8025d0:	df000204 	addi	fp,sp,8
  8025d4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8025d8:	e0bfff17 	ldw	r2,-4(fp)
  8025dc:	10800a17 	ldw	r2,40(r2)
  8025e0:	10800037 	ldwio	r2,0(r2)
  8025e4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  8025e8:	e0bffe17 	ldw	r2,-8(fp)
  8025ec:	10800054 	ori	r2,r2,1
  8025f0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8025f4:	e0bfff17 	ldw	r2,-4(fp)
  8025f8:	10800a17 	ldw	r2,40(r2)
  8025fc:	1007883a 	mov	r3,r2
  802600:	e0bffe17 	ldw	r2,-8(fp)
  802604:	18800035 	stwio	r2,0(r3)
}
  802608:	e037883a 	mov	sp,fp
  80260c:	df000017 	ldw	fp,0(sp)
  802610:	dec00104 	addi	sp,sp,4
  802614:	f800283a 	ret

00802618 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  802618:	defffd04 	addi	sp,sp,-12
  80261c:	df000215 	stw	fp,8(sp)
  802620:	df000204 	addi	fp,sp,8
  802624:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  802628:	e0bfff17 	ldw	r2,-4(fp)
  80262c:	10800a17 	ldw	r2,40(r2)
  802630:	10800037 	ldwio	r2,0(r2)
  802634:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  802638:	e0fffe17 	ldw	r3,-8(fp)
  80263c:	00bfff84 	movi	r2,-2
  802640:	1884703a 	and	r2,r3,r2
  802644:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  802648:	e0bfff17 	ldw	r2,-4(fp)
  80264c:	10800a17 	ldw	r2,40(r2)
  802650:	1007883a 	mov	r3,r2
  802654:	e0bffe17 	ldw	r2,-8(fp)
  802658:	18800035 	stwio	r2,0(r3)
}
  80265c:	e037883a 	mov	sp,fp
  802660:	df000017 	ldw	fp,0(sp)
  802664:	dec00104 	addi	sp,sp,4
  802668:	f800283a 	ret

0080266c <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  80266c:	defffd04 	addi	sp,sp,-12
  802670:	df000215 	stw	fp,8(sp)
  802674:	df000204 	addi	fp,sp,8
  802678:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80267c:	e0bfff17 	ldw	r2,-4(fp)
  802680:	10800a17 	ldw	r2,40(r2)
  802684:	10800037 	ldwio	r2,0(r2)
  802688:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  80268c:	e0bffe17 	ldw	r2,-8(fp)
  802690:	10800094 	ori	r2,r2,2
  802694:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  802698:	e0bfff17 	ldw	r2,-4(fp)
  80269c:	10800a17 	ldw	r2,40(r2)
  8026a0:	1007883a 	mov	r3,r2
  8026a4:	e0bffe17 	ldw	r2,-8(fp)
  8026a8:	18800035 	stwio	r2,0(r3)
}
  8026ac:	e037883a 	mov	sp,fp
  8026b0:	df000017 	ldw	fp,0(sp)
  8026b4:	dec00104 	addi	sp,sp,4
  8026b8:	f800283a 	ret

008026bc <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  8026bc:	defffd04 	addi	sp,sp,-12
  8026c0:	df000215 	stw	fp,8(sp)
  8026c4:	df000204 	addi	fp,sp,8
  8026c8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8026cc:	e0bfff17 	ldw	r2,-4(fp)
  8026d0:	10800a17 	ldw	r2,40(r2)
  8026d4:	10800037 	ldwio	r2,0(r2)
  8026d8:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  8026dc:	e0fffe17 	ldw	r3,-8(fp)
  8026e0:	00bfff44 	movi	r2,-3
  8026e4:	1884703a 	and	r2,r3,r2
  8026e8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8026ec:	e0bfff17 	ldw	r2,-4(fp)
  8026f0:	10800a17 	ldw	r2,40(r2)
  8026f4:	1007883a 	mov	r3,r2
  8026f8:	e0bffe17 	ldw	r2,-8(fp)
  8026fc:	18800035 	stwio	r2,0(r3)
}
  802700:	e037883a 	mov	sp,fp
  802704:	df000017 	ldw	fp,0(sp)
  802708:	dec00104 	addi	sp,sp,4
  80270c:	f800283a 	ret

00802710 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  802710:	defffd04 	addi	sp,sp,-12
  802714:	df000215 	stw	fp,8(sp)
  802718:	df000204 	addi	fp,sp,8
  80271c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  802720:	e0bfff17 	ldw	r2,-4(fp)
  802724:	10800a17 	ldw	r2,40(r2)
  802728:	10800037 	ldwio	r2,0(r2)
  80272c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  802730:	e0bffe17 	ldw	r2,-8(fp)
  802734:	1080400c 	andi	r2,r2,256
  802738:	1004c03a 	cmpne	r2,r2,zero
  80273c:	10803fcc 	andi	r2,r2,255
}
  802740:	e037883a 	mov	sp,fp
  802744:	df000017 	ldw	fp,0(sp)
  802748:	dec00104 	addi	sp,sp,4
  80274c:	f800283a 	ret

00802750 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  802750:	defffd04 	addi	sp,sp,-12
  802754:	df000215 	stw	fp,8(sp)
  802758:	df000204 	addi	fp,sp,8
  80275c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  802760:	e0bfff17 	ldw	r2,-4(fp)
  802764:	10800a17 	ldw	r2,40(r2)
  802768:	10800037 	ldwio	r2,0(r2)
  80276c:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  802770:	e0bffe17 	ldw	r2,-8(fp)
  802774:	1080800c 	andi	r2,r2,512
  802778:	1004c03a 	cmpne	r2,r2,zero
  80277c:	10803fcc 	andi	r2,r2,255
}
  802780:	e037883a 	mov	sp,fp
  802784:	df000017 	ldw	fp,0(sp)
  802788:	dec00104 	addi	sp,sp,4
  80278c:	f800283a 	ret

00802790 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  802790:	defffd04 	addi	sp,sp,-12
  802794:	df000215 	stw	fp,8(sp)
  802798:	df000204 	addi	fp,sp,8
  80279c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8027a0:	e0bfff17 	ldw	r2,-4(fp)
  8027a4:	10800a17 	ldw	r2,40(r2)
  8027a8:	10800037 	ldwio	r2,0(r2)
  8027ac:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  8027b0:	e0bffe17 	ldw	r2,-8(fp)
  8027b4:	10800114 	ori	r2,r2,4
  8027b8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  8027bc:	e0bffe17 	ldw	r2,-8(fp)
  8027c0:	10800214 	ori	r2,r2,8
  8027c4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8027c8:	e0bfff17 	ldw	r2,-4(fp)
  8027cc:	10800a17 	ldw	r2,40(r2)
  8027d0:	1007883a 	mov	r3,r2
  8027d4:	e0bffe17 	ldw	r2,-8(fp)
  8027d8:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  8027dc:	e0fffe17 	ldw	r3,-8(fp)
  8027e0:	00bffec4 	movi	r2,-5
  8027e4:	1884703a 	and	r2,r3,r2
  8027e8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  8027ec:	e0fffe17 	ldw	r3,-8(fp)
  8027f0:	00bffdc4 	movi	r2,-9
  8027f4:	1884703a 	and	r2,r3,r2
  8027f8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8027fc:	e0bfff17 	ldw	r2,-4(fp)
  802800:	10800a17 	ldw	r2,40(r2)
  802804:	1007883a 	mov	r3,r2
  802808:	e0bffe17 	ldw	r2,-8(fp)
  80280c:	18800035 	stwio	r2,0(r3)
}
  802810:	e037883a 	mov	sp,fp
  802814:	df000017 	ldw	fp,0(sp)
  802818:	dec00104 	addi	sp,sp,4
  80281c:	f800283a 	ret

00802820 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  802820:	defffc04 	addi	sp,sp,-16
  802824:	df000315 	stw	fp,12(sp)
  802828:	df000304 	addi	fp,sp,12
  80282c:	e13ffe15 	stw	r4,-8(fp)
  802830:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  802834:	e0bffe17 	ldw	r2,-8(fp)
  802838:	10800a17 	ldw	r2,40(r2)
  80283c:	10800104 	addi	r2,r2,4
  802840:	10800037 	ldwio	r2,0(r2)
  802844:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
  802848:	e0bfff17 	ldw	r2,-4(fp)
  80284c:	1000041e 	bne	r2,zero,802860 <alt_up_audio_read_fifo_avail+0x40>
  802850:	e0bffd17 	ldw	r2,-12(fp)
  802854:	10bfc00c 	andi	r2,r2,65280
  802858:	1004d23a 	srli	r2,r2,8
  80285c:	00000206 	br	802868 <alt_up_audio_read_fifo_avail+0x48>
  802860:	e0bffd17 	ldw	r2,-12(fp)
  802864:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  802868:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  80286c:	e0bffd17 	ldw	r2,-12(fp)
}
  802870:	e037883a 	mov	sp,fp
  802874:	df000017 	ldw	fp,0(sp)
  802878:	dec00104 	addi	sp,sp,4
  80287c:	f800283a 	ret

00802880 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  802880:	defffa04 	addi	sp,sp,-24
  802884:	dfc00515 	stw	ra,20(sp)
  802888:	df000415 	stw	fp,16(sp)
  80288c:	df000404 	addi	fp,sp,16
  802890:	e13ffd15 	stw	r4,-12(fp)
  802894:	e17ffe15 	stw	r5,-8(fp)
  802898:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  80289c:	e13ffd17 	ldw	r4,-12(fp)
  8028a0:	01400044 	movi	r5,1
  8028a4:	08028200 	call	802820 <alt_up_audio_read_fifo_avail>
  8028a8:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  8028ac:	e0bffc17 	ldw	r2,-16(fp)
  8028b0:	10801868 	cmpgeui	r2,r2,97
  8028b4:	1000021e 	bne	r2,zero,8028c0 <alt_up_audio_record_r+0x40>
		return 0;
  8028b8:	0005883a 	mov	r2,zero
  8028bc:	00000506 	br	8028d4 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  8028c0:	e13ffd17 	ldw	r4,-12(fp)
  8028c4:	e17ffe17 	ldw	r5,-8(fp)
  8028c8:	e1bfff17 	ldw	r6,-4(fp)
  8028cc:	01c00044 	movi	r7,1
  8028d0:	0802a800 	call	802a80 <alt_up_audio_read_fifo>
}
  8028d4:	e037883a 	mov	sp,fp
  8028d8:	dfc00117 	ldw	ra,4(sp)
  8028dc:	df000017 	ldw	fp,0(sp)
  8028e0:	dec00204 	addi	sp,sp,8
  8028e4:	f800283a 	ret

008028e8 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8028e8:	defffa04 	addi	sp,sp,-24
  8028ec:	dfc00515 	stw	ra,20(sp)
  8028f0:	df000415 	stw	fp,16(sp)
  8028f4:	df000404 	addi	fp,sp,16
  8028f8:	e13ffd15 	stw	r4,-12(fp)
  8028fc:	e17ffe15 	stw	r5,-8(fp)
  802900:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  802904:	e13ffd17 	ldw	r4,-12(fp)
  802908:	000b883a 	mov	r5,zero
  80290c:	08028200 	call	802820 <alt_up_audio_read_fifo_avail>
  802910:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  802914:	e0bffc17 	ldw	r2,-16(fp)
  802918:	10801868 	cmpgeui	r2,r2,97
  80291c:	1000021e 	bne	r2,zero,802928 <alt_up_audio_record_l+0x40>
		return 0;
  802920:	0005883a 	mov	r2,zero
  802924:	00000506 	br	80293c <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  802928:	e13ffd17 	ldw	r4,-12(fp)
  80292c:	e17ffe17 	ldw	r5,-8(fp)
  802930:	e1bfff17 	ldw	r6,-4(fp)
  802934:	000f883a 	mov	r7,zero
  802938:	0802a800 	call	802a80 <alt_up_audio_read_fifo>
}
  80293c:	e037883a 	mov	sp,fp
  802940:	dfc00117 	ldw	ra,4(sp)
  802944:	df000017 	ldw	fp,0(sp)
  802948:	dec00204 	addi	sp,sp,8
  80294c:	f800283a 	ret

00802950 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  802950:	defffc04 	addi	sp,sp,-16
  802954:	df000315 	stw	fp,12(sp)
  802958:	df000304 	addi	fp,sp,12
  80295c:	e13ffe15 	stw	r4,-8(fp)
  802960:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  802964:	e0bffe17 	ldw	r2,-8(fp)
  802968:	10800a17 	ldw	r2,40(r2)
  80296c:	10800104 	addi	r2,r2,4
  802970:	10800037 	ldwio	r2,0(r2)
  802974:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  802978:	e0bfff17 	ldw	r2,-4(fp)
  80297c:	1000031e 	bne	r2,zero,80298c <alt_up_audio_write_fifo_space+0x3c>
  802980:	e0bffd17 	ldw	r2,-12(fp)
  802984:	1004d63a 	srli	r2,r2,24
  802988:	00000306 	br	802998 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  80298c:	e0bffd17 	ldw	r2,-12(fp)
  802990:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  802994:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  802998:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  80299c:	e0bffd17 	ldw	r2,-12(fp)
}
  8029a0:	e037883a 	mov	sp,fp
  8029a4:	df000017 	ldw	fp,0(sp)
  8029a8:	dec00104 	addi	sp,sp,4
  8029ac:	f800283a 	ret

008029b0 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8029b0:	defffa04 	addi	sp,sp,-24
  8029b4:	dfc00515 	stw	ra,20(sp)
  8029b8:	df000415 	stw	fp,16(sp)
  8029bc:	df000404 	addi	fp,sp,16
  8029c0:	e13ffd15 	stw	r4,-12(fp)
  8029c4:	e17ffe15 	stw	r5,-8(fp)
  8029c8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  8029cc:	e13ffd17 	ldw	r4,-12(fp)
  8029d0:	01400044 	movi	r5,1
  8029d4:	08029500 	call	802950 <alt_up_audio_write_fifo_space>
  8029d8:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  8029dc:	e0bffc17 	ldw	r2,-16(fp)
  8029e0:	10801868 	cmpgeui	r2,r2,97
  8029e4:	1000021e 	bne	r2,zero,8029f0 <alt_up_audio_play_r+0x40>
		return 0;
  8029e8:	0005883a 	mov	r2,zero
  8029ec:	00000506 	br	802a04 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  8029f0:	e13ffd17 	ldw	r4,-12(fp)
  8029f4:	e17ffe17 	ldw	r5,-8(fp)
  8029f8:	e1bfff17 	ldw	r6,-4(fp)
  8029fc:	01c00044 	movi	r7,1
  802a00:	0802b600 	call	802b60 <alt_up_audio_write_fifo>
}
  802a04:	e037883a 	mov	sp,fp
  802a08:	dfc00117 	ldw	ra,4(sp)
  802a0c:	df000017 	ldw	fp,0(sp)
  802a10:	dec00204 	addi	sp,sp,8
  802a14:	f800283a 	ret

00802a18 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  802a18:	defffa04 	addi	sp,sp,-24
  802a1c:	dfc00515 	stw	ra,20(sp)
  802a20:	df000415 	stw	fp,16(sp)
  802a24:	df000404 	addi	fp,sp,16
  802a28:	e13ffd15 	stw	r4,-12(fp)
  802a2c:	e17ffe15 	stw	r5,-8(fp)
  802a30:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  802a34:	e13ffd17 	ldw	r4,-12(fp)
  802a38:	000b883a 	mov	r5,zero
  802a3c:	08029500 	call	802950 <alt_up_audio_write_fifo_space>
  802a40:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  802a44:	e0bffc17 	ldw	r2,-16(fp)
  802a48:	10801868 	cmpgeui	r2,r2,97
  802a4c:	1000021e 	bne	r2,zero,802a58 <alt_up_audio_play_l+0x40>
		return 0;
  802a50:	0005883a 	mov	r2,zero
  802a54:	00000506 	br	802a6c <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  802a58:	e13ffd17 	ldw	r4,-12(fp)
  802a5c:	e17ffe17 	ldw	r5,-8(fp)
  802a60:	e1bfff17 	ldw	r6,-4(fp)
  802a64:	000f883a 	mov	r7,zero
  802a68:	0802b600 	call	802b60 <alt_up_audio_write_fifo>
}
  802a6c:	e037883a 	mov	sp,fp
  802a70:	dfc00117 	ldw	ra,4(sp)
  802a74:	df000017 	ldw	fp,0(sp)
  802a78:	dec00204 	addi	sp,sp,8
  802a7c:	f800283a 	ret

00802a80 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  802a80:	defff904 	addi	sp,sp,-28
  802a84:	df000615 	stw	fp,24(sp)
  802a88:	df000604 	addi	fp,sp,24
  802a8c:	e13ffc15 	stw	r4,-16(fp)
  802a90:	e17ffd15 	stw	r5,-12(fp)
  802a94:	e1bffe15 	stw	r6,-8(fp)
  802a98:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  802a9c:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  802aa0:	00002706 	br	802b40 <alt_up_audio_read_fifo+0xc0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  802aa4:	e0bffc17 	ldw	r2,-16(fp)
  802aa8:	10800a17 	ldw	r2,40(r2)
  802aac:	10800104 	addi	r2,r2,4
  802ab0:	10800037 	ldwio	r2,0(r2)
  802ab4:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
  802ab8:	e0bfff17 	ldw	r2,-4(fp)
  802abc:	1000041e 	bne	r2,zero,802ad0 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
  802ac0:	e0bffb17 	ldw	r2,-20(fp)
  802ac4:	10bfc00c 	andi	r2,r2,65280
			:
  802ac8:	1004d23a 	srli	r2,r2,8
  802acc:	00000206 	br	802ad8 <alt_up_audio_read_fifo+0x58>
  802ad0:	e0bffb17 	ldw	r2,-20(fp)
  802ad4:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  802ad8:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  802adc:	e0bffb17 	ldw	r2,-20(fp)
  802ae0:	10001626 	beq	r2,zero,802b3c <alt_up_audio_read_fifo+0xbc>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  802ae4:	e0bffa17 	ldw	r2,-24(fp)
  802ae8:	1085883a 	add	r2,r2,r2
  802aec:	1085883a 	add	r2,r2,r2
  802af0:	1007883a 	mov	r3,r2
  802af4:	e0bffd17 	ldw	r2,-12(fp)
  802af8:	10c5883a 	add	r2,r2,r3
  802afc:	e0ffff17 	ldw	r3,-4(fp)
  802b00:	1800051e 	bne	r3,zero,802b18 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  802b04:	e0fffc17 	ldw	r3,-16(fp)
  802b08:	18c00a17 	ldw	r3,40(r3)
  802b0c:	18c00204 	addi	r3,r3,8
  802b10:	18c00037 	ldwio	r3,0(r3)
  802b14:	00000406 	br	802b28 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
  802b18:	e0fffc17 	ldw	r3,-16(fp)
  802b1c:	18c00a17 	ldw	r3,40(r3)
  802b20:	18c00304 	addi	r3,r3,12
  802b24:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  802b28:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  802b2c:	e0bffa17 	ldw	r2,-24(fp)
  802b30:	10800044 	addi	r2,r2,1
  802b34:	e0bffa15 	stw	r2,-24(fp)
  802b38:	00000106 	br	802b40 <alt_up_audio_read_fifo+0xc0>
		}
		else
		{
			// no more data to read
			break;
  802b3c:	00000306 	br	802b4c <alt_up_audio_read_fifo+0xcc>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  802b40:	e0fffa17 	ldw	r3,-24(fp)
  802b44:	e0bffe17 	ldw	r2,-8(fp)
  802b48:	18bfd616 	blt	r3,r2,802aa4 <__alt_data_end+0xff802aa4>
		{
			// no more data to read
			break;
		}
	}
	return count;
  802b4c:	e0bffa17 	ldw	r2,-24(fp)
}
  802b50:	e037883a 	mov	sp,fp
  802b54:	df000017 	ldw	fp,0(sp)
  802b58:	dec00104 	addi	sp,sp,4
  802b5c:	f800283a 	ret

00802b60 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  802b60:	defff904 	addi	sp,sp,-28
  802b64:	df000615 	stw	fp,24(sp)
  802b68:	df000604 	addi	fp,sp,24
  802b6c:	e13ffc15 	stw	r4,-16(fp)
  802b70:	e17ffd15 	stw	r5,-12(fp)
  802b74:	e1bffe15 	stw	r6,-8(fp)
  802b78:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  802b7c:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  802b80:	00003106 	br	802c48 <alt_up_audio_write_fifo+0xe8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  802b84:	e0bffc17 	ldw	r2,-16(fp)
  802b88:	10800a17 	ldw	r2,40(r2)
  802b8c:	10800104 	addi	r2,r2,4
  802b90:	10800037 	ldwio	r2,0(r2)
  802b94:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  802b98:	e0bfff17 	ldw	r2,-4(fp)
  802b9c:	1000031e 	bne	r2,zero,802bac <alt_up_audio_write_fifo+0x4c>
  802ba0:	e0bffb17 	ldw	r2,-20(fp)
  802ba4:	1004d63a 	srli	r2,r2,24
  802ba8:	00000306 	br	802bb8 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  802bac:	e0bffb17 	ldw	r2,-20(fp)
  802bb0:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  802bb4:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  802bb8:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  802bbc:	e0bffb17 	ldw	r2,-20(fp)
  802bc0:	10002026 	beq	r2,zero,802c44 <alt_up_audio_write_fifo+0xe4>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  802bc4:	e0bfff17 	ldw	r2,-4(fp)
  802bc8:	10000f1e 	bne	r2,zero,802c08 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  802bcc:	e0bffc17 	ldw	r2,-16(fp)
  802bd0:	10800a17 	ldw	r2,40(r2)
  802bd4:	10800204 	addi	r2,r2,8
  802bd8:	1009883a 	mov	r4,r2
  802bdc:	e0bffa17 	ldw	r2,-24(fp)
  802be0:	10c00044 	addi	r3,r2,1
  802be4:	e0fffa15 	stw	r3,-24(fp)
  802be8:	1085883a 	add	r2,r2,r2
  802bec:	1085883a 	add	r2,r2,r2
  802bf0:	1007883a 	mov	r3,r2
  802bf4:	e0bffd17 	ldw	r2,-12(fp)
  802bf8:	10c5883a 	add	r2,r2,r3
  802bfc:	10800017 	ldw	r2,0(r2)
  802c00:	20800035 	stwio	r2,0(r4)
  802c04:	00001006 	br	802c48 <alt_up_audio_write_fifo+0xe8>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  802c08:	e0bffc17 	ldw	r2,-16(fp)
  802c0c:	10800a17 	ldw	r2,40(r2)
  802c10:	10800304 	addi	r2,r2,12
  802c14:	1009883a 	mov	r4,r2
  802c18:	e0bffa17 	ldw	r2,-24(fp)
  802c1c:	10c00044 	addi	r3,r2,1
  802c20:	e0fffa15 	stw	r3,-24(fp)
  802c24:	1085883a 	add	r2,r2,r2
  802c28:	1085883a 	add	r2,r2,r2
  802c2c:	1007883a 	mov	r3,r2
  802c30:	e0bffd17 	ldw	r2,-12(fp)
  802c34:	10c5883a 	add	r2,r2,r3
  802c38:	10800017 	ldw	r2,0(r2)
  802c3c:	20800035 	stwio	r2,0(r4)
  802c40:	00000106 	br	802c48 <alt_up_audio_write_fifo+0xe8>
		}
		else
		{
			// no more space to write
			break;
  802c44:	00000306 	br	802c54 <alt_up_audio_write_fifo+0xf4>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  802c48:	e0fffa17 	ldw	r3,-24(fp)
  802c4c:	e0bffe17 	ldw	r2,-8(fp)
  802c50:	18bfcc16 	blt	r3,r2,802b84 <__alt_data_end+0xff802b84>
		{
			// no more space to write
			break;
		}
	}
	return count;
  802c54:	e0bffa17 	ldw	r2,-24(fp)
}
  802c58:	e037883a 	mov	sp,fp
  802c5c:	df000017 	ldw	fp,0(sp)
  802c60:	dec00104 	addi	sp,sp,4
  802c64:	f800283a 	ret

00802c68 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  802c68:	defffd04 	addi	sp,sp,-12
  802c6c:	df000215 	stw	fp,8(sp)
  802c70:	df000204 	addi	fp,sp,8
  802c74:	e13ffe15 	stw	r4,-8(fp)
  802c78:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  802c7c:	e0bfff17 	ldw	r2,-4(fp)
  802c80:	1000051e 	bne	r2,zero,802c98 <alt_up_audio_read_fifo_head+0x30>
  802c84:	e0bffe17 	ldw	r2,-8(fp)
  802c88:	10800a17 	ldw	r2,40(r2)
  802c8c:	10800204 	addi	r2,r2,8
  802c90:	10800037 	ldwio	r2,0(r2)
  802c94:	00000406 	br	802ca8 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
  802c98:	e0bffe17 	ldw	r2,-8(fp)
  802c9c:	10800a17 	ldw	r2,40(r2)
  802ca0:	10800304 	addi	r2,r2,12
  802ca4:	10800037 	ldwio	r2,0(r2)
}
  802ca8:	e037883a 	mov	sp,fp
  802cac:	df000017 	ldw	fp,0(sp)
  802cb0:	dec00104 	addi	sp,sp,4
  802cb4:	f800283a 	ret

00802cb8 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  802cb8:	defffc04 	addi	sp,sp,-16
  802cbc:	df000315 	stw	fp,12(sp)
  802cc0:	df000304 	addi	fp,sp,12
  802cc4:	e13ffd15 	stw	r4,-12(fp)
  802cc8:	e17ffe15 	stw	r5,-8(fp)
  802ccc:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  802cd0:	e0bfff17 	ldw	r2,-4(fp)
  802cd4:	1000071e 	bne	r2,zero,802cf4 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  802cd8:	e0bffd17 	ldw	r2,-12(fp)
  802cdc:	10800a17 	ldw	r2,40(r2)
  802ce0:	10800204 	addi	r2,r2,8
  802ce4:	1007883a 	mov	r3,r2
  802ce8:	e0bffe17 	ldw	r2,-8(fp)
  802cec:	18800035 	stwio	r2,0(r3)
  802cf0:	00000606 	br	802d0c <alt_up_audio_write_fifo_head+0x54>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  802cf4:	e0bffd17 	ldw	r2,-12(fp)
  802cf8:	10800a17 	ldw	r2,40(r2)
  802cfc:	10800304 	addi	r2,r2,12
  802d00:	1007883a 	mov	r3,r2
  802d04:	e0bffe17 	ldw	r2,-8(fp)
  802d08:	18800035 	stwio	r2,0(r3)
}
  802d0c:	e037883a 	mov	sp,fp
  802d10:	df000017 	ldw	fp,0(sp)
  802d14:	dec00104 	addi	sp,sp,4
  802d18:	f800283a 	ret

00802d1c <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  802d1c:	defffc04 	addi	sp,sp,-16
  802d20:	dfc00315 	stw	ra,12(sp)
  802d24:	df000215 	stw	fp,8(sp)
  802d28:	df000204 	addi	fp,sp,8
  802d2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  802d30:	e13fff17 	ldw	r4,-4(fp)
  802d34:	014020b4 	movhi	r5,130
  802d38:	29784604 	addi	r5,r5,-7912
  802d3c:	081a1a00 	call	81a1a0 <alt_find_dev>
  802d40:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  802d44:	e0bffe17 	ldw	r2,-8(fp)
  802d48:	10800a17 	ldw	r2,40(r2)
  802d4c:	10800104 	addi	r2,r2,4
  802d50:	10800037 	ldwio	r2,0(r2)
  802d54:	10803fec 	andhi	r2,r2,255
  802d58:	1005d43a 	srai	r2,r2,16
  802d5c:	1007883a 	mov	r3,r2
  802d60:	e0bffe17 	ldw	r2,-8(fp)
  802d64:	10c00b15 	stw	r3,44(r2)

  return dev;
  802d68:	e0bffe17 	ldw	r2,-8(fp)
}
  802d6c:	e037883a 	mov	sp,fp
  802d70:	dfc00117 	ldw	ra,4(sp)
  802d74:	df000017 	ldw	fp,0(sp)
  802d78:	dec00204 	addi	sp,sp,8
  802d7c:	f800283a 	ret

00802d80 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  802d80:	defffc04 	addi	sp,sp,-16
  802d84:	df000315 	stw	fp,12(sp)
  802d88:	df000304 	addi	fp,sp,12
  802d8c:	e13ffd15 	stw	r4,-12(fp)
  802d90:	e17ffe15 	stw	r5,-8(fp)
  802d94:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  802d98:	e0bffd17 	ldw	r2,-12(fp)
  802d9c:	10800a17 	ldw	r2,40(r2)
  802da0:	10800204 	addi	r2,r2,8
  802da4:	1007883a 	mov	r3,r2
  802da8:	e0bffe17 	ldw	r2,-8(fp)
  802dac:	10803fcc 	andi	r2,r2,255
  802db0:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  802db4:	e0bffd17 	ldw	r2,-12(fp)
  802db8:	10800a17 	ldw	r2,40(r2)
  802dbc:	10800304 	addi	r2,r2,12
  802dc0:	1007883a 	mov	r3,r2
  802dc4:	e0bfff17 	ldw	r2,-4(fp)
  802dc8:	10bfffcc 	andi	r2,r2,65535
  802dcc:	18800035 	stwio	r2,0(r3)

	return 0;
  802dd0:	0005883a 	mov	r2,zero
}
  802dd4:	e037883a 	mov	sp,fp
  802dd8:	df000017 	ldw	fp,0(sp)
  802ddc:	dec00104 	addi	sp,sp,4
  802de0:	f800283a 	ret

00802de4 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  802de4:	defffb04 	addi	sp,sp,-20
  802de8:	dfc00415 	stw	ra,16(sp)
  802dec:	df000315 	stw	fp,12(sp)
  802df0:	df000304 	addi	fp,sp,12
  802df4:	e13ffd15 	stw	r4,-12(fp)
  802df8:	e17ffe15 	stw	r5,-8(fp)
  802dfc:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  802e00:	e0bffd17 	ldw	r2,-12(fp)
  802e04:	10800a17 	ldw	r2,40(r2)
  802e08:	10800204 	addi	r2,r2,8
  802e0c:	1007883a 	mov	r3,r2
  802e10:	e0bffe17 	ldw	r2,-8(fp)
  802e14:	10803fcc 	andi	r2,r2,255
  802e18:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  802e1c:	e0bffd17 	ldw	r2,-12(fp)
  802e20:	10800a17 	ldw	r2,40(r2)
  802e24:	10800304 	addi	r2,r2,12
  802e28:	10800037 	ldwio	r2,0(r2)
  802e2c:	1007883a 	mov	r3,r2
  802e30:	e0bfff17 	ldw	r2,-4(fp)
  802e34:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  802e38:	e13ffd17 	ldw	r4,-12(fp)
  802e3c:	0802f080 	call	802f08 <alt_up_av_config_read_acknowledge>
  802e40:	10000226 	beq	r2,zero,802e4c <alt_up_av_config_read_data+0x68>
		return -1;
  802e44:	00bfffc4 	movi	r2,-1
  802e48:	00000106 	br	802e50 <alt_up_av_config_read_data+0x6c>

	return 0;
  802e4c:	0005883a 	mov	r2,zero
}
  802e50:	e037883a 	mov	sp,fp
  802e54:	dfc00117 	ldw	ra,4(sp)
  802e58:	df000017 	ldw	fp,0(sp)
  802e5c:	dec00204 	addi	sp,sp,8
  802e60:	f800283a 	ret

00802e64 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  802e64:	defffe04 	addi	sp,sp,-8
  802e68:	df000115 	stw	fp,4(sp)
  802e6c:	df000104 	addi	fp,sp,4
  802e70:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  802e74:	e0bfff17 	ldw	r2,-4(fp)
  802e78:	10800a17 	ldw	r2,40(r2)
  802e7c:	1007883a 	mov	r3,r2
  802e80:	00800044 	movi	r2,1
  802e84:	18800025 	stbio	r2,0(r3)
	return 0;
  802e88:	0005883a 	mov	r2,zero
}
  802e8c:	e037883a 	mov	sp,fp
  802e90:	df000017 	ldw	fp,0(sp)
  802e94:	dec00104 	addi	sp,sp,4
  802e98:	f800283a 	ret

00802e9c <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  802e9c:	defffe04 	addi	sp,sp,-8
  802ea0:	df000115 	stw	fp,4(sp)
  802ea4:	df000104 	addi	fp,sp,4
  802ea8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  802eac:	e0bfff17 	ldw	r2,-4(fp)
  802eb0:	10800a17 	ldw	r2,40(r2)
  802eb4:	1007883a 	mov	r3,r2
  802eb8:	00800084 	movi	r2,2
  802ebc:	18800025 	stbio	r2,0(r3)
	return 0;
  802ec0:	0005883a 	mov	r2,zero
}
  802ec4:	e037883a 	mov	sp,fp
  802ec8:	df000017 	ldw	fp,0(sp)
  802ecc:	dec00104 	addi	sp,sp,4
  802ed0:	f800283a 	ret

00802ed4 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  802ed4:	defffe04 	addi	sp,sp,-8
  802ed8:	df000115 	stw	fp,4(sp)
  802edc:	df000104 	addi	fp,sp,4
  802ee0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  802ee4:	e0bfff17 	ldw	r2,-4(fp)
  802ee8:	10800a17 	ldw	r2,40(r2)
  802eec:	0007883a 	mov	r3,zero
  802ef0:	10c00025 	stbio	r3,0(r2)
	return 0;
  802ef4:	0005883a 	mov	r2,zero
}
  802ef8:	e037883a 	mov	sp,fp
  802efc:	df000017 	ldw	fp,0(sp)
  802f00:	dec00104 	addi	sp,sp,4
  802f04:	f800283a 	ret

00802f08 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  802f08:	defffe04 	addi	sp,sp,-8
  802f0c:	df000115 	stw	fp,4(sp)
  802f10:	df000104 	addi	fp,sp,4
  802f14:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  802f18:	e0bfff17 	ldw	r2,-4(fp)
  802f1c:	10800a17 	ldw	r2,40(r2)
  802f20:	10800104 	addi	r2,r2,4
  802f24:	10800037 	ldwio	r2,0(r2)
  802f28:	1080008c 	andi	r2,r2,2
  802f2c:	1005d07a 	srai	r2,r2,1
  802f30:	10000626 	beq	r2,zero,802f4c <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  802f34:	e0bfff17 	ldw	r2,-4(fp)
  802f38:	10800a17 	ldw	r2,40(r2)
  802f3c:	10800104 	addi	r2,r2,4
  802f40:	10800037 	ldwio	r2,0(r2)
  802f44:	1080004c 	andi	r2,r2,1
  802f48:	00000106 	br	802f50 <alt_up_av_config_read_acknowledge+0x48>
	return -1;
  802f4c:	00bfffc4 	movi	r2,-1
}
  802f50:	e037883a 	mov	sp,fp
  802f54:	df000017 	ldw	fp,0(sp)
  802f58:	dec00104 	addi	sp,sp,4
  802f5c:	f800283a 	ret

00802f60 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  802f60:	defffe04 	addi	sp,sp,-8
  802f64:	df000115 	stw	fp,4(sp)
  802f68:	df000104 	addi	fp,sp,4
  802f6c:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  802f70:	e0bfff17 	ldw	r2,-4(fp)
  802f74:	10800a17 	ldw	r2,40(r2)
  802f78:	10800104 	addi	r2,r2,4
  802f7c:	10800037 	ldwio	r2,0(r2)
  802f80:	1080008c 	andi	r2,r2,2
  802f84:	1005d07a 	srai	r2,r2,1
}
  802f88:	e037883a 	mov	sp,fp
  802f8c:	df000017 	ldw	fp,0(sp)
  802f90:	dec00104 	addi	sp,sp,4
  802f94:	f800283a 	ret

00802f98 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  802f98:	defffa04 	addi	sp,sp,-24
  802f9c:	dfc00515 	stw	ra,20(sp)
  802fa0:	df000415 	stw	fp,16(sp)
  802fa4:	df000404 	addi	fp,sp,16
  802fa8:	e13ffd15 	stw	r4,-12(fp)
  802fac:	e17ffe15 	stw	r5,-8(fp)
  802fb0:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  802fb4:	e0bffd17 	ldw	r2,-12(fp)
  802fb8:	10800b17 	ldw	r2,44(r2)
  802fbc:	10800060 	cmpeqi	r2,r2,1
  802fc0:	10000e1e 	bne	r2,zero,802ffc <alt_up_av_config_write_audio_cfg_register+0x64>
  802fc4:	e0bffd17 	ldw	r2,-12(fp)
  802fc8:	10800b17 	ldw	r2,44(r2)
  802fcc:	108000a0 	cmpeqi	r2,r2,2
  802fd0:	10000a1e 	bne	r2,zero,802ffc <alt_up_av_config_write_audio_cfg_register+0x64>
  802fd4:	e0bffd17 	ldw	r2,-12(fp)
  802fd8:	10800b17 	ldw	r2,44(r2)
  802fdc:	108000e0 	cmpeqi	r2,r2,3
  802fe0:	1000061e 	bne	r2,zero,802ffc <alt_up_av_config_write_audio_cfg_register+0x64>
  802fe4:	e0bffd17 	ldw	r2,-12(fp)
  802fe8:	10800b17 	ldw	r2,44(r2)
  802fec:	10800120 	cmpeqi	r2,r2,4
  802ff0:	1000021e 	bne	r2,zero,802ffc <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
  802ff4:	00bffa84 	movi	r2,-22
  802ff8:	00000b06 	br	803028 <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  802ffc:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  803000:	e0bffd17 	ldw	r2,-12(fp)
  803004:	10800a17 	ldw	r2,40(r2)
  803008:	10800084 	addi	r2,r2,2
  80300c:	1007883a 	mov	r3,r2
  803010:	e0bffc17 	ldw	r2,-16(fp)
  803014:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
  803018:	e13ffd17 	ldw	r4,-12(fp)
  80301c:	e17ffe17 	ldw	r5,-8(fp)
  803020:	e1bfff17 	ldw	r6,-4(fp)
  803024:	0802d800 	call	802d80 <alt_up_av_config_write_data>
}
  803028:	e037883a 	mov	sp,fp
  80302c:	dfc00117 	ldw	ra,4(sp)
  803030:	df000017 	ldw	fp,0(sp)
  803034:	dec00204 	addi	sp,sp,8
  803038:	f800283a 	ret

0080303c <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  80303c:	defffa04 	addi	sp,sp,-24
  803040:	dfc00515 	stw	ra,20(sp)
  803044:	df000415 	stw	fp,16(sp)
  803048:	df000404 	addi	fp,sp,16
  80304c:	e13ffc15 	stw	r4,-16(fp)
  803050:	e17ffd15 	stw	r5,-12(fp)
  803054:	e1bffe15 	stw	r6,-8(fp)
  803058:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  80305c:	e0bffc17 	ldw	r2,-16(fp)
  803060:	10800b17 	ldw	r2,44(r2)
  803064:	108000a0 	cmpeqi	r2,r2,2
  803068:	10000a1e 	bne	r2,zero,803094 <alt_up_av_config_read_video_cfg_register+0x58>
  80306c:	e0bffc17 	ldw	r2,-16(fp)
  803070:	10800b17 	ldw	r2,44(r2)
  803074:	108000e0 	cmpeqi	r2,r2,3
  803078:	1000061e 	bne	r2,zero,803094 <alt_up_av_config_read_video_cfg_register+0x58>
  80307c:	e0bffc17 	ldw	r2,-16(fp)
  803080:	10800b17 	ldw	r2,44(r2)
  803084:	10800120 	cmpeqi	r2,r2,4
  803088:	1000021e 	bne	r2,zero,803094 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
  80308c:	00bffa84 	movi	r2,-22
  803090:	00002006 	br	803114 <alt_up_av_config_read_video_cfg_register+0xd8>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  803094:	e0bffc17 	ldw	r2,-16(fp)
  803098:	10800b17 	ldw	r2,44(r2)
  80309c:	108000a0 	cmpeqi	r2,r2,2
  8030a0:	1000041e 	bne	r2,zero,8030b4 <alt_up_av_config_read_video_cfg_register+0x78>
  8030a4:	e0bffc17 	ldw	r2,-16(fp)
  8030a8:	10800b17 	ldw	r2,44(r2)
  8030ac:	10800118 	cmpnei	r2,r2,4
  8030b0:	1000061e 	bne	r2,zero,8030cc <alt_up_av_config_read_video_cfg_register+0x90>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  8030b4:	e0bfff17 	ldw	r2,-4(fp)
  8030b8:	10800060 	cmpeqi	r2,r2,1
  8030bc:	1000021e 	bne	r2,zero,8030c8 <alt_up_av_config_read_video_cfg_register+0x8c>
			return -EINVAL;
  8030c0:	00bffa84 	movi	r2,-22
  8030c4:	00001306 	br	803114 <alt_up_av_config_read_video_cfg_register+0xd8>
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
		return -EINVAL;

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  8030c8:	00000806 	br	8030ec <alt_up_av_config_read_video_cfg_register+0xb0>
			return -EINVAL;
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  8030cc:	e0bfff17 	ldw	r2,-4(fp)
  8030d0:	10800060 	cmpeqi	r2,r2,1
  8030d4:	1000051e 	bne	r2,zero,8030ec <alt_up_av_config_read_video_cfg_register+0xb0>
  8030d8:	e0bfff17 	ldw	r2,-4(fp)
  8030dc:	108000a0 	cmpeqi	r2,r2,2
  8030e0:	1000021e 	bne	r2,zero,8030ec <alt_up_av_config_read_video_cfg_register+0xb0>
			return -EINVAL;
  8030e4:	00bffa84 	movi	r2,-22
  8030e8:	00000a06 	br	803114 <alt_up_av_config_read_video_cfg_register+0xd8>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  8030ec:	e0bffc17 	ldw	r2,-16(fp)
  8030f0:	10800a17 	ldw	r2,40(r2)
  8030f4:	10800084 	addi	r2,r2,2
  8030f8:	1007883a 	mov	r3,r2
  8030fc:	e0bfff17 	ldw	r2,-4(fp)
  803100:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
  803104:	e13ffc17 	ldw	r4,-16(fp)
  803108:	e17ffd17 	ldw	r5,-12(fp)
  80310c:	e1bffe17 	ldw	r6,-8(fp)
  803110:	0802de40 	call	802de4 <alt_up_av_config_read_data>
}
  803114:	e037883a 	mov	sp,fp
  803118:	dfc00117 	ldw	ra,4(sp)
  80311c:	df000017 	ldw	fp,0(sp)
  803120:	dec00204 	addi	sp,sp,8
  803124:	f800283a 	ret

00803128 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  803128:	defffa04 	addi	sp,sp,-24
  80312c:	dfc00515 	stw	ra,20(sp)
  803130:	df000415 	stw	fp,16(sp)
  803134:	df000404 	addi	fp,sp,16
  803138:	e13ffc15 	stw	r4,-16(fp)
  80313c:	e17ffd15 	stw	r5,-12(fp)
  803140:	e1bffe15 	stw	r6,-8(fp)
  803144:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  803148:	e0bffc17 	ldw	r2,-16(fp)
  80314c:	10800b17 	ldw	r2,44(r2)
  803150:	108000a0 	cmpeqi	r2,r2,2
  803154:	10000a1e 	bne	r2,zero,803180 <alt_up_av_config_write_video_cfg_register+0x58>
  803158:	e0bffc17 	ldw	r2,-16(fp)
  80315c:	10800b17 	ldw	r2,44(r2)
  803160:	108000e0 	cmpeqi	r2,r2,3
  803164:	1000061e 	bne	r2,zero,803180 <alt_up_av_config_write_video_cfg_register+0x58>
  803168:	e0bffc17 	ldw	r2,-16(fp)
  80316c:	10800b17 	ldw	r2,44(r2)
  803170:	10800120 	cmpeqi	r2,r2,4
  803174:	1000021e 	bne	r2,zero,803180 <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
  803178:	00bffa84 	movi	r2,-22
  80317c:	00002006 	br	803200 <alt_up_av_config_write_video_cfg_register+0xd8>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  803180:	e0bffc17 	ldw	r2,-16(fp)
  803184:	10800b17 	ldw	r2,44(r2)
  803188:	108000a0 	cmpeqi	r2,r2,2
  80318c:	1000041e 	bne	r2,zero,8031a0 <alt_up_av_config_write_video_cfg_register+0x78>
  803190:	e0bffc17 	ldw	r2,-16(fp)
  803194:	10800b17 	ldw	r2,44(r2)
  803198:	10800118 	cmpnei	r2,r2,4
  80319c:	1000061e 	bne	r2,zero,8031b8 <alt_up_av_config_write_video_cfg_register+0x90>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  8031a0:	e0bfff17 	ldw	r2,-4(fp)
  8031a4:	10800060 	cmpeqi	r2,r2,1
  8031a8:	1000021e 	bne	r2,zero,8031b4 <alt_up_av_config_write_video_cfg_register+0x8c>
			return -EINVAL;
  8031ac:	00bffa84 	movi	r2,-22
  8031b0:	00001306 	br	803200 <alt_up_av_config_write_video_cfg_register+0xd8>
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
		return -EINVAL;

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  8031b4:	00000806 	br	8031d8 <alt_up_av_config_write_video_cfg_register+0xb0>
			return -EINVAL;
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  8031b8:	e0bfff17 	ldw	r2,-4(fp)
  8031bc:	10800060 	cmpeqi	r2,r2,1
  8031c0:	1000051e 	bne	r2,zero,8031d8 <alt_up_av_config_write_video_cfg_register+0xb0>
  8031c4:	e0bfff17 	ldw	r2,-4(fp)
  8031c8:	108000a0 	cmpeqi	r2,r2,2
  8031cc:	1000021e 	bne	r2,zero,8031d8 <alt_up_av_config_write_video_cfg_register+0xb0>
			return -EINVAL;
  8031d0:	00bffa84 	movi	r2,-22
  8031d4:	00000a06 	br	803200 <alt_up_av_config_write_video_cfg_register+0xd8>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  8031d8:	e0bffc17 	ldw	r2,-16(fp)
  8031dc:	10800a17 	ldw	r2,40(r2)
  8031e0:	10800084 	addi	r2,r2,2
  8031e4:	1007883a 	mov	r3,r2
  8031e8:	e0bfff17 	ldw	r2,-4(fp)
  8031ec:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
  8031f0:	e13ffc17 	ldw	r4,-16(fp)
  8031f4:	e17ffd17 	ldw	r5,-12(fp)
  8031f8:	e1bffe17 	ldw	r6,-8(fp)
  8031fc:	0802d800 	call	802d80 <alt_up_av_config_write_data>
}
  803200:	e037883a 	mov	sp,fp
  803204:	dfc00117 	ldw	ra,4(sp)
  803208:	df000017 	ldw	fp,0(sp)
  80320c:	dec00204 	addi	sp,sp,8
  803210:	f800283a 	ret

00803214 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  803214:	defffb04 	addi	sp,sp,-20
  803218:	dfc00415 	stw	ra,16(sp)
  80321c:	df000315 	stw	fp,12(sp)
  803220:	df000304 	addi	fp,sp,12
  803224:	e13ffd15 	stw	r4,-12(fp)
  803228:	e17ffe15 	stw	r5,-8(fp)
  80322c:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  803230:	e0bffd17 	ldw	r2,-12(fp)
  803234:	10800b17 	ldw	r2,44(r2)
  803238:	10800220 	cmpeqi	r2,r2,8
  80323c:	1000021e 	bne	r2,zero,803248 <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
  803240:	00bffa84 	movi	r2,-22
  803244:	00000406 	br	803258 <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
  803248:	e13ffd17 	ldw	r4,-12(fp)
  80324c:	e17ffe17 	ldw	r5,-8(fp)
  803250:	e1bfff17 	ldw	r6,-4(fp)
  803254:	0802de40 	call	802de4 <alt_up_av_config_read_data>
}
  803258:	e037883a 	mov	sp,fp
  80325c:	dfc00117 	ldw	ra,4(sp)
  803260:	df000017 	ldw	fp,0(sp)
  803264:	dec00204 	addi	sp,sp,8
  803268:	f800283a 	ret

0080326c <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  80326c:	defffb04 	addi	sp,sp,-20
  803270:	dfc00415 	stw	ra,16(sp)
  803274:	df000315 	stw	fp,12(sp)
  803278:	df000304 	addi	fp,sp,12
  80327c:	e13ffd15 	stw	r4,-12(fp)
  803280:	e17ffe15 	stw	r5,-8(fp)
  803284:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  803288:	e0bffd17 	ldw	r2,-12(fp)
  80328c:	10800b17 	ldw	r2,44(r2)
  803290:	10800220 	cmpeqi	r2,r2,8
  803294:	1000021e 	bne	r2,zero,8032a0 <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
  803298:	00bffa84 	movi	r2,-22
  80329c:	00000406 	br	8032b0 <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
  8032a0:	e13ffd17 	ldw	r4,-12(fp)
  8032a4:	e17ffe17 	ldw	r5,-8(fp)
  8032a8:	e1bfff17 	ldw	r6,-4(fp)
  8032ac:	0802d800 	call	802d80 <alt_up_av_config_write_data>
}
  8032b0:	e037883a 	mov	sp,fp
  8032b4:	dfc00117 	ldw	ra,4(sp)
  8032b8:	df000017 	ldw	fp,0(sp)
  8032bc:	dec00204 	addi	sp,sp,8
  8032c0:	f800283a 	ret

008032c4 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  8032c4:	defffb04 	addi	sp,sp,-20
  8032c8:	dfc00415 	stw	ra,16(sp)
  8032cc:	df000315 	stw	fp,12(sp)
  8032d0:	df000304 	addi	fp,sp,12
  8032d4:	e13ffd15 	stw	r4,-12(fp)
  8032d8:	e17ffe15 	stw	r5,-8(fp)
  8032dc:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  8032e0:	e0bffd17 	ldw	r2,-12(fp)
  8032e4:	10800b17 	ldw	r2,44(r2)
  8032e8:	10800260 	cmpeqi	r2,r2,9
  8032ec:	1000021e 	bne	r2,zero,8032f8 <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
  8032f0:	00bffa84 	movi	r2,-22
  8032f4:	00000406 	br	803308 <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  8032f8:	e13ffd17 	ldw	r4,-12(fp)
  8032fc:	e17ffe17 	ldw	r5,-8(fp)
  803300:	e1bfff17 	ldw	r6,-4(fp)
  803304:	0802de40 	call	802de4 <alt_up_av_config_read_data>
}
  803308:	e037883a 	mov	sp,fp
  80330c:	dfc00117 	ldw	ra,4(sp)
  803310:	df000017 	ldw	fp,0(sp)
  803314:	dec00204 	addi	sp,sp,8
  803318:	f800283a 	ret

0080331c <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  80331c:	defffb04 	addi	sp,sp,-20
  803320:	dfc00415 	stw	ra,16(sp)
  803324:	df000315 	stw	fp,12(sp)
  803328:	df000304 	addi	fp,sp,12
  80332c:	e13ffd15 	stw	r4,-12(fp)
  803330:	e17ffe15 	stw	r5,-8(fp)
  803334:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  803338:	e0bffd17 	ldw	r2,-12(fp)
  80333c:	10800b17 	ldw	r2,44(r2)
  803340:	10800260 	cmpeqi	r2,r2,9
  803344:	1000021e 	bne	r2,zero,803350 <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
  803348:	00bffa84 	movi	r2,-22
  80334c:	00000406 	br	803360 <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  803350:	e13ffd17 	ldw	r4,-12(fp)
  803354:	e17ffe17 	ldw	r5,-8(fp)
  803358:	e1bfff17 	ldw	r6,-4(fp)
  80335c:	0802d800 	call	802d80 <alt_up_av_config_write_data>
}
  803360:	e037883a 	mov	sp,fp
  803364:	dfc00117 	ldw	ra,4(sp)
  803368:	df000017 	ldw	fp,0(sp)
  80336c:	dec00204 	addi	sp,sp,8
  803370:	f800283a 	ret

00803374 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  803374:	defffb04 	addi	sp,sp,-20
  803378:	dfc00415 	stw	ra,16(sp)
  80337c:	df000315 	stw	fp,12(sp)
  803380:	df000304 	addi	fp,sp,12
  803384:	e13ffd15 	stw	r4,-12(fp)
  803388:	e17ffe15 	stw	r5,-8(fp)
  80338c:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  803390:	e0bffd17 	ldw	r2,-12(fp)
  803394:	10800b17 	ldw	r2,44(r2)
  803398:	108002a0 	cmpeqi	r2,r2,10
  80339c:	1000021e 	bne	r2,zero,8033a8 <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
  8033a0:	00bffa84 	movi	r2,-22
  8033a4:	00000406 	br	8033b8 <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
  8033a8:	e13ffd17 	ldw	r4,-12(fp)
  8033ac:	e17ffe17 	ldw	r5,-8(fp)
  8033b0:	e1bfff17 	ldw	r6,-4(fp)
  8033b4:	0802de40 	call	802de4 <alt_up_av_config_read_data>
}
  8033b8:	e037883a 	mov	sp,fp
  8033bc:	dfc00117 	ldw	ra,4(sp)
  8033c0:	df000017 	ldw	fp,0(sp)
  8033c4:	dec00204 	addi	sp,sp,8
  8033c8:	f800283a 	ret

008033cc <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8033cc:	defffb04 	addi	sp,sp,-20
  8033d0:	dfc00415 	stw	ra,16(sp)
  8033d4:	df000315 	stw	fp,12(sp)
  8033d8:	df000304 	addi	fp,sp,12
  8033dc:	e13ffd15 	stw	r4,-12(fp)
  8033e0:	e17ffe15 	stw	r5,-8(fp)
  8033e4:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  8033e8:	e0bffd17 	ldw	r2,-12(fp)
  8033ec:	10800b17 	ldw	r2,44(r2)
  8033f0:	108002a0 	cmpeqi	r2,r2,10
  8033f4:	1000021e 	bne	r2,zero,803400 <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
  8033f8:	00bffa84 	movi	r2,-22
  8033fc:	00000406 	br	803410 <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
  803400:	e13ffd17 	ldw	r4,-12(fp)
  803404:	e17ffe17 	ldw	r5,-8(fp)
  803408:	e1bfff17 	ldw	r6,-4(fp)
  80340c:	0802d800 	call	802d80 <alt_up_av_config_write_data>
}
  803410:	e037883a 	mov	sp,fp
  803414:	dfc00117 	ldw	ra,4(sp)
  803418:	df000017 	ldw	fp,0(sp)
  80341c:	dec00204 	addi	sp,sp,8
  803420:	f800283a 	ret

00803424 <ffs_Init>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: error cause                                                    */
/***************************************************************************/
FFS_RESULT ffs_Init(void)
{
  803424:	defffe04 	addi	sp,sp,-8
  803428:	df000115 	stw	fp,4(sp)
  80342c:	df000104 	addi	fp,sp,4
   FFS_RESULT Error = FFS_OK;
  803430:	e03fff0d 	sth	zero,-4(fp)
   
   return (Error);
  803434:	e0bfff0b 	ldhu	r2,-4(fp)
} /* ffs_Init */
  803438:	e037883a 	mov	sp,fp
  80343c:	df000017 	ldw	fp,0(sp)
  803440:	dec00104 	addi	sp,sp,4
  803444:	f800283a 	ret

00803448 <SetLowSpeed>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void SetLowSpeed(void)
{
  803448:	deffff04 	addi	sp,sp,-4
  80344c:	df000015 	stw	fp,0(sp)
  803450:	d839883a 	mov	fp,sp
   Control1 &= ~0xFF00;
  803454:	d0e76a17 	ldw	r3,-25176(gp)
  803458:	00bffff4 	movhi	r2,65535
  80345c:	10803fc4 	addi	r2,r2,255
  803460:	1884703a 	and	r2,r3,r2
  803464:	d0a76a15 	stw	r2,-25176(gp)
   Control1 |= (249 << 8);
  803468:	d0a76a17 	ldw	r2,-25176(gp)
  80346c:	10be4014 	ori	r2,r2,63744
  803470:	d0a76a15 	stw	r2,-25176(gp)
   SPI_CTRL  = Control1;
  803474:	00a04034 	movhi	r2,33024
  803478:	10841204 	addi	r2,r2,4168
  80347c:	d0e76a17 	ldw	r3,-25176(gp)
  803480:	10c00015 	stw	r3,0(r2)
} /* SetLowSpeed */
  803484:	e037883a 	mov	sp,fp
  803488:	df000017 	ldw	fp,0(sp)
  80348c:	dec00104 	addi	sp,sp,4
  803490:	f800283a 	ret

00803494 <SetHighSpeed>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void SetHighSpeed(void)
{
  803494:	deffff04 	addi	sp,sp,-4
  803498:	df000015 	stw	fp,0(sp)
  80349c:	d839883a 	mov	fp,sp
   Control1 &= ~0xFF00;
  8034a0:	d0e76a17 	ldw	r3,-25176(gp)
  8034a4:	00bffff4 	movhi	r2,65535
  8034a8:	10803fc4 	addi	r2,r2,255
  8034ac:	1884703a 	and	r2,r3,r2
  8034b0:	d0a76a15 	stw	r2,-25176(gp)

   if (0 == (CardType & 0x01))
  8034b4:	d0a76803 	ldbu	r2,-25184(gp)
  8034b8:	10803fcc 	andi	r2,r2,255
  8034bc:	1080004c 	andi	r2,r2,1
  8034c0:	1000041e 	bne	r2,zero,8034d4 <SetHighSpeed+0x40>
   {
      /* SD card 25 MHz */
      Control1 |= (1 << 8);
  8034c4:	d0a76a17 	ldw	r2,-25176(gp)
  8034c8:	10804014 	ori	r2,r2,256
  8034cc:	d0a76a15 	stw	r2,-25176(gp)
  8034d0:	00000306 	br	8034e0 <SetHighSpeed+0x4c>
   }
   else
   {
      /* MMC card 16 MHz */
      Control1 |= (2 << 8);
  8034d4:	d0a76a17 	ldw	r2,-25176(gp)
  8034d8:	10808014 	ori	r2,r2,512
  8034dc:	d0a76a15 	stw	r2,-25176(gp)
   }
   SPI_CTRL  = Control1;
  8034e0:	00a04034 	movhi	r2,33024
  8034e4:	10841204 	addi	r2,r2,4168
  8034e8:	d0e76a17 	ldw	r3,-25176(gp)
  8034ec:	10c00015 	stw	r3,0(r2)
} /* SetHighSpeed */
  8034f0:	e037883a 	mov	sp,fp
  8034f4:	df000017 	ldw	fp,0(sp)
  8034f8:	dec00104 	addi	sp,sp,4
  8034fc:	f800283a 	ret

00803500 <InitDiskIOHardware>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void InitDiskIOHardware(void)
{
  803500:	defffe04 	addi	sp,sp,-8
  803504:	dfc00115 	stw	ra,4(sp)
  803508:	df000015 	stw	fp,0(sp)
  80350c:	d839883a 	mov	fp,sp
   /*
    * Deselct before to prevent glitch
    */
   DESELECT();
  803510:	d0a76a17 	ldw	r2,-25176(gp)
  803514:	10800054 	ori	r2,r2,1
  803518:	d0a76a15 	stw	r2,-25176(gp)
  80351c:	00a04034 	movhi	r2,33024
  803520:	10841204 	addi	r2,r2,4168
  803524:	d0e76a17 	ldw	r3,-25176(gp)
  803528:	10c00015 	stw	r3,0(r2)

   /* Slow during init */
   SetLowSpeed();
  80352c:	08034480 	call	803448 <SetLowSpeed>
   
} /* InitDiskIOHardware */
  803530:	e037883a 	mov	sp,fp
  803534:	dfc00117 	ldw	ra,4(sp)
  803538:	df000017 	ldw	fp,0(sp)
  80353c:	dec00204 	addi	sp,sp,8
  803540:	f800283a 	ret

00803544 <Set8BitTransfer>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void Set8BitTransfer(void)
{
  803544:	deffff04 	addi	sp,sp,-4
  803548:	df000015 	stw	fp,0(sp)
  80354c:	d839883a 	mov	fp,sp
   Control1 &= ~CTRL_BIT32;
  803550:	d0e76a17 	ldw	r3,-25176(gp)
  803554:	00bfff44 	movi	r2,-3
  803558:	1884703a 	and	r2,r3,r2
  80355c:	d0a76a15 	stw	r2,-25176(gp)
   SPI_CTRL  = Control1;
  803560:	00a04034 	movhi	r2,33024
  803564:	10841204 	addi	r2,r2,4168
  803568:	d0e76a17 	ldw	r3,-25176(gp)
  80356c:	10c00015 	stw	r3,0(r2)
} /* Set8BitTransfer */
  803570:	e037883a 	mov	sp,fp
  803574:	df000017 	ldw	fp,0(sp)
  803578:	dec00104 	addi	sp,sp,4
  80357c:	f800283a 	ret

00803580 <Set32BitTransfer>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void Set32BitTransfer(void)
{
  803580:	deffff04 	addi	sp,sp,-4
  803584:	df000015 	stw	fp,0(sp)
  803588:	d839883a 	mov	fp,sp
   Control1 |= CTRL_BIT32;
  80358c:	d0a76a17 	ldw	r2,-25176(gp)
  803590:	10800094 	ori	r2,r2,2
  803594:	d0a76a15 	stw	r2,-25176(gp)
   SPI_CTRL  = Control1;
  803598:	00a04034 	movhi	r2,33024
  80359c:	10841204 	addi	r2,r2,4168
  8035a0:	d0e76a17 	ldw	r3,-25176(gp)
  8035a4:	10c00015 	stw	r3,0(r2)
} /* Set32BitTransfer */
  8035a8:	e037883a 	mov	sp,fp
  8035ac:	df000017 	ldw	fp,0(sp)
  8035b0:	dec00104 	addi	sp,sp,4
  8035b4:	f800283a 	ret

008035b8 <ReceiveU8>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
static FFS_U8 ReceiveU8 (void)
{
  8035b8:	deffff04 	addi	sp,sp,-4
  8035bc:	df000015 	stw	fp,0(sp)
  8035c0:	d839883a 	mov	fp,sp
   SPI_TXR = (uint32_t) 0xff;
  8035c4:	00a04034 	movhi	r2,33024
  8035c8:	10841004 	addi	r2,r2,4160
  8035cc:	00c03fc4 	movi	r3,255
  8035d0:	10c00015 	stw	r3,0(r2)

   /* wait for char */
   while (!(SPI_SR & SPI_SR_DONE)) ;
  8035d4:	0001883a 	nop
  8035d8:	00a04034 	movhi	r2,33024
  8035dc:	10841304 	addi	r2,r2,4172
  8035e0:	10800017 	ldw	r2,0(r2)
  8035e4:	1080004c 	andi	r2,r2,1
  8035e8:	103ffb26 	beq	r2,zero,8035d8 <__alt_data_end+0xff8035d8>

   return(SPI_RXR);
  8035ec:	00a04034 	movhi	r2,33024
  8035f0:	10841104 	addi	r2,r2,4164
  8035f4:	10800017 	ldw	r2,0(r2)
} /* ReceiveU8 */
  8035f8:	e037883a 	mov	sp,fp
  8035fc:	df000017 	ldw	fp,0(sp)
  803600:	dec00104 	addi	sp,sp,4
  803604:	f800283a 	ret

00803608 <ReceiveDatablock>:
/*  In    : buff, btr                                                      */
/*  Out   : none                                                           */
/*  Return: In case of an error return FALSE                               */
/***************************************************************************/
static int ReceiveDatablock(FFS_U8 * buff, uint32_t btr)
{
  803608:	defff904 	addi	sp,sp,-28
  80360c:	dfc00615 	stw	ra,24(sp)
  803610:	df000515 	stw	fp,20(sp)
  803614:	df000504 	addi	fp,sp,20
  803618:	e13ffe15 	stw	r4,-8(fp)
  80361c:	e17fff15 	stw	r5,-4(fp)
   FFS_U8 token, cnt;
   FFS_U32 *buff32 = (FFS_U32*)buff;
  803620:	e0bffe17 	ldw	r2,-8(fp)
  803624:	e0bffc15 	stw	r2,-16(fp)

   Timer1 = 10;
  803628:	00800284 	movi	r2,10
  80362c:	d0a7688d 	sth	r2,-25182(gp)
   do /* Wait for data packet in timeout of 100ms */
   {
      token = ReceiveU8();
  803630:	08035b80 	call	8035b8 <ReceiveU8>
  803634:	e0bffd05 	stb	r2,-12(fp)
   }
   while ((token == 0xFF) && Timer1);
  803638:	e0bffd03 	ldbu	r2,-12(fp)
  80363c:	10803fd8 	cmpnei	r2,r2,255
  803640:	1000031e 	bne	r2,zero,803650 <ReceiveDatablock+0x48>
  803644:	d0a7688b 	ldhu	r2,-25182(gp)
  803648:	10bfffcc 	andi	r2,r2,65535
  80364c:	103ff81e 	bne	r2,zero,803630 <__alt_data_end+0xff803630>

   if (token != 0xFE)
  803650:	e0bffd03 	ldbu	r2,-12(fp)
  803654:	10803fa0 	cmpeqi	r2,r2,254
  803658:	1000021e 	bne	r2,zero,803664 <ReceiveDatablock+0x5c>
      return(FFS_FALSE);  /* If not valid data token, return with error */
  80365c:	0005883a 	mov	r2,zero
  803660:	00002f06 	br	803720 <ReceiveDatablock+0x118>
      
   /* Receive the data block into buffer */
   Set32BitTransfer();
  803664:	08035800 	call	803580 <Set32BitTransfer>
   
   /* Divide by 8 */
   cnt = btr >> 3;
  803668:	e0bfff17 	ldw	r2,-4(fp)
  80366c:	1004d0fa 	srli	r2,r2,3
  803670:	e0bffb05 	stb	r2,-20(fp)

   do /* Receive the data block into buffer */
   {
      RECEIVE_FAST(buff32);
  803674:	00a04034 	movhi	r2,33024
  803678:	10841004 	addi	r2,r2,4160
  80367c:	00ffffc4 	movi	r3,-1
  803680:	10c00015 	stw	r3,0(r2)
  803684:	0001883a 	nop
  803688:	00a04034 	movhi	r2,33024
  80368c:	10841304 	addi	r2,r2,4172
  803690:	10800017 	ldw	r2,0(r2)
  803694:	1080004c 	andi	r2,r2,1
  803698:	103ffb26 	beq	r2,zero,803688 <__alt_data_end+0xff803688>
  80369c:	e0fffc17 	ldw	r3,-16(fp)
  8036a0:	18800104 	addi	r2,r3,4
  8036a4:	e0bffc15 	stw	r2,-16(fp)
  8036a8:	00a04034 	movhi	r2,33024
  8036ac:	10841104 	addi	r2,r2,4164
  8036b0:	10800017 	ldw	r2,0(r2)
  8036b4:	18800015 	stw	r2,0(r3)
      RECEIVE_FAST(buff32);
  8036b8:	00a04034 	movhi	r2,33024
  8036bc:	10841004 	addi	r2,r2,4160
  8036c0:	00ffffc4 	movi	r3,-1
  8036c4:	10c00015 	stw	r3,0(r2)
  8036c8:	0001883a 	nop
  8036cc:	00a04034 	movhi	r2,33024
  8036d0:	10841304 	addi	r2,r2,4172
  8036d4:	10800017 	ldw	r2,0(r2)
  8036d8:	1080004c 	andi	r2,r2,1
  8036dc:	103ffb26 	beq	r2,zero,8036cc <__alt_data_end+0xff8036cc>
  8036e0:	e0fffc17 	ldw	r3,-16(fp)
  8036e4:	18800104 	addi	r2,r3,4
  8036e8:	e0bffc15 	stw	r2,-16(fp)
  8036ec:	00a04034 	movhi	r2,33024
  8036f0:	10841104 	addi	r2,r2,4164
  8036f4:	10800017 	ldw	r2,0(r2)
  8036f8:	18800015 	stw	r2,0(r3)
   }
   while (--cnt);
  8036fc:	e0bffb03 	ldbu	r2,-20(fp)
  803700:	10bfffc4 	addi	r2,r2,-1
  803704:	e0bffb05 	stb	r2,-20(fp)
  803708:	e0bffb03 	ldbu	r2,-20(fp)
  80370c:	103fd91e 	bne	r2,zero,803674 <__alt_data_end+0xff803674>
   
   Set8BitTransfer();   
  803710:	08035440 	call	803544 <Set8BitTransfer>
   ReceiveU8();   /* Discard CRC */
  803714:	08035b80 	call	8035b8 <ReceiveU8>
   ReceiveU8();   /* Discard CRC */
  803718:	08035b80 	call	8035b8 <ReceiveU8>

   return(FFS_TRUE);  /* Return with success */
  80371c:	00800044 	movi	r2,1
} /* ReceiveDatablock */
  803720:	e037883a 	mov	sp,fp
  803724:	dfc00117 	ldw	ra,4(sp)
  803728:	df000017 	ldw	fp,0(sp)
  80372c:	dec00204 	addi	sp,sp,8
  803730:	f800283a 	ret

00803734 <TransmitDatablock>:
/*  In    : buff, token (Data/Stop token)                                  */
/*  Out   : none                                                           */
/*  Return: In case of an error return FALSE                               */
/***************************************************************************/
static int TransmitDatablock(const FFS_U8 * buff, FFS_U8 token)
{
  803734:	defff904 	addi	sp,sp,-28
  803738:	dfc00615 	stw	ra,24(sp)
  80373c:	df000515 	stw	fp,20(sp)
  803740:	df000504 	addi	fp,sp,20
  803744:	e13ffe15 	stw	r4,-8(fp)
  803748:	2805883a 	mov	r2,r5
  80374c:	e0bfff05 	stb	r2,-4(fp)
   FFS_U8 resp, cnt = 0;
  803750:	e03ffb05 	stb	zero,-20(fp)
   FFS_U32 *buff32 = (FFS_U32*)buff;
  803754:	e0bffe17 	ldw	r2,-8(fp)
  803758:	e0bffc15 	stw	r2,-16(fp)

   if (WaitReady() != 0xFF)
  80375c:	08038e00 	call	8038e0 <WaitReady>
  803760:	10803fcc 	andi	r2,r2,255
  803764:	10803fe0 	cmpeqi	r2,r2,255
  803768:	1000021e 	bne	r2,zero,803774 <TransmitDatablock+0x40>
      return(FFS_FALSE);
  80376c:	0005883a 	mov	r2,zero
  803770:	00004d06 	br	8038a8 <TransmitDatablock+0x174>

   TRANSMIT_U8(token);  /* Xmit data token */
  803774:	00a04034 	movhi	r2,33024
  803778:	10841004 	addi	r2,r2,4160
  80377c:	e0ffff03 	ldbu	r3,-4(fp)
  803780:	10c00015 	stw	r3,0(r2)
  803784:	0001883a 	nop
  803788:	00a04034 	movhi	r2,33024
  80378c:	10841304 	addi	r2,r2,4172
  803790:	10800017 	ldw	r2,0(r2)
  803794:	1080004c 	andi	r2,r2,1
  803798:	103ffb26 	beq	r2,zero,803788 <__alt_data_end+0xff803788>
   if (token != 0xFD)   /* Is data token */
  80379c:	e0bfff03 	ldbu	r2,-4(fp)
  8037a0:	10803f60 	cmpeqi	r2,r2,253
  8037a4:	10003f1e 	bne	r2,zero,8038a4 <TransmitDatablock+0x170>
   {
   
      cnt = 512 / 8;
  8037a8:	00801004 	movi	r2,64
  8037ac:	e0bffb05 	stb	r2,-20(fp)
   
      /* Send the 512 byte data block */
      Set32BitTransfer();
  8037b0:	08035800 	call	803580 <Set32BitTransfer>
      do /* Send the 512 byte data block */
      {
         TRANSMIT_FAST(*buff32++);
  8037b4:	00a04034 	movhi	r2,33024
  8037b8:	10841004 	addi	r2,r2,4160
  8037bc:	e0fffc17 	ldw	r3,-16(fp)
  8037c0:	19000104 	addi	r4,r3,4
  8037c4:	e13ffc15 	stw	r4,-16(fp)
  8037c8:	18c00017 	ldw	r3,0(r3)
  8037cc:	10c00015 	stw	r3,0(r2)
  8037d0:	0001883a 	nop
  8037d4:	00a04034 	movhi	r2,33024
  8037d8:	10841304 	addi	r2,r2,4172
  8037dc:	10800017 	ldw	r2,0(r2)
  8037e0:	1080004c 	andi	r2,r2,1
  8037e4:	103ffb26 	beq	r2,zero,8037d4 <__alt_data_end+0xff8037d4>
         TRANSMIT_FAST(*buff32++);
  8037e8:	00a04034 	movhi	r2,33024
  8037ec:	10841004 	addi	r2,r2,4160
  8037f0:	e0fffc17 	ldw	r3,-16(fp)
  8037f4:	19000104 	addi	r4,r3,4
  8037f8:	e13ffc15 	stw	r4,-16(fp)
  8037fc:	18c00017 	ldw	r3,0(r3)
  803800:	10c00015 	stw	r3,0(r2)
  803804:	0001883a 	nop
  803808:	00a04034 	movhi	r2,33024
  80380c:	10841304 	addi	r2,r2,4172
  803810:	10800017 	ldw	r2,0(r2)
  803814:	1080004c 	andi	r2,r2,1
  803818:	103ffb26 	beq	r2,zero,803808 <__alt_data_end+0xff803808>
      }
      while (--cnt);
  80381c:	e0bffb03 	ldbu	r2,-20(fp)
  803820:	10bfffc4 	addi	r2,r2,-1
  803824:	e0bffb05 	stb	r2,-20(fp)
  803828:	e0bffb03 	ldbu	r2,-20(fp)
  80382c:	103fe11e 	bne	r2,zero,8037b4 <__alt_data_end+0xff8037b4>

      Set8BitTransfer();
  803830:	08035440 	call	803544 <Set8BitTransfer>
      TRANSMIT_U8(0xFF);   /* CRC (Dummy) */
  803834:	00a04034 	movhi	r2,33024
  803838:	10841004 	addi	r2,r2,4160
  80383c:	00c03fc4 	movi	r3,255
  803840:	10c00015 	stw	r3,0(r2)
  803844:	0001883a 	nop
  803848:	00a04034 	movhi	r2,33024
  80384c:	10841304 	addi	r2,r2,4172
  803850:	10800017 	ldw	r2,0(r2)
  803854:	1080004c 	andi	r2,r2,1
  803858:	103ffb26 	beq	r2,zero,803848 <__alt_data_end+0xff803848>
      TRANSMIT_U8(0xFF);   /* CRC (Dummy) */
  80385c:	00a04034 	movhi	r2,33024
  803860:	10841004 	addi	r2,r2,4160
  803864:	00c03fc4 	movi	r3,255
  803868:	10c00015 	stw	r3,0(r2)
  80386c:	0001883a 	nop
  803870:	00a04034 	movhi	r2,33024
  803874:	10841304 	addi	r2,r2,4172
  803878:	10800017 	ldw	r2,0(r2)
  80387c:	1080004c 	andi	r2,r2,1
  803880:	103ffb26 	beq	r2,zero,803870 <__alt_data_end+0xff803870>

      resp = ReceiveU8();  /* Reveive data response */
  803884:	08035b80 	call	8035b8 <ReceiveU8>
  803888:	e0bffd05 	stb	r2,-12(fp)
      if ((resp & 0x1F) != 0x05) /* If not accepted, return with error */
  80388c:	e0bffd03 	ldbu	r2,-12(fp)
  803890:	108007cc 	andi	r2,r2,31
  803894:	10800160 	cmpeqi	r2,r2,5
  803898:	1000021e 	bne	r2,zero,8038a4 <TransmitDatablock+0x170>
      {
         return(FFS_FALSE);
  80389c:	0005883a 	mov	r2,zero
  8038a0:	00000106 	br	8038a8 <TransmitDatablock+0x174>
      }
   }

   return(FFS_TRUE);  /* Return with success */
  8038a4:	00800044 	movi	r2,1
} /* TransmitDatablock */
  8038a8:	e037883a 	mov	sp,fp
  8038ac:	dfc00117 	ldw	ra,4(sp)
  8038b0:	df000017 	ldw	fp,0(sp)
  8038b4:	dec00204 	addi	sp,sp,8
  8038b8:	f800283a 	ret

008038bc <GetCDWP>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
static FFS_U32 GetCDWP(void)
{
  8038bc:	defffe04 	addi	sp,sp,-8
  8038c0:	df000115 	stw	fp,4(sp)
  8038c4:	df000104 	addi	fp,sp,4
   FFS_U32 value = 0;
  8038c8:	e03fff15 	stw	zero,-4(fp)
   
   /*
    * CD and WP is not supported by the Altera DE1 board.
    */

   return(value);
  8038cc:	e0bfff17 	ldw	r2,-4(fp)
} /* GetCDWP */
  8038d0:	e037883a 	mov	sp,fp
  8038d4:	df000017 	ldw	fp,0(sp)
  8038d8:	dec00104 	addi	sp,sp,4
  8038dc:	f800283a 	ret

008038e0 <WaitReady>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/
static FFS_U8 WaitReady (void)
{
  8038e0:	defffd04 	addi	sp,sp,-12
  8038e4:	dfc00215 	stw	ra,8(sp)
  8038e8:	df000115 	stw	fp,4(sp)
  8038ec:	df000104 	addi	fp,sp,4
   FFS_U8 res;
   
#if (FFS_USE_REAL_TIME_OS == 0)
   Timer2 = (WAIT_READY_TIME_MAX_MS / 10);
  8038f0:	00800c84 	movi	r2,50
  8038f4:	d0a7690d 	sth	r2,-25180(gp)
   ReceiveU8();
  8038f8:	08035b80 	call	8035b8 <ReceiveU8>
   do
   {
      res = ReceiveU8();
  8038fc:	08035b80 	call	8035b8 <ReceiveU8>
  803900:	e0bfff05 	stb	r2,-4(fp)
   }
   while ((res != 0xFF) && Timer2);
  803904:	e0bfff03 	ldbu	r2,-4(fp)
  803908:	10803fe0 	cmpeqi	r2,r2,255
  80390c:	1000031e 	bne	r2,zero,80391c <WaitReady+0x3c>
  803910:	d0a7690b 	ldhu	r2,-25180(gp)
  803914:	10bfffcc 	andi	r2,r2,65535
  803918:	103ff81e 	bne	r2,zero,8038fc <__alt_data_end+0xff8038fc>
      ff_wait_ms(WAIT_READY_TIME_RTOS_MS);
   }
   while ((res != 0xFF) && (cnt < WAIT_READY_TIME_CNT_RTOS));
#endif   

   return(res);
  80391c:	e0bfff03 	ldbu	r2,-4(fp)
} /* WaitReady */
  803920:	e037883a 	mov	sp,fp
  803924:	dfc00117 	ldw	ra,4(sp)
  803928:	df000017 	ldw	fp,0(sp)
  80392c:	dec00204 	addi	sp,sp,8
  803930:	f800283a 	ret

00803934 <ReleaseBus>:

/*-----------------------------------------------------------------------*/
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/
static void ReleaseBus (void)
{
  803934:	defffe04 	addi	sp,sp,-8
  803938:	dfc00115 	stw	ra,4(sp)
  80393c:	df000015 	stw	fp,0(sp)
  803940:	d839883a 	mov	fp,sp
    * master device must send a byte after deasserted CS signal.   
    *
    * More information can be found here:
    * http://elm-chan.org/docs/mmc/mmc_e.html
    */
   DESELECT();
  803944:	d0a76a17 	ldw	r2,-25176(gp)
  803948:	10800054 	ori	r2,r2,1
  80394c:	d0a76a15 	stw	r2,-25176(gp)
  803950:	00a04034 	movhi	r2,33024
  803954:	10841204 	addi	r2,r2,4168
  803958:	d0e76a17 	ldw	r3,-25176(gp)
  80395c:	10c00015 	stw	r3,0(r2)
   ReceiveU8();
  803960:	08035b80 	call	8035b8 <ReceiveU8>
} /* ReleaseBus */
  803964:	e037883a 	mov	sp,fp
  803968:	dfc00117 	ldw	ra,4(sp)
  80396c:	df000017 	ldw	fp,0(sp)
  803970:	dec00204 	addi	sp,sp,8
  803974:	f800283a 	ret

00803978 <SendCMD>:
/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/
static FFS_U8 SendCMD (FFS_U8 cmd,   /* Command byte */
                       FFS_U32 arg)  /* Argument */
{
  803978:	defffb04 	addi	sp,sp,-20
  80397c:	dfc00415 	stw	ra,16(sp)
  803980:	df000315 	stw	fp,12(sp)
  803984:	df000304 	addi	fp,sp,12
  803988:	2005883a 	mov	r2,r4
  80398c:	e17fff15 	stw	r5,-4(fp)
  803990:	e0bffe05 	stb	r2,-8(fp)
   FFS_U8 n, res;

   if (cmd & 0x80)   /* ACMD<n> is the command sequense of CMD55-CMD<n> */
  803994:	e0bffe03 	ldbu	r2,-8(fp)
  803998:	10803fcc 	andi	r2,r2,255
  80399c:	1080201c 	xori	r2,r2,128
  8039a0:	10bfe004 	addi	r2,r2,-128
  8039a4:	10000c0e 	bge	r2,zero,8039d8 <SendCMD+0x60>
   {
      cmd &= 0x7F;
  8039a8:	e0bffe03 	ldbu	r2,-8(fp)
  8039ac:	10801fcc 	andi	r2,r2,127
  8039b0:	e0bffe05 	stb	r2,-8(fp)
      res = SendCMD(CMD55, 0);
  8039b4:	01001dc4 	movi	r4,119
  8039b8:	000b883a 	mov	r5,zero
  8039bc:	08039780 	call	803978 <SendCMD>
  8039c0:	e0bffd45 	stb	r2,-11(fp)
      if (res > 1)
  8039c4:	e0bffd43 	ldbu	r2,-11(fp)
  8039c8:	108000b0 	cmpltui	r2,r2,2
  8039cc:	1000021e 	bne	r2,zero,8039d8 <SendCMD+0x60>
         return res;
  8039d0:	e0bffd43 	ldbu	r2,-11(fp)
  8039d4:	00007706 	br	803bb4 <SendCMD+0x23c>
   }

   /* Select the card and wait for ready */
   DESELECT();
  8039d8:	d0a76a17 	ldw	r2,-25176(gp)
  8039dc:	10800054 	ori	r2,r2,1
  8039e0:	d0a76a15 	stw	r2,-25176(gp)
  8039e4:	00a04034 	movhi	r2,33024
  8039e8:	10841204 	addi	r2,r2,4168
  8039ec:	d0e76a17 	ldw	r3,-25176(gp)
  8039f0:	10c00015 	stw	r3,0(r2)
   SELECT();
  8039f4:	d0e76a17 	ldw	r3,-25176(gp)
  8039f8:	00bfff84 	movi	r2,-2
  8039fc:	1884703a 	and	r2,r3,r2
  803a00:	d0a76a15 	stw	r2,-25176(gp)
  803a04:	00a04034 	movhi	r2,33024
  803a08:	10841204 	addi	r2,r2,4168
  803a0c:	d0e76a17 	ldw	r3,-25176(gp)
  803a10:	10c00015 	stw	r3,0(r2)

   if (WaitReady() != 0xFF)
  803a14:	08038e00 	call	8038e0 <WaitReady>
  803a18:	10803fcc 	andi	r2,r2,255
  803a1c:	10803fe0 	cmpeqi	r2,r2,255
  803a20:	1000021e 	bne	r2,zero,803a2c <SendCMD+0xb4>
      return 0xFF;
  803a24:	00bfffc4 	movi	r2,-1
  803a28:	00006206 	br	803bb4 <SendCMD+0x23c>

   /* Send command packet */
   TRANSMIT_U8(cmd); /* Start + Command index */
  803a2c:	00a04034 	movhi	r2,33024
  803a30:	10841004 	addi	r2,r2,4160
  803a34:	e0fffe03 	ldbu	r3,-8(fp)
  803a38:	10c00015 	stw	r3,0(r2)
  803a3c:	0001883a 	nop
  803a40:	00a04034 	movhi	r2,33024
  803a44:	10841304 	addi	r2,r2,4172
  803a48:	10800017 	ldw	r2,0(r2)
  803a4c:	1080004c 	andi	r2,r2,1
  803a50:	103ffb26 	beq	r2,zero,803a40 <__alt_data_end+0xff803a40>
   TRANSMIT_U8((FFS_U8) (arg >> 24));  /* Argument[31..24] */
  803a54:	00a04034 	movhi	r2,33024
  803a58:	10841004 	addi	r2,r2,4160
  803a5c:	e0ffff17 	ldw	r3,-4(fp)
  803a60:	1806d63a 	srli	r3,r3,24
  803a64:	18c03fcc 	andi	r3,r3,255
  803a68:	10c00015 	stw	r3,0(r2)
  803a6c:	0001883a 	nop
  803a70:	00a04034 	movhi	r2,33024
  803a74:	10841304 	addi	r2,r2,4172
  803a78:	10800017 	ldw	r2,0(r2)
  803a7c:	1080004c 	andi	r2,r2,1
  803a80:	103ffb26 	beq	r2,zero,803a70 <__alt_data_end+0xff803a70>
   TRANSMIT_U8((FFS_U8) (arg >> 16));  /* Argument[23..16] */
  803a84:	00a04034 	movhi	r2,33024
  803a88:	10841004 	addi	r2,r2,4160
  803a8c:	e0ffff17 	ldw	r3,-4(fp)
  803a90:	1806d43a 	srli	r3,r3,16
  803a94:	18c03fcc 	andi	r3,r3,255
  803a98:	10c00015 	stw	r3,0(r2)
  803a9c:	0001883a 	nop
  803aa0:	00a04034 	movhi	r2,33024
  803aa4:	10841304 	addi	r2,r2,4172
  803aa8:	10800017 	ldw	r2,0(r2)
  803aac:	1080004c 	andi	r2,r2,1
  803ab0:	103ffb26 	beq	r2,zero,803aa0 <__alt_data_end+0xff803aa0>
   TRANSMIT_U8((FFS_U8) (arg >> 8));   /* Argument[15..8] */
  803ab4:	00a04034 	movhi	r2,33024
  803ab8:	10841004 	addi	r2,r2,4160
  803abc:	e0ffff17 	ldw	r3,-4(fp)
  803ac0:	1806d23a 	srli	r3,r3,8
  803ac4:	18c03fcc 	andi	r3,r3,255
  803ac8:	10c00015 	stw	r3,0(r2)
  803acc:	0001883a 	nop
  803ad0:	00a04034 	movhi	r2,33024
  803ad4:	10841304 	addi	r2,r2,4172
  803ad8:	10800017 	ldw	r2,0(r2)
  803adc:	1080004c 	andi	r2,r2,1
  803ae0:	103ffb26 	beq	r2,zero,803ad0 <__alt_data_end+0xff803ad0>
   TRANSMIT_U8((FFS_U8) arg); /* Argument[7..0] */
  803ae4:	00a04034 	movhi	r2,33024
  803ae8:	10841004 	addi	r2,r2,4160
  803aec:	e0ffff17 	ldw	r3,-4(fp)
  803af0:	18c03fcc 	andi	r3,r3,255
  803af4:	10c00015 	stw	r3,0(r2)
  803af8:	0001883a 	nop
  803afc:	00a04034 	movhi	r2,33024
  803b00:	10841304 	addi	r2,r2,4172
  803b04:	10800017 	ldw	r2,0(r2)
  803b08:	1080004c 	andi	r2,r2,1
  803b0c:	103ffb26 	beq	r2,zero,803afc <__alt_data_end+0xff803afc>

   n = 0x01;   /* Dummy CRC + Stop */
  803b10:	00800044 	movi	r2,1
  803b14:	e0bffd05 	stb	r2,-12(fp)
   if (cmd == CMD0)
  803b18:	e0bffe03 	ldbu	r2,-8(fp)
  803b1c:	10801018 	cmpnei	r2,r2,64
  803b20:	1000021e 	bne	r2,zero,803b2c <SendCMD+0x1b4>
      n = 0x95;   /* Valid CRC for CMD0(0) */
  803b24:	00bfe544 	movi	r2,-107
  803b28:	e0bffd05 	stb	r2,-12(fp)
   if (cmd == CMD8)
  803b2c:	e0bffe03 	ldbu	r2,-8(fp)
  803b30:	10801218 	cmpnei	r2,r2,72
  803b34:	1000021e 	bne	r2,zero,803b40 <SendCMD+0x1c8>
      n = 0x87;   /* Valid CRC for CMD8(0x1AA) */
  803b38:	00bfe1c4 	movi	r2,-121
  803b3c:	e0bffd05 	stb	r2,-12(fp)
   TRANSMIT_U8(n);
  803b40:	00a04034 	movhi	r2,33024
  803b44:	10841004 	addi	r2,r2,4160
  803b48:	e0fffd03 	ldbu	r3,-12(fp)
  803b4c:	10c00015 	stw	r3,0(r2)
  803b50:	0001883a 	nop
  803b54:	00a04034 	movhi	r2,33024
  803b58:	10841304 	addi	r2,r2,4172
  803b5c:	10800017 	ldw	r2,0(r2)
  803b60:	1080004c 	andi	r2,r2,1
  803b64:	103ffb26 	beq	r2,zero,803b54 <__alt_data_end+0xff803b54>

   /* Receive command response */
   if (cmd == CMD12)
  803b68:	e0bffe03 	ldbu	r2,-8(fp)
  803b6c:	10801318 	cmpnei	r2,r2,76
  803b70:	1000011e 	bne	r2,zero,803b78 <SendCMD+0x200>
      ReceiveU8();   /* Skip a stuff byte when stop reading */
  803b74:	08035b80 	call	8035b8 <ReceiveU8>

   n = 10;  /* Wait for a valid response in timeout of 10 attempts */
  803b78:	00800284 	movi	r2,10
  803b7c:	e0bffd05 	stb	r2,-12(fp)
   do
   {
      res = ReceiveU8();
  803b80:	08035b80 	call	8035b8 <ReceiveU8>
  803b84:	e0bffd45 	stb	r2,-11(fp)
   }
   while ((res & 0x80) && --n);
  803b88:	e0bffd43 	ldbu	r2,-11(fp)
  803b8c:	10803fcc 	andi	r2,r2,255
  803b90:	1080201c 	xori	r2,r2,128
  803b94:	10bfe004 	addi	r2,r2,-128
  803b98:	1000050e 	bge	r2,zero,803bb0 <SendCMD+0x238>
  803b9c:	e0bffd03 	ldbu	r2,-12(fp)
  803ba0:	10bfffc4 	addi	r2,r2,-1
  803ba4:	e0bffd05 	stb	r2,-12(fp)
  803ba8:	e0bffd03 	ldbu	r2,-12(fp)
  803bac:	103ff41e 	bne	r2,zero,803b80 <__alt_data_end+0xff803b80>

   return(res); /* Return with the response value */
  803bb0:	e0bffd43 	ldbu	r2,-11(fp)
} /* SendCMD */
  803bb4:	e037883a 	mov	sp,fp
  803bb8:	dfc00117 	ldw	ra,4(sp)
  803bbc:	df000017 	ldw	fp,0(sp)
  803bc0:	dec00204 	addi	sp,sp,8
  803bc4:	f800283a 	ret

00803bc8 <ffs_DiskIOInit>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: FFS_OK                                                         */
/***************************************************************************/
FFS_RESULT ffs_DiskIOInit (void)
{
  803bc8:	defffe04 	addi	sp,sp,-8
  803bcc:	dfc00115 	stw	ra,4(sp)
  803bd0:	df000015 	stw	fp,0(sp)
  803bd4:	d839883a 	mov	fp,sp
   (void)XMITDummy;

   InitDiskIOHardware();
  803bd8:	08035000 	call	803500 <InitDiskIOHardware>

   return(FFS_OK);
  803bdc:	0005883a 	mov	r2,zero
} /* ffs_DiskIOInit */
  803be0:	e037883a 	mov	sp,fp
  803be4:	dfc00117 	ldw	ra,4(sp)
  803be8:	df000017 	ldw	fp,0(sp)
  803bec:	dec00204 	addi	sp,sp,8
  803bf0:	f800283a 	ret

00803bf4 <ffs_DiskIOTimerproc>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void ffs_DiskIOTimerproc (void)
{
  803bf4:	defffc04 	addi	sp,sp,-16
  803bf8:	dfc00315 	stw	ra,12(sp)
  803bfc:	df000215 	stw	fp,8(sp)
  803c00:	df000204 	addi	fp,sp,8
   static FFS_U32 pvm;
   FFS_U32 n;
   DSTATUS s;

   /* 100Hz decrement timer */
   n = Timer1;
  803c04:	d0a7688b 	ldhu	r2,-25182(gp)
  803c08:	10bfffcc 	andi	r2,r2,65535
  803c0c:	e0bfff15 	stw	r2,-4(fp)
   if (n)
  803c10:	e0bfff17 	ldw	r2,-4(fp)
  803c14:	10000526 	beq	r2,zero,803c2c <ffs_DiskIOTimerproc+0x38>
      Timer1 = (FFS_U16)-- n;
  803c18:	e0bfff17 	ldw	r2,-4(fp)
  803c1c:	10bfffc4 	addi	r2,r2,-1
  803c20:	e0bfff15 	stw	r2,-4(fp)
  803c24:	e0bfff17 	ldw	r2,-4(fp)
  803c28:	d0a7688d 	sth	r2,-25182(gp)
   n = Timer2;
  803c2c:	d0a7690b 	ldhu	r2,-25180(gp)
  803c30:	10bfffcc 	andi	r2,r2,65535
  803c34:	e0bfff15 	stw	r2,-4(fp)
   if (n)
  803c38:	e0bfff17 	ldw	r2,-4(fp)
  803c3c:	10000526 	beq	r2,zero,803c54 <ffs_DiskIOTimerproc+0x60>
      Timer2 = (FFS_U16)-- n;
  803c40:	e0bfff17 	ldw	r2,-4(fp)
  803c44:	10bfffc4 	addi	r2,r2,-1
  803c48:	e0bfff15 	stw	r2,-4(fp)
  803c4c:	e0bfff17 	ldw	r2,-4(fp)
  803c50:	d0a7690d 	sth	r2,-25180(gp)

   n = pvm;
  803c54:	d0a76b17 	ldw	r2,-25172(gp)
  803c58:	e0bfff15 	stw	r2,-4(fp)

   /* Sample socket switch */
   pvm = GetCDWP();
  803c5c:	08038bc0 	call	8038bc <GetCDWP>
  803c60:	d0a76b15 	stw	r2,-25172(gp)

   /* Have contacts stabled? */
   if (n == pvm)
  803c64:	d0a76b17 	ldw	r2,-25172(gp)
  803c68:	e0ffff17 	ldw	r3,-4(fp)
  803c6c:	18801e1e 	bne	r3,r2,803ce8 <ffs_DiskIOTimerproc+0xf4>
   {
      s = Stat;
  803c70:	d0a00103 	ldbu	r2,-32764(gp)
  803c74:	e0bffe05 	stb	r2,-8(fp)

      /* Check write protect */
      if (pvm & SOCK_WP_ACTIVE)
  803c78:	d0a76b17 	ldw	r2,-25172(gp)
  803c7c:	1080008c 	andi	r2,r2,2
  803c80:	10000426 	beq	r2,zero,803c94 <ffs_DiskIOTimerproc+0xa0>
         s |= STA_PROTECT;
  803c84:	e0bffe03 	ldbu	r2,-8(fp)
  803c88:	10800114 	ori	r2,r2,4
  803c8c:	e0bffe05 	stb	r2,-8(fp)
  803c90:	00000406 	br	803ca4 <ffs_DiskIOTimerproc+0xb0>
      else
         s &= ~STA_PROTECT;
  803c94:	e0fffe03 	ldbu	r3,-8(fp)
  803c98:	00bffec4 	movi	r2,-5
  803c9c:	1884703a 	and	r2,r3,r2
  803ca0:	e0bffe05 	stb	r2,-8(fp)

      /* Check socket empty */
      if (pvm & SOCK_CD_EMPTY)
  803ca4:	d0a76b17 	ldw	r2,-25172(gp)
  803ca8:	1080004c 	andi	r2,r2,1
  803cac:	10000426 	beq	r2,zero,803cc0 <ffs_DiskIOTimerproc+0xcc>
         s |= (STA_NODISK | STA_NOINIT);
  803cb0:	e0bffe03 	ldbu	r2,-8(fp)
  803cb4:	108000d4 	ori	r2,r2,3
  803cb8:	e0bffe05 	stb	r2,-8(fp)
  803cbc:	00000406 	br	803cd0 <ffs_DiskIOTimerproc+0xdc>
      else
         s &= ~STA_NODISK;
  803cc0:	e0fffe03 	ldbu	r3,-8(fp)
  803cc4:	00bfff44 	movi	r2,-3
  803cc8:	1884703a 	and	r2,r3,r2
  803ccc:	e0bffe05 	stb	r2,-8(fp)

#if (FFS_SUPPORT_HW_WP == 0)
      /* Ignore the write protect */
      s &= ~STA_PROTECT;
  803cd0:	e0fffe03 	ldbu	r3,-8(fp)
  803cd4:	00bffec4 	movi	r2,-5
  803cd8:	1884703a 	and	r2,r3,r2
  803cdc:	e0bffe05 	stb	r2,-8(fp)
#endif

      Stat = s;
  803ce0:	e0bffe03 	ldbu	r2,-8(fp)
  803ce4:	d0a00105 	stb	r2,-32764(gp)
   }
} /* ffs_DiskIOTimerproc */
  803ce8:	e037883a 	mov	sp,fp
  803cec:	dfc00117 	ldw	ra,4(sp)
  803cf0:	df000017 	ldw	fp,0(sp)
  803cf4:	dec00204 	addi	sp,sp,8
  803cf8:	f800283a 	ret

00803cfc <ffs_DiskIOInitialize>:
/*  In    : Physical drive nmuber                                          */
/*  Out   : none                                                           */
/*  Return: DSTATUS                                                        */
/***************************************************************************/
DSTATUS ffs_DiskIOInitialize (FFS_U8 drv)
{
  803cfc:	defffa04 	addi	sp,sp,-24
  803d00:	dfc00515 	stw	ra,20(sp)
  803d04:	df000415 	stw	fp,16(sp)
  803d08:	dc000315 	stw	r16,12(sp)
  803d0c:	df000404 	addi	fp,sp,16
  803d10:	2005883a 	mov	r2,r4
  803d14:	e0bffe05 	stb	r2,-8(fp)
   FFS_U8 n, ty, cmd, ocr[4];

   (void)drv;

   if (Stat & STA_NODISK)  /* No card in the socket */
  803d18:	d0a00103 	ldbu	r2,-32764(gp)
  803d1c:	10803fcc 	andi	r2,r2,255
  803d20:	1080008c 	andi	r2,r2,2
  803d24:	10000226 	beq	r2,zero,803d30 <ffs_DiskIOInitialize+0x34>
      return Stat;
  803d28:	d0a00103 	ldbu	r2,-32764(gp)
  803d2c:	00008406 	br	803f40 <ffs_DiskIOInitialize+0x244>

   /* low speed during init */
   SetLowSpeed();
  803d30:	08034480 	call	803448 <SetLowSpeed>

   POWER_ON(); /* Force socket power ON */
   for (n = 10; n; n--)
  803d34:	00800284 	movi	r2,10
  803d38:	e0bffc05 	stb	r2,-16(fp)
  803d3c:	00000406 	br	803d50 <ffs_DiskIOInitialize+0x54>
      ReceiveU8();   /* 80 dummy clocks */
  803d40:	08035b80 	call	8035b8 <ReceiveU8>

   /* low speed during init */
   SetLowSpeed();

   POWER_ON(); /* Force socket power ON */
   for (n = 10; n; n--)
  803d44:	e0bffc03 	ldbu	r2,-16(fp)
  803d48:	10bfffc4 	addi	r2,r2,-1
  803d4c:	e0bffc05 	stb	r2,-16(fp)
  803d50:	e0bffc03 	ldbu	r2,-16(fp)
  803d54:	103ffa1e 	bne	r2,zero,803d40 <__alt_data_end+0xff803d40>
      ReceiveU8();   /* 80 dummy clocks */

   ty = 0;
  803d58:	e03ffc45 	stb	zero,-15(fp)
   if (SendCMD(CMD0, 0) == 1)
  803d5c:	01001004 	movi	r4,64
  803d60:	000b883a 	mov	r5,zero
  803d64:	08039780 	call	803978 <SendCMD>
  803d68:	10803fcc 	andi	r2,r2,255
  803d6c:	10800058 	cmpnei	r2,r2,1
  803d70:	1000681e 	bne	r2,zero,803f14 <ffs_DiskIOInitialize+0x218>
   {  /* Enter Idle state */
      Timer1 = 100;  /* Initialization timeout of 1000 msec */
  803d74:	00801904 	movi	r2,100
  803d78:	d0a7688d 	sth	r2,-25182(gp)
      if (SendCMD(CMD8, 0x1AA) == 1)
  803d7c:	01001204 	movi	r4,72
  803d80:	01406a84 	movi	r5,426
  803d84:	08039780 	call	803978 <SendCMD>
  803d88:	10803fcc 	andi	r2,r2,255
  803d8c:	10800058 	cmpnei	r2,r2,1
  803d90:	10003e1e 	bne	r2,zero,803e8c <ffs_DiskIOInitialize+0x190>
      {  /* SDC ver 2.00 */
         for (n = 0; n < 4; n++)
  803d94:	e03ffc05 	stb	zero,-16(fp)
  803d98:	00000906 	br	803dc0 <ffs_DiskIOInitialize+0xc4>
            ocr[n] = ReceiveU8();
  803d9c:	e43ffc03 	ldbu	r16,-16(fp)
  803da0:	08035b80 	call	8035b8 <ReceiveU8>
  803da4:	1007883a 	mov	r3,r2
  803da8:	e0bffcc4 	addi	r2,fp,-13
  803dac:	1405883a 	add	r2,r2,r16
  803db0:	10c00005 	stb	r3,0(r2)
   if (SendCMD(CMD0, 0) == 1)
   {  /* Enter Idle state */
      Timer1 = 100;  /* Initialization timeout of 1000 msec */
      if (SendCMD(CMD8, 0x1AA) == 1)
      {  /* SDC ver 2.00 */
         for (n = 0; n < 4; n++)
  803db4:	e0bffc03 	ldbu	r2,-16(fp)
  803db8:	10800044 	addi	r2,r2,1
  803dbc:	e0bffc05 	stb	r2,-16(fp)
  803dc0:	e0bffc03 	ldbu	r2,-16(fp)
  803dc4:	10800130 	cmpltui	r2,r2,4
  803dc8:	103ff41e 	bne	r2,zero,803d9c <__alt_data_end+0xff803d9c>
            ocr[n] = ReceiveU8();
         if (ocr[2] == 0x01 && ocr[3] == 0xAA)
  803dcc:	e0bffd43 	ldbu	r2,-11(fp)
  803dd0:	10803fcc 	andi	r2,r2,255
  803dd4:	10800058 	cmpnei	r2,r2,1
  803dd8:	10004e1e 	bne	r2,zero,803f14 <ffs_DiskIOInitialize+0x218>
  803ddc:	e0bffd83 	ldbu	r2,-10(fp)
  803de0:	10803fcc 	andi	r2,r2,255
  803de4:	10802a98 	cmpnei	r2,r2,170
  803de8:	10004a1e 	bne	r2,zero,803f14 <ffs_DiskIOInitialize+0x218>
         {  /* The card can work at vdd range of 2.7-3.6V */
            while (Timer1 && SendCMD(ACMD41, 1UL << 30)) ;  /* ACMD41 with HCS bit */
  803dec:	0001883a 	nop
  803df0:	d0a7688b 	ldhu	r2,-25182(gp)
  803df4:	10bfffcc 	andi	r2,r2,65535
  803df8:	10000526 	beq	r2,zero,803e10 <ffs_DiskIOInitialize+0x114>
  803dfc:	01003a44 	movi	r4,233
  803e00:	01500034 	movhi	r5,16384
  803e04:	08039780 	call	803978 <SendCMD>
  803e08:	10803fcc 	andi	r2,r2,255
  803e0c:	103ff81e 	bne	r2,zero,803df0 <__alt_data_end+0xff803df0>
            if (Timer1 && SendCMD(CMD58, 0) == 0)
  803e10:	d0a7688b 	ldhu	r2,-25182(gp)
  803e14:	10bfffcc 	andi	r2,r2,65535
  803e18:	10003e26 	beq	r2,zero,803f14 <ffs_DiskIOInitialize+0x218>
  803e1c:	01001e84 	movi	r4,122
  803e20:	000b883a 	mov	r5,zero
  803e24:	08039780 	call	803978 <SendCMD>
  803e28:	10803fcc 	andi	r2,r2,255
  803e2c:	1000391e 	bne	r2,zero,803f14 <ffs_DiskIOInitialize+0x218>
            {  /* Check CCS bit */
               for (n = 0; n < 4; n++)
  803e30:	e03ffc05 	stb	zero,-16(fp)
  803e34:	00000906 	br	803e5c <ffs_DiskIOInitialize+0x160>
                  ocr[n] = ReceiveU8();
  803e38:	e43ffc03 	ldbu	r16,-16(fp)
  803e3c:	08035b80 	call	8035b8 <ReceiveU8>
  803e40:	1007883a 	mov	r3,r2
  803e44:	e0bffcc4 	addi	r2,fp,-13
  803e48:	1405883a 	add	r2,r2,r16
  803e4c:	10c00005 	stb	r3,0(r2)
         if (ocr[2] == 0x01 && ocr[3] == 0xAA)
         {  /* The card can work at vdd range of 2.7-3.6V */
            while (Timer1 && SendCMD(ACMD41, 1UL << 30)) ;  /* ACMD41 with HCS bit */
            if (Timer1 && SendCMD(CMD58, 0) == 0)
            {  /* Check CCS bit */
               for (n = 0; n < 4; n++)
  803e50:	e0bffc03 	ldbu	r2,-16(fp)
  803e54:	10800044 	addi	r2,r2,1
  803e58:	e0bffc05 	stb	r2,-16(fp)
  803e5c:	e0bffc03 	ldbu	r2,-16(fp)
  803e60:	10800130 	cmpltui	r2,r2,4
  803e64:	103ff41e 	bne	r2,zero,803e38 <__alt_data_end+0xff803e38>
                  ocr[n] = ReceiveU8();
               ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
  803e68:	e0bffcc3 	ldbu	r2,-13(fp)
  803e6c:	10803fcc 	andi	r2,r2,255
  803e70:	1080100c 	andi	r2,r2,64
  803e74:	10000226 	beq	r2,zero,803e80 <ffs_DiskIOInitialize+0x184>
  803e78:	00800304 	movi	r2,12
  803e7c:	00000106 	br	803e84 <ffs_DiskIOInitialize+0x188>
  803e80:	00800104 	movi	r2,4
  803e84:	e0bffc45 	stb	r2,-15(fp)
  803e88:	00002206 	br	803f14 <ffs_DiskIOInitialize+0x218>
            }
         }
      }
      else
      {  /* SDC ver 1.XX or MMC */
         if (SendCMD(ACMD41, 0) <= 1)
  803e8c:	01003a44 	movi	r4,233
  803e90:	000b883a 	mov	r5,zero
  803e94:	08039780 	call	803978 <SendCMD>
  803e98:	10803fcc 	andi	r2,r2,255
  803e9c:	108000a8 	cmpgeui	r2,r2,2
  803ea0:	1000051e 	bne	r2,zero,803eb8 <ffs_DiskIOInitialize+0x1bc>
         {
            ty  = CT_SD1;
  803ea4:	00800084 	movi	r2,2
  803ea8:	e0bffc45 	stb	r2,-15(fp)
            cmd = ACMD41;  /* SDC ver 1.XX */
  803eac:	00bffa44 	movi	r2,-23
  803eb0:	e0bffc85 	stb	r2,-14(fp)
  803eb4:	00000406 	br	803ec8 <ffs_DiskIOInitialize+0x1cc>
         }
         else
         {
            ty  = CT_MMC;
  803eb8:	00800044 	movi	r2,1
  803ebc:	e0bffc45 	stb	r2,-15(fp)
            cmd = CMD1; /* MMC */
  803ec0:	00801044 	movi	r2,65
  803ec4:	e0bffc85 	stb	r2,-14(fp)
         }
         while (Timer1 && SendCMD(cmd, 0)) ; /* Wait for leaving idle state */
  803ec8:	0001883a 	nop
  803ecc:	d0a7688b 	ldhu	r2,-25182(gp)
  803ed0:	10bfffcc 	andi	r2,r2,65535
  803ed4:	10000626 	beq	r2,zero,803ef0 <ffs_DiskIOInitialize+0x1f4>
  803ed8:	e0bffc83 	ldbu	r2,-14(fp)
  803edc:	1009883a 	mov	r4,r2
  803ee0:	000b883a 	mov	r5,zero
  803ee4:	08039780 	call	803978 <SendCMD>
  803ee8:	10803fcc 	andi	r2,r2,255
  803eec:	103ff71e 	bne	r2,zero,803ecc <__alt_data_end+0xff803ecc>
         if (!Timer1 || SendCMD(CMD16, 512) != 0)  /* Select R/W block length */
  803ef0:	d0a7688b 	ldhu	r2,-25182(gp)
  803ef4:	10bfffcc 	andi	r2,r2,65535
  803ef8:	10000526 	beq	r2,zero,803f10 <ffs_DiskIOInitialize+0x214>
  803efc:	01001404 	movi	r4,80
  803f00:	01408004 	movi	r5,512
  803f04:	08039780 	call	803978 <SendCMD>
  803f08:	10803fcc 	andi	r2,r2,255
  803f0c:	10000126 	beq	r2,zero,803f14 <ffs_DiskIOInitialize+0x218>
            ty = 0;
  803f10:	e03ffc45 	stb	zero,-15(fp)
      }
   }
   CardType = ty;
  803f14:	e0bffc43 	ldbu	r2,-15(fp)
  803f18:	d0a76805 	stb	r2,-25184(gp)
   ReleaseBus();
  803f1c:	08039340 	call	803934 <ReleaseBus>

   if (ty)
  803f20:	e0bffc43 	ldbu	r2,-15(fp)
  803f24:	10000526 	beq	r2,zero,803f3c <ffs_DiskIOInitialize+0x240>
   {  /* Initialization succeded */
      Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
  803f28:	d0e00103 	ldbu	r3,-32764(gp)
  803f2c:	00bfff84 	movi	r2,-2
  803f30:	1884703a 	and	r2,r3,r2
  803f34:	d0a00105 	stb	r2,-32764(gp)

      SetHighSpeed();
  803f38:	08034940 	call	803494 <SetHighSpeed>
   else
   {  /* Initialization failed */
      POWER_OFF();
   }

   return(Stat);
  803f3c:	d0a00103 	ldbu	r2,-32764(gp)
} /* ffs_DiskIOInitialize */
  803f40:	e6ffff04 	addi	sp,fp,-4
  803f44:	dfc00217 	ldw	ra,8(sp)
  803f48:	df000117 	ldw	fp,4(sp)
  803f4c:	dc000017 	ldw	r16,0(sp)
  803f50:	dec00304 	addi	sp,sp,12
  803f54:	f800283a 	ret

00803f58 <ffs_DiskIOStatus>:
/*  In    : Physical drive nmuber                                          */
/*  Out   : none                                                           */
/*  Return: DSTATUS                                                        */
/***************************************************************************/
DSTATUS ffs_DiskIOStatus (FFS_U8 drv)
{
  803f58:	defffe04 	addi	sp,sp,-8
  803f5c:	df000115 	stw	fp,4(sp)
  803f60:	df000104 	addi	fp,sp,4
  803f64:	2005883a 	mov	r2,r4
  803f68:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   return(Stat);
  803f6c:	d0a00103 	ldbu	r2,-32764(gp)
} /* ffs_DiskIOStatus */
  803f70:	e037883a 	mov	sp,fp
  803f74:	df000017 	ldw	fp,0(sp)
  803f78:	dec00104 	addi	sp,sp,4
  803f7c:	f800283a 	ret

00803f80 <ffs_DiskIORead>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIORead (FFS_U8 drv, FFS_U8 * buff, FFS_U32 sector, FFS_U8 count)
{
  803f80:	defffa04 	addi	sp,sp,-24
  803f84:	dfc00515 	stw	ra,20(sp)
  803f88:	df000415 	stw	fp,16(sp)
  803f8c:	df000404 	addi	fp,sp,16
  803f90:	2007883a 	mov	r3,r4
  803f94:	e17ffd15 	stw	r5,-12(fp)
  803f98:	e1bffe15 	stw	r6,-8(fp)
  803f9c:	3805883a 	mov	r2,r7
  803fa0:	e0fffc05 	stb	r3,-16(fp)
  803fa4:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   if (!count)
  803fa8:	e0bfff03 	ldbu	r2,-4(fp)
  803fac:	1000021e 	bne	r2,zero,803fb8 <ffs_DiskIORead+0x38>
      return RES_PARERR;
  803fb0:	00800104 	movi	r2,4
  803fb4:	00003406 	br	804088 <ffs_DiskIORead+0x108>
   if (Stat & STA_NOINIT)
  803fb8:	d0a00103 	ldbu	r2,-32764(gp)
  803fbc:	10803fcc 	andi	r2,r2,255
  803fc0:	1080004c 	andi	r2,r2,1
  803fc4:	10000226 	beq	r2,zero,803fd0 <ffs_DiskIORead+0x50>
      return RES_NOTRDY;
  803fc8:	008000c4 	movi	r2,3
  803fcc:	00002e06 	br	804088 <ffs_DiskIORead+0x108>

   if (!(CardType & CT_BLOCK))
  803fd0:	d0a76803 	ldbu	r2,-25184(gp)
  803fd4:	10803fcc 	andi	r2,r2,255
  803fd8:	1080020c 	andi	r2,r2,8
  803fdc:	1000031e 	bne	r2,zero,803fec <ffs_DiskIORead+0x6c>
      sector *= 512; /* Convert LBA to byte address if needed */
  803fe0:	e0bffe17 	ldw	r2,-8(fp)
  803fe4:	1004927a 	slli	r2,r2,9
  803fe8:	e0bffe15 	stw	r2,-8(fp)

   if (count == 1)
  803fec:	e0bfff03 	ldbu	r2,-4(fp)
  803ff0:	10800058 	cmpnei	r2,r2,1
  803ff4:	10000b1e 	bne	r2,zero,804024 <ffs_DiskIORead+0xa4>
   {  /* Single block read */
      if ((SendCMD(CMD17, sector) == 0)   /* READ_SINGLE_BLOCK */
  803ff8:	01001444 	movi	r4,81
  803ffc:	e17ffe17 	ldw	r5,-8(fp)
  804000:	08039780 	call	803978 <SendCMD>
  804004:	10803fcc 	andi	r2,r2,255
  804008:	10001b1e 	bne	r2,zero,804078 <ffs_DiskIORead+0xf8>
          && ReceiveDatablock(buff, 512))
  80400c:	e13ffd17 	ldw	r4,-12(fp)
  804010:	01408004 	movi	r5,512
  804014:	08036080 	call	803608 <ReceiveDatablock>
  804018:	10001726 	beq	r2,zero,804078 <ffs_DiskIORead+0xf8>
         count = 0;
  80401c:	e03fff05 	stb	zero,-4(fp)
  804020:	00001506 	br	804078 <ffs_DiskIORead+0xf8>
   }
   else
   {  /* Multiple block read */
      if (SendCMD(CMD18, sector) == 0)
  804024:	01001484 	movi	r4,82
  804028:	e17ffe17 	ldw	r5,-8(fp)
  80402c:	08039780 	call	803978 <SendCMD>
  804030:	10803fcc 	andi	r2,r2,255
  804034:	1000101e 	bne	r2,zero,804078 <ffs_DiskIORead+0xf8>
      {  /* READ_MULTIPLE_BLOCK */
         do
         {
            if (!ReceiveDatablock(buff, 512))
  804038:	e13ffd17 	ldw	r4,-12(fp)
  80403c:	01408004 	movi	r5,512
  804040:	08036080 	call	803608 <ReceiveDatablock>
  804044:	1000011e 	bne	r2,zero,80404c <ffs_DiskIORead+0xcc>
               break;
  804048:	00000806 	br	80406c <ffs_DiskIORead+0xec>
            buff += 512;
  80404c:	e0bffd17 	ldw	r2,-12(fp)
  804050:	10808004 	addi	r2,r2,512
  804054:	e0bffd15 	stw	r2,-12(fp)
         }
         while (--count);
  804058:	e0bfff03 	ldbu	r2,-4(fp)
  80405c:	10bfffc4 	addi	r2,r2,-1
  804060:	e0bfff05 	stb	r2,-4(fp)
  804064:	e0bfff03 	ldbu	r2,-4(fp)
  804068:	103ff31e 	bne	r2,zero,804038 <__alt_data_end+0xff804038>
         SendCMD(CMD12, 0);   /* STOP_TRANSMISSION */
  80406c:	01001304 	movi	r4,76
  804070:	000b883a 	mov	r5,zero
  804074:	08039780 	call	803978 <SendCMD>
      }
   }
   ReleaseBus();
  804078:	08039340 	call	803934 <ReleaseBus>

   return(count ? RES_ERROR : RES_OK);
  80407c:	e0bfff03 	ldbu	r2,-4(fp)
  804080:	1004c03a 	cmpne	r2,r2,zero
  804084:	10803fcc 	andi	r2,r2,255
} /* ffs_DiskIORead */
  804088:	e037883a 	mov	sp,fp
  80408c:	dfc00117 	ldw	ra,4(sp)
  804090:	df000017 	ldw	fp,0(sp)
  804094:	dec00204 	addi	sp,sp,8
  804098:	f800283a 	ret

0080409c <ffs_DiskIOWrite>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIOWrite (FFS_U8 drv, const FFS_U8 * buff, FFS_U32 sector, FFS_U8 count)
{
  80409c:	defffa04 	addi	sp,sp,-24
  8040a0:	dfc00515 	stw	ra,20(sp)
  8040a4:	df000415 	stw	fp,16(sp)
  8040a8:	df000404 	addi	fp,sp,16
  8040ac:	2007883a 	mov	r3,r4
  8040b0:	e17ffd15 	stw	r5,-12(fp)
  8040b4:	e1bffe15 	stw	r6,-8(fp)
  8040b8:	3805883a 	mov	r2,r7
  8040bc:	e0fffc05 	stb	r3,-16(fp)
  8040c0:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   if (!count)
  8040c4:	e0bfff03 	ldbu	r2,-4(fp)
  8040c8:	1000021e 	bne	r2,zero,8040d4 <ffs_DiskIOWrite+0x38>
      return RES_PARERR;
  8040cc:	00800104 	movi	r2,4
  8040d0:	00004806 	br	8041f4 <ffs_DiskIOWrite+0x158>
   if (Stat & STA_NOINIT)
  8040d4:	d0a00103 	ldbu	r2,-32764(gp)
  8040d8:	10803fcc 	andi	r2,r2,255
  8040dc:	1080004c 	andi	r2,r2,1
  8040e0:	10000226 	beq	r2,zero,8040ec <ffs_DiskIOWrite+0x50>
      return RES_NOTRDY;
  8040e4:	008000c4 	movi	r2,3
  8040e8:	00004206 	br	8041f4 <ffs_DiskIOWrite+0x158>
   if (Stat & STA_PROTECT)
  8040ec:	d0a00103 	ldbu	r2,-32764(gp)
  8040f0:	10803fcc 	andi	r2,r2,255
  8040f4:	1080010c 	andi	r2,r2,4
  8040f8:	10000226 	beq	r2,zero,804104 <ffs_DiskIOWrite+0x68>
      return RES_WRPRT;
  8040fc:	00800084 	movi	r2,2
  804100:	00003c06 	br	8041f4 <ffs_DiskIOWrite+0x158>

   if (!(CardType & CT_BLOCK))
  804104:	d0a76803 	ldbu	r2,-25184(gp)
  804108:	10803fcc 	andi	r2,r2,255
  80410c:	1080020c 	andi	r2,r2,8
  804110:	1000031e 	bne	r2,zero,804120 <ffs_DiskIOWrite+0x84>
      sector *= 512; /* Convert LBA to byte address if needed */
  804114:	e0bffe17 	ldw	r2,-8(fp)
  804118:	1004927a 	slli	r2,r2,9
  80411c:	e0bffe15 	stw	r2,-8(fp)

   if (count == 1)
  804120:	e0bfff03 	ldbu	r2,-4(fp)
  804124:	10800058 	cmpnei	r2,r2,1
  804128:	10000b1e 	bne	r2,zero,804158 <ffs_DiskIOWrite+0xbc>
   {  /* Single block write */
      if ((SendCMD(CMD24, sector) == 0)   /* WRITE_BLOCK */
  80412c:	01001604 	movi	r4,88
  804130:	e17ffe17 	ldw	r5,-8(fp)
  804134:	08039780 	call	803978 <SendCMD>
  804138:	10803fcc 	andi	r2,r2,255
  80413c:	1000291e 	bne	r2,zero,8041e4 <ffs_DiskIOWrite+0x148>
          && TransmitDatablock(buff, 0xFE))
  804140:	e13ffd17 	ldw	r4,-12(fp)
  804144:	01403f84 	movi	r5,254
  804148:	08037340 	call	803734 <TransmitDatablock>
  80414c:	10002526 	beq	r2,zero,8041e4 <ffs_DiskIOWrite+0x148>
         count = 0;
  804150:	e03fff05 	stb	zero,-4(fp)
  804154:	00002306 	br	8041e4 <ffs_DiskIOWrite+0x148>
   }
   else
   {  /* Multiple block write */
      if (CardType & CT_SDC)
  804158:	d0a76803 	ldbu	r2,-25184(gp)
  80415c:	10803fcc 	andi	r2,r2,255
  804160:	1080018c 	andi	r2,r2,6
  804164:	10000726 	beq	r2,zero,804184 <ffs_DiskIOWrite+0xe8>
      {
         SendCMD(CMD55, 0);
  804168:	01001dc4 	movi	r4,119
  80416c:	000b883a 	mov	r5,zero
  804170:	08039780 	call	803978 <SendCMD>
         SendCMD(CMD23, count);  /* ACMD23 */
  804174:	e0bfff03 	ldbu	r2,-4(fp)
  804178:	010015c4 	movi	r4,87
  80417c:	100b883a 	mov	r5,r2
  804180:	08039780 	call	803978 <SendCMD>
      }
      if (SendCMD(CMD25, sector) == 0)
  804184:	01001644 	movi	r4,89
  804188:	e17ffe17 	ldw	r5,-8(fp)
  80418c:	08039780 	call	803978 <SendCMD>
  804190:	10803fcc 	andi	r2,r2,255
  804194:	1000131e 	bne	r2,zero,8041e4 <ffs_DiskIOWrite+0x148>
      {  /* WRITE_MULTIPLE_BLOCK */
         do
         {
            if (!TransmitDatablock(buff, 0xFC))
  804198:	e13ffd17 	ldw	r4,-12(fp)
  80419c:	01403f04 	movi	r5,252
  8041a0:	08037340 	call	803734 <TransmitDatablock>
  8041a4:	1000011e 	bne	r2,zero,8041ac <ffs_DiskIOWrite+0x110>
               break;
  8041a8:	00000806 	br	8041cc <ffs_DiskIOWrite+0x130>
            buff += 512;
  8041ac:	e0bffd17 	ldw	r2,-12(fp)
  8041b0:	10808004 	addi	r2,r2,512
  8041b4:	e0bffd15 	stw	r2,-12(fp)
         }
         while (--count);
  8041b8:	e0bfff03 	ldbu	r2,-4(fp)
  8041bc:	10bfffc4 	addi	r2,r2,-1
  8041c0:	e0bfff05 	stb	r2,-4(fp)
  8041c4:	e0bfff03 	ldbu	r2,-4(fp)
  8041c8:	103ff31e 	bne	r2,zero,804198 <__alt_data_end+0xff804198>
         if (!TransmitDatablock(0, 0xFD)) /* STOP_TRAN token */
  8041cc:	0009883a 	mov	r4,zero
  8041d0:	01403f44 	movi	r5,253
  8041d4:	08037340 	call	803734 <TransmitDatablock>
  8041d8:	1000021e 	bne	r2,zero,8041e4 <ffs_DiskIOWrite+0x148>
            count = 1;
  8041dc:	00800044 	movi	r2,1
  8041e0:	e0bfff05 	stb	r2,-4(fp)
      }
   }
   ReleaseBus();
  8041e4:	08039340 	call	803934 <ReleaseBus>

   return(count ? RES_ERROR : RES_OK);
  8041e8:	e0bfff03 	ldbu	r2,-4(fp)
  8041ec:	1004c03a 	cmpne	r2,r2,zero
  8041f0:	10803fcc 	andi	r2,r2,255
} /* ffs_DiskIOWrite */
  8041f4:	e037883a 	mov	sp,fp
  8041f8:	dfc00117 	ldw	ra,4(sp)
  8041fc:	df000017 	ldw	fp,0(sp)
  804200:	dec00204 	addi	sp,sp,8
  804204:	f800283a 	ret

00804208 <ffs_DiskIOIoctl>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIOIoctl (FFS_U8 drv, FFS_U8 ctrl, void *buff)
{
  804208:	defff204 	addi	sp,sp,-56
  80420c:	dfc00d15 	stw	ra,52(sp)
  804210:	df000c15 	stw	fp,48(sp)
  804214:	dc000b15 	stw	r16,44(sp)
  804218:	df000c04 	addi	fp,sp,48
  80421c:	2007883a 	mov	r3,r4
  804220:	2805883a 	mov	r2,r5
  804224:	e1bffe15 	stw	r6,-8(fp)
  804228:	e0fffc05 	stb	r3,-16(fp)
  80422c:	e0bffd05 	stb	r2,-12(fp)
   DRESULT res;
   FFS_U8 n, csd[16], *ptr = buff;
  804230:	e0bffe17 	ldw	r2,-8(fp)
  804234:	e0bff615 	stw	r2,-40(fp)
   FFS_U16 csize;

   (void)drv;

   if (Stat & STA_NOINIT)
  804238:	d0a00103 	ldbu	r2,-32764(gp)
  80423c:	10803fcc 	andi	r2,r2,255
  804240:	1080004c 	andi	r2,r2,1
  804244:	10000226 	beq	r2,zero,804250 <ffs_DiskIOIoctl+0x48>
      return RES_NOTRDY;
  804248:	008000c4 	movi	r2,3
  80424c:	00011206 	br	804698 <ffs_DiskIOIoctl+0x490>

   res = RES_ERROR;
  804250:	00800044 	movi	r2,1
  804254:	e0bff415 	stw	r2,-48(fp)
   switch (ctrl)
  804258:	e0bffd03 	ldbu	r2,-12(fp)
  80425c:	10c003e8 	cmpgeui	r3,r2,15
  804260:	1801091e 	bne	r3,zero,804688 <ffs_DiskIOIoctl+0x480>
  804264:	100690ba 	slli	r3,r2,2
  804268:	00802034 	movhi	r2,128
  80426c:	10909f04 	addi	r2,r2,17020
  804270:	1885883a 	add	r2,r3,r2
  804274:	10800017 	ldw	r2,0(r2)
  804278:	1000683a 	jmp	r2
  80427c:	008042b8 	rdprs	r2,zero,266
  804280:	008042f4 	movhi	r2,267
  804284:	00804408 	cmpgei	r2,zero,272
  804288:	0080441c 	xori	r2,zero,272
  80428c:	00804688 	cmpgei	r2,zero,282
  804290:	00804688 	cmpgei	r2,zero,282
  804294:	00804688 	cmpgei	r2,zero,282
  804298:	00804688 	cmpgei	r2,zero,282
  80429c:	00804688 	cmpgei	r2,zero,282
  8042a0:	00804688 	cmpgei	r2,zero,282
  8042a4:	0080458c 	andi	r2,zero,278
  8042a8:	008045a0 	cmpeqi	r2,zero,278
  8042ac:	008045d0 	cmplti	r2,zero,279
  8042b0:	00804600 	call	80460 <__alt_mem_sdram_0-0x77fba0>
  8042b4:	00804654 	movui	r2,281
   {
      case CTRL_SYNC:  /* Make sure that pending write process has been finished */
         SELECT();
  8042b8:	d0e76a17 	ldw	r3,-25176(gp)
  8042bc:	00bfff84 	movi	r2,-2
  8042c0:	1884703a 	and	r2,r3,r2
  8042c4:	d0a76a15 	stw	r2,-25176(gp)
  8042c8:	00a04034 	movhi	r2,33024
  8042cc:	10841204 	addi	r2,r2,4168
  8042d0:	d0e76a17 	ldw	r3,-25176(gp)
  8042d4:	10c00015 	stw	r3,0(r2)
         if (WaitReady() == 0xFF)
  8042d8:	08038e00 	call	8038e0 <WaitReady>
  8042dc:	10803fcc 	andi	r2,r2,255
  8042e0:	10803fd8 	cmpnei	r2,r2,255
  8042e4:	1000021e 	bne	r2,zero,8042f0 <ffs_DiskIOIoctl+0xe8>
            res = RES_OK;
  8042e8:	e03ff415 	stw	zero,-48(fp)
         break;
  8042ec:	0000e806 	br	804690 <ffs_DiskIOIoctl+0x488>
  8042f0:	0000e706 	br	804690 <ffs_DiskIOIoctl+0x488>

      case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
         if ((SendCMD(CMD9, 0) == 0) && ReceiveDatablock(csd, 16))
  8042f4:	01001244 	movi	r4,73
  8042f8:	000b883a 	mov	r5,zero
  8042fc:	08039780 	call	803978 <SendCMD>
  804300:	10803fcc 	andi	r2,r2,255
  804304:	10003f1e 	bne	r2,zero,804404 <ffs_DiskIOIoctl+0x1fc>
  804308:	e0bff784 	addi	r2,fp,-34
  80430c:	1009883a 	mov	r4,r2
  804310:	01400404 	movi	r5,16
  804314:	08036080 	call	803608 <ReceiveDatablock>
  804318:	10003a26 	beq	r2,zero,804404 <ffs_DiskIOIoctl+0x1fc>
         {
            if ((csd[0] >> 6) == 1)
  80431c:	e0bff783 	ldbu	r2,-34(fp)
  804320:	10803fcc 	andi	r2,r2,255
  804324:	1004d1ba 	srli	r2,r2,6
  804328:	10803fcc 	andi	r2,r2,255
  80432c:	10800058 	cmpnei	r2,r2,1
  804330:	10000d1e 	bne	r2,zero,804368 <ffs_DiskIOIoctl+0x160>
            {  /* SDC ver 2.00 */
               //@@MF csize = csd[9] + ((FFS_U16)csd[8] << 8) + 1;
               csize = (FFS_U16) ((FFS_U16) csd[9] | ((FFS_U16) csd[8] << 8)) + 1;
  804334:	e0bff9c3 	ldbu	r2,-25(fp)
  804338:	10803fcc 	andi	r2,r2,255
  80433c:	e0fff983 	ldbu	r3,-26(fp)
  804340:	18c03fcc 	andi	r3,r3,255
  804344:	1806923a 	slli	r3,r3,8
  804348:	10c4b03a 	or	r2,r2,r3
  80434c:	10800044 	addi	r2,r2,1
  804350:	e0bff70d 	sth	r2,-36(fp)
               *(FFS_U32 *) buff = (FFS_U32) csize << 10;
  804354:	e0bff70b 	ldhu	r2,-36(fp)
  804358:	100692ba 	slli	r3,r2,10
  80435c:	e0bffe17 	ldw	r2,-8(fp)
  804360:	10c00015 	stw	r3,0(r2)
  804364:	00002506 	br	8043fc <ffs_DiskIOIoctl+0x1f4>
            }
            else
            {  /* MMC or SDC ver 1.XX */
               n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
  804368:	e0bff8c3 	ldbu	r2,-29(fp)
  80436c:	108003cc 	andi	r2,r2,15
  804370:	1007883a 	mov	r3,r2
  804374:	e0bffa03 	ldbu	r2,-24(fp)
  804378:	10803fcc 	andi	r2,r2,255
  80437c:	1004d1fa 	srli	r2,r2,7
  804380:	1885883a 	add	r2,r3,r2
  804384:	1007883a 	mov	r3,r2
  804388:	e0bff9c3 	ldbu	r2,-25(fp)
  80438c:	108000cc 	andi	r2,r2,3
  804390:	1085883a 	add	r2,r2,r2
  804394:	1885883a 	add	r2,r3,r2
  804398:	10800084 	addi	r2,r2,2
  80439c:	e0bff505 	stb	r2,-44(fp)
               csize = (csd[8] >> 6) + ((FFS_U16) csd[7] << 2) + ((FFS_U16) (csd[6] & 3) << 10) + 1;
  8043a0:	e0bff983 	ldbu	r2,-26(fp)
  8043a4:	10803fcc 	andi	r2,r2,255
  8043a8:	1004d1ba 	srli	r2,r2,6
  8043ac:	10c03fcc 	andi	r3,r2,255
  8043b0:	e0bff943 	ldbu	r2,-27(fp)
  8043b4:	10803fcc 	andi	r2,r2,255
  8043b8:	1085883a 	add	r2,r2,r2
  8043bc:	1085883a 	add	r2,r2,r2
  8043c0:	1885883a 	add	r2,r3,r2
  8043c4:	1007883a 	mov	r3,r2
  8043c8:	e0bff903 	ldbu	r2,-28(fp)
  8043cc:	10803fcc 	andi	r2,r2,255
  8043d0:	108000cc 	andi	r2,r2,3
  8043d4:	100492ba 	slli	r2,r2,10
  8043d8:	1885883a 	add	r2,r3,r2
  8043dc:	10800044 	addi	r2,r2,1
  8043e0:	e0bff70d 	sth	r2,-36(fp)
               *(FFS_U32 *) buff = (FFS_U32) csize << (n - 9);
  8043e4:	e0fff70b 	ldhu	r3,-36(fp)
  8043e8:	e0bff503 	ldbu	r2,-44(fp)
  8043ec:	10bffdc4 	addi	r2,r2,-9
  8043f0:	1886983a 	sll	r3,r3,r2
  8043f4:	e0bffe17 	ldw	r2,-8(fp)
  8043f8:	10c00015 	stw	r3,0(r2)
            }
            res = RES_OK;
  8043fc:	e03ff415 	stw	zero,-48(fp)
         }
         break;
  804400:	0000a306 	br	804690 <ffs_DiskIOIoctl+0x488>
  804404:	0000a206 	br	804690 <ffs_DiskIOIoctl+0x488>

      case GET_SECTOR_SIZE:  /* Get sectors on the disk (WORD) */
         *(FFS_U16 *) buff = 512;
  804408:	e0bffe17 	ldw	r2,-8(fp)
  80440c:	00c08004 	movi	r3,512
  804410:	10c0000d 	sth	r3,0(r2)
         res = RES_OK;
  804414:	e03ff415 	stw	zero,-48(fp)
         break;
  804418:	00009d06 	br	804690 <ffs_DiskIOIoctl+0x488>

      case GET_BLOCK_SIZE:   /* Get erase block size in unit of sectors (DWORD) */
         if (CardType & CT_SD2)
  80441c:	d0a76803 	ldbu	r2,-25184(gp)
  804420:	10803fcc 	andi	r2,r2,255
  804424:	1080010c 	andi	r2,r2,4
  804428:	10001e26 	beq	r2,zero,8044a4 <ffs_DiskIOIoctl+0x29c>
         {  /* SDC ver 2.00 */
            if (SendCMD(ACMD13, 0) == 0)
  80442c:	01003344 	movi	r4,205
  804430:	000b883a 	mov	r5,zero
  804434:	08039780 	call	803978 <SendCMD>
  804438:	10803fcc 	andi	r2,r2,255
  80443c:	1000521e 	bne	r2,zero,804588 <ffs_DiskIOIoctl+0x380>
            {  /* Read SD status */
               ReceiveU8();
  804440:	08035b80 	call	8035b8 <ReceiveU8>
               if (ReceiveDatablock(csd, 16))
  804444:	e0bff784 	addi	r2,fp,-34
  804448:	1009883a 	mov	r4,r2
  80444c:	01400404 	movi	r5,16
  804450:	08036080 	call	803608 <ReceiveDatablock>
  804454:	10004c26 	beq	r2,zero,804588 <ffs_DiskIOIoctl+0x380>
               {  /* Read partial block */
                  for (n = 64 - 16; n; n--)
  804458:	00800c04 	movi	r2,48
  80445c:	e0bff505 	stb	r2,-44(fp)
  804460:	00000406 	br	804474 <ffs_DiskIOIoctl+0x26c>
                     ReceiveU8();   /* Purge trailing data */
  804464:	08035b80 	call	8035b8 <ReceiveU8>
            if (SendCMD(ACMD13, 0) == 0)
            {  /* Read SD status */
               ReceiveU8();
               if (ReceiveDatablock(csd, 16))
               {  /* Read partial block */
                  for (n = 64 - 16; n; n--)
  804468:	e0bff503 	ldbu	r2,-44(fp)
  80446c:	10bfffc4 	addi	r2,r2,-1
  804470:	e0bff505 	stb	r2,-44(fp)
  804474:	e0bff503 	ldbu	r2,-44(fp)
  804478:	103ffa1e 	bne	r2,zero,804464 <__alt_data_end+0xff804464>
                     ReceiveU8();   /* Purge trailing data */
                  *(FFS_U32 *) buff = 16UL << (csd[10] >> 4);
  80447c:	e0bffa03 	ldbu	r2,-24(fp)
  804480:	10803fcc 	andi	r2,r2,255
  804484:	1004d13a 	srli	r2,r2,4
  804488:	10803fcc 	andi	r2,r2,255
  80448c:	00c00404 	movi	r3,16
  804490:	1886983a 	sll	r3,r3,r2
  804494:	e0bffe17 	ldw	r2,-8(fp)
  804498:	10c00015 	stw	r3,0(r2)
                  res = RES_OK;
  80449c:	e03ff415 	stw	zero,-48(fp)
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
               }
               res = RES_OK;
            }
         }
         break;
  8044a0:	00007b06 	br	804690 <ffs_DiskIOIoctl+0x488>
               }
            }
         }
         else
         {  /* SDC ver 1.XX or MMC */
            if ((SendCMD(CMD9, 0) == 0) && ReceiveDatablock(csd, 16))
  8044a4:	01001244 	movi	r4,73
  8044a8:	000b883a 	mov	r5,zero
  8044ac:	08039780 	call	803978 <SendCMD>
  8044b0:	10803fcc 	andi	r2,r2,255
  8044b4:	1000341e 	bne	r2,zero,804588 <ffs_DiskIOIoctl+0x380>
  8044b8:	e0bff784 	addi	r2,fp,-34
  8044bc:	1009883a 	mov	r4,r2
  8044c0:	01400404 	movi	r5,16
  8044c4:	08036080 	call	803608 <ReceiveDatablock>
  8044c8:	10002f26 	beq	r2,zero,804588 <ffs_DiskIOIoctl+0x380>
            {  /* Read CSD */
               if (CardType & CT_SD1)
  8044cc:	d0a76803 	ldbu	r2,-25184(gp)
  8044d0:	10803fcc 	andi	r2,r2,255
  8044d4:	1080008c 	andi	r2,r2,2
  8044d8:	10001526 	beq	r2,zero,804530 <ffs_DiskIOIoctl+0x328>
               {  /* SDC ver 1.XX */
                  *(FFS_U32 *) buff = (((csd[10] & 63) << 1) + ((FFS_U16) (csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
  8044dc:	e0bffa03 	ldbu	r2,-24(fp)
  8044e0:	10803fcc 	andi	r2,r2,255
  8044e4:	10800fcc 	andi	r2,r2,63
  8044e8:	1085883a 	add	r2,r2,r2
  8044ec:	1007883a 	mov	r3,r2
  8044f0:	e0bffa43 	ldbu	r2,-23(fp)
  8044f4:	10803fcc 	andi	r2,r2,255
  8044f8:	1004d1fa 	srli	r2,r2,7
  8044fc:	10803fcc 	andi	r2,r2,255
  804500:	1885883a 	add	r2,r3,r2
  804504:	10c00044 	addi	r3,r2,1
  804508:	e0bffac3 	ldbu	r2,-21(fp)
  80450c:	10803fcc 	andi	r2,r2,255
  804510:	1004d1ba 	srli	r2,r2,6
  804514:	10803fcc 	andi	r2,r2,255
  804518:	10bfffc4 	addi	r2,r2,-1
  80451c:	1884983a 	sll	r2,r3,r2
  804520:	1007883a 	mov	r3,r2
  804524:	e0bffe17 	ldw	r2,-8(fp)
  804528:	10c00015 	stw	r3,0(r2)
  80452c:	00001406 	br	804580 <ffs_DiskIOIoctl+0x378>
               }
               else
               {  /* MMC */
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
  804530:	e0bffa03 	ldbu	r2,-24(fp)
  804534:	10803fcc 	andi	r2,r2,255
  804538:	10801f0c 	andi	r2,r2,124
  80453c:	1005d0ba 	srai	r2,r2,2
  804540:	10bfffcc 	andi	r2,r2,65535
  804544:	10c00044 	addi	r3,r2,1
  804548:	e0bffa43 	ldbu	r2,-23(fp)
  80454c:	10803fcc 	andi	r2,r2,255
  804550:	108000cc 	andi	r2,r2,3
  804554:	100890fa 	slli	r4,r2,3
  804558:	e0bffa43 	ldbu	r2,-23(fp)
  80455c:	10803fcc 	andi	r2,r2,255
  804560:	1004d17a 	srli	r2,r2,5
  804564:	10803fcc 	andi	r2,r2,255
  804568:	2085883a 	add	r2,r4,r2
  80456c:	10800044 	addi	r2,r2,1
  804570:	1885383a 	mul	r2,r3,r2
  804574:	1007883a 	mov	r3,r2
  804578:	e0bffe17 	ldw	r2,-8(fp)
  80457c:	10c00015 	stw	r3,0(r2)
               }
               res = RES_OK;
  804580:	e03ff415 	stw	zero,-48(fp)
            }
         }
         break;
  804584:	00004206 	br	804690 <ffs_DiskIOIoctl+0x488>
  804588:	00004106 	br	804690 <ffs_DiskIOIoctl+0x488>
         
      /* Following command are not used by FatFs module */
         
      case MMC_GET_TYPE:  /* Get MMC/SDC type (BYTE) */
         *ptr = CardType;
  80458c:	d0e76803 	ldbu	r3,-25184(gp)
  804590:	e0bff617 	ldw	r2,-40(fp)
  804594:	10c00005 	stb	r3,0(r2)
         res = RES_OK;
  804598:	e03ff415 	stw	zero,-48(fp)
         break;
  80459c:	00003c06 	br	804690 <ffs_DiskIOIoctl+0x488>

      case MMC_GET_CSD:   /* Receive CSD as a data block (16 bytes) */
         if (SendCMD(CMD9, 0) == 0  /* READ_CSD */
  8045a0:	01001244 	movi	r4,73
  8045a4:	000b883a 	mov	r5,zero
  8045a8:	08039780 	call	803978 <SendCMD>
  8045ac:	10803fcc 	andi	r2,r2,255
  8045b0:	1000061e 	bne	r2,zero,8045cc <ffs_DiskIOIoctl+0x3c4>
             && ReceiveDatablock(ptr, 16))
  8045b4:	e13ff617 	ldw	r4,-40(fp)
  8045b8:	01400404 	movi	r5,16
  8045bc:	08036080 	call	803608 <ReceiveDatablock>
  8045c0:	10000226 	beq	r2,zero,8045cc <ffs_DiskIOIoctl+0x3c4>
            res = RES_OK;
  8045c4:	e03ff415 	stw	zero,-48(fp)
         break;
  8045c8:	00003106 	br	804690 <ffs_DiskIOIoctl+0x488>
  8045cc:	00003006 	br	804690 <ffs_DiskIOIoctl+0x488>

      case MMC_GET_CID:   /* Receive CID as a data block (16 bytes) */
         if (SendCMD(CMD10, 0) == 0 /* READ_CID */
  8045d0:	01001284 	movi	r4,74
  8045d4:	000b883a 	mov	r5,zero
  8045d8:	08039780 	call	803978 <SendCMD>
  8045dc:	10803fcc 	andi	r2,r2,255
  8045e0:	1000061e 	bne	r2,zero,8045fc <ffs_DiskIOIoctl+0x3f4>
             && ReceiveDatablock(ptr, 16))
  8045e4:	e13ff617 	ldw	r4,-40(fp)
  8045e8:	01400404 	movi	r5,16
  8045ec:	08036080 	call	803608 <ReceiveDatablock>
  8045f0:	10000226 	beq	r2,zero,8045fc <ffs_DiskIOIoctl+0x3f4>
            res = RES_OK;
  8045f4:	e03ff415 	stw	zero,-48(fp)
         break;
  8045f8:	00002506 	br	804690 <ffs_DiskIOIoctl+0x488>
  8045fc:	00002406 	br	804690 <ffs_DiskIOIoctl+0x488>

      case MMC_GET_OCR:   /* Receive OCR as an R3 resp (4 bytes) */
         if (SendCMD(CMD58, 0) == 0)
  804600:	01001e84 	movi	r4,122
  804604:	000b883a 	mov	r5,zero
  804608:	08039780 	call	803978 <SendCMD>
  80460c:	10803fcc 	andi	r2,r2,255
  804610:	10000f1e 	bne	r2,zero,804650 <ffs_DiskIOIoctl+0x448>
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
  804614:	e03ff505 	stb	zero,-44(fp)
  804618:	00000806 	br	80463c <ffs_DiskIOIoctl+0x434>
               *ptr++ = ReceiveU8();
  80461c:	e43ff617 	ldw	r16,-40(fp)
  804620:	80800044 	addi	r2,r16,1
  804624:	e0bff615 	stw	r2,-40(fp)
  804628:	08035b80 	call	8035b8 <ReceiveU8>
  80462c:	80800005 	stb	r2,0(r16)
         break;

      case MMC_GET_OCR:   /* Receive OCR as an R3 resp (4 bytes) */
         if (SendCMD(CMD58, 0) == 0)
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
  804630:	e0bff503 	ldbu	r2,-44(fp)
  804634:	10800044 	addi	r2,r2,1
  804638:	e0bff505 	stb	r2,-44(fp)
  80463c:	e0bff503 	ldbu	r2,-44(fp)
  804640:	10800130 	cmpltui	r2,r2,4
  804644:	103ff51e 	bne	r2,zero,80461c <__alt_data_end+0xff80461c>
               *ptr++ = ReceiveU8();
            res = RES_OK;
  804648:	e03ff415 	stw	zero,-48(fp)
         }
         break;
  80464c:	00001006 	br	804690 <ffs_DiskIOIoctl+0x488>
  804650:	00000f06 	br	804690 <ffs_DiskIOIoctl+0x488>

      case MMC_GET_SDSTAT:   /* Receive SD statsu as a data block (64 bytes) */
         if (SendCMD(ACMD13, 0) == 0)
  804654:	01003344 	movi	r4,205
  804658:	000b883a 	mov	r5,zero
  80465c:	08039780 	call	803978 <SendCMD>
  804660:	10803fcc 	andi	r2,r2,255
  804664:	1000071e 	bne	r2,zero,804684 <ffs_DiskIOIoctl+0x47c>
         {  /* SD_STATUS */
            ReceiveU8();
  804668:	08035b80 	call	8035b8 <ReceiveU8>
            if (ReceiveDatablock(ptr, 64))
  80466c:	e13ff617 	ldw	r4,-40(fp)
  804670:	01401004 	movi	r5,64
  804674:	08036080 	call	803608 <ReceiveDatablock>
  804678:	10000226 	beq	r2,zero,804684 <ffs_DiskIOIoctl+0x47c>
               res = RES_OK;
  80467c:	e03ff415 	stw	zero,-48(fp)
         }
         break;
  804680:	00000306 	br	804690 <ffs_DiskIOIoctl+0x488>
  804684:	00000206 	br	804690 <ffs_DiskIOIoctl+0x488>

      default:
         res = RES_PARERR;
  804688:	00800104 	movi	r2,4
  80468c:	e0bff415 	stw	r2,-48(fp)
   }

   ReleaseBus();
  804690:	08039340 	call	803934 <ReleaseBus>

   return(res);
  804694:	e0bff417 	ldw	r2,-48(fp)
} /* ffs_DiskIOIoctl */
  804698:	e6ffff04 	addi	sp,fp,-4
  80469c:	dfc00217 	ldw	ra,8(sp)
  8046a0:	df000117 	ldw	fp,4(sp)
  8046a4:	dc000017 	ldw	r16,0(sp)
  8046a8:	dec00304 	addi	sp,sp,12
  8046ac:	f800283a 	ret

008046b0 <get_fattime>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: time                                                           */
/***************************************************************************/
FFS_U32 get_fattime (void)
{
  8046b0:	defffe04 	addi	sp,sp,-8
  8046b4:	df000115 	stw	fp,4(sp)
  8046b8:	df000104 	addi	fp,sp,4
   FFS_U32 dTime;

   dTime = ((FFS_U32)(2008 - 1980) << 25) |
  8046bc:	008e57f4 	movhi	r2,14687
  8046c0:	10a87844 	addi	r2,r2,-24095
  8046c4:	e0bfff15 	stw	r2,-4(fp)
                     ((FFS_U32) 30 << 16) | 
                     ((FFS_U32) 20 << 11) | 
                     ((FFS_U32) 15 << 5)  | 
                     ((FFS_U32) 2 >> 1);

   return(dTime);
  8046c8:	e0bfff17 	ldw	r2,-4(fp)
} /* get_fattime */
  8046cc:	e037883a 	mov	sp,fp
  8046d0:	df000017 	ldw	fp,0(sp)
  8046d4:	dec00104 	addi	sp,sp,4
  8046d8:	f800283a 	ret

008046dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, uint32_t cnt) {
  8046dc:	defffa04 	addi	sp,sp,-24
  8046e0:	df000515 	stw	fp,20(sp)
  8046e4:	df000504 	addi	fp,sp,20
  8046e8:	e13ffd15 	stw	r4,-12(fp)
  8046ec:	e17ffe15 	stw	r5,-8(fp)
  8046f0:	e1bfff15 	stw	r6,-4(fp)
   uint8_t *d = (uint8_t*)dst;
  8046f4:	e0bffd17 	ldw	r2,-12(fp)
  8046f8:	e0bffb15 	stw	r2,-20(fp)
   const uint8_t *s = (const uint8_t*)src;
  8046fc:	e0bffe17 	ldw	r2,-8(fp)
  804700:	e0bffc15 	stw	r2,-16(fp)
      *(int*)d = *(int*)s;
      d += sizeof(int); s += sizeof(int);
      cnt -= sizeof(int);
   }
#endif
   while (cnt--)
  804704:	00000806 	br	804728 <mem_cpy+0x4c>
      *d++ = *s++;
  804708:	e0bffb17 	ldw	r2,-20(fp)
  80470c:	10c00044 	addi	r3,r2,1
  804710:	e0fffb15 	stw	r3,-20(fp)
  804714:	e0fffc17 	ldw	r3,-16(fp)
  804718:	19000044 	addi	r4,r3,1
  80471c:	e13ffc15 	stw	r4,-16(fp)
  804720:	18c00003 	ldbu	r3,0(r3)
  804724:	10c00005 	stb	r3,0(r2)
      *(int*)d = *(int*)s;
      d += sizeof(int); s += sizeof(int);
      cnt -= sizeof(int);
   }
#endif
   while (cnt--)
  804728:	e0bfff17 	ldw	r2,-4(fp)
  80472c:	10ffffc4 	addi	r3,r2,-1
  804730:	e0ffff15 	stw	r3,-4(fp)
  804734:	103ff41e 	bne	r2,zero,804708 <__alt_data_end+0xff804708>
      *d++ = *s++;
}
  804738:	e037883a 	mov	sp,fp
  80473c:	df000017 	ldw	fp,0(sp)
  804740:	dec00104 	addi	sp,sp,4
  804744:	f800283a 	ret

00804748 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, uint32_t cnt) {
  804748:	defffb04 	addi	sp,sp,-20
  80474c:	df000415 	stw	fp,16(sp)
  804750:	df000404 	addi	fp,sp,16
  804754:	e13ffd15 	stw	r4,-12(fp)
  804758:	e17ffe15 	stw	r5,-8(fp)
  80475c:	e1bfff15 	stw	r6,-4(fp)
   uint8_t *d = (uint8_t*)dst;
  804760:	e0bffd17 	ldw	r2,-12(fp)
  804764:	e0bffc15 	stw	r2,-16(fp)

   while (cnt--)
  804768:	00000506 	br	804780 <mem_set+0x38>
      *d++ = (uint8_t)val;
  80476c:	e0bffc17 	ldw	r2,-16(fp)
  804770:	10c00044 	addi	r3,r2,1
  804774:	e0fffc15 	stw	r3,-16(fp)
  804778:	e0fffe17 	ldw	r3,-8(fp)
  80477c:	10c00005 	stb	r3,0(r2)
/* Fill memory */
static
void mem_set (void* dst, int val, uint32_t cnt) {
   uint8_t *d = (uint8_t*)dst;

   while (cnt--)
  804780:	e0bfff17 	ldw	r2,-4(fp)
  804784:	10ffffc4 	addi	r3,r2,-1
  804788:	e0ffff15 	stw	r3,-4(fp)
  80478c:	103ff71e 	bne	r2,zero,80476c <__alt_data_end+0xff80476c>
      *d++ = (uint8_t)val;
}
  804790:	e037883a 	mov	sp,fp
  804794:	df000017 	ldw	fp,0(sp)
  804798:	dec00104 	addi	sp,sp,4
  80479c:	f800283a 	ret

008047a0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, uint32_t cnt) {
  8047a0:	defff904 	addi	sp,sp,-28
  8047a4:	df000615 	stw	fp,24(sp)
  8047a8:	df000604 	addi	fp,sp,24
  8047ac:	e13ffd15 	stw	r4,-12(fp)
  8047b0:	e17ffe15 	stw	r5,-8(fp)
  8047b4:	e1bfff15 	stw	r6,-4(fp)
   const uint8_t *d = (const uint8_t *)dst, *s = (const uint8_t *)src;
  8047b8:	e0bffd17 	ldw	r2,-12(fp)
  8047bc:	e0bffa15 	stw	r2,-24(fp)
  8047c0:	e0bffe17 	ldw	r2,-8(fp)
  8047c4:	e0bffb15 	stw	r2,-20(fp)
   int r = 0;
  8047c8:	e03ffc15 	stw	zero,-16(fp)

   while (cnt-- && (r = *d++ - *s++) == 0) ;
  8047cc:	0001883a 	nop
  8047d0:	e0bfff17 	ldw	r2,-4(fp)
  8047d4:	10ffffc4 	addi	r3,r2,-1
  8047d8:	e0ffff15 	stw	r3,-4(fp)
  8047dc:	10000e26 	beq	r2,zero,804818 <mem_cmp+0x78>
  8047e0:	e0bffa17 	ldw	r2,-24(fp)
  8047e4:	10c00044 	addi	r3,r2,1
  8047e8:	e0fffa15 	stw	r3,-24(fp)
  8047ec:	10800003 	ldbu	r2,0(r2)
  8047f0:	10c03fcc 	andi	r3,r2,255
  8047f4:	e0bffb17 	ldw	r2,-20(fp)
  8047f8:	11000044 	addi	r4,r2,1
  8047fc:	e13ffb15 	stw	r4,-20(fp)
  804800:	10800003 	ldbu	r2,0(r2)
  804804:	10803fcc 	andi	r2,r2,255
  804808:	1885c83a 	sub	r2,r3,r2
  80480c:	e0bffc15 	stw	r2,-16(fp)
  804810:	e0bffc17 	ldw	r2,-16(fp)
  804814:	103fee26 	beq	r2,zero,8047d0 <__alt_data_end+0xff8047d0>
   return r;
  804818:	e0bffc17 	ldw	r2,-16(fp)
}
  80481c:	e037883a 	mov	sp,fp
  804820:	df000017 	ldw	fp,0(sp)
  804824:	dec00104 	addi	sp,sp,4
  804828:	f800283a 	ret

0080482c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
  80482c:	defffd04 	addi	sp,sp,-12
  804830:	df000215 	stw	fp,8(sp)
  804834:	df000204 	addi	fp,sp,8
  804838:	e13ffe15 	stw	r4,-8(fp)
  80483c:	e17fff15 	stw	r5,-4(fp)
   while (*str && *str != chr) str++;
  804840:	00000306 	br	804850 <chk_chr+0x24>
  804844:	e0bffe17 	ldw	r2,-8(fp)
  804848:	10800044 	addi	r2,r2,1
  80484c:	e0bffe15 	stw	r2,-8(fp)
  804850:	e0bffe17 	ldw	r2,-8(fp)
  804854:	10800003 	ldbu	r2,0(r2)
  804858:	10803fcc 	andi	r2,r2,255
  80485c:	1080201c 	xori	r2,r2,128
  804860:	10bfe004 	addi	r2,r2,-128
  804864:	10000726 	beq	r2,zero,804884 <chk_chr+0x58>
  804868:	e0bffe17 	ldw	r2,-8(fp)
  80486c:	10800003 	ldbu	r2,0(r2)
  804870:	10c03fcc 	andi	r3,r2,255
  804874:	18c0201c 	xori	r3,r3,128
  804878:	18ffe004 	addi	r3,r3,-128
  80487c:	e0bfff17 	ldw	r2,-4(fp)
  804880:	18bff01e 	bne	r3,r2,804844 <__alt_data_end+0xff804844>
   return *str;
  804884:	e0bffe17 	ldw	r2,-8(fp)
  804888:	10800003 	ldbu	r2,0(r2)
  80488c:	10803fcc 	andi	r2,r2,255
  804890:	1080201c 	xori	r2,r2,128
  804894:	10bfe004 	addi	r2,r2,-128
}
  804898:	e037883a 	mov	sp,fp
  80489c:	df000017 	ldw	fp,0(sp)
  8048a0:	dec00104 	addi	sp,sp,4
  8048a4:	f800283a 	ret

008048a8 <move_window>:
static
FRESULT move_window (
   FATFS *fs,     /* File system object */
   uint32_t sector   /* Sector number to make appearance in the fs->win[] */
)              /* Move to zero only writes back dirty window */
{
  8048a8:	defffa04 	addi	sp,sp,-24
  8048ac:	dfc00515 	stw	ra,20(sp)
  8048b0:	df000415 	stw	fp,16(sp)
  8048b4:	df000404 	addi	fp,sp,16
  8048b8:	e13ffe15 	stw	r4,-8(fp)
  8048bc:	e17fff15 	stw	r5,-4(fp)
   uint32_t wsect;


   wsect = fs->winsect;
  8048c0:	e0bffe17 	ldw	r2,-8(fp)
  8048c4:	10800b17 	ldw	r2,44(r2)
  8048c8:	e0bffc15 	stw	r2,-16(fp)
   if (wsect != sector) {  /* Changed current window */
  8048cc:	e0fffc17 	ldw	r3,-16(fp)
  8048d0:	e0bfff17 	ldw	r2,-4(fp)
  8048d4:	18804526 	beq	r3,r2,8049ec <move_window+0x144>
#if !_FS_READONLY
      if (fs->wflag) {  /* Write back dirty window if needed */
  8048d8:	e0bffe17 	ldw	r2,-8(fp)
  8048dc:	10800103 	ldbu	r2,4(r2)
  8048e0:	10803fcc 	andi	r2,r2,255
  8048e4:	10002f26 	beq	r2,zero,8049a4 <move_window+0xfc>
         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  8048e8:	e0bffe17 	ldw	r2,-8(fp)
  8048ec:	10800043 	ldbu	r2,1(r2)
  8048f0:	10c03fcc 	andi	r3,r2,255
  8048f4:	e0bffe17 	ldw	r2,-8(fp)
  8048f8:	10800c04 	addi	r2,r2,48
  8048fc:	1809883a 	mov	r4,r3
  804900:	100b883a 	mov	r5,r2
  804904:	e1bffc17 	ldw	r6,-16(fp)
  804908:	01c00044 	movi	r7,1
  80490c:	080409c0 	call	80409c <ffs_DiskIOWrite>
  804910:	10000226 	beq	r2,zero,80491c <move_window+0x74>
            return FR_DISK_ERR;
  804914:	00800044 	movi	r2,1
  804918:	00003506 	br	8049f0 <move_window+0x148>
         fs->wflag = 0;
  80491c:	e0bffe17 	ldw	r2,-8(fp)
  804920:	10000105 	stb	zero,4(r2)
         if (wsect < (fs->fatbase + fs->fsize)) {  /* In FAT area */
  804924:	e0bffe17 	ldw	r2,-8(fp)
  804928:	10c00817 	ldw	r3,32(r2)
  80492c:	e0bffe17 	ldw	r2,-8(fp)
  804930:	10800717 	ldw	r2,28(r2)
  804934:	1885883a 	add	r2,r3,r2
  804938:	e0fffc17 	ldw	r3,-16(fp)
  80493c:	1880192e 	bgeu	r3,r2,8049a4 <move_window+0xfc>
            uint8_t nf;
            for (nf = fs->n_fats; nf > 1; nf--) {  /* Reflect the change to all FAT copies */
  804940:	e0bffe17 	ldw	r2,-8(fp)
  804944:	108000c3 	ldbu	r2,3(r2)
  804948:	e0bffd05 	stb	r2,-12(fp)
  80494c:	00001206 	br	804998 <move_window+0xf0>
               wsect += fs->fsize;
  804950:	e0bffe17 	ldw	r2,-8(fp)
  804954:	10800717 	ldw	r2,28(r2)
  804958:	e0fffc17 	ldw	r3,-16(fp)
  80495c:	1885883a 	add	r2,r3,r2
  804960:	e0bffc15 	stw	r2,-16(fp)
               disk_write(fs->drv, fs->win, wsect, 1);
  804964:	e0bffe17 	ldw	r2,-8(fp)
  804968:	10800043 	ldbu	r2,1(r2)
  80496c:	10c03fcc 	andi	r3,r2,255
  804970:	e0bffe17 	ldw	r2,-8(fp)
  804974:	10800c04 	addi	r2,r2,48
  804978:	1809883a 	mov	r4,r3
  80497c:	100b883a 	mov	r5,r2
  804980:	e1bffc17 	ldw	r6,-16(fp)
  804984:	01c00044 	movi	r7,1
  804988:	080409c0 	call	80409c <ffs_DiskIOWrite>
         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
            return FR_DISK_ERR;
         fs->wflag = 0;
         if (wsect < (fs->fatbase + fs->fsize)) {  /* In FAT area */
            uint8_t nf;
            for (nf = fs->n_fats; nf > 1; nf--) {  /* Reflect the change to all FAT copies */
  80498c:	e0bffd03 	ldbu	r2,-12(fp)
  804990:	10bfffc4 	addi	r2,r2,-1
  804994:	e0bffd05 	stb	r2,-12(fp)
  804998:	e0bffd03 	ldbu	r2,-12(fp)
  80499c:	108000a8 	cmpgeui	r2,r2,2
  8049a0:	103feb1e 	bne	r2,zero,804950 <__alt_data_end+0xff804950>
               disk_write(fs->drv, fs->win, wsect, 1);
            }
         }
      }
#endif
      if (sector) {
  8049a4:	e0bfff17 	ldw	r2,-4(fp)
  8049a8:	10001026 	beq	r2,zero,8049ec <move_window+0x144>
         if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  8049ac:	e0bffe17 	ldw	r2,-8(fp)
  8049b0:	10800043 	ldbu	r2,1(r2)
  8049b4:	10c03fcc 	andi	r3,r2,255
  8049b8:	e0bffe17 	ldw	r2,-8(fp)
  8049bc:	10800c04 	addi	r2,r2,48
  8049c0:	1809883a 	mov	r4,r3
  8049c4:	100b883a 	mov	r5,r2
  8049c8:	e1bfff17 	ldw	r6,-4(fp)
  8049cc:	01c00044 	movi	r7,1
  8049d0:	0803f800 	call	803f80 <ffs_DiskIORead>
  8049d4:	10000226 	beq	r2,zero,8049e0 <move_window+0x138>
            return FR_DISK_ERR;
  8049d8:	00800044 	movi	r2,1
  8049dc:	00000406 	br	8049f0 <move_window+0x148>
         fs->winsect = sector;
  8049e0:	e0bffe17 	ldw	r2,-8(fp)
  8049e4:	e0ffff17 	ldw	r3,-4(fp)
  8049e8:	10c00b15 	stw	r3,44(r2)
      }
   }

   return FR_OK;
  8049ec:	0005883a 	mov	r2,zero
}
  8049f0:	e037883a 	mov	sp,fp
  8049f4:	dfc00117 	ldw	ra,4(sp)
  8049f8:	df000017 	ldw	fp,0(sp)
  8049fc:	dec00204 	addi	sp,sp,8
  804a00:	f800283a 	ret

00804a04 <sync>:
#if !_FS_READONLY
static
FRESULT sync ( /* FR_OK: successful, FR_DISK_ERR: failed */
   FATFS *fs   /* File system object */
)
{
  804a04:	defffc04 	addi	sp,sp,-16
  804a08:	dfc00315 	stw	ra,12(sp)
  804a0c:	df000215 	stw	fp,8(sp)
  804a10:	df000204 	addi	fp,sp,8
  804a14:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;


   res = move_window(fs, 0);
  804a18:	e13fff17 	ldw	r4,-4(fp)
  804a1c:	000b883a 	mov	r5,zero
  804a20:	08048a80 	call	8048a8 <move_window>
  804a24:	e0bffe15 	stw	r2,-8(fp)
   if (res == FR_OK) {
  804a28:	e0bffe17 	ldw	r2,-8(fp)
  804a2c:	1000761e 	bne	r2,zero,804c08 <sync+0x204>
      /* Update FSInfo sector if needed */
      if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  804a30:	e0bfff17 	ldw	r2,-4(fp)
  804a34:	10800003 	ldbu	r2,0(r2)
  804a38:	10803fcc 	andi	r2,r2,255
  804a3c:	108000d8 	cmpnei	r2,r2,3
  804a40:	1000671e 	bne	r2,zero,804be0 <sync+0x1dc>
  804a44:	e0bfff17 	ldw	r2,-4(fp)
  804a48:	10800143 	ldbu	r2,5(r2)
  804a4c:	10803fcc 	andi	r2,r2,255
  804a50:	10006326 	beq	r2,zero,804be0 <sync+0x1dc>
         fs->winsect = 0;
  804a54:	e0bfff17 	ldw	r2,-4(fp)
  804a58:	10000b15 	stw	zero,44(r2)
         /* Create FSInfo structure */
         mem_set(fs->win, 0, 512);
  804a5c:	e0bfff17 	ldw	r2,-4(fp)
  804a60:	10800c04 	addi	r2,r2,48
  804a64:	1009883a 	mov	r4,r2
  804a68:	000b883a 	mov	r5,zero
  804a6c:	01808004 	movi	r6,512
  804a70:	08047480 	call	804748 <mem_set>
         ST_WORD(fs->win+BS_55AA, 0xAA55);
  804a74:	e0bfff17 	ldw	r2,-4(fp)
  804a78:	00c01544 	movi	r3,85
  804a7c:	10c08b85 	stb	r3,558(r2)
  804a80:	e0bfff17 	ldw	r2,-4(fp)
  804a84:	00ffea84 	movi	r3,-86
  804a88:	10c08bc5 	stb	r3,559(r2)
         ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  804a8c:	e0bfff17 	ldw	r2,-4(fp)
  804a90:	00c01484 	movi	r3,82
  804a94:	10c00c05 	stb	r3,48(r2)
  804a98:	e0bfff17 	ldw	r2,-4(fp)
  804a9c:	00c01484 	movi	r3,82
  804aa0:	10c00c45 	stb	r3,49(r2)
  804aa4:	e0bfff17 	ldw	r2,-4(fp)
  804aa8:	00c01844 	movi	r3,97
  804aac:	10c00c85 	stb	r3,50(r2)
  804ab0:	e0bfff17 	ldw	r2,-4(fp)
  804ab4:	00c01044 	movi	r3,65
  804ab8:	10c00cc5 	stb	r3,51(r2)
         ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  804abc:	e0bfff17 	ldw	r2,-4(fp)
  804ac0:	00c01c84 	movi	r3,114
  804ac4:	10c08505 	stb	r3,532(r2)
  804ac8:	e0bfff17 	ldw	r2,-4(fp)
  804acc:	00c01c84 	movi	r3,114
  804ad0:	10c08545 	stb	r3,533(r2)
  804ad4:	e0bfff17 	ldw	r2,-4(fp)
  804ad8:	00c01044 	movi	r3,65
  804adc:	10c08585 	stb	r3,534(r2)
  804ae0:	e0bfff17 	ldw	r2,-4(fp)
  804ae4:	00c01844 	movi	r3,97
  804ae8:	10c085c5 	stb	r3,535(r2)
         ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  804aec:	e0bfff17 	ldw	r2,-4(fp)
  804af0:	10800417 	ldw	r2,16(r2)
  804af4:	1007883a 	mov	r3,r2
  804af8:	e0bfff17 	ldw	r2,-4(fp)
  804afc:	10c08605 	stb	r3,536(r2)
  804b00:	e0bfff17 	ldw	r2,-4(fp)
  804b04:	10800417 	ldw	r2,16(r2)
  804b08:	10bfffcc 	andi	r2,r2,65535
  804b0c:	1004d23a 	srli	r2,r2,8
  804b10:	1007883a 	mov	r3,r2
  804b14:	e0bfff17 	ldw	r2,-4(fp)
  804b18:	10c08645 	stb	r3,537(r2)
  804b1c:	e0bfff17 	ldw	r2,-4(fp)
  804b20:	10800417 	ldw	r2,16(r2)
  804b24:	1004d43a 	srli	r2,r2,16
  804b28:	1007883a 	mov	r3,r2
  804b2c:	e0bfff17 	ldw	r2,-4(fp)
  804b30:	10c08685 	stb	r3,538(r2)
  804b34:	e0bfff17 	ldw	r2,-4(fp)
  804b38:	10800417 	ldw	r2,16(r2)
  804b3c:	1004d63a 	srli	r2,r2,24
  804b40:	1007883a 	mov	r3,r2
  804b44:	e0bfff17 	ldw	r2,-4(fp)
  804b48:	10c086c5 	stb	r3,539(r2)
         ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  804b4c:	e0bfff17 	ldw	r2,-4(fp)
  804b50:	10800317 	ldw	r2,12(r2)
  804b54:	1007883a 	mov	r3,r2
  804b58:	e0bfff17 	ldw	r2,-4(fp)
  804b5c:	10c08705 	stb	r3,540(r2)
  804b60:	e0bfff17 	ldw	r2,-4(fp)
  804b64:	10800317 	ldw	r2,12(r2)
  804b68:	10bfffcc 	andi	r2,r2,65535
  804b6c:	1004d23a 	srli	r2,r2,8
  804b70:	1007883a 	mov	r3,r2
  804b74:	e0bfff17 	ldw	r2,-4(fp)
  804b78:	10c08745 	stb	r3,541(r2)
  804b7c:	e0bfff17 	ldw	r2,-4(fp)
  804b80:	10800317 	ldw	r2,12(r2)
  804b84:	1004d43a 	srli	r2,r2,16
  804b88:	1007883a 	mov	r3,r2
  804b8c:	e0bfff17 	ldw	r2,-4(fp)
  804b90:	10c08785 	stb	r3,542(r2)
  804b94:	e0bfff17 	ldw	r2,-4(fp)
  804b98:	10800317 	ldw	r2,12(r2)
  804b9c:	1004d63a 	srli	r2,r2,24
  804ba0:	1007883a 	mov	r3,r2
  804ba4:	e0bfff17 	ldw	r2,-4(fp)
  804ba8:	10c087c5 	stb	r3,543(r2)
         /* Write it into the FSInfo sector */
         disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  804bac:	e0bfff17 	ldw	r2,-4(fp)
  804bb0:	10800043 	ldbu	r2,1(r2)
  804bb4:	11003fcc 	andi	r4,r2,255
  804bb8:	e0bfff17 	ldw	r2,-4(fp)
  804bbc:	10c00c04 	addi	r3,r2,48
  804bc0:	e0bfff17 	ldw	r2,-4(fp)
  804bc4:	10800517 	ldw	r2,20(r2)
  804bc8:	180b883a 	mov	r5,r3
  804bcc:	100d883a 	mov	r6,r2
  804bd0:	01c00044 	movi	r7,1
  804bd4:	080409c0 	call	80409c <ffs_DiskIOWrite>
         fs->fsi_flag = 0;
  804bd8:	e0bfff17 	ldw	r2,-4(fp)
  804bdc:	10000145 	stb	zero,5(r2)
      }
      /* Make sure that no pending write process in the physical drive */
      if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  804be0:	e0bfff17 	ldw	r2,-4(fp)
  804be4:	10800043 	ldbu	r2,1(r2)
  804be8:	10803fcc 	andi	r2,r2,255
  804bec:	1009883a 	mov	r4,r2
  804bf0:	000b883a 	mov	r5,zero
  804bf4:	000d883a 	mov	r6,zero
  804bf8:	08042080 	call	804208 <ffs_DiskIOIoctl>
  804bfc:	10000226 	beq	r2,zero,804c08 <sync+0x204>
         res = FR_DISK_ERR;
  804c00:	00800044 	movi	r2,1
  804c04:	e0bffe15 	stw	r2,-8(fp)
   }

   return res;
  804c08:	e0bffe17 	ldw	r2,-8(fp)
}
  804c0c:	e037883a 	mov	sp,fp
  804c10:	dfc00117 	ldw	ra,4(sp)
  804c14:	df000017 	ldw	fp,0(sp)
  804c18:	dec00204 	addi	sp,sp,8
  804c1c:	f800283a 	ret

00804c20 <clust2sect>:

uint32_t clust2sect (   /* !=0: Sector number, 0: Failed - invalid cluster# */
   FATFS *fs,     /* File system object */
   uint32_t clst     /* Cluster# to be converted */
)
{
  804c20:	defffd04 	addi	sp,sp,-12
  804c24:	df000215 	stw	fp,8(sp)
  804c28:	df000204 	addi	fp,sp,8
  804c2c:	e13ffe15 	stw	r4,-8(fp)
  804c30:	e17fff15 	stw	r5,-4(fp)
   clst -= 2;
  804c34:	e0bfff17 	ldw	r2,-4(fp)
  804c38:	10bfff84 	addi	r2,r2,-2
  804c3c:	e0bfff15 	stw	r2,-4(fp)
   if (clst >= (fs->n_fatent - 2)) return 0;    /* Invalid cluster# */
  804c40:	e0bffe17 	ldw	r2,-8(fp)
  804c44:	10800617 	ldw	r2,24(r2)
  804c48:	10bfff84 	addi	r2,r2,-2
  804c4c:	e0ffff17 	ldw	r3,-4(fp)
  804c50:	18800236 	bltu	r3,r2,804c5c <clust2sect+0x3c>
  804c54:	0005883a 	mov	r2,zero
  804c58:	00000806 	br	804c7c <clust2sect+0x5c>
   return clst * fs->csize + fs->database;
  804c5c:	e0bffe17 	ldw	r2,-8(fp)
  804c60:	10800083 	ldbu	r2,2(r2)
  804c64:	10c03fcc 	andi	r3,r2,255
  804c68:	e0bfff17 	ldw	r2,-4(fp)
  804c6c:	1887383a 	mul	r3,r3,r2
  804c70:	e0bffe17 	ldw	r2,-8(fp)
  804c74:	10800a17 	ldw	r2,40(r2)
  804c78:	1885883a 	add	r2,r3,r2
}
  804c7c:	e037883a 	mov	sp,fp
  804c80:	df000017 	ldw	fp,0(sp)
  804c84:	dec00104 	addi	sp,sp,4
  804c88:	f800283a 	ret

00804c8c <get_fat>:

uint32_t get_fat (   /* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   FATFS *fs,  /* File system object */
   uint32_t clst  /* Cluster# to get the link information */
)
{
  804c8c:	defff904 	addi	sp,sp,-28
  804c90:	dfc00615 	stw	ra,24(sp)
  804c94:	df000515 	stw	fp,20(sp)
  804c98:	df000504 	addi	fp,sp,20
  804c9c:	e13ffe15 	stw	r4,-8(fp)
  804ca0:	e17fff15 	stw	r5,-4(fp)
   uint32_t wc, bc;
   uint8_t *p;


   if (clst < 2 || clst >= fs->n_fatent)  /* Chack range */
  804ca4:	e0bfff17 	ldw	r2,-4(fp)
  804ca8:	108000b0 	cmpltui	r2,r2,2
  804cac:	1000041e 	bne	r2,zero,804cc0 <get_fat+0x34>
  804cb0:	e0bffe17 	ldw	r2,-8(fp)
  804cb4:	10800617 	ldw	r2,24(r2)
  804cb8:	e0ffff17 	ldw	r3,-4(fp)
  804cbc:	18800236 	bltu	r3,r2,804cc8 <get_fat+0x3c>
      return 1;
  804cc0:	00800044 	movi	r2,1
  804cc4:	00008d06 	br	804efc <get_fat+0x270>

   switch (fs->fs_type) {
  804cc8:	e0bffe17 	ldw	r2,-8(fp)
  804ccc:	10800003 	ldbu	r2,0(r2)
  804cd0:	10803fcc 	andi	r2,r2,255
  804cd4:	10c000a0 	cmpeqi	r3,r2,2
  804cd8:	18003f1e 	bne	r3,zero,804dd8 <get_fat+0x14c>
  804cdc:	10c000e0 	cmpeqi	r3,r2,3
  804ce0:	18005a1e 	bne	r3,zero,804e4c <get_fat+0x1c0>
  804ce4:	10800060 	cmpeqi	r2,r2,1
  804ce8:	10008326 	beq	r2,zero,804ef8 <get_fat+0x26c>
   case FS_FAT12 :
      bc = (uint32_t)clst; bc += bc / 2;
  804cec:	e0bfff17 	ldw	r2,-4(fp)
  804cf0:	e0bffb15 	stw	r2,-20(fp)
  804cf4:	e0bffb17 	ldw	r2,-20(fp)
  804cf8:	1004d07a 	srli	r2,r2,1
  804cfc:	e0fffb17 	ldw	r3,-20(fp)
  804d00:	1885883a 	add	r2,r3,r2
  804d04:	e0bffb15 	stw	r2,-20(fp)
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  804d08:	e0bffe17 	ldw	r2,-8(fp)
  804d0c:	10c00817 	ldw	r3,32(r2)
  804d10:	e0bffb17 	ldw	r2,-20(fp)
  804d14:	1004d27a 	srli	r2,r2,9
  804d18:	1885883a 	add	r2,r3,r2
  804d1c:	e13ffe17 	ldw	r4,-8(fp)
  804d20:	100b883a 	mov	r5,r2
  804d24:	08048a80 	call	8048a8 <move_window>
  804d28:	10000126 	beq	r2,zero,804d30 <get_fat+0xa4>
  804d2c:	00007206 	br	804ef8 <get_fat+0x26c>
      wc = fs->win[bc % SS(fs)]; bc++;
  804d30:	e0bffb17 	ldw	r2,-20(fp)
  804d34:	10807fcc 	andi	r2,r2,511
  804d38:	e0fffe17 	ldw	r3,-8(fp)
  804d3c:	1885883a 	add	r2,r3,r2
  804d40:	10800c04 	addi	r2,r2,48
  804d44:	10800003 	ldbu	r2,0(r2)
  804d48:	10803fcc 	andi	r2,r2,255
  804d4c:	e0bffc15 	stw	r2,-16(fp)
  804d50:	e0bffb17 	ldw	r2,-20(fp)
  804d54:	10800044 	addi	r2,r2,1
  804d58:	e0bffb15 	stw	r2,-20(fp)
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  804d5c:	e0bffe17 	ldw	r2,-8(fp)
  804d60:	10c00817 	ldw	r3,32(r2)
  804d64:	e0bffb17 	ldw	r2,-20(fp)
  804d68:	1004d27a 	srli	r2,r2,9
  804d6c:	1885883a 	add	r2,r3,r2
  804d70:	e13ffe17 	ldw	r4,-8(fp)
  804d74:	100b883a 	mov	r5,r2
  804d78:	08048a80 	call	8048a8 <move_window>
  804d7c:	10000126 	beq	r2,zero,804d84 <get_fat+0xf8>
  804d80:	00005d06 	br	804ef8 <get_fat+0x26c>
      wc |= fs->win[bc % SS(fs)] << 8;
  804d84:	e0bffb17 	ldw	r2,-20(fp)
  804d88:	10807fcc 	andi	r2,r2,511
  804d8c:	e0fffe17 	ldw	r3,-8(fp)
  804d90:	1885883a 	add	r2,r3,r2
  804d94:	10800c04 	addi	r2,r2,48
  804d98:	10800003 	ldbu	r2,0(r2)
  804d9c:	10803fcc 	andi	r2,r2,255
  804da0:	1004923a 	slli	r2,r2,8
  804da4:	1007883a 	mov	r3,r2
  804da8:	e0bffc17 	ldw	r2,-16(fp)
  804dac:	10c4b03a 	or	r2,r2,r3
  804db0:	e0bffc15 	stw	r2,-16(fp)
      return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  804db4:	e0bfff17 	ldw	r2,-4(fp)
  804db8:	1080004c 	andi	r2,r2,1
  804dbc:	10000326 	beq	r2,zero,804dcc <get_fat+0x140>
  804dc0:	e0bffc17 	ldw	r2,-16(fp)
  804dc4:	1004d13a 	srli	r2,r2,4
  804dc8:	00004c06 	br	804efc <get_fat+0x270>
  804dcc:	e0bffc17 	ldw	r2,-16(fp)
  804dd0:	1083ffcc 	andi	r2,r2,4095
  804dd4:	00004906 	br	804efc <get_fat+0x270>

   case FS_FAT16 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  804dd8:	e0bffe17 	ldw	r2,-8(fp)
  804ddc:	10c00817 	ldw	r3,32(r2)
  804de0:	e0bfff17 	ldw	r2,-4(fp)
  804de4:	1004d23a 	srli	r2,r2,8
  804de8:	1885883a 	add	r2,r3,r2
  804dec:	e13ffe17 	ldw	r4,-8(fp)
  804df0:	100b883a 	mov	r5,r2
  804df4:	08048a80 	call	8048a8 <move_window>
  804df8:	10000126 	beq	r2,zero,804e00 <get_fat+0x174>
  804dfc:	00003e06 	br	804ef8 <get_fat+0x26c>
      p = &fs->win[clst * 2 % SS(fs)];
  804e00:	e0bfff17 	ldw	r2,-4(fp)
  804e04:	1085883a 	add	r2,r2,r2
  804e08:	10807f8c 	andi	r2,r2,510
  804e0c:	10800c04 	addi	r2,r2,48
  804e10:	e0fffe17 	ldw	r3,-8(fp)
  804e14:	1885883a 	add	r2,r3,r2
  804e18:	e0bffd15 	stw	r2,-12(fp)
      return LD_WORD(p);
  804e1c:	e0bffd17 	ldw	r2,-12(fp)
  804e20:	10800044 	addi	r2,r2,1
  804e24:	10800003 	ldbu	r2,0(r2)
  804e28:	10803fcc 	andi	r2,r2,255
  804e2c:	1004923a 	slli	r2,r2,8
  804e30:	1007883a 	mov	r3,r2
  804e34:	e0bffd17 	ldw	r2,-12(fp)
  804e38:	10800003 	ldbu	r2,0(r2)
  804e3c:	10803fcc 	andi	r2,r2,255
  804e40:	1884b03a 	or	r2,r3,r2
  804e44:	10bfffcc 	andi	r2,r2,65535
  804e48:	00002c06 	br	804efc <get_fat+0x270>

   case FS_FAT32 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  804e4c:	e0bffe17 	ldw	r2,-8(fp)
  804e50:	10c00817 	ldw	r3,32(r2)
  804e54:	e0bfff17 	ldw	r2,-4(fp)
  804e58:	1004d1fa 	srli	r2,r2,7
  804e5c:	1885883a 	add	r2,r3,r2
  804e60:	e13ffe17 	ldw	r4,-8(fp)
  804e64:	100b883a 	mov	r5,r2
  804e68:	08048a80 	call	8048a8 <move_window>
  804e6c:	10000126 	beq	r2,zero,804e74 <get_fat+0x1e8>
  804e70:	00002106 	br	804ef8 <get_fat+0x26c>
      p = &fs->win[clst * 4 % SS(fs)];
  804e74:	e0bfff17 	ldw	r2,-4(fp)
  804e78:	1085883a 	add	r2,r2,r2
  804e7c:	1085883a 	add	r2,r2,r2
  804e80:	10807f0c 	andi	r2,r2,508
  804e84:	10800c04 	addi	r2,r2,48
  804e88:	e0fffe17 	ldw	r3,-8(fp)
  804e8c:	1885883a 	add	r2,r3,r2
  804e90:	e0bffd15 	stw	r2,-12(fp)
      return LD_DWORD(p) & 0x0FFFFFFF;
  804e94:	e0bffd17 	ldw	r2,-12(fp)
  804e98:	108000c4 	addi	r2,r2,3
  804e9c:	10800003 	ldbu	r2,0(r2)
  804ea0:	10803fcc 	andi	r2,r2,255
  804ea4:	1006963a 	slli	r3,r2,24
  804ea8:	e0bffd17 	ldw	r2,-12(fp)
  804eac:	10800084 	addi	r2,r2,2
  804eb0:	10800003 	ldbu	r2,0(r2)
  804eb4:	10803fcc 	andi	r2,r2,255
  804eb8:	1004943a 	slli	r2,r2,16
  804ebc:	1884b03a 	or	r2,r3,r2
  804ec0:	e0fffd17 	ldw	r3,-12(fp)
  804ec4:	18c00044 	addi	r3,r3,1
  804ec8:	18c00003 	ldbu	r3,0(r3)
  804ecc:	18c03fcc 	andi	r3,r3,255
  804ed0:	1806923a 	slli	r3,r3,8
  804ed4:	10c6b03a 	or	r3,r2,r3
  804ed8:	e0bffd17 	ldw	r2,-12(fp)
  804edc:	10800003 	ldbu	r2,0(r2)
  804ee0:	10803fcc 	andi	r2,r2,255
  804ee4:	1886b03a 	or	r3,r3,r2
  804ee8:	00840034 	movhi	r2,4096
  804eec:	10bfffc4 	addi	r2,r2,-1
  804ef0:	1884703a 	and	r2,r3,r2
  804ef4:	00000106 	br	804efc <get_fat+0x270>
   }

   return 0xFFFFFFFF;   /* An error occurred at the disk I/O layer */
  804ef8:	00bfffc4 	movi	r2,-1
}
  804efc:	e037883a 	mov	sp,fp
  804f00:	dfc00117 	ldw	ra,4(sp)
  804f04:	df000017 	ldw	fp,0(sp)
  804f08:	dec00204 	addi	sp,sp,8
  804f0c:	f800283a 	ret

00804f10 <put_fat>:
FRESULT put_fat (
   FATFS *fs,  /* File system object */
   uint32_t clst, /* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
   uint32_t val   /* New value to mark the cluster */
)
{
  804f10:	defff804 	addi	sp,sp,-32
  804f14:	dfc00715 	stw	ra,28(sp)
  804f18:	df000615 	stw	fp,24(sp)
  804f1c:	df000604 	addi	fp,sp,24
  804f20:	e13ffd15 	stw	r4,-12(fp)
  804f24:	e17ffe15 	stw	r5,-8(fp)
  804f28:	e1bfff15 	stw	r6,-4(fp)
   uint32_t bc;
   uint8_t *p;
   FRESULT res;


   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
  804f2c:	e0bffe17 	ldw	r2,-8(fp)
  804f30:	108000b0 	cmpltui	r2,r2,2
  804f34:	1000041e 	bne	r2,zero,804f48 <put_fat+0x38>
  804f38:	e0bffd17 	ldw	r2,-12(fp)
  804f3c:	10800617 	ldw	r2,24(r2)
  804f40:	e0fffe17 	ldw	r3,-8(fp)
  804f44:	18800336 	bltu	r3,r2,804f54 <put_fat+0x44>
      res = FR_INT_ERR;
  804f48:	00800084 	movi	r2,2
  804f4c:	e0bffa15 	stw	r2,-24(fp)
  804f50:	0000c506 	br	805268 <put_fat+0x358>

   } else {
      switch (fs->fs_type) {
  804f54:	e0bffd17 	ldw	r2,-12(fp)
  804f58:	10800003 	ldbu	r2,0(r2)
  804f5c:	10803fcc 	andi	r2,r2,255
  804f60:	10c000a0 	cmpeqi	r3,r2,2
  804f64:	18005b1e 	bne	r3,zero,8050d4 <put_fat+0x1c4>
  804f68:	10c000e0 	cmpeqi	r3,r2,3
  804f6c:	1800771e 	bne	r3,zero,80514c <put_fat+0x23c>
  804f70:	10800060 	cmpeqi	r2,r2,1
  804f74:	1000b726 	beq	r2,zero,805254 <put_fat+0x344>
      case FS_FAT12 :
         bc = clst; bc += bc / 2;
  804f78:	e0bffe17 	ldw	r2,-8(fp)
  804f7c:	e0bffb15 	stw	r2,-20(fp)
  804f80:	e0bffb17 	ldw	r2,-20(fp)
  804f84:	1004d07a 	srli	r2,r2,1
  804f88:	e0fffb17 	ldw	r3,-20(fp)
  804f8c:	1885883a 	add	r2,r3,r2
  804f90:	e0bffb15 	stw	r2,-20(fp)
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  804f94:	e0bffd17 	ldw	r2,-12(fp)
  804f98:	10c00817 	ldw	r3,32(r2)
  804f9c:	e0bffb17 	ldw	r2,-20(fp)
  804fa0:	1004d27a 	srli	r2,r2,9
  804fa4:	1885883a 	add	r2,r3,r2
  804fa8:	e13ffd17 	ldw	r4,-12(fp)
  804fac:	100b883a 	mov	r5,r2
  804fb0:	08048a80 	call	8048a8 <move_window>
  804fb4:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  804fb8:	e0bffa17 	ldw	r2,-24(fp)
  804fbc:	10000126 	beq	r2,zero,804fc4 <put_fat+0xb4>
  804fc0:	0000a606 	br	80525c <put_fat+0x34c>
         p = &fs->win[bc % SS(fs)];
  804fc4:	e0bffb17 	ldw	r2,-20(fp)
  804fc8:	10807fcc 	andi	r2,r2,511
  804fcc:	10800c04 	addi	r2,r2,48
  804fd0:	e0fffd17 	ldw	r3,-12(fp)
  804fd4:	1885883a 	add	r2,r3,r2
  804fd8:	e0bffc15 	stw	r2,-16(fp)
         *p = (clst & 1) ? ((*p & 0x0F) | ((uint8_t)val << 4)) : (uint8_t)val;
  804fdc:	e0bffe17 	ldw	r2,-8(fp)
  804fe0:	1080004c 	andi	r2,r2,1
  804fe4:	10000a26 	beq	r2,zero,805010 <put_fat+0x100>
  804fe8:	e0bffc17 	ldw	r2,-16(fp)
  804fec:	10800003 	ldbu	r2,0(r2)
  804ff0:	108003cc 	andi	r2,r2,15
  804ff4:	1007883a 	mov	r3,r2
  804ff8:	e0bfff17 	ldw	r2,-4(fp)
  804ffc:	10803fcc 	andi	r2,r2,255
  805000:	1004913a 	slli	r2,r2,4
  805004:	1884b03a 	or	r2,r3,r2
  805008:	1007883a 	mov	r3,r2
  80500c:	00000206 	br	805018 <put_fat+0x108>
  805010:	e0bfff17 	ldw	r2,-4(fp)
  805014:	1007883a 	mov	r3,r2
  805018:	e0bffc17 	ldw	r2,-16(fp)
  80501c:	10c00005 	stb	r3,0(r2)
         bc++;
  805020:	e0bffb17 	ldw	r2,-20(fp)
  805024:	10800044 	addi	r2,r2,1
  805028:	e0bffb15 	stw	r2,-20(fp)
         fs->wflag = 1;
  80502c:	e0bffd17 	ldw	r2,-12(fp)
  805030:	00c00044 	movi	r3,1
  805034:	10c00105 	stb	r3,4(r2)
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  805038:	e0bffd17 	ldw	r2,-12(fp)
  80503c:	10c00817 	ldw	r3,32(r2)
  805040:	e0bffb17 	ldw	r2,-20(fp)
  805044:	1004d27a 	srli	r2,r2,9
  805048:	1885883a 	add	r2,r3,r2
  80504c:	e13ffd17 	ldw	r4,-12(fp)
  805050:	100b883a 	mov	r5,r2
  805054:	08048a80 	call	8048a8 <move_window>
  805058:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  80505c:	e0bffa17 	ldw	r2,-24(fp)
  805060:	10000126 	beq	r2,zero,805068 <put_fat+0x158>
  805064:	00007d06 	br	80525c <put_fat+0x34c>
         p = &fs->win[bc % SS(fs)];
  805068:	e0bffb17 	ldw	r2,-20(fp)
  80506c:	10807fcc 	andi	r2,r2,511
  805070:	10800c04 	addi	r2,r2,48
  805074:	e0fffd17 	ldw	r3,-12(fp)
  805078:	1885883a 	add	r2,r3,r2
  80507c:	e0bffc15 	stw	r2,-16(fp)
         *p = (clst & 1) ? (uint8_t)(val >> 4) : ((*p & 0xF0) | ((uint8_t)(val >> 8) & 0x0F));
  805080:	e0bffe17 	ldw	r2,-8(fp)
  805084:	1080004c 	andi	r2,r2,1
  805088:	10000426 	beq	r2,zero,80509c <put_fat+0x18c>
  80508c:	e0bfff17 	ldw	r2,-4(fp)
  805090:	1004d13a 	srli	r2,r2,4
  805094:	1007883a 	mov	r3,r2
  805098:	00000b06 	br	8050c8 <put_fat+0x1b8>
  80509c:	e0bffc17 	ldw	r2,-16(fp)
  8050a0:	10800003 	ldbu	r2,0(r2)
  8050a4:	1007883a 	mov	r3,r2
  8050a8:	00bffc04 	movi	r2,-16
  8050ac:	1884703a 	and	r2,r3,r2
  8050b0:	1007883a 	mov	r3,r2
  8050b4:	e0bfff17 	ldw	r2,-4(fp)
  8050b8:	1004d23a 	srli	r2,r2,8
  8050bc:	108003cc 	andi	r2,r2,15
  8050c0:	1884b03a 	or	r2,r3,r2
  8050c4:	1007883a 	mov	r3,r2
  8050c8:	e0bffc17 	ldw	r2,-16(fp)
  8050cc:	10c00005 	stb	r3,0(r2)
         break;
  8050d0:	00006206 	br	80525c <put_fat+0x34c>

      case FS_FAT16 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  8050d4:	e0bffd17 	ldw	r2,-12(fp)
  8050d8:	10c00817 	ldw	r3,32(r2)
  8050dc:	e0bffe17 	ldw	r2,-8(fp)
  8050e0:	1004d23a 	srli	r2,r2,8
  8050e4:	1885883a 	add	r2,r3,r2
  8050e8:	e13ffd17 	ldw	r4,-12(fp)
  8050ec:	100b883a 	mov	r5,r2
  8050f0:	08048a80 	call	8048a8 <move_window>
  8050f4:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  8050f8:	e0bffa17 	ldw	r2,-24(fp)
  8050fc:	10000126 	beq	r2,zero,805104 <put_fat+0x1f4>
  805100:	00005606 	br	80525c <put_fat+0x34c>
         p = &fs->win[clst * 2 % SS(fs)];
  805104:	e0bffe17 	ldw	r2,-8(fp)
  805108:	1085883a 	add	r2,r2,r2
  80510c:	10807f8c 	andi	r2,r2,510
  805110:	10800c04 	addi	r2,r2,48
  805114:	e0fffd17 	ldw	r3,-12(fp)
  805118:	1885883a 	add	r2,r3,r2
  80511c:	e0bffc15 	stw	r2,-16(fp)
         ST_WORD(p, (uint16_t)val);
  805120:	e0bfff17 	ldw	r2,-4(fp)
  805124:	1007883a 	mov	r3,r2
  805128:	e0bffc17 	ldw	r2,-16(fp)
  80512c:	10c00005 	stb	r3,0(r2)
  805130:	e0bffc17 	ldw	r2,-16(fp)
  805134:	10800044 	addi	r2,r2,1
  805138:	e0ffff17 	ldw	r3,-4(fp)
  80513c:	18ffffcc 	andi	r3,r3,65535
  805140:	1806d23a 	srli	r3,r3,8
  805144:	10c00005 	stb	r3,0(r2)
         break;
  805148:	00004406 	br	80525c <put_fat+0x34c>

      case FS_FAT32 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  80514c:	e0bffd17 	ldw	r2,-12(fp)
  805150:	10c00817 	ldw	r3,32(r2)
  805154:	e0bffe17 	ldw	r2,-8(fp)
  805158:	1004d1fa 	srli	r2,r2,7
  80515c:	1885883a 	add	r2,r3,r2
  805160:	e13ffd17 	ldw	r4,-12(fp)
  805164:	100b883a 	mov	r5,r2
  805168:	08048a80 	call	8048a8 <move_window>
  80516c:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  805170:	e0bffa17 	ldw	r2,-24(fp)
  805174:	10000126 	beq	r2,zero,80517c <put_fat+0x26c>
  805178:	00003806 	br	80525c <put_fat+0x34c>
         p = &fs->win[clst * 4 % SS(fs)];
  80517c:	e0bffe17 	ldw	r2,-8(fp)
  805180:	1085883a 	add	r2,r2,r2
  805184:	1085883a 	add	r2,r2,r2
  805188:	10807f0c 	andi	r2,r2,508
  80518c:	10800c04 	addi	r2,r2,48
  805190:	e0fffd17 	ldw	r3,-12(fp)
  805194:	1885883a 	add	r2,r3,r2
  805198:	e0bffc15 	stw	r2,-16(fp)
         val |= LD_DWORD(p) & 0xF0000000;
  80519c:	e0bffc17 	ldw	r2,-16(fp)
  8051a0:	108000c4 	addi	r2,r2,3
  8051a4:	10800003 	ldbu	r2,0(r2)
  8051a8:	10803fcc 	andi	r2,r2,255
  8051ac:	1006963a 	slli	r3,r2,24
  8051b0:	e0bffc17 	ldw	r2,-16(fp)
  8051b4:	10800084 	addi	r2,r2,2
  8051b8:	10800003 	ldbu	r2,0(r2)
  8051bc:	10803fcc 	andi	r2,r2,255
  8051c0:	1004943a 	slli	r2,r2,16
  8051c4:	1884b03a 	or	r2,r3,r2
  8051c8:	e0fffc17 	ldw	r3,-16(fp)
  8051cc:	18c00044 	addi	r3,r3,1
  8051d0:	18c00003 	ldbu	r3,0(r3)
  8051d4:	18c03fcc 	andi	r3,r3,255
  8051d8:	1806923a 	slli	r3,r3,8
  8051dc:	10c6b03a 	or	r3,r2,r3
  8051e0:	e0bffc17 	ldw	r2,-16(fp)
  8051e4:	10800003 	ldbu	r2,0(r2)
  8051e8:	10803fcc 	andi	r2,r2,255
  8051ec:	1884b03a 	or	r2,r3,r2
  8051f0:	10bc002c 	andhi	r2,r2,61440
  8051f4:	e0ffff17 	ldw	r3,-4(fp)
  8051f8:	1884b03a 	or	r2,r3,r2
  8051fc:	e0bfff15 	stw	r2,-4(fp)
         ST_DWORD(p, val);
  805200:	e0bfff17 	ldw	r2,-4(fp)
  805204:	1007883a 	mov	r3,r2
  805208:	e0bffc17 	ldw	r2,-16(fp)
  80520c:	10c00005 	stb	r3,0(r2)
  805210:	e0bffc17 	ldw	r2,-16(fp)
  805214:	10800044 	addi	r2,r2,1
  805218:	e0ffff17 	ldw	r3,-4(fp)
  80521c:	18ffffcc 	andi	r3,r3,65535
  805220:	1806d23a 	srli	r3,r3,8
  805224:	10c00005 	stb	r3,0(r2)
  805228:	e0bffc17 	ldw	r2,-16(fp)
  80522c:	10800084 	addi	r2,r2,2
  805230:	e0ffff17 	ldw	r3,-4(fp)
  805234:	1806d43a 	srli	r3,r3,16
  805238:	10c00005 	stb	r3,0(r2)
  80523c:	e0bffc17 	ldw	r2,-16(fp)
  805240:	108000c4 	addi	r2,r2,3
  805244:	e0ffff17 	ldw	r3,-4(fp)
  805248:	1806d63a 	srli	r3,r3,24
  80524c:	10c00005 	stb	r3,0(r2)
         break;
  805250:	00000206 	br	80525c <put_fat+0x34c>

      default :
         res = FR_INT_ERR;
  805254:	00800084 	movi	r2,2
  805258:	e0bffa15 	stw	r2,-24(fp)
      }
      fs->wflag = 1;
  80525c:	e0bffd17 	ldw	r2,-12(fp)
  805260:	00c00044 	movi	r3,1
  805264:	10c00105 	stb	r3,4(r2)
   }

   return res;
  805268:	e0bffa17 	ldw	r2,-24(fp)
}
  80526c:	e037883a 	mov	sp,fp
  805270:	dfc00117 	ldw	ra,4(sp)
  805274:	df000017 	ldw	fp,0(sp)
  805278:	dec00204 	addi	sp,sp,8
  80527c:	f800283a 	ret

00805280 <remove_chain>:
static
FRESULT remove_chain (
   FATFS *fs,        /* File system object */
   uint32_t clst        /* Cluster# to remove a chain from */
)
{
  805280:	defffa04 	addi	sp,sp,-24
  805284:	dfc00515 	stw	ra,20(sp)
  805288:	df000415 	stw	fp,16(sp)
  80528c:	df000404 	addi	fp,sp,16
  805290:	e13ffe15 	stw	r4,-8(fp)
  805294:	e17fff15 	stw	r5,-4(fp)
   uint32_t nxt;
#if _USE_ERASE
   uint32_t scl = clst, ecl = clst, resion[2];
#endif

   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
  805298:	e0bfff17 	ldw	r2,-4(fp)
  80529c:	108000b0 	cmpltui	r2,r2,2
  8052a0:	1000041e 	bne	r2,zero,8052b4 <remove_chain+0x34>
  8052a4:	e0bffe17 	ldw	r2,-8(fp)
  8052a8:	10800617 	ldw	r2,24(r2)
  8052ac:	e0ffff17 	ldw	r3,-4(fp)
  8052b0:	18800336 	bltu	r3,r2,8052c0 <remove_chain+0x40>
      res = FR_INT_ERR;
  8052b4:	00800084 	movi	r2,2
  8052b8:	e0bffc15 	stw	r2,-16(fp)
  8052bc:	00002f06 	br	80537c <remove_chain+0xfc>

   } else {
      res = FR_OK;
  8052c0:	e03ffc15 	stw	zero,-16(fp)
      while (clst < fs->n_fatent) {       /* Not a last link? */
  8052c4:	00002906 	br	80536c <remove_chain+0xec>
         nxt = get_fat(fs, clst);         /* Get cluster status */
  8052c8:	e13ffe17 	ldw	r4,-8(fp)
  8052cc:	e17fff17 	ldw	r5,-4(fp)
  8052d0:	0804c8c0 	call	804c8c <get_fat>
  8052d4:	e0bffd15 	stw	r2,-12(fp)
         if (nxt == 0) break;          /* Empty cluster? */
  8052d8:	e0bffd17 	ldw	r2,-12(fp)
  8052dc:	1000011e 	bne	r2,zero,8052e4 <remove_chain+0x64>
  8052e0:	00002606 	br	80537c <remove_chain+0xfc>
         if (nxt == 1) { res = FR_INT_ERR; break; }   /* Internal error? */
  8052e4:	e0bffd17 	ldw	r2,-12(fp)
  8052e8:	10800058 	cmpnei	r2,r2,1
  8052ec:	1000031e 	bne	r2,zero,8052fc <remove_chain+0x7c>
  8052f0:	00800084 	movi	r2,2
  8052f4:	e0bffc15 	stw	r2,-16(fp)
  8052f8:	00002006 	br	80537c <remove_chain+0xfc>
         if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }  /* Disk error? */
  8052fc:	e0bffd17 	ldw	r2,-12(fp)
  805300:	10bfffd8 	cmpnei	r2,r2,-1
  805304:	1000031e 	bne	r2,zero,805314 <remove_chain+0x94>
  805308:	00800044 	movi	r2,1
  80530c:	e0bffc15 	stw	r2,-16(fp)
  805310:	00001a06 	br	80537c <remove_chain+0xfc>
         res = put_fat(fs, clst, 0);         /* Mark the cluster "empty" */
  805314:	e13ffe17 	ldw	r4,-8(fp)
  805318:	e17fff17 	ldw	r5,-4(fp)
  80531c:	000d883a 	mov	r6,zero
  805320:	0804f100 	call	804f10 <put_fat>
  805324:	e0bffc15 	stw	r2,-16(fp)
         if (res != FR_OK) break;
  805328:	e0bffc17 	ldw	r2,-16(fp)
  80532c:	10000126 	beq	r2,zero,805334 <remove_chain+0xb4>
  805330:	00001206 	br	80537c <remove_chain+0xfc>
         if (fs->free_clust != 0xFFFFFFFF) { /* Update FSInfo */
  805334:	e0bffe17 	ldw	r2,-8(fp)
  805338:	10800417 	ldw	r2,16(r2)
  80533c:	10bfffe0 	cmpeqi	r2,r2,-1
  805340:	1000081e 	bne	r2,zero,805364 <remove_chain+0xe4>
            fs->free_clust++;
  805344:	e0bffe17 	ldw	r2,-8(fp)
  805348:	10800417 	ldw	r2,16(r2)
  80534c:	10c00044 	addi	r3,r2,1
  805350:	e0bffe17 	ldw	r2,-8(fp)
  805354:	10c00415 	stw	r3,16(r2)
            fs->fsi_flag = 1;
  805358:	e0bffe17 	ldw	r2,-8(fp)
  80535c:	00c00044 	movi	r3,1
  805360:	10c00145 	stb	r3,5(r2)
            resion[1] = clust2sect(fs, ecl) + fs->csize - 1;   /* End sector */
            disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);    /* Erase the block */
            scl = ecl = nxt;
         }
#endif
         clst = nxt; /* Next cluster */
  805364:	e0bffd17 	ldw	r2,-12(fp)
  805368:	e0bfff15 	stw	r2,-4(fp)
   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
      res = FR_INT_ERR;

   } else {
      res = FR_OK;
      while (clst < fs->n_fatent) {       /* Not a last link? */
  80536c:	e0bffe17 	ldw	r2,-8(fp)
  805370:	10800617 	ldw	r2,24(r2)
  805374:	e0ffff17 	ldw	r3,-4(fp)
  805378:	18bfd336 	bltu	r3,r2,8052c8 <__alt_data_end+0xff8052c8>
#endif
         clst = nxt; /* Next cluster */
      }
   }

   return res;
  80537c:	e0bffc17 	ldw	r2,-16(fp)
}
  805380:	e037883a 	mov	sp,fp
  805384:	dfc00117 	ldw	ra,4(sp)
  805388:	df000017 	ldw	fp,0(sp)
  80538c:	dec00204 	addi	sp,sp,8
  805390:	f800283a 	ret

00805394 <create_chain>:
static
uint32_t create_chain ( /* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
   FATFS *fs,        /* File system object */
   uint32_t clst        /* Cluster# to stretch. 0 means create a new chain. */
)
{
  805394:	defff804 	addi	sp,sp,-32
  805398:	dfc00715 	stw	ra,28(sp)
  80539c:	df000615 	stw	fp,24(sp)
  8053a0:	df000604 	addi	fp,sp,24
  8053a4:	e13ffe15 	stw	r4,-8(fp)
  8053a8:	e17fff15 	stw	r5,-4(fp)
   uint32_t cs, ncl, scl;
   FRESULT res;


   if (clst == 0) {     /* Create a new chain */
  8053ac:	e0bfff17 	ldw	r2,-4(fp)
  8053b0:	10000c1e 	bne	r2,zero,8053e4 <create_chain+0x50>
      scl = fs->last_clust;         /* Get suggested start point */
  8053b4:	e0bffe17 	ldw	r2,-8(fp)
  8053b8:	10800317 	ldw	r2,12(r2)
  8053bc:	e0bffb15 	stw	r2,-20(fp)
      if (!scl || scl >= fs->n_fatent) scl = 1;
  8053c0:	e0bffb17 	ldw	r2,-20(fp)
  8053c4:	10000426 	beq	r2,zero,8053d8 <create_chain+0x44>
  8053c8:	e0bffe17 	ldw	r2,-8(fp)
  8053cc:	10800617 	ldw	r2,24(r2)
  8053d0:	e0fffb17 	ldw	r3,-20(fp)
  8053d4:	18801436 	bltu	r3,r2,805428 <create_chain+0x94>
  8053d8:	00800044 	movi	r2,1
  8053dc:	e0bffb15 	stw	r2,-20(fp)
  8053e0:	00001106 	br	805428 <create_chain+0x94>
   }
   else {               /* Stretch the current chain */
      cs = get_fat(fs, clst);       /* Check the cluster status */
  8053e4:	e13ffe17 	ldw	r4,-8(fp)
  8053e8:	e17fff17 	ldw	r5,-4(fp)
  8053ec:	0804c8c0 	call	804c8c <get_fat>
  8053f0:	e0bffd15 	stw	r2,-12(fp)
      if (cs < 2) return 1;         /* It is an invalid cluster */
  8053f4:	e0bffd17 	ldw	r2,-12(fp)
  8053f8:	108000a8 	cmpgeui	r2,r2,2
  8053fc:	1000021e 	bne	r2,zero,805408 <create_chain+0x74>
  805400:	00800044 	movi	r2,1
  805404:	00005706 	br	805564 <create_chain+0x1d0>
      if (cs < fs->n_fatent) return cs;   /* It is already followed by next cluster */
  805408:	e0bffe17 	ldw	r2,-8(fp)
  80540c:	10800617 	ldw	r2,24(r2)
  805410:	e0fffd17 	ldw	r3,-12(fp)
  805414:	1880022e 	bgeu	r3,r2,805420 <create_chain+0x8c>
  805418:	e0bffd17 	ldw	r2,-12(fp)
  80541c:	00005106 	br	805564 <create_chain+0x1d0>
      scl = clst;
  805420:	e0bfff17 	ldw	r2,-4(fp)
  805424:	e0bffb15 	stw	r2,-20(fp)
   }

   ncl = scl;           /* Start cluster */
  805428:	e0bffb17 	ldw	r2,-20(fp)
  80542c:	e0bffa15 	stw	r2,-24(fp)
   for (;;) {
      ncl++;                     /* Next cluster */
  805430:	e0bffa17 	ldw	r2,-24(fp)
  805434:	10800044 	addi	r2,r2,1
  805438:	e0bffa15 	stw	r2,-24(fp)
      if (ncl >= fs->n_fatent) {    /* Wrap around */
  80543c:	e0bffe17 	ldw	r2,-8(fp)
  805440:	10800617 	ldw	r2,24(r2)
  805444:	e0fffa17 	ldw	r3,-24(fp)
  805448:	18800736 	bltu	r3,r2,805468 <create_chain+0xd4>
         ncl = 2;
  80544c:	00800084 	movi	r2,2
  805450:	e0bffa15 	stw	r2,-24(fp)
         if (ncl > scl) return 0;   /* No free cluster */
  805454:	e0bffa17 	ldw	r2,-24(fp)
  805458:	e0fffb17 	ldw	r3,-20(fp)
  80545c:	1880022e 	bgeu	r3,r2,805468 <create_chain+0xd4>
  805460:	0005883a 	mov	r2,zero
  805464:	00003f06 	br	805564 <create_chain+0x1d0>
      }
      cs = get_fat(fs, ncl);        /* Get the cluster status */
  805468:	e13ffe17 	ldw	r4,-8(fp)
  80546c:	e17ffa17 	ldw	r5,-24(fp)
  805470:	0804c8c0 	call	804c8c <get_fat>
  805474:	e0bffd15 	stw	r2,-12(fp)
      if (cs == 0) break;           /* Found a free cluster */
  805478:	e0bffd17 	ldw	r2,-12(fp)
  80547c:	10000a1e 	bne	r2,zero,8054a8 <create_chain+0x114>
  805480:	0001883a 	nop
      if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
         return cs;
      if (ncl == scl) return 0;     /* No free cluster */
   }

   res = put_fat(fs, ncl, 0x0FFFFFFF); /* Mark the new cluster "last link" */
  805484:	e13ffe17 	ldw	r4,-8(fp)
  805488:	e17ffa17 	ldw	r5,-24(fp)
  80548c:	01840034 	movhi	r6,4096
  805490:	31bfffc4 	addi	r6,r6,-1
  805494:	0804f100 	call	804f10 <put_fat>
  805498:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK && clst != 0) {
  80549c:	e0bffc17 	ldw	r2,-16(fp)
  8054a0:	1000161e 	bne	r2,zero,8054fc <create_chain+0x168>
  8054a4:	00000e06 	br	8054e0 <create_chain+0x14c>
         ncl = 2;
         if (ncl > scl) return 0;   /* No free cluster */
      }
      cs = get_fat(fs, ncl);        /* Get the cluster status */
      if (cs == 0) break;           /* Found a free cluster */
      if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  8054a8:	e0bffd17 	ldw	r2,-12(fp)
  8054ac:	10bfffe0 	cmpeqi	r2,r2,-1
  8054b0:	1000031e 	bne	r2,zero,8054c0 <create_chain+0x12c>
  8054b4:	e0bffd17 	ldw	r2,-12(fp)
  8054b8:	10800058 	cmpnei	r2,r2,1
  8054bc:	1000021e 	bne	r2,zero,8054c8 <create_chain+0x134>
         return cs;
  8054c0:	e0bffd17 	ldw	r2,-12(fp)
  8054c4:	00002706 	br	805564 <create_chain+0x1d0>
      if (ncl == scl) return 0;     /* No free cluster */
  8054c8:	e0fffa17 	ldw	r3,-24(fp)
  8054cc:	e0bffb17 	ldw	r2,-20(fp)
  8054d0:	1880021e 	bne	r3,r2,8054dc <create_chain+0x148>
  8054d4:	0005883a 	mov	r2,zero
  8054d8:	00002206 	br	805564 <create_chain+0x1d0>
   }
  8054dc:	003fd406 	br	805430 <__alt_data_end+0xff805430>

   res = put_fat(fs, ncl, 0x0FFFFFFF); /* Mark the new cluster "last link" */
   if (res == FR_OK && clst != 0) {
  8054e0:	e0bfff17 	ldw	r2,-4(fp)
  8054e4:	10000526 	beq	r2,zero,8054fc <create_chain+0x168>
      res = put_fat(fs, clst, ncl); /* Link it to the previous one if needed */
  8054e8:	e13ffe17 	ldw	r4,-8(fp)
  8054ec:	e17fff17 	ldw	r5,-4(fp)
  8054f0:	e1bffa17 	ldw	r6,-24(fp)
  8054f4:	0804f100 	call	804f10 <put_fat>
  8054f8:	e0bffc15 	stw	r2,-16(fp)
   }
   if (res == FR_OK) {
  8054fc:	e0bffc17 	ldw	r2,-16(fp)
  805500:	1000101e 	bne	r2,zero,805544 <create_chain+0x1b0>
      fs->last_clust = ncl;         /* Update FSINFO */
  805504:	e0bffe17 	ldw	r2,-8(fp)
  805508:	e0fffa17 	ldw	r3,-24(fp)
  80550c:	10c00315 	stw	r3,12(r2)
      if (fs->free_clust != 0xFFFFFFFF) {
  805510:	e0bffe17 	ldw	r2,-8(fp)
  805514:	10800417 	ldw	r2,16(r2)
  805518:	10bfffe0 	cmpeqi	r2,r2,-1
  80551c:	1000101e 	bne	r2,zero,805560 <create_chain+0x1cc>
         fs->free_clust--;
  805520:	e0bffe17 	ldw	r2,-8(fp)
  805524:	10800417 	ldw	r2,16(r2)
  805528:	10ffffc4 	addi	r3,r2,-1
  80552c:	e0bffe17 	ldw	r2,-8(fp)
  805530:	10c00415 	stw	r3,16(r2)
         fs->fsi_flag = 1;
  805534:	e0bffe17 	ldw	r2,-8(fp)
  805538:	00c00044 	movi	r3,1
  80553c:	10c00145 	stb	r3,5(r2)
  805540:	00000706 	br	805560 <create_chain+0x1cc>
      }
   } else {
      ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  805544:	e0bffc17 	ldw	r2,-16(fp)
  805548:	10800058 	cmpnei	r2,r2,1
  80554c:	1000021e 	bne	r2,zero,805558 <create_chain+0x1c4>
  805550:	00bfffc4 	movi	r2,-1
  805554:	00000106 	br	80555c <create_chain+0x1c8>
  805558:	00800044 	movi	r2,1
  80555c:	e0bffa15 	stw	r2,-24(fp)
   }

   return ncl;    /* Return new cluster number or error code */
  805560:	e0bffa17 	ldw	r2,-24(fp)
}
  805564:	e037883a 	mov	sp,fp
  805568:	dfc00117 	ldw	ra,4(sp)
  80556c:	df000017 	ldw	fp,0(sp)
  805570:	dec00204 	addi	sp,sp,8
  805574:	f800283a 	ret

00805578 <dir_sdi>:
static
FRESULT dir_sdi (
   DIR *dj,    /* Pointer to directory object */
   uint16_t idx    /* Directory index number */
)
{
  805578:	defffa04 	addi	sp,sp,-24
  80557c:	dfc00515 	stw	ra,20(sp)
  805580:	df000415 	stw	fp,16(sp)
  805584:	df000404 	addi	fp,sp,16
  805588:	e13ffe15 	stw	r4,-8(fp)
  80558c:	2805883a 	mov	r2,r5
  805590:	e0bfff0d 	sth	r2,-4(fp)
   uint32_t clst;
   uint16_t ic;


   dj->index = idx;
  805594:	e0bffe17 	ldw	r2,-8(fp)
  805598:	e0ffff0b 	ldhu	r3,-4(fp)
  80559c:	10c0018d 	sth	r3,6(r2)
   clst = dj->sclust;
  8055a0:	e0bffe17 	ldw	r2,-8(fp)
  8055a4:	10800217 	ldw	r2,8(r2)
  8055a8:	e0bffc15 	stw	r2,-16(fp)
   if (clst == 1 || clst >= dj->fs->n_fatent)   /* Check start cluster range */
  8055ac:	e0bffc17 	ldw	r2,-16(fp)
  8055b0:	10800060 	cmpeqi	r2,r2,1
  8055b4:	1000051e 	bne	r2,zero,8055cc <dir_sdi+0x54>
  8055b8:	e0bffe17 	ldw	r2,-8(fp)
  8055bc:	10800017 	ldw	r2,0(r2)
  8055c0:	10800617 	ldw	r2,24(r2)
  8055c4:	e0fffc17 	ldw	r3,-16(fp)
  8055c8:	18800236 	bltu	r3,r2,8055d4 <dir_sdi+0x5c>
      return FR_INT_ERR;
  8055cc:	00800084 	movi	r2,2
  8055d0:	00005f06 	br	805750 <dir_sdi+0x1d8>
   if (!clst && dj->fs->fs_type == FS_FAT32) /* Replace cluster# 0 with root cluster# if in FAT32 */
  8055d4:	e0bffc17 	ldw	r2,-16(fp)
  8055d8:	10000a1e 	bne	r2,zero,805604 <dir_sdi+0x8c>
  8055dc:	e0bffe17 	ldw	r2,-8(fp)
  8055e0:	10800017 	ldw	r2,0(r2)
  8055e4:	10800003 	ldbu	r2,0(r2)
  8055e8:	10803fcc 	andi	r2,r2,255
  8055ec:	108000d8 	cmpnei	r2,r2,3
  8055f0:	1000041e 	bne	r2,zero,805604 <dir_sdi+0x8c>
      clst = dj->fs->dirbase;
  8055f4:	e0bffe17 	ldw	r2,-8(fp)
  8055f8:	10800017 	ldw	r2,0(r2)
  8055fc:	10800917 	ldw	r2,36(r2)
  805600:	e0bffc15 	stw	r2,-16(fp)

   if (clst == 0) {  /* Static table (root-dir in FAT12/16) */
  805604:	e0bffc17 	ldw	r2,-16(fp)
  805608:	1000151e 	bne	r2,zero,805660 <dir_sdi+0xe8>
      dj->clust = clst;
  80560c:	e0bffe17 	ldw	r2,-8(fp)
  805610:	e0fffc17 	ldw	r3,-16(fp)
  805614:	10c00315 	stw	r3,12(r2)
      if (idx >= dj->fs->n_rootdir)    /* Index is out of range */
  805618:	e0bffe17 	ldw	r2,-8(fp)
  80561c:	10800017 	ldw	r2,0(r2)
  805620:	1080020b 	ldhu	r2,8(r2)
  805624:	10bfffcc 	andi	r2,r2,65535
  805628:	e0ffff0b 	ldhu	r3,-4(fp)
  80562c:	18800236 	bltu	r3,r2,805638 <dir_sdi+0xc0>
         return FR_INT_ERR;
  805630:	00800084 	movi	r2,2
  805634:	00004606 	br	805750 <dir_sdi+0x1d8>
      dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
  805638:	e0bffe17 	ldw	r2,-8(fp)
  80563c:	10800017 	ldw	r2,0(r2)
  805640:	10c00917 	ldw	r3,36(r2)
  805644:	e0bfff0b 	ldhu	r2,-4(fp)
  805648:	1004d13a 	srli	r2,r2,4
  80564c:	10bfffcc 	andi	r2,r2,65535
  805650:	1887883a 	add	r3,r3,r2
  805654:	e0bffe17 	ldw	r2,-8(fp)
  805658:	10c00415 	stw	r3,16(r2)
  80565c:	00003206 	br	805728 <dir_sdi+0x1b0>
   }
   else {            /* Dynamic table (sub-dirs or root-dir in FAT32) */
      ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
  805660:	e0bffe17 	ldw	r2,-8(fp)
  805664:	10800017 	ldw	r2,0(r2)
  805668:	10800083 	ldbu	r2,2(r2)
  80566c:	10803fcc 	andi	r2,r2,255
  805670:	1004913a 	slli	r2,r2,4
  805674:	e0bffd0d 	sth	r2,-12(fp)
      while (idx >= ic) {  /* Follow cluster chain */
  805678:	00001906 	br	8056e0 <dir_sdi+0x168>
         clst = get_fat(dj->fs, clst);          /* Get next cluster */
  80567c:	e0bffe17 	ldw	r2,-8(fp)
  805680:	10800017 	ldw	r2,0(r2)
  805684:	1009883a 	mov	r4,r2
  805688:	e17ffc17 	ldw	r5,-16(fp)
  80568c:	0804c8c0 	call	804c8c <get_fat>
  805690:	e0bffc15 	stw	r2,-16(fp)
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error */
  805694:	e0bffc17 	ldw	r2,-16(fp)
  805698:	10bfffd8 	cmpnei	r2,r2,-1
  80569c:	1000021e 	bne	r2,zero,8056a8 <dir_sdi+0x130>
  8056a0:	00800044 	movi	r2,1
  8056a4:	00002a06 	br	805750 <dir_sdi+0x1d8>
         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
  8056a8:	e0bffc17 	ldw	r2,-16(fp)
  8056ac:	108000b0 	cmpltui	r2,r2,2
  8056b0:	1000051e 	bne	r2,zero,8056c8 <dir_sdi+0x150>
  8056b4:	e0bffe17 	ldw	r2,-8(fp)
  8056b8:	10800017 	ldw	r2,0(r2)
  8056bc:	10800617 	ldw	r2,24(r2)
  8056c0:	e0fffc17 	ldw	r3,-16(fp)
  8056c4:	18800236 	bltu	r3,r2,8056d0 <dir_sdi+0x158>
            return FR_INT_ERR;
  8056c8:	00800084 	movi	r2,2
  8056cc:	00002006 	br	805750 <dir_sdi+0x1d8>
         idx -= ic;
  8056d0:	e0ffff0b 	ldhu	r3,-4(fp)
  8056d4:	e0bffd0b 	ldhu	r2,-12(fp)
  8056d8:	1885c83a 	sub	r2,r3,r2
  8056dc:	e0bfff0d 	sth	r2,-4(fp)
         return FR_INT_ERR;
      dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
   }
   else {            /* Dynamic table (sub-dirs or root-dir in FAT32) */
      ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
      while (idx >= ic) {  /* Follow cluster chain */
  8056e0:	e0ffff0b 	ldhu	r3,-4(fp)
  8056e4:	e0bffd0b 	ldhu	r2,-12(fp)
  8056e8:	18bfe42e 	bgeu	r3,r2,80567c <__alt_data_end+0xff80567c>
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error */
         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
            return FR_INT_ERR;
         idx -= ic;
      }
      dj->clust = clst;
  8056ec:	e0bffe17 	ldw	r2,-8(fp)
  8056f0:	e0fffc17 	ldw	r3,-16(fp)
  8056f4:	10c00315 	stw	r3,12(r2)
      dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
  8056f8:	e0bffe17 	ldw	r2,-8(fp)
  8056fc:	10800017 	ldw	r2,0(r2)
  805700:	1009883a 	mov	r4,r2
  805704:	e17ffc17 	ldw	r5,-16(fp)
  805708:	0804c200 	call	804c20 <clust2sect>
  80570c:	1007883a 	mov	r3,r2
  805710:	e0bfff0b 	ldhu	r2,-4(fp)
  805714:	1004d13a 	srli	r2,r2,4
  805718:	10bfffcc 	andi	r2,r2,65535
  80571c:	1887883a 	add	r3,r3,r2
  805720:	e0bffe17 	ldw	r2,-8(fp)
  805724:	10c00415 	stw	r3,16(r2)
   }

   dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;   /* Ptr to the entry in the sector */
  805728:	e0bffe17 	ldw	r2,-8(fp)
  80572c:	10c00017 	ldw	r3,0(r2)
  805730:	e0bfff0b 	ldhu	r2,-4(fp)
  805734:	108003cc 	andi	r2,r2,15
  805738:	1004917a 	slli	r2,r2,5
  80573c:	10800c04 	addi	r2,r2,48
  805740:	1887883a 	add	r3,r3,r2
  805744:	e0bffe17 	ldw	r2,-8(fp)
  805748:	10c00515 	stw	r3,20(r2)

   return FR_OK;  /* Seek succeeded */
  80574c:	0005883a 	mov	r2,zero
}
  805750:	e037883a 	mov	sp,fp
  805754:	dfc00117 	ldw	ra,4(sp)
  805758:	df000017 	ldw	fp,0(sp)
  80575c:	dec00204 	addi	sp,sp,8
  805760:	f800283a 	ret

00805764 <dir_next>:
static
FRESULT dir_next (   /* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
   DIR *dj,    /* Pointer to directory object */
   int stretch    /* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  805764:	defff904 	addi	sp,sp,-28
  805768:	dfc00615 	stw	ra,24(sp)
  80576c:	df000515 	stw	fp,20(sp)
  805770:	dc000415 	stw	r16,16(sp)
  805774:	df000504 	addi	fp,sp,20
  805778:	e13ffd15 	stw	r4,-12(fp)
  80577c:	e17ffe15 	stw	r5,-8(fp)
   uint16_t i;



   stretch = stretch;      /* To suppress warning on read-only cfg. */
   i = dj->index + 1;
  805780:	e0bffd17 	ldw	r2,-12(fp)
  805784:	1080018b 	ldhu	r2,6(r2)
  805788:	10800044 	addi	r2,r2,1
  80578c:	e0bffc8d 	sth	r2,-14(fp)
   if (!i || !dj->sect) /* Report EOT when index has reached 65535 */
  805790:	e0bffc8b 	ldhu	r2,-14(fp)
  805794:	10000326 	beq	r2,zero,8057a4 <dir_next+0x40>
  805798:	e0bffd17 	ldw	r2,-12(fp)
  80579c:	10800417 	ldw	r2,16(r2)
  8057a0:	1000021e 	bne	r2,zero,8057ac <dir_next+0x48>
      return FR_NO_FILE;
  8057a4:	00800104 	movi	r2,4
  8057a8:	0000a206 	br	805a34 <dir_next+0x2d0>

   if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
  8057ac:	e0bffc8b 	ldhu	r2,-14(fp)
  8057b0:	108003cc 	andi	r2,r2,15
  8057b4:	10bfffcc 	andi	r2,r2,65535
  8057b8:	1000911e 	bne	r2,zero,805a00 <dir_next+0x29c>
      dj->sect++;             /* Next sector */
  8057bc:	e0bffd17 	ldw	r2,-12(fp)
  8057c0:	10800417 	ldw	r2,16(r2)
  8057c4:	10c00044 	addi	r3,r2,1
  8057c8:	e0bffd17 	ldw	r2,-12(fp)
  8057cc:	10c00415 	stw	r3,16(r2)

      if (dj->clust == 0) {   /* Static table */
  8057d0:	e0bffd17 	ldw	r2,-12(fp)
  8057d4:	10800317 	ldw	r2,12(r2)
  8057d8:	1000081e 	bne	r2,zero,8057fc <dir_next+0x98>
         if (i >= dj->fs->n_rootdir)   /* Report EOT when end of table */
  8057dc:	e0bffd17 	ldw	r2,-12(fp)
  8057e0:	10800017 	ldw	r2,0(r2)
  8057e4:	1080020b 	ldhu	r2,8(r2)
  8057e8:	10bfffcc 	andi	r2,r2,65535
  8057ec:	e0fffc8b 	ldhu	r3,-14(fp)
  8057f0:	18808336 	bltu	r3,r2,805a00 <dir_next+0x29c>
            return FR_NO_FILE;
  8057f4:	00800104 	movi	r2,4
  8057f8:	00008e06 	br	805a34 <dir_next+0x2d0>
      }
      else {               /* Dynamic table */
         if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {   /* Cluster changed? */
  8057fc:	e0bffc8b 	ldhu	r2,-14(fp)
  805800:	1004d13a 	srli	r2,r2,4
  805804:	10bfffcc 	andi	r2,r2,65535
  805808:	e0fffd17 	ldw	r3,-12(fp)
  80580c:	18c00017 	ldw	r3,0(r3)
  805810:	18c00083 	ldbu	r3,2(r3)
  805814:	18c03fcc 	andi	r3,r3,255
  805818:	18ffffc4 	addi	r3,r3,-1
  80581c:	10c4703a 	and	r2,r2,r3
  805820:	1000771e 	bne	r2,zero,805a00 <dir_next+0x29c>
            clst = get_fat(dj->fs, dj->clust);           /* Get next cluster */
  805824:	e0bffd17 	ldw	r2,-12(fp)
  805828:	10c00017 	ldw	r3,0(r2)
  80582c:	e0bffd17 	ldw	r2,-12(fp)
  805830:	10800317 	ldw	r2,12(r2)
  805834:	1809883a 	mov	r4,r3
  805838:	100b883a 	mov	r5,r2
  80583c:	0804c8c0 	call	804c8c <get_fat>
  805840:	e0bffb15 	stw	r2,-20(fp)
            if (clst <= 1) return FR_INT_ERR;
  805844:	e0bffb17 	ldw	r2,-20(fp)
  805848:	108000a8 	cmpgeui	r2,r2,2
  80584c:	1000021e 	bne	r2,zero,805858 <dir_next+0xf4>
  805850:	00800084 	movi	r2,2
  805854:	00007706 	br	805a34 <dir_next+0x2d0>
            if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  805858:	e0bffb17 	ldw	r2,-20(fp)
  80585c:	10bfffd8 	cmpnei	r2,r2,-1
  805860:	1000021e 	bne	r2,zero,80586c <dir_next+0x108>
  805864:	00800044 	movi	r2,1
  805868:	00007206 	br	805a34 <dir_next+0x2d0>
            if (clst >= dj->fs->n_fatent) {              /* When it reached end of dynamic table */
  80586c:	e0bffd17 	ldw	r2,-12(fp)
  805870:	10800017 	ldw	r2,0(r2)
  805874:	10800617 	ldw	r2,24(r2)
  805878:	e0fffb17 	ldw	r3,-20(fp)
  80587c:	18805536 	bltu	r3,r2,8059d4 <dir_next+0x270>
#if !_FS_READONLY
               uint8_t c;
               if (!stretch) return FR_NO_FILE;       /* When do not stretch, report EOT */
  805880:	e0bffe17 	ldw	r2,-8(fp)
  805884:	1000021e 	bne	r2,zero,805890 <dir_next+0x12c>
  805888:	00800104 	movi	r2,4
  80588c:	00006906 	br	805a34 <dir_next+0x2d0>
               clst = create_chain(dj->fs, dj->clust);      /* Stretch cluster chain */
  805890:	e0bffd17 	ldw	r2,-12(fp)
  805894:	10c00017 	ldw	r3,0(r2)
  805898:	e0bffd17 	ldw	r2,-12(fp)
  80589c:	10800317 	ldw	r2,12(r2)
  8058a0:	1809883a 	mov	r4,r3
  8058a4:	100b883a 	mov	r5,r2
  8058a8:	08053940 	call	805394 <create_chain>
  8058ac:	e0bffb15 	stw	r2,-20(fp)
               if (clst == 0) return FR_DENIED;       /* No free cluster */
  8058b0:	e0bffb17 	ldw	r2,-20(fp)
  8058b4:	1000021e 	bne	r2,zero,8058c0 <dir_next+0x15c>
  8058b8:	008001c4 	movi	r2,7
  8058bc:	00005d06 	br	805a34 <dir_next+0x2d0>
               if (clst == 1) return FR_INT_ERR;
  8058c0:	e0bffb17 	ldw	r2,-20(fp)
  8058c4:	10800058 	cmpnei	r2,r2,1
  8058c8:	1000021e 	bne	r2,zero,8058d4 <dir_next+0x170>
  8058cc:	00800084 	movi	r2,2
  8058d0:	00005806 	br	805a34 <dir_next+0x2d0>
               if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  8058d4:	e0bffb17 	ldw	r2,-20(fp)
  8058d8:	10bfffd8 	cmpnei	r2,r2,-1
  8058dc:	1000021e 	bne	r2,zero,8058e8 <dir_next+0x184>
  8058e0:	00800044 	movi	r2,1
  8058e4:	00005306 	br	805a34 <dir_next+0x2d0>
               /* Clean-up stretched table */
               if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
  8058e8:	e0bffd17 	ldw	r2,-12(fp)
  8058ec:	10800017 	ldw	r2,0(r2)
  8058f0:	1009883a 	mov	r4,r2
  8058f4:	000b883a 	mov	r5,zero
  8058f8:	08048a80 	call	8048a8 <move_window>
  8058fc:	10000226 	beq	r2,zero,805908 <dir_next+0x1a4>
  805900:	00800044 	movi	r2,1
  805904:	00004b06 	br	805a34 <dir_next+0x2d0>
               mem_set(dj->fs->win, 0, SS(dj->fs));         /* Clear window buffer */
  805908:	e0bffd17 	ldw	r2,-12(fp)
  80590c:	10800017 	ldw	r2,0(r2)
  805910:	10800c04 	addi	r2,r2,48
  805914:	1009883a 	mov	r4,r2
  805918:	000b883a 	mov	r5,zero
  80591c:	01808004 	movi	r6,512
  805920:	08047480 	call	804748 <mem_set>
               dj->fs->winsect = clust2sect(dj->fs, clst);  /* Cluster start sector */
  805924:	e0bffd17 	ldw	r2,-12(fp)
  805928:	14000017 	ldw	r16,0(r2)
  80592c:	e0bffd17 	ldw	r2,-12(fp)
  805930:	10800017 	ldw	r2,0(r2)
  805934:	1009883a 	mov	r4,r2
  805938:	e17ffb17 	ldw	r5,-20(fp)
  80593c:	0804c200 	call	804c20 <clust2sect>
  805940:	80800b15 	stw	r2,44(r16)
               for (c = 0; c < dj->fs->csize; c++) {     /* Fill the new cluster with 0 */
  805944:	e03ffc05 	stb	zero,-16(fp)
  805948:	00001406 	br	80599c <dir_next+0x238>
                  dj->fs->wflag = 1;
  80594c:	e0bffd17 	ldw	r2,-12(fp)
  805950:	10800017 	ldw	r2,0(r2)
  805954:	00c00044 	movi	r3,1
  805958:	10c00105 	stb	r3,4(r2)
                  if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  80595c:	e0bffd17 	ldw	r2,-12(fp)
  805960:	10800017 	ldw	r2,0(r2)
  805964:	1009883a 	mov	r4,r2
  805968:	000b883a 	mov	r5,zero
  80596c:	08048a80 	call	8048a8 <move_window>
  805970:	10000226 	beq	r2,zero,80597c <dir_next+0x218>
  805974:	00800044 	movi	r2,1
  805978:	00002e06 	br	805a34 <dir_next+0x2d0>
                  dj->fs->winsect++;
  80597c:	e0bffd17 	ldw	r2,-12(fp)
  805980:	10800017 	ldw	r2,0(r2)
  805984:	10c00b17 	ldw	r3,44(r2)
  805988:	18c00044 	addi	r3,r3,1
  80598c:	10c00b15 	stw	r3,44(r2)
               if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
               /* Clean-up stretched table */
               if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
               mem_set(dj->fs->win, 0, SS(dj->fs));         /* Clear window buffer */
               dj->fs->winsect = clust2sect(dj->fs, clst);  /* Cluster start sector */
               for (c = 0; c < dj->fs->csize; c++) {     /* Fill the new cluster with 0 */
  805990:	e0bffc03 	ldbu	r2,-16(fp)
  805994:	10800044 	addi	r2,r2,1
  805998:	e0bffc05 	stb	r2,-16(fp)
  80599c:	e0bffd17 	ldw	r2,-12(fp)
  8059a0:	10800017 	ldw	r2,0(r2)
  8059a4:	10800083 	ldbu	r2,2(r2)
  8059a8:	10803fcc 	andi	r2,r2,255
  8059ac:	e0fffc03 	ldbu	r3,-16(fp)
  8059b0:	18bfe636 	bltu	r3,r2,80594c <__alt_data_end+0xff80594c>
                  dj->fs->wflag = 1;
                  if (move_window(dj->fs, 0)) return FR_DISK_ERR;
                  dj->fs->winsect++;
               }
               dj->fs->winsect -= c;                  /* Rewind window address */
  8059b4:	e0bffd17 	ldw	r2,-12(fp)
  8059b8:	10800017 	ldw	r2,0(r2)
  8059bc:	e0fffd17 	ldw	r3,-12(fp)
  8059c0:	18c00017 	ldw	r3,0(r3)
  8059c4:	19000b17 	ldw	r4,44(r3)
  8059c8:	e0fffc03 	ldbu	r3,-16(fp)
  8059cc:	20c7c83a 	sub	r3,r4,r3
  8059d0:	10c00b15 	stw	r3,44(r2)
#else
               return FR_NO_FILE;         /* Report EOT */
#endif
            }
            dj->clust = clst;          /* Initialize data for new cluster */
  8059d4:	e0bffd17 	ldw	r2,-12(fp)
  8059d8:	e0fffb17 	ldw	r3,-20(fp)
  8059dc:	10c00315 	stw	r3,12(r2)
            dj->sect = clust2sect(dj->fs, clst);
  8059e0:	e0bffd17 	ldw	r2,-12(fp)
  8059e4:	10800017 	ldw	r2,0(r2)
  8059e8:	1009883a 	mov	r4,r2
  8059ec:	e17ffb17 	ldw	r5,-20(fp)
  8059f0:	0804c200 	call	804c20 <clust2sect>
  8059f4:	1007883a 	mov	r3,r2
  8059f8:	e0bffd17 	ldw	r2,-12(fp)
  8059fc:	10c00415 	stw	r3,16(r2)
         }
      }
   }

   dj->index = i;
  805a00:	e0bffd17 	ldw	r2,-12(fp)
  805a04:	e0fffc8b 	ldhu	r3,-14(fp)
  805a08:	10c0018d 	sth	r3,6(r2)
   dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  805a0c:	e0bffd17 	ldw	r2,-12(fp)
  805a10:	10c00017 	ldw	r3,0(r2)
  805a14:	e0bffc8b 	ldhu	r2,-14(fp)
  805a18:	108003cc 	andi	r2,r2,15
  805a1c:	1004917a 	slli	r2,r2,5
  805a20:	10800c04 	addi	r2,r2,48
  805a24:	1887883a 	add	r3,r3,r2
  805a28:	e0bffd17 	ldw	r2,-12(fp)
  805a2c:	10c00515 	stw	r3,20(r2)

   return FR_OK;
  805a30:	0005883a 	mov	r2,zero
}
  805a34:	e6ffff04 	addi	sp,fp,-4
  805a38:	dfc00217 	ldw	ra,8(sp)
  805a3c:	df000117 	ldw	fp,4(sp)
  805a40:	dc000017 	ldw	r16,0(sp)
  805a44:	dec00304 	addi	sp,sp,12
  805a48:	f800283a 	ret

00805a4c <dir_find>:

static
FRESULT dir_find (
   DIR *dj        /* Pointer to the directory object linked to the file name */
)
{
  805a4c:	defffa04 	addi	sp,sp,-24
  805a50:	dfc00515 	stw	ra,20(sp)
  805a54:	df000415 	stw	fp,16(sp)
  805a58:	df000404 	addi	fp,sp,16
  805a5c:	e13fff15 	stw	r4,-4(fp)
   uint8_t c, *dir;
#if _USE_LFN
   uint8_t a, ord, sum;
#endif

   res = dir_sdi(dj, 0);         /* Rewind directory object */
  805a60:	e13fff17 	ldw	r4,-4(fp)
  805a64:	000b883a 	mov	r5,zero
  805a68:	08055780 	call	805578 <dir_sdi>
  805a6c:	e0bffc15 	stw	r2,-16(fp)
   if (res != FR_OK) return res;
  805a70:	e0bffc17 	ldw	r2,-16(fp)
  805a74:	10000226 	beq	r2,zero,805a80 <dir_find+0x34>
  805a78:	e0bffc17 	ldw	r2,-16(fp)
  805a7c:	00002b06 	br	805b2c <dir_find+0xe0>

#if _USE_LFN
   ord = sum = 0xFF;
#endif
   do {
      res = move_window(dj->fs, dj->sect);
  805a80:	e0bfff17 	ldw	r2,-4(fp)
  805a84:	10c00017 	ldw	r3,0(r2)
  805a88:	e0bfff17 	ldw	r2,-4(fp)
  805a8c:	10800417 	ldw	r2,16(r2)
  805a90:	1809883a 	mov	r4,r3
  805a94:	100b883a 	mov	r5,r2
  805a98:	08048a80 	call	8048a8 <move_window>
  805a9c:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
  805aa0:	e0bffc17 	ldw	r2,-16(fp)
  805aa4:	10000126 	beq	r2,zero,805aac <dir_find+0x60>
  805aa8:	00001f06 	br	805b28 <dir_find+0xdc>
      dir = dj->dir;             /* Ptr to the directory entry of current index */
  805aac:	e0bfff17 	ldw	r2,-4(fp)
  805ab0:	10800517 	ldw	r2,20(r2)
  805ab4:	e0bffd15 	stw	r2,-12(fp)
      c = dir[DIR_Name];
  805ab8:	e0bffd17 	ldw	r2,-12(fp)
  805abc:	10800003 	ldbu	r2,0(r2)
  805ac0:	e0bffe05 	stb	r2,-8(fp)
      if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
  805ac4:	e0bffe03 	ldbu	r2,-8(fp)
  805ac8:	1000031e 	bne	r2,zero,805ad8 <dir_find+0x8c>
  805acc:	00800104 	movi	r2,4
  805ad0:	e0bffc15 	stw	r2,-16(fp)
  805ad4:	00001406 	br	805b28 <dir_find+0xdc>
            ord = 0xFF; dj->lfn_idx = 0xFFFF;   /* Reset LFN sequence */
            if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;  /* SFN matched? */
         }
      }
#else    /* Non LFN configuration */
      if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
  805ad8:	e0bffd17 	ldw	r2,-12(fp)
  805adc:	108002c4 	addi	r2,r2,11
  805ae0:	10800003 	ldbu	r2,0(r2)
  805ae4:	10803fcc 	andi	r2,r2,255
  805ae8:	1080020c 	andi	r2,r2,8
  805aec:	1000081e 	bne	r2,zero,805b10 <dir_find+0xc4>
  805af0:	e0bfff17 	ldw	r2,-4(fp)
  805af4:	10800617 	ldw	r2,24(r2)
  805af8:	e13ffd17 	ldw	r4,-12(fp)
  805afc:	100b883a 	mov	r5,r2
  805b00:	018002c4 	movi	r6,11
  805b04:	08047a00 	call	8047a0 <mem_cmp>
  805b08:	1000011e 	bne	r2,zero,805b10 <dir_find+0xc4>
         break;
  805b0c:	00000606 	br	805b28 <dir_find+0xdc>
#endif
      res = dir_next(dj, 0);     /* Next entry */
  805b10:	e13fff17 	ldw	r4,-4(fp)
  805b14:	000b883a 	mov	r5,zero
  805b18:	08057640 	call	805764 <dir_next>
  805b1c:	e0bffc15 	stw	r2,-16(fp)
   } while (res == FR_OK);
  805b20:	e0bffc17 	ldw	r2,-16(fp)
  805b24:	103fd626 	beq	r2,zero,805a80 <__alt_data_end+0xff805a80>

   return res;
  805b28:	e0bffc17 	ldw	r2,-16(fp)
}
  805b2c:	e037883a 	mov	sp,fp
  805b30:	dfc00117 	ldw	ra,4(sp)
  805b34:	df000017 	ldw	fp,0(sp)
  805b38:	dec00204 	addi	sp,sp,8
  805b3c:	f800283a 	ret

00805b40 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
   DIR *dj        /* Pointer to the directory object that pointing the entry to be read */
)
{
  805b40:	defffa04 	addi	sp,sp,-24
  805b44:	dfc00515 	stw	ra,20(sp)
  805b48:	df000415 	stw	fp,16(sp)
  805b4c:	df000404 	addi	fp,sp,16
  805b50:	e13fff15 	stw	r4,-4(fp)
   uint8_t c, *dir;
#if _USE_LFN
   uint8_t a, ord = 0xFF, sum = 0xFF;
#endif

   res = FR_NO_FILE;
  805b54:	00800104 	movi	r2,4
  805b58:	e0bffc15 	stw	r2,-16(fp)
   while (dj->sect) {
  805b5c:	00002a06 	br	805c08 <dir_read+0xc8>
      res = move_window(dj->fs, dj->sect);
  805b60:	e0bfff17 	ldw	r2,-4(fp)
  805b64:	10c00017 	ldw	r3,0(r2)
  805b68:	e0bfff17 	ldw	r2,-4(fp)
  805b6c:	10800417 	ldw	r2,16(r2)
  805b70:	1809883a 	mov	r4,r3
  805b74:	100b883a 	mov	r5,r2
  805b78:	08048a80 	call	8048a8 <move_window>
  805b7c:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
  805b80:	e0bffc17 	ldw	r2,-16(fp)
  805b84:	10000126 	beq	r2,zero,805b8c <dir_read+0x4c>
  805b88:	00002206 	br	805c14 <dir_read+0xd4>
      dir = dj->dir;             /* Ptr to the directory entry of current index */
  805b8c:	e0bfff17 	ldw	r2,-4(fp)
  805b90:	10800517 	ldw	r2,20(r2)
  805b94:	e0bffd15 	stw	r2,-12(fp)
      c = dir[DIR_Name];
  805b98:	e0bffd17 	ldw	r2,-12(fp)
  805b9c:	10800003 	ldbu	r2,0(r2)
  805ba0:	e0bffe05 	stb	r2,-8(fp)
      if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
  805ba4:	e0bffe03 	ldbu	r2,-8(fp)
  805ba8:	1000031e 	bne	r2,zero,805bb8 <dir_read+0x78>
  805bac:	00800104 	movi	r2,4
  805bb0:	e0bffc15 	stw	r2,-16(fp)
  805bb4:	00001706 	br	805c14 <dir_read+0xd4>
               dj->lfn_idx = 0xFFFF;      /* It has no LFN. */
            break;
         }
      }
#else    /* Non LFN configuration */
      if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))   /* Is it a valid entry? */
  805bb8:	e0bffe03 	ldbu	r2,-8(fp)
  805bbc:	10803960 	cmpeqi	r2,r2,229
  805bc0:	10000a1e 	bne	r2,zero,805bec <dir_read+0xac>
  805bc4:	e0bffe03 	ldbu	r2,-8(fp)
  805bc8:	10800ba0 	cmpeqi	r2,r2,46
  805bcc:	1000071e 	bne	r2,zero,805bec <dir_read+0xac>
  805bd0:	e0bffd17 	ldw	r2,-12(fp)
  805bd4:	108002c4 	addi	r2,r2,11
  805bd8:	10800003 	ldbu	r2,0(r2)
  805bdc:	10803fcc 	andi	r2,r2,255
  805be0:	1080020c 	andi	r2,r2,8
  805be4:	1000011e 	bne	r2,zero,805bec <dir_read+0xac>
         break;
  805be8:	00000a06 	br	805c14 <dir_read+0xd4>
#endif
      res = dir_next(dj, 0);           /* Next entry */
  805bec:	e13fff17 	ldw	r4,-4(fp)
  805bf0:	000b883a 	mov	r5,zero
  805bf4:	08057640 	call	805764 <dir_next>
  805bf8:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
  805bfc:	e0bffc17 	ldw	r2,-16(fp)
  805c00:	10000126 	beq	r2,zero,805c08 <dir_read+0xc8>
  805c04:	00000306 	br	805c14 <dir_read+0xd4>
#if _USE_LFN
   uint8_t a, ord = 0xFF, sum = 0xFF;
#endif

   res = FR_NO_FILE;
   while (dj->sect) {
  805c08:	e0bfff17 	ldw	r2,-4(fp)
  805c0c:	10800417 	ldw	r2,16(r2)
  805c10:	103fd31e 	bne	r2,zero,805b60 <__alt_data_end+0xff805b60>
#endif
      res = dir_next(dj, 0);           /* Next entry */
      if (res != FR_OK) break;
   }

   if (res != FR_OK) dj->sect = 0;
  805c14:	e0bffc17 	ldw	r2,-16(fp)
  805c18:	10000226 	beq	r2,zero,805c24 <dir_read+0xe4>
  805c1c:	e0bfff17 	ldw	r2,-4(fp)
  805c20:	10000415 	stw	zero,16(r2)

   return res;
  805c24:	e0bffc17 	ldw	r2,-16(fp)
}
  805c28:	e037883a 	mov	sp,fp
  805c2c:	dfc00117 	ldw	ra,4(sp)
  805c30:	df000017 	ldw	fp,0(sp)
  805c34:	dec00204 	addi	sp,sp,8
  805c38:	f800283a 	ret

00805c3c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (  /* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
   DIR *dj           /* Target directory with object name to be created */
)
{
  805c3c:	defffa04 	addi	sp,sp,-24
  805c40:	dfc00515 	stw	ra,20(sp)
  805c44:	df000415 	stw	fp,16(sp)
  805c48:	df000404 	addi	fp,sp,16
  805c4c:	e13fff15 	stw	r4,-4(fp)
         } while (res == FR_OK && --ne);
      }
   }

#else /* Non LFN configuration */
   res = dir_sdi(dj, 0);
  805c50:	e13fff17 	ldw	r4,-4(fp)
  805c54:	000b883a 	mov	r5,zero
  805c58:	08055780 	call	805578 <dir_sdi>
  805c5c:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK) {
  805c60:	e0bffc17 	ldw	r2,-16(fp)
  805c64:	10001a1e 	bne	r2,zero,805cd0 <dir_register+0x94>
      do {  /* Find a blank entry for the SFN */
         res = move_window(dj->fs, dj->sect);
  805c68:	e0bfff17 	ldw	r2,-4(fp)
  805c6c:	10c00017 	ldw	r3,0(r2)
  805c70:	e0bfff17 	ldw	r2,-4(fp)
  805c74:	10800417 	ldw	r2,16(r2)
  805c78:	1809883a 	mov	r4,r3
  805c7c:	100b883a 	mov	r5,r2
  805c80:	08048a80 	call	8048a8 <move_window>
  805c84:	e0bffc15 	stw	r2,-16(fp)
         if (res != FR_OK) break;
  805c88:	e0bffc17 	ldw	r2,-16(fp)
  805c8c:	10000126 	beq	r2,zero,805c94 <dir_register+0x58>
  805c90:	00000f06 	br	805cd0 <dir_register+0x94>
         c = *dj->dir;
  805c94:	e0bfff17 	ldw	r2,-4(fp)
  805c98:	10800517 	ldw	r2,20(r2)
  805c9c:	10800003 	ldbu	r2,0(r2)
  805ca0:	e0bffd05 	stb	r2,-12(fp)
         if (c == DDE || c == 0) break;   /* Is it a blank entry? */
  805ca4:	e0bffd03 	ldbu	r2,-12(fp)
  805ca8:	10803960 	cmpeqi	r2,r2,229
  805cac:	1000081e 	bne	r2,zero,805cd0 <dir_register+0x94>
  805cb0:	e0bffd03 	ldbu	r2,-12(fp)
  805cb4:	10000626 	beq	r2,zero,805cd0 <dir_register+0x94>
         res = dir_next(dj, 1);        /* Next entry with table stretch */
  805cb8:	e13fff17 	ldw	r4,-4(fp)
  805cbc:	01400044 	movi	r5,1
  805cc0:	08057640 	call	805764 <dir_next>
  805cc4:	e0bffc15 	stw	r2,-16(fp)
      } while (res == FR_OK);
  805cc8:	e0bffc17 	ldw	r2,-16(fp)
  805ccc:	103fe626 	beq	r2,zero,805c68 <__alt_data_end+0xff805c68>
   }
#endif

   if (res == FR_OK) {     /* Initialize the SFN entry */
  805cd0:	e0bffc17 	ldw	r2,-16(fp)
  805cd4:	10001b1e 	bne	r2,zero,805d44 <dir_register+0x108>
      res = move_window(dj->fs, dj->sect);
  805cd8:	e0bfff17 	ldw	r2,-4(fp)
  805cdc:	10c00017 	ldw	r3,0(r2)
  805ce0:	e0bfff17 	ldw	r2,-4(fp)
  805ce4:	10800417 	ldw	r2,16(r2)
  805ce8:	1809883a 	mov	r4,r3
  805cec:	100b883a 	mov	r5,r2
  805cf0:	08048a80 	call	8048a8 <move_window>
  805cf4:	e0bffc15 	stw	r2,-16(fp)
      if (res == FR_OK) {
  805cf8:	e0bffc17 	ldw	r2,-16(fp)
  805cfc:	1000111e 	bne	r2,zero,805d44 <dir_register+0x108>
         dir = dj->dir;
  805d00:	e0bfff17 	ldw	r2,-4(fp)
  805d04:	10800517 	ldw	r2,20(r2)
  805d08:	e0bffe15 	stw	r2,-8(fp)
         mem_set(dir, 0, SZ_DIR);   /* Clean the entry */
  805d0c:	e13ffe17 	ldw	r4,-8(fp)
  805d10:	000b883a 	mov	r5,zero
  805d14:	01800804 	movi	r6,32
  805d18:	08047480 	call	804748 <mem_set>
         mem_cpy(dir, dj->fn, 11);  /* Put SFN */
  805d1c:	e0bfff17 	ldw	r2,-4(fp)
  805d20:	10800617 	ldw	r2,24(r2)
  805d24:	e13ffe17 	ldw	r4,-8(fp)
  805d28:	100b883a 	mov	r5,r2
  805d2c:	018002c4 	movi	r6,11
  805d30:	08046dc0 	call	8046dc <mem_cpy>
#if _USE_LFN
         dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);   /* Put NT flag */
#endif
         dj->fs->wflag = 1;
  805d34:	e0bfff17 	ldw	r2,-4(fp)
  805d38:	10800017 	ldw	r2,0(r2)
  805d3c:	00c00044 	movi	r3,1
  805d40:	10c00105 	stb	r3,4(r2)
      }
   }

   return res;
  805d44:	e0bffc17 	ldw	r2,-16(fp)
}
  805d48:	e037883a 	mov	sp,fp
  805d4c:	dfc00117 	ldw	ra,4(sp)
  805d50:	df000017 	ldw	fp,0(sp)
  805d54:	dec00204 	addi	sp,sp,8
  805d58:	f800283a 	ret

00805d5c <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove ( /* FR_OK: Successful, FR_DISK_ERR: A disk error */
   DIR *dj           /* Directory object pointing the entry to be removed */
)
{
  805d5c:	defffc04 	addi	sp,sp,-16
  805d60:	dfc00315 	stw	ra,12(sp)
  805d64:	df000215 	stw	fp,8(sp)
  805d68:	df000204 	addi	fp,sp,8
  805d6c:	e13fff15 	stw	r4,-4(fp)
      } while (res == FR_OK);
      if (res == FR_NO_FILE) res = FR_INT_ERR;
   }

#else       /* Non LFN configuration */
   res = dir_sdi(dj, dj->index);
  805d70:	e0bfff17 	ldw	r2,-4(fp)
  805d74:	1080018b 	ldhu	r2,6(r2)
  805d78:	10bfffcc 	andi	r2,r2,65535
  805d7c:	e13fff17 	ldw	r4,-4(fp)
  805d80:	100b883a 	mov	r5,r2
  805d84:	08055780 	call	805578 <dir_sdi>
  805d88:	e0bffe15 	stw	r2,-8(fp)
   if (res == FR_OK) {
  805d8c:	e0bffe17 	ldw	r2,-8(fp)
  805d90:	1000121e 	bne	r2,zero,805ddc <dir_remove+0x80>
      res = move_window(dj->fs, dj->sect);
  805d94:	e0bfff17 	ldw	r2,-4(fp)
  805d98:	10c00017 	ldw	r3,0(r2)
  805d9c:	e0bfff17 	ldw	r2,-4(fp)
  805da0:	10800417 	ldw	r2,16(r2)
  805da4:	1809883a 	mov	r4,r3
  805da8:	100b883a 	mov	r5,r2
  805dac:	08048a80 	call	8048a8 <move_window>
  805db0:	e0bffe15 	stw	r2,-8(fp)
      if (res == FR_OK) {
  805db4:	e0bffe17 	ldw	r2,-8(fp)
  805db8:	1000081e 	bne	r2,zero,805ddc <dir_remove+0x80>
         *dj->dir = DDE;         /* Mark the entry "deleted" */
  805dbc:	e0bfff17 	ldw	r2,-4(fp)
  805dc0:	10800517 	ldw	r2,20(r2)
  805dc4:	00fff944 	movi	r3,-27
  805dc8:	10c00005 	stb	r3,0(r2)
         dj->fs->wflag = 1;
  805dcc:	e0bfff17 	ldw	r2,-4(fp)
  805dd0:	10800017 	ldw	r2,0(r2)
  805dd4:	00c00044 	movi	r3,1
  805dd8:	10c00105 	stb	r3,4(r2)
      }
   }
#endif

   return res;
  805ddc:	e0bffe17 	ldw	r2,-8(fp)
}
  805de0:	e037883a 	mov	sp,fp
  805de4:	dfc00117 	ldw	ra,4(sp)
  805de8:	df000017 	ldw	fp,0(sp)
  805dec:	dec00204 	addi	sp,sp,8
  805df0:	f800283a 	ret

00805df4 <create_name>:
static
FRESULT create_name (
   DIR *dj,       /* Pointer to the directory object */
   const TCHAR **path   /* Pointer to pointer to the segment in the path string */
)
{
  805df4:	defff604 	addi	sp,sp,-40
  805df8:	dfc00915 	stw	ra,36(sp)
  805dfc:	df000815 	stw	fp,32(sp)
  805e00:	df000804 	addi	fp,sp,32
  805e04:	e13ffe15 	stw	r4,-8(fp)
  805e08:	e17fff15 	stw	r5,-4(fp)
   uint8_t b, c, d, *sfn;
   uint32_t ni, si, i;
   const char *p;

   /* Create file name in directory form */
   for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
  805e0c:	e0bfff17 	ldw	r2,-4(fp)
  805e10:	10800017 	ldw	r2,0(r2)
  805e14:	e0bffc15 	stw	r2,-16(fp)
  805e18:	00000306 	br	805e28 <create_name+0x34>
  805e1c:	e0bffc17 	ldw	r2,-16(fp)
  805e20:	10800044 	addi	r2,r2,1
  805e24:	e0bffc15 	stw	r2,-16(fp)
  805e28:	e0bffc17 	ldw	r2,-16(fp)
  805e2c:	10800003 	ldbu	r2,0(r2)
  805e30:	10803fcc 	andi	r2,r2,255
  805e34:	1080201c 	xori	r2,r2,128
  805e38:	10bfe004 	addi	r2,r2,-128
  805e3c:	10800be0 	cmpeqi	r2,r2,47
  805e40:	103ff61e 	bne	r2,zero,805e1c <__alt_data_end+0xff805e1c>
  805e44:	e0bffc17 	ldw	r2,-16(fp)
  805e48:	10800003 	ldbu	r2,0(r2)
  805e4c:	10803fcc 	andi	r2,r2,255
  805e50:	1080201c 	xori	r2,r2,128
  805e54:	10bfe004 	addi	r2,r2,-128
  805e58:	10801720 	cmpeqi	r2,r2,92
  805e5c:	103fef1e 	bne	r2,zero,805e1c <__alt_data_end+0xff805e1c>
   sfn = dj->fn;
  805e60:	e0bffe17 	ldw	r2,-8(fp)
  805e64:	10800617 	ldw	r2,24(r2)
  805e68:	e0bffd15 	stw	r2,-12(fp)
   mem_set(sfn, ' ', 11);
  805e6c:	e13ffd17 	ldw	r4,-12(fp)
  805e70:	01400804 	movi	r5,32
  805e74:	018002c4 	movi	r6,11
  805e78:	08047480 	call	804748 <mem_set>
   si = i = b = 0; ni = 8;
  805e7c:	e03ff805 	stb	zero,-32(fp)
  805e80:	e03ffb15 	stw	zero,-20(fp)
  805e84:	e0bffb17 	ldw	r2,-20(fp)
  805e88:	e0bffa15 	stw	r2,-24(fp)
  805e8c:	00800204 	movi	r2,8
  805e90:	e0bff915 	stw	r2,-28(fp)
      sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;  /* Set last segment flag if end of path */
      return FR_OK;
   }
#endif
   for (;;) {
      c = (uint8_t)p[si++];
  805e94:	e0bffa17 	ldw	r2,-24(fp)
  805e98:	10c00044 	addi	r3,r2,1
  805e9c:	e0fffa15 	stw	r3,-24(fp)
  805ea0:	e0fffc17 	ldw	r3,-16(fp)
  805ea4:	1885883a 	add	r2,r3,r2
  805ea8:	10800003 	ldbu	r2,0(r2)
  805eac:	e0bff845 	stb	r2,-31(fp)
      if (c <= ' ' || c == '/' || c == '\\') break;   /* Break on end of segment */
  805eb0:	e0bff843 	ldbu	r2,-31(fp)
  805eb4:	10800870 	cmpltui	r2,r2,33
  805eb8:	1000521e 	bne	r2,zero,806004 <create_name+0x210>
  805ebc:	e0bff843 	ldbu	r2,-31(fp)
  805ec0:	10800be0 	cmpeqi	r2,r2,47
  805ec4:	10004f1e 	bne	r2,zero,806004 <create_name+0x210>
  805ec8:	e0bff843 	ldbu	r2,-31(fp)
  805ecc:	10801720 	cmpeqi	r2,r2,92
  805ed0:	10004c1e 	bne	r2,zero,806004 <create_name+0x210>
      if (c == '.' || i >= ni) {
  805ed4:	e0bff843 	ldbu	r2,-31(fp)
  805ed8:	10800ba0 	cmpeqi	r2,r2,46
  805edc:	1000031e 	bne	r2,zero,805eec <create_name+0xf8>
  805ee0:	e0fffb17 	ldw	r3,-20(fp)
  805ee4:	e0bff917 	ldw	r2,-28(fp)
  805ee8:	18801136 	bltu	r3,r2,805f30 <create_name+0x13c>
         if (ni != 8 || c != '.') return FR_INVALID_NAME;
  805eec:	e0bff917 	ldw	r2,-28(fp)
  805ef0:	10800218 	cmpnei	r2,r2,8
  805ef4:	1000031e 	bne	r2,zero,805f04 <create_name+0x110>
  805ef8:	e0bff843 	ldbu	r2,-31(fp)
  805efc:	10800ba0 	cmpeqi	r2,r2,46
  805f00:	1000021e 	bne	r2,zero,805f0c <create_name+0x118>
  805f04:	00800184 	movi	r2,6
  805f08:	00007006 	br	8060cc <create_name+0x2d8>
         i = 8; ni = 11;
  805f0c:	00800204 	movi	r2,8
  805f10:	e0bffb15 	stw	r2,-20(fp)
  805f14:	008002c4 	movi	r2,11
  805f18:	e0bff915 	stw	r2,-28(fp)
         b <<= 2; continue;
  805f1c:	e0bff803 	ldbu	r2,-32(fp)
  805f20:	1085883a 	add	r2,r2,r2
  805f24:	1085883a 	add	r2,r2,r2
  805f28:	e0bff805 	stb	r2,-32(fp)
  805f2c:	00003406 	br	806000 <create_name+0x20c>
      }
      if (c >= 0x80) {           /* Extended char? */
  805f30:	e0bff843 	ldbu	r2,-31(fp)
  805f34:	10803fcc 	andi	r2,r2,255
  805f38:	1080201c 	xori	r2,r2,128
  805f3c:	10bfe004 	addi	r2,r2,-128
  805f40:	10000a0e 	bge	r2,zero,805f6c <create_name+0x178>
         b |= 3;                 /* Eliminate NT flag */
  805f44:	e0bff803 	ldbu	r2,-32(fp)
  805f48:	108000d4 	ori	r2,r2,3
  805f4c:	e0bff805 	stb	r2,-32(fp)
#ifdef _EXCVT
         c = excvt[c-0x80];         /* Upper conversion (SBCS) */
  805f50:	e0bff843 	ldbu	r2,-31(fp)
  805f54:	10ffe004 	addi	r3,r2,-128
  805f58:	008020b4 	movhi	r2,130
  805f5c:	10af4f04 	addi	r2,r2,-17092
  805f60:	10c5883a 	add	r2,r2,r3
  805f64:	10800003 	ldbu	r2,0(r2)
  805f68:	e0bff845 	stb	r2,-31(fp)
         if (!IsDBCS2(d) || i >= ni - 1)  /* Reject invalid DBC */
            return FR_INVALID_NAME;
         sfn[i++] = c;
         sfn[i++] = d;
      } else {                /* Single byte code */
         if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) /* Reject illegal chrs for SFN */
  805f6c:	e0bff843 	ldbu	r2,-31(fp)
  805f70:	010020b4 	movhi	r4,130
  805f74:	212f3e04 	addi	r4,r4,-17160
  805f78:	100b883a 	mov	r5,r2
  805f7c:	080482c0 	call	80482c <chk_chr>
  805f80:	10000226 	beq	r2,zero,805f8c <create_name+0x198>
            return FR_INVALID_NAME;
  805f84:	00800184 	movi	r2,6
  805f88:	00005006 	br	8060cc <create_name+0x2d8>
         if (IsUpper(c)) {       /* ASCII large capital? */
  805f8c:	e0bff843 	ldbu	r2,-31(fp)
  805f90:	10801070 	cmpltui	r2,r2,65
  805f94:	1000071e 	bne	r2,zero,805fb4 <create_name+0x1c0>
  805f98:	e0bff843 	ldbu	r2,-31(fp)
  805f9c:	108016e8 	cmpgeui	r2,r2,91
  805fa0:	1000041e 	bne	r2,zero,805fb4 <create_name+0x1c0>
            b |= 2;
  805fa4:	e0bff803 	ldbu	r2,-32(fp)
  805fa8:	10800094 	ori	r2,r2,2
  805fac:	e0bff805 	stb	r2,-32(fp)
  805fb0:	00000c06 	br	805fe4 <create_name+0x1f0>
         } else {
            if (IsLower(c)) {    /* ASCII small capital? */
  805fb4:	e0bff843 	ldbu	r2,-31(fp)
  805fb8:	10801870 	cmpltui	r2,r2,97
  805fbc:	1000091e 	bne	r2,zero,805fe4 <create_name+0x1f0>
  805fc0:	e0bff843 	ldbu	r2,-31(fp)
  805fc4:	10801ee8 	cmpgeui	r2,r2,123
  805fc8:	1000061e 	bne	r2,zero,805fe4 <create_name+0x1f0>
               b |= 1; c -= 0x20;
  805fcc:	e0bff803 	ldbu	r2,-32(fp)
  805fd0:	10800054 	ori	r2,r2,1
  805fd4:	e0bff805 	stb	r2,-32(fp)
  805fd8:	e0bff843 	ldbu	r2,-31(fp)
  805fdc:	10bff804 	addi	r2,r2,-32
  805fe0:	e0bff845 	stb	r2,-31(fp)
            }
         }
         sfn[i++] = c;
  805fe4:	e0bffb17 	ldw	r2,-20(fp)
  805fe8:	10c00044 	addi	r3,r2,1
  805fec:	e0fffb15 	stw	r3,-20(fp)
  805ff0:	e0fffd17 	ldw	r3,-12(fp)
  805ff4:	1885883a 	add	r2,r3,r2
  805ff8:	e0fff843 	ldbu	r3,-31(fp)
  805ffc:	10c00005 	stb	r3,0(r2)
      }
   }
  806000:	003fa406 	br	805e94 <__alt_data_end+0xff805e94>
   *path = &p[si];                  /* Return pointer to the next segment */
  806004:	e0fffc17 	ldw	r3,-16(fp)
  806008:	e0bffa17 	ldw	r2,-24(fp)
  80600c:	1887883a 	add	r3,r3,r2
  806010:	e0bfff17 	ldw	r2,-4(fp)
  806014:	10c00015 	stw	r3,0(r2)
   c = (c <= ' ') ? NS_LAST : 0;    /* Set last segment flag if end of path */
  806018:	e0bff843 	ldbu	r2,-31(fp)
  80601c:	10800868 	cmpgeui	r2,r2,33
  806020:	1000021e 	bne	r2,zero,80602c <create_name+0x238>
  806024:	00800104 	movi	r2,4
  806028:	00000106 	br	806030 <create_name+0x23c>
  80602c:	0005883a 	mov	r2,zero
  806030:	e0bff845 	stb	r2,-31(fp)

   if (!i) return FR_INVALID_NAME;     /* Reject nul string */
  806034:	e0bffb17 	ldw	r2,-20(fp)
  806038:	1000021e 	bne	r2,zero,806044 <create_name+0x250>
  80603c:	00800184 	movi	r2,6
  806040:	00002206 	br	8060cc <create_name+0x2d8>
   if (sfn[0] == DDE) sfn[0] = NDDE;   /* When first char collides with DDE, replace it with 0x05 */
  806044:	e0bffd17 	ldw	r2,-12(fp)
  806048:	10800003 	ldbu	r2,0(r2)
  80604c:	10803fcc 	andi	r2,r2,255
  806050:	10803958 	cmpnei	r2,r2,229
  806054:	1000031e 	bne	r2,zero,806064 <create_name+0x270>
  806058:	e0bffd17 	ldw	r2,-12(fp)
  80605c:	00c00144 	movi	r3,5
  806060:	10c00005 	stb	r3,0(r2)

   if (ni == 8) b <<= 2;
  806064:	e0bff917 	ldw	r2,-28(fp)
  806068:	10800218 	cmpnei	r2,r2,8
  80606c:	1000041e 	bne	r2,zero,806080 <create_name+0x28c>
  806070:	e0bff803 	ldbu	r2,-32(fp)
  806074:	1085883a 	add	r2,r2,r2
  806078:	1085883a 	add	r2,r2,r2
  80607c:	e0bff805 	stb	r2,-32(fp)
   if ((b & 0x03) == 0x01) c |= NS_EXT;   /* NT flag (Name extension has only small capital) */
  806080:	e0bff803 	ldbu	r2,-32(fp)
  806084:	108000cc 	andi	r2,r2,3
  806088:	10800058 	cmpnei	r2,r2,1
  80608c:	1000031e 	bne	r2,zero,80609c <create_name+0x2a8>
  806090:	e0bff843 	ldbu	r2,-31(fp)
  806094:	10800414 	ori	r2,r2,16
  806098:	e0bff845 	stb	r2,-31(fp)
   if ((b & 0x0C) == 0x04) c |= NS_BODY;  /* NT flag (Name body has only small capital) */
  80609c:	e0bff803 	ldbu	r2,-32(fp)
  8060a0:	1080030c 	andi	r2,r2,12
  8060a4:	10800118 	cmpnei	r2,r2,4
  8060a8:	1000031e 	bne	r2,zero,8060b8 <create_name+0x2c4>
  8060ac:	e0bff843 	ldbu	r2,-31(fp)
  8060b0:	10800214 	ori	r2,r2,8
  8060b4:	e0bff845 	stb	r2,-31(fp)

   sfn[NS] = c;      /* Store NT flag, File name is created */
  8060b8:	e0bffd17 	ldw	r2,-12(fp)
  8060bc:	108002c4 	addi	r2,r2,11
  8060c0:	e0fff843 	ldbu	r3,-31(fp)
  8060c4:	10c00005 	stb	r3,0(r2)

   return FR_OK;
  8060c8:	0005883a 	mov	r2,zero
#endif
}
  8060cc:	e037883a 	mov	sp,fp
  8060d0:	dfc00117 	ldw	ra,4(sp)
  8060d4:	df000017 	ldw	fp,0(sp)
  8060d8:	dec00204 	addi	sp,sp,8
  8060dc:	f800283a 	ret

008060e0 <get_fileinfo>:
static
void get_fileinfo (     /* No return code */
   DIR *dj,       /* Pointer to the directory object */
   FILINFO *fno      /* Pointer to the file information to be filled */
)
{
  8060e0:	defff804 	addi	sp,sp,-32
  8060e4:	df000715 	stw	fp,28(sp)
  8060e8:	df000704 	addi	fp,sp,28
  8060ec:	e13ffe15 	stw	r4,-8(fp)
  8060f0:	e17fff15 	stw	r5,-4(fp)
   uint32_t i;
   uint8_t nt, *dir;
   TCHAR *p, c;


   p = fno->fname;
  8060f4:	e0bfff17 	ldw	r2,-4(fp)
  8060f8:	10800244 	addi	r2,r2,9
  8060fc:	e0bffa15 	stw	r2,-24(fp)
   if (dj->sect) {
  806100:	e0bffe17 	ldw	r2,-8(fp)
  806104:	10800417 	ldw	r2,16(r2)
  806108:	10007b26 	beq	r2,zero,8062f8 <get_fileinfo+0x218>
      dir = dj->dir;
  80610c:	e0bffe17 	ldw	r2,-8(fp)
  806110:	10800517 	ldw	r2,20(r2)
  806114:	e0bffc15 	stw	r2,-16(fp)
      nt = dir[DIR_NTres];    /* NT flag */
  806118:	e0bffc17 	ldw	r2,-16(fp)
  80611c:	10800303 	ldbu	r2,12(r2)
  806120:	e0bffd05 	stb	r2,-12(fp)
      for (i = 0; i < 8; i++) {  /* Copy name body */
  806124:	e03ff915 	stw	zero,-28(fp)
  806128:	00001606 	br	806184 <get_fileinfo+0xa4>
         c = dir[i];
  80612c:	e0fffc17 	ldw	r3,-16(fp)
  806130:	e0bff917 	ldw	r2,-28(fp)
  806134:	1885883a 	add	r2,r3,r2
  806138:	10800003 	ldbu	r2,0(r2)
  80613c:	e0bffb05 	stb	r2,-20(fp)
         if (c == ' ') break;
  806140:	e0bffb07 	ldb	r2,-20(fp)
  806144:	10800818 	cmpnei	r2,r2,32
  806148:	1000011e 	bne	r2,zero,806150 <get_fileinfo+0x70>
  80614c:	00001006 	br	806190 <get_fileinfo+0xb0>
         if (c == NDDE) c = (TCHAR)DDE;
  806150:	e0bffb07 	ldb	r2,-20(fp)
  806154:	10800158 	cmpnei	r2,r2,5
  806158:	1000021e 	bne	r2,zero,806164 <get_fileinfo+0x84>
  80615c:	00bff944 	movi	r2,-27
  806160:	e0bffb05 	stb	r2,-20(fp)
         if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
            c = (c << 8) | dir[++i];
         c = ff_convert(c, 1);
         if (!c) c = '?';
#endif
         *p++ = c;
  806164:	e0bffa17 	ldw	r2,-24(fp)
  806168:	10c00044 	addi	r3,r2,1
  80616c:	e0fffa15 	stw	r3,-24(fp)
  806170:	e0fffb03 	ldbu	r3,-20(fp)
  806174:	10c00005 	stb	r3,0(r2)

   p = fno->fname;
   if (dj->sect) {
      dir = dj->dir;
      nt = dir[DIR_NTres];    /* NT flag */
      for (i = 0; i < 8; i++) {  /* Copy name body */
  806178:	e0bff917 	ldw	r2,-28(fp)
  80617c:	10800044 	addi	r2,r2,1
  806180:	e0bff915 	stw	r2,-28(fp)
  806184:	e0bff917 	ldw	r2,-28(fp)
  806188:	10800230 	cmpltui	r2,r2,8
  80618c:	103fe71e 	bne	r2,zero,80612c <__alt_data_end+0xff80612c>
         c = ff_convert(c, 1);
         if (!c) c = '?';
#endif
         *p++ = c;
      }
      if (dir[8] != ' ') {    /* Copy name extension */
  806190:	e0bffc17 	ldw	r2,-16(fp)
  806194:	10800204 	addi	r2,r2,8
  806198:	10800003 	ldbu	r2,0(r2)
  80619c:	10803fcc 	andi	r2,r2,255
  8061a0:	10800820 	cmpeqi	r2,r2,32
  8061a4:	10001c1e 	bne	r2,zero,806218 <get_fileinfo+0x138>
         *p++ = '.';
  8061a8:	e0bffa17 	ldw	r2,-24(fp)
  8061ac:	10c00044 	addi	r3,r2,1
  8061b0:	e0fffa15 	stw	r3,-24(fp)
  8061b4:	00c00b84 	movi	r3,46
  8061b8:	10c00005 	stb	r3,0(r2)
         for (i = 8; i < 11; i++) {
  8061bc:	00800204 	movi	r2,8
  8061c0:	e0bff915 	stw	r2,-28(fp)
  8061c4:	00001106 	br	80620c <get_fileinfo+0x12c>
            c = dir[i];
  8061c8:	e0fffc17 	ldw	r3,-16(fp)
  8061cc:	e0bff917 	ldw	r2,-28(fp)
  8061d0:	1885883a 	add	r2,r3,r2
  8061d4:	10800003 	ldbu	r2,0(r2)
  8061d8:	e0bffb05 	stb	r2,-20(fp)
            if (c == ' ') break;
  8061dc:	e0bffb07 	ldb	r2,-20(fp)
  8061e0:	10800818 	cmpnei	r2,r2,32
  8061e4:	1000011e 	bne	r2,zero,8061ec <get_fileinfo+0x10c>
  8061e8:	00000b06 	br	806218 <get_fileinfo+0x138>
            if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
               c = (c << 8) | dir[++i];
            c = ff_convert(c, 1);
            if (!c) c = '?';
#endif
            *p++ = c;
  8061ec:	e0bffa17 	ldw	r2,-24(fp)
  8061f0:	10c00044 	addi	r3,r2,1
  8061f4:	e0fffa15 	stw	r3,-24(fp)
  8061f8:	e0fffb03 	ldbu	r3,-20(fp)
  8061fc:	10c00005 	stb	r3,0(r2)
#endif
         *p++ = c;
      }
      if (dir[8] != ' ') {    /* Copy name extension */
         *p++ = '.';
         for (i = 8; i < 11; i++) {
  806200:	e0bff917 	ldw	r2,-28(fp)
  806204:	10800044 	addi	r2,r2,1
  806208:	e0bff915 	stw	r2,-28(fp)
  80620c:	e0bff917 	ldw	r2,-28(fp)
  806210:	108002f0 	cmpltui	r2,r2,11
  806214:	103fec1e 	bne	r2,zero,8061c8 <__alt_data_end+0xff8061c8>
            if (!c) c = '?';
#endif
            *p++ = c;
         }
      }
      fno->fattrib = dir[DIR_Attr];          /* Attribute */
  806218:	e0bffc17 	ldw	r2,-16(fp)
  80621c:	10c002c3 	ldbu	r3,11(r2)
  806220:	e0bfff17 	ldw	r2,-4(fp)
  806224:	10c00205 	stb	r3,8(r2)
      fno->fsize = LD_DWORD(dir+DIR_FileSize);  /* Size */
  806228:	e0bffc17 	ldw	r2,-16(fp)
  80622c:	108007c4 	addi	r2,r2,31
  806230:	10800003 	ldbu	r2,0(r2)
  806234:	10803fcc 	andi	r2,r2,255
  806238:	1006963a 	slli	r3,r2,24
  80623c:	e0bffc17 	ldw	r2,-16(fp)
  806240:	10800784 	addi	r2,r2,30
  806244:	10800003 	ldbu	r2,0(r2)
  806248:	10803fcc 	andi	r2,r2,255
  80624c:	1004943a 	slli	r2,r2,16
  806250:	1884b03a 	or	r2,r3,r2
  806254:	e0fffc17 	ldw	r3,-16(fp)
  806258:	18c00744 	addi	r3,r3,29
  80625c:	18c00003 	ldbu	r3,0(r3)
  806260:	18c03fcc 	andi	r3,r3,255
  806264:	1806923a 	slli	r3,r3,8
  806268:	10c6b03a 	or	r3,r2,r3
  80626c:	e0bffc17 	ldw	r2,-16(fp)
  806270:	10800704 	addi	r2,r2,28
  806274:	10800003 	ldbu	r2,0(r2)
  806278:	10803fcc 	andi	r2,r2,255
  80627c:	1886b03a 	or	r3,r3,r2
  806280:	e0bfff17 	ldw	r2,-4(fp)
  806284:	10c00015 	stw	r3,0(r2)
      fno->fdate = LD_WORD(dir+DIR_WrtDate);    /* Date */
  806288:	e0bffc17 	ldw	r2,-16(fp)
  80628c:	10800644 	addi	r2,r2,25
  806290:	10800003 	ldbu	r2,0(r2)
  806294:	10803fcc 	andi	r2,r2,255
  806298:	1004923a 	slli	r2,r2,8
  80629c:	1007883a 	mov	r3,r2
  8062a0:	e0bffc17 	ldw	r2,-16(fp)
  8062a4:	10800604 	addi	r2,r2,24
  8062a8:	10800003 	ldbu	r2,0(r2)
  8062ac:	10803fcc 	andi	r2,r2,255
  8062b0:	1884b03a 	or	r2,r3,r2
  8062b4:	1007883a 	mov	r3,r2
  8062b8:	e0bfff17 	ldw	r2,-4(fp)
  8062bc:	10c0010d 	sth	r3,4(r2)
      fno->ftime = LD_WORD(dir+DIR_WrtTime);    /* Time */
  8062c0:	e0bffc17 	ldw	r2,-16(fp)
  8062c4:	108005c4 	addi	r2,r2,23
  8062c8:	10800003 	ldbu	r2,0(r2)
  8062cc:	10803fcc 	andi	r2,r2,255
  8062d0:	1004923a 	slli	r2,r2,8
  8062d4:	1007883a 	mov	r3,r2
  8062d8:	e0bffc17 	ldw	r2,-16(fp)
  8062dc:	10800584 	addi	r2,r2,22
  8062e0:	10800003 	ldbu	r2,0(r2)
  8062e4:	10803fcc 	andi	r2,r2,255
  8062e8:	1884b03a 	or	r2,r3,r2
  8062ec:	1007883a 	mov	r3,r2
  8062f0:	e0bfff17 	ldw	r2,-4(fp)
  8062f4:	10c0018d 	sth	r3,6(r2)
   }
   *p = 0;     /* Terminate SFN str by a \0 */
  8062f8:	e0bffa17 	ldw	r2,-24(fp)
  8062fc:	10000005 	stb	zero,0(r2)
         }
      }
      tp[i] = 0;  /* Terminate the LFN str by a \0 */
   }
#endif
}
  806300:	e037883a 	mov	sp,fp
  806304:	df000017 	ldw	fp,0(sp)
  806308:	dec00104 	addi	sp,sp,4
  80630c:	f800283a 	ret

00806310 <follow_path>:
static
FRESULT follow_path (   /* FR_OK(0): successful, !=0: error code */
   DIR *dj,       /* Directory object to return last directory and found object */
   const TCHAR *path /* Full-path string to find a file or directory */
)
{
  806310:	defff904 	addi	sp,sp,-28
  806314:	dfc00615 	stw	ra,24(sp)
  806318:	df000515 	stw	fp,20(sp)
  80631c:	df000504 	addi	fp,sp,20
  806320:	e13ffe15 	stw	r4,-8(fp)
  806324:	e17fff15 	stw	r5,-4(fp)
      path++;  dj->sclust = 0;      /* Strip it and start from the root dir */
   } else {                   /* No heading separator */
      dj->sclust = dj->fs->cdir; /* Start from the current dir */
   }
#else
   if (*path == '/' || *path == '\\')  /* Strip heading separator if exist */
  806328:	e0bfff17 	ldw	r2,-4(fp)
  80632c:	10800003 	ldbu	r2,0(r2)
  806330:	10803fcc 	andi	r2,r2,255
  806334:	1080201c 	xori	r2,r2,128
  806338:	10bfe004 	addi	r2,r2,-128
  80633c:	10800be0 	cmpeqi	r2,r2,47
  806340:	1000071e 	bne	r2,zero,806360 <follow_path+0x50>
  806344:	e0bfff17 	ldw	r2,-4(fp)
  806348:	10800003 	ldbu	r2,0(r2)
  80634c:	10803fcc 	andi	r2,r2,255
  806350:	1080201c 	xori	r2,r2,128
  806354:	10bfe004 	addi	r2,r2,-128
  806358:	10801718 	cmpnei	r2,r2,92
  80635c:	1000031e 	bne	r2,zero,80636c <follow_path+0x5c>
      path++;
  806360:	e0bfff17 	ldw	r2,-4(fp)
  806364:	10800044 	addi	r2,r2,1
  806368:	e0bfff15 	stw	r2,-4(fp)
   dj->sclust = 0;                  /* Start from the root dir */
  80636c:	e0bffe17 	ldw	r2,-8(fp)
  806370:	10000215 	stw	zero,8(r2)
#endif

   if ((uint32_t)*path < ' ') {         /* Nul path means the start directory itself */
  806374:	e0bfff17 	ldw	r2,-4(fp)
  806378:	10800003 	ldbu	r2,0(r2)
  80637c:	10803fcc 	andi	r2,r2,255
  806380:	10800828 	cmpgeui	r2,r2,32
  806384:	1000071e 	bne	r2,zero,8063a4 <follow_path+0x94>
      res = dir_sdi(dj, 0);
  806388:	e13ffe17 	ldw	r4,-8(fp)
  80638c:	000b883a 	mov	r5,zero
  806390:	08055780 	call	805578 <dir_sdi>
  806394:	e0bffb15 	stw	r2,-20(fp)
      dj->dir = 0;
  806398:	e0bffe17 	ldw	r2,-8(fp)
  80639c:	10000515 	stw	zero,20(r2)
  8063a0:	00004906 	br	8064c8 <follow_path+0x1b8>

   } else {                   /* Follow path */
      for (;;) {
         res = create_name(dj, &path); /* Get a segment */
  8063a4:	e0bfff04 	addi	r2,fp,-4
  8063a8:	e13ffe17 	ldw	r4,-8(fp)
  8063ac:	100b883a 	mov	r5,r2
  8063b0:	0805df40 	call	805df4 <create_name>
  8063b4:	e0bffb15 	stw	r2,-20(fp)
         if (res != FR_OK) break;
  8063b8:	e0bffb17 	ldw	r2,-20(fp)
  8063bc:	10000126 	beq	r2,zero,8063c4 <follow_path+0xb4>
  8063c0:	00004106 	br	8064c8 <follow_path+0x1b8>
         res = dir_find(dj);           /* Find it */
  8063c4:	e13ffe17 	ldw	r4,-8(fp)
  8063c8:	0805a4c0 	call	805a4c <dir_find>
  8063cc:	e0bffb15 	stw	r2,-20(fp)
         ns = *(dj->fn+NS);
  8063d0:	e0bffe17 	ldw	r2,-8(fp)
  8063d4:	10800617 	ldw	r2,24(r2)
  8063d8:	108002c3 	ldbu	r2,11(r2)
  8063dc:	e0bffc05 	stb	r2,-16(fp)
         if (res != FR_OK) {           /* Failed to find the object */
  8063e0:	e0bffb17 	ldw	r2,-20(fp)
  8063e4:	10000b26 	beq	r2,zero,806414 <follow_path+0x104>
            if (res != FR_NO_FILE) break; /* Abort if any hard error occured */
  8063e8:	e0bffb17 	ldw	r2,-20(fp)
  8063ec:	10800120 	cmpeqi	r2,r2,4
  8063f0:	1000011e 	bne	r2,zero,8063f8 <follow_path+0xe8>
  8063f4:	00003406 	br	8064c8 <follow_path+0x1b8>
            if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exit */
               dj->sclust = 0; dj->dir = 0;  /* It is the root dir */
               res = FR_OK;
               if (!(ns & NS_LAST)) continue;
            } else {                   /* Could not find the object */
               if (!(ns & NS_LAST)) res = FR_NO_PATH;
  8063f8:	e0bffc03 	ldbu	r2,-16(fp)
  8063fc:	1080010c 	andi	r2,r2,4
  806400:	1000031e 	bne	r2,zero,806410 <follow_path+0x100>
  806404:	00800144 	movi	r2,5
  806408:	e0bffb15 	stw	r2,-20(fp)
            }
            break;
  80640c:	00002e06 	br	8064c8 <follow_path+0x1b8>
  806410:	00002d06 	br	8064c8 <follow_path+0x1b8>
         }
         if (ns & NS_LAST) break;         /* Last segment match. Function completed. */
  806414:	e0bffc03 	ldbu	r2,-16(fp)
  806418:	1080010c 	andi	r2,r2,4
  80641c:	10000126 	beq	r2,zero,806424 <follow_path+0x114>
  806420:	00002906 	br	8064c8 <follow_path+0x1b8>
         dir = dj->dir;                /* There is next segment. Follow the sub directory */
  806424:	e0bffe17 	ldw	r2,-8(fp)
  806428:	10800517 	ldw	r2,20(r2)
  80642c:	e0bffd15 	stw	r2,-12(fp)
         if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
  806430:	e0bffd17 	ldw	r2,-12(fp)
  806434:	108002c4 	addi	r2,r2,11
  806438:	10800003 	ldbu	r2,0(r2)
  80643c:	10803fcc 	andi	r2,r2,255
  806440:	1080040c 	andi	r2,r2,16
  806444:	1000031e 	bne	r2,zero,806454 <follow_path+0x144>
            res = FR_NO_PATH; break;
  806448:	00800144 	movi	r2,5
  80644c:	e0bffb15 	stw	r2,-20(fp)
  806450:	00001d06 	br	8064c8 <follow_path+0x1b8>
         }
         dj->sclust = LD_CLUST(dir);
  806454:	e0bffd17 	ldw	r2,-12(fp)
  806458:	10800544 	addi	r2,r2,21
  80645c:	10800003 	ldbu	r2,0(r2)
  806460:	10803fcc 	andi	r2,r2,255
  806464:	1004923a 	slli	r2,r2,8
  806468:	1007883a 	mov	r3,r2
  80646c:	e0bffd17 	ldw	r2,-12(fp)
  806470:	10800504 	addi	r2,r2,20
  806474:	10800003 	ldbu	r2,0(r2)
  806478:	10803fcc 	andi	r2,r2,255
  80647c:	1884b03a 	or	r2,r3,r2
  806480:	10bfffcc 	andi	r2,r2,65535
  806484:	1006943a 	slli	r3,r2,16
  806488:	e0bffd17 	ldw	r2,-12(fp)
  80648c:	108006c4 	addi	r2,r2,27
  806490:	10800003 	ldbu	r2,0(r2)
  806494:	10803fcc 	andi	r2,r2,255
  806498:	1004923a 	slli	r2,r2,8
  80649c:	1009883a 	mov	r4,r2
  8064a0:	e0bffd17 	ldw	r2,-12(fp)
  8064a4:	10800684 	addi	r2,r2,26
  8064a8:	10800003 	ldbu	r2,0(r2)
  8064ac:	10803fcc 	andi	r2,r2,255
  8064b0:	2084b03a 	or	r2,r4,r2
  8064b4:	10bfffcc 	andi	r2,r2,65535
  8064b8:	1886b03a 	or	r3,r3,r2
  8064bc:	e0bffe17 	ldw	r2,-8(fp)
  8064c0:	10c00215 	stw	r3,8(r2)
      }
  8064c4:	003fb706 	br	8063a4 <__alt_data_end+0xff8063a4>
   }

   return res;
  8064c8:	e0bffb17 	ldw	r2,-20(fp)
}
  8064cc:	e037883a 	mov	sp,fp
  8064d0:	dfc00117 	ldw	ra,4(sp)
  8064d4:	df000017 	ldw	fp,0(sp)
  8064d8:	dec00204 	addi	sp,sp,8
  8064dc:	f800283a 	ret

008064e0 <check_fs>:
static
uint8_t check_fs (   /* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
   FATFS *fs,  /* File system object */
   uint32_t sect  /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  8064e0:	defffc04 	addi	sp,sp,-16
  8064e4:	dfc00315 	stw	ra,12(sp)
  8064e8:	df000215 	stw	fp,8(sp)
  8064ec:	df000204 	addi	fp,sp,8
  8064f0:	e13ffe15 	stw	r4,-8(fp)
  8064f4:	e17fff15 	stw	r5,-4(fp)
   if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)   /* Load boot record */
  8064f8:	e0bffe17 	ldw	r2,-8(fp)
  8064fc:	10800043 	ldbu	r2,1(r2)
  806500:	10c03fcc 	andi	r3,r2,255
  806504:	e0bffe17 	ldw	r2,-8(fp)
  806508:	10800c04 	addi	r2,r2,48
  80650c:	1809883a 	mov	r4,r3
  806510:	100b883a 	mov	r5,r2
  806514:	e1bfff17 	ldw	r6,-4(fp)
  806518:	01c00044 	movi	r7,1
  80651c:	0803f800 	call	803f80 <ffs_DiskIORead>
  806520:	10000226 	beq	r2,zero,80652c <check_fs+0x4c>
      return 3;
  806524:	008000c4 	movi	r2,3
  806528:	00004506 	br	806640 <check_fs+0x160>
   if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)    /* Check record signature (always placed at offset 510 even if the sector size is >512) */
  80652c:	e0bffe17 	ldw	r2,-8(fp)
  806530:	10808bc3 	ldbu	r2,559(r2)
  806534:	10803fcc 	andi	r2,r2,255
  806538:	1004923a 	slli	r2,r2,8
  80653c:	1007883a 	mov	r3,r2
  806540:	e0bffe17 	ldw	r2,-8(fp)
  806544:	10808b83 	ldbu	r2,558(r2)
  806548:	10803fcc 	andi	r2,r2,255
  80654c:	1884b03a 	or	r2,r3,r2
  806550:	10bfffcc 	andi	r2,r2,65535
  806554:	10a0001c 	xori	r2,r2,32768
  806558:	10a00004 	addi	r2,r2,-32768
  80655c:	10aa9560 	cmpeqi	r2,r2,-21931
  806560:	1000021e 	bne	r2,zero,80656c <check_fs+0x8c>
      return 2;
  806564:	00800084 	movi	r2,2
  806568:	00003506 	br	806640 <check_fs+0x160>

   if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)   /* Check "FAT" string */
  80656c:	e0bffe17 	ldw	r2,-8(fp)
  806570:	10801a43 	ldbu	r2,105(r2)
  806574:	10803fcc 	andi	r2,r2,255
  806578:	1006963a 	slli	r3,r2,24
  80657c:	e0bffe17 	ldw	r2,-8(fp)
  806580:	10801a03 	ldbu	r2,104(r2)
  806584:	10803fcc 	andi	r2,r2,255
  806588:	1004943a 	slli	r2,r2,16
  80658c:	1884b03a 	or	r2,r3,r2
  806590:	e0fffe17 	ldw	r3,-8(fp)
  806594:	18c019c3 	ldbu	r3,103(r3)
  806598:	18c03fcc 	andi	r3,r3,255
  80659c:	1806923a 	slli	r3,r3,8
  8065a0:	10c6b03a 	or	r3,r2,r3
  8065a4:	e0bffe17 	ldw	r2,-8(fp)
  8065a8:	10801983 	ldbu	r2,102(r2)
  8065ac:	10803fcc 	andi	r2,r2,255
  8065b0:	1886b03a 	or	r3,r3,r2
  8065b4:	00804034 	movhi	r2,256
  8065b8:	10bfffc4 	addi	r2,r2,-1
  8065bc:	1886703a 	and	r3,r3,r2
  8065c0:	00801534 	movhi	r2,84
  8065c4:	10905184 	addi	r2,r2,16710
  8065c8:	1880021e 	bne	r3,r2,8065d4 <check_fs+0xf4>
      return 0;
  8065cc:	0005883a 	mov	r2,zero
  8065d0:	00001b06 	br	806640 <check_fs+0x160>
   if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  8065d4:	e0bffe17 	ldw	r2,-8(fp)
  8065d8:	10802143 	ldbu	r2,133(r2)
  8065dc:	10803fcc 	andi	r2,r2,255
  8065e0:	1006963a 	slli	r3,r2,24
  8065e4:	e0bffe17 	ldw	r2,-8(fp)
  8065e8:	10802103 	ldbu	r2,132(r2)
  8065ec:	10803fcc 	andi	r2,r2,255
  8065f0:	1004943a 	slli	r2,r2,16
  8065f4:	1884b03a 	or	r2,r3,r2
  8065f8:	e0fffe17 	ldw	r3,-8(fp)
  8065fc:	18c020c3 	ldbu	r3,131(r3)
  806600:	18c03fcc 	andi	r3,r3,255
  806604:	1806923a 	slli	r3,r3,8
  806608:	10c6b03a 	or	r3,r2,r3
  80660c:	e0bffe17 	ldw	r2,-8(fp)
  806610:	10802083 	ldbu	r2,130(r2)
  806614:	10803fcc 	andi	r2,r2,255
  806618:	1886b03a 	or	r3,r3,r2
  80661c:	00804034 	movhi	r2,256
  806620:	10bfffc4 	addi	r2,r2,-1
  806624:	1886703a 	and	r3,r3,r2
  806628:	00801534 	movhi	r2,84
  80662c:	10905184 	addi	r2,r2,16710
  806630:	1880021e 	bne	r3,r2,80663c <check_fs+0x15c>
      return 0;
  806634:	0005883a 	mov	r2,zero
  806638:	00000106 	br	806640 <check_fs+0x160>

   return 1;
  80663c:	00800044 	movi	r2,1
}
  806640:	e037883a 	mov	sp,fp
  806644:	dfc00117 	ldw	ra,4(sp)
  806648:	df000017 	ldw	fp,0(sp)
  80664c:	dec00204 	addi	sp,sp,8
  806650:	f800283a 	ret

00806654 <chk_mounted>:
FRESULT chk_mounted (   /* FR_OK(0): successful, !=0: any error occurred */
   const TCHAR **path,  /* Pointer to pointer to the path name (drive number) */
   FATFS **rfs,      /* Pointer to pointer to the found file system object */
   uint8_t chk_wp       /* !=0: Check media write protection for write access */
)
{
  806654:	deffee04 	addi	sp,sp,-72
  806658:	dfc01115 	stw	ra,68(sp)
  80665c:	df001015 	stw	fp,64(sp)
  806660:	df001004 	addi	fp,sp,64
  806664:	e13ffd15 	stw	r4,-12(fp)
  806668:	e17ffe15 	stw	r5,-8(fp)
  80666c:	3005883a 	mov	r2,r6
  806670:	e0bfff05 	stb	r2,-4(fp)
   uint8_t fmt, b, pi, *tbl;
   uint32_t vol;
   DSTATUS stat;
   uint32_t bsect, fasize, tsect, sysect, nclst, szbfat;
   uint16_t nrsv;
   const TCHAR *p = *path;
  806674:	e0bffd17 	ldw	r2,-12(fp)
  806678:	10800017 	ldw	r2,0(r2)
  80667c:	e0bff615 	stw	r2,-40(fp)
   FATFS *fs;

   /* Get logical drive number from the path name */
   vol = p[0] - '0';             /* Is there a drive number? */
  806680:	e0bff617 	ldw	r2,-40(fp)
  806684:	10800003 	ldbu	r2,0(r2)
  806688:	10803fcc 	andi	r2,r2,255
  80668c:	1080201c 	xori	r2,r2,128
  806690:	10bfe004 	addi	r2,r2,-128
  806694:	10bff404 	addi	r2,r2,-48
  806698:	e0bff115 	stw	r2,-60(fp)
   if (vol <= 9 && p[1] == ':') {      /* Found a drive number, get and strip it */
  80669c:	e0bff117 	ldw	r2,-60(fp)
  8066a0:	108002a8 	cmpgeui	r2,r2,10
  8066a4:	10000f1e 	bne	r2,zero,8066e4 <chk_mounted+0x90>
  8066a8:	e0bff617 	ldw	r2,-40(fp)
  8066ac:	10800044 	addi	r2,r2,1
  8066b0:	10800003 	ldbu	r2,0(r2)
  8066b4:	10803fcc 	andi	r2,r2,255
  8066b8:	1080201c 	xori	r2,r2,128
  8066bc:	10bfe004 	addi	r2,r2,-128
  8066c0:	10800e98 	cmpnei	r2,r2,58
  8066c4:	1000071e 	bne	r2,zero,8066e4 <chk_mounted+0x90>
      p += 2; *path = p;            /* Return pointer to the path name */
  8066c8:	e0bff617 	ldw	r2,-40(fp)
  8066cc:	10800084 	addi	r2,r2,2
  8066d0:	e0bff615 	stw	r2,-40(fp)
  8066d4:	e0bffd17 	ldw	r2,-12(fp)
  8066d8:	e0fff617 	ldw	r3,-40(fp)
  8066dc:	10c00015 	stw	r3,0(r2)
  8066e0:	00000106 	br	8066e8 <chk_mounted+0x94>
   } else {                   /* No drive number is given */
#if _FS_RPATH
      vol = CurrVol;             /* Use current drive */
#else
      vol = 0;                /* Use drive 0 */
  8066e4:	e03ff115 	stw	zero,-60(fp)
#endif
   }

   /* Check if the file system object is valid or not */
   if (vol >= _VOLUMES)             /* Is the drive number valid? */
  8066e8:	e0bff117 	ldw	r2,-60(fp)
  8066ec:	10000226 	beq	r2,zero,8066f8 <chk_mounted+0xa4>
      return FR_INVALID_DRIVE;
  8066f0:	008002c4 	movi	r2,11
  8066f4:	00022106 	br	806f7c <chk_mounted+0x928>
   *rfs = fs = FatFs[vol];          /* Return pointer to the corresponding file system object */
  8066f8:	e0bff117 	ldw	r2,-60(fp)
  8066fc:	1085883a 	add	r2,r2,r2
  806700:	1087883a 	add	r3,r2,r2
  806704:	d0a76c04 	addi	r2,gp,-25168
  806708:	1885883a 	add	r2,r3,r2
  80670c:	10800017 	ldw	r2,0(r2)
  806710:	e0bff715 	stw	r2,-36(fp)
  806714:	e0bffe17 	ldw	r2,-8(fp)
  806718:	e0fff717 	ldw	r3,-36(fp)
  80671c:	10c00015 	stw	r3,0(r2)
   if (!fs) return FR_NOT_ENABLED;     /* Is the file system object available? */
  806720:	e0bff717 	ldw	r2,-36(fp)
  806724:	1000021e 	bne	r2,zero,806730 <chk_mounted+0xdc>
  806728:	00800304 	movi	r2,12
  80672c:	00021306 	br	806f7c <chk_mounted+0x928>

   ENTER_FF(fs);                 /* Lock file system */

   if (fs->fs_type) {               /* If the logical drive has been mounted */
  806730:	e0bff717 	ldw	r2,-36(fp)
  806734:	10800003 	ldbu	r2,0(r2)
  806738:	10803fcc 	andi	r2,r2,255
  80673c:	10001226 	beq	r2,zero,806788 <chk_mounted+0x134>
      stat = disk_status(fs->drv);
  806740:	e0bff717 	ldw	r2,-36(fp)
  806744:	10800043 	ldbu	r2,1(r2)
  806748:	10803fcc 	andi	r2,r2,255
  80674c:	1009883a 	mov	r4,r2
  806750:	0803f580 	call	803f58 <ffs_DiskIOStatus>
  806754:	e0bff805 	stb	r2,-32(fp)
      if (!(stat & STA_NOINIT)) {      /* and the physical drive is kept initialized (has not been changed), */
  806758:	e0bff803 	ldbu	r2,-32(fp)
  80675c:	1080004c 	andi	r2,r2,1
  806760:	1000091e 	bne	r2,zero,806788 <chk_mounted+0x134>
         if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check write protection if needed */
  806764:	e0bfff03 	ldbu	r2,-4(fp)
  806768:	10000526 	beq	r2,zero,806780 <chk_mounted+0x12c>
  80676c:	e0bff803 	ldbu	r2,-32(fp)
  806770:	1080010c 	andi	r2,r2,4
  806774:	10000226 	beq	r2,zero,806780 <chk_mounted+0x12c>
            return FR_WRITE_PROTECTED;
  806778:	00800284 	movi	r2,10
  80677c:	0001ff06 	br	806f7c <chk_mounted+0x928>
         return FR_OK;           /* The file system object is valid */
  806780:	0005883a 	mov	r2,zero
  806784:	0001fd06 	br	806f7c <chk_mounted+0x928>
   }

   /* The file system object is not valid. */
   /* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

   fs->fs_type = 0;              /* Clear the file system object */
  806788:	e0bff717 	ldw	r2,-36(fp)
  80678c:	10000005 	stb	zero,0(r2)
   fs->drv = LD2PD(vol);            /* Bind the logical drive and a physical drive */
  806790:	e0bff117 	ldw	r2,-60(fp)
  806794:	1007883a 	mov	r3,r2
  806798:	e0bff717 	ldw	r2,-36(fp)
  80679c:	10c00045 	stb	r3,1(r2)
   stat = disk_initialize(fs->drv); /* Initialize low level disk I/O layer */
  8067a0:	e0bff717 	ldw	r2,-36(fp)
  8067a4:	10800043 	ldbu	r2,1(r2)
  8067a8:	10803fcc 	andi	r2,r2,255
  8067ac:	1009883a 	mov	r4,r2
  8067b0:	0803cfc0 	call	803cfc <ffs_DiskIOInitialize>
  8067b4:	e0bff805 	stb	r2,-32(fp)
   if (stat & STA_NOINIT)           /* Check if the initialization succeeded */
  8067b8:	e0bff803 	ldbu	r2,-32(fp)
  8067bc:	1080004c 	andi	r2,r2,1
  8067c0:	10000226 	beq	r2,zero,8067cc <chk_mounted+0x178>
      return FR_NOT_READY;       /* Failed to initialize due to no media or hard error */
  8067c4:	008000c4 	movi	r2,3
  8067c8:	0001ec06 	br	806f7c <chk_mounted+0x928>
   if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check disk write protection if needed */
  8067cc:	e0bfff03 	ldbu	r2,-4(fp)
  8067d0:	10000526 	beq	r2,zero,8067e8 <chk_mounted+0x194>
  8067d4:	e0bff803 	ldbu	r2,-32(fp)
  8067d8:	1080010c 	andi	r2,r2,4
  8067dc:	10000226 	beq	r2,zero,8067e8 <chk_mounted+0x194>
      return FR_WRITE_PROTECTED;
  8067e0:	00800284 	movi	r2,10
  8067e4:	0001e506 	br	806f7c <chk_mounted+0x928>
#if _MAX_SS != 512                  /* Get disk sector size (variable sector size cfg only) */
   if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
      return FR_DISK_ERR;
#endif
   /* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
   fmt = check_fs(fs, bsect = 0);      /* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  8067e8:	e03ff215 	stw	zero,-56(fp)
  8067ec:	e13ff717 	ldw	r4,-36(fp)
  8067f0:	e17ff217 	ldw	r5,-56(fp)
  8067f4:	08064e00 	call	8064e0 <check_fs>
  8067f8:	e0bff005 	stb	r2,-64(fp)
   if (LD2PT(vol) && !fmt) fmt = 1; /* Force non-SFD if the volume is forced partition */
   if (fmt == 1) {                  /* Not an FAT-VBR, the physical drive can be partitioned */
  8067fc:	e0bff003 	ldbu	r2,-64(fp)
  806800:	10800058 	cmpnei	r2,r2,1
  806804:	10002d1e 	bne	r2,zero,8068bc <chk_mounted+0x268>
      /* Check the partition listed in the partition table */
      pi = LD2PT(vol);
  806808:	e03ff045 	stb	zero,-63(fp)
      if (pi) pi--;
  80680c:	e0bff043 	ldbu	r2,-63(fp)
  806810:	10000326 	beq	r2,zero,806820 <chk_mounted+0x1cc>
  806814:	e0bff043 	ldbu	r2,-63(fp)
  806818:	10bfffc4 	addi	r2,r2,-1
  80681c:	e0bff045 	stb	r2,-63(fp)
      tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
  806820:	e0bff043 	ldbu	r2,-63(fp)
  806824:	1004913a 	slli	r2,r2,4
  806828:	10806f84 	addi	r2,r2,446
  80682c:	10800c04 	addi	r2,r2,48
  806830:	e0fff717 	ldw	r3,-36(fp)
  806834:	1885883a 	add	r2,r3,r2
  806838:	e0bff915 	stw	r2,-28(fp)
      if (tbl[4]) {                 /* Is the partition existing? */
  80683c:	e0bff917 	ldw	r2,-28(fp)
  806840:	10800104 	addi	r2,r2,4
  806844:	10800003 	ldbu	r2,0(r2)
  806848:	10803fcc 	andi	r2,r2,255
  80684c:	10001b26 	beq	r2,zero,8068bc <chk_mounted+0x268>
         bsect = LD_DWORD(&tbl[8]);    /* Partition offset in LBA */
  806850:	e0bff917 	ldw	r2,-28(fp)
  806854:	108002c4 	addi	r2,r2,11
  806858:	10800003 	ldbu	r2,0(r2)
  80685c:	10803fcc 	andi	r2,r2,255
  806860:	1006963a 	slli	r3,r2,24
  806864:	e0bff917 	ldw	r2,-28(fp)
  806868:	10800284 	addi	r2,r2,10
  80686c:	10800003 	ldbu	r2,0(r2)
  806870:	10803fcc 	andi	r2,r2,255
  806874:	1004943a 	slli	r2,r2,16
  806878:	1884b03a 	or	r2,r3,r2
  80687c:	e0fff917 	ldw	r3,-28(fp)
  806880:	18c00244 	addi	r3,r3,9
  806884:	18c00003 	ldbu	r3,0(r3)
  806888:	18c03fcc 	andi	r3,r3,255
  80688c:	1806923a 	slli	r3,r3,8
  806890:	10c6b03a 	or	r3,r2,r3
  806894:	e0bff917 	ldw	r2,-28(fp)
  806898:	10800204 	addi	r2,r2,8
  80689c:	10800003 	ldbu	r2,0(r2)
  8068a0:	10803fcc 	andi	r2,r2,255
  8068a4:	1884b03a 	or	r2,r3,r2
  8068a8:	e0bff215 	stw	r2,-56(fp)
         fmt = check_fs(fs, bsect);    /* Check the partition */
  8068ac:	e13ff717 	ldw	r4,-36(fp)
  8068b0:	e17ff217 	ldw	r5,-56(fp)
  8068b4:	08064e00 	call	8064e0 <check_fs>
  8068b8:	e0bff005 	stb	r2,-64(fp)
      }
   }
   if (fmt == 3) return FR_DISK_ERR;
  8068bc:	e0bff003 	ldbu	r2,-64(fp)
  8068c0:	108000d8 	cmpnei	r2,r2,3
  8068c4:	1000021e 	bne	r2,zero,8068d0 <chk_mounted+0x27c>
  8068c8:	00800044 	movi	r2,1
  8068cc:	0001ab06 	br	806f7c <chk_mounted+0x928>
   if (fmt) return FR_NO_FILESYSTEM;      /* No FAT volume is found */
  8068d0:	e0bff003 	ldbu	r2,-64(fp)
  8068d4:	10000226 	beq	r2,zero,8068e0 <chk_mounted+0x28c>
  8068d8:	00800344 	movi	r2,13
  8068dc:	0001a706 	br	806f7c <chk_mounted+0x928>

   /* An FAT volume is found. Following code initializes the file system object */

   if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))     /* (BPB_BytsPerSec must be equal to the physical sector size) */
  8068e0:	e0bff717 	ldw	r2,-36(fp)
  8068e4:	10800f03 	ldbu	r2,60(r2)
  8068e8:	10803fcc 	andi	r2,r2,255
  8068ec:	1004923a 	slli	r2,r2,8
  8068f0:	1007883a 	mov	r3,r2
  8068f4:	e0bff717 	ldw	r2,-36(fp)
  8068f8:	10800ec3 	ldbu	r2,59(r2)
  8068fc:	10803fcc 	andi	r2,r2,255
  806900:	1884b03a 	or	r2,r3,r2
  806904:	10bfffcc 	andi	r2,r2,65535
  806908:	10a0001c 	xori	r2,r2,32768
  80690c:	10a00004 	addi	r2,r2,-32768
  806910:	10808020 	cmpeqi	r2,r2,512
  806914:	1000021e 	bne	r2,zero,806920 <chk_mounted+0x2cc>
      return FR_NO_FILESYSTEM;
  806918:	00800344 	movi	r2,13
  80691c:	00019706 	br	806f7c <chk_mounted+0x928>

   fasize = LD_WORD(fs->win+BPB_FATSz16);          /* Number of sectors per FAT */
  806920:	e0bff717 	ldw	r2,-36(fp)
  806924:	108011c3 	ldbu	r2,71(r2)
  806928:	10803fcc 	andi	r2,r2,255
  80692c:	1004923a 	slli	r2,r2,8
  806930:	1007883a 	mov	r3,r2
  806934:	e0bff717 	ldw	r2,-36(fp)
  806938:	10801183 	ldbu	r2,70(r2)
  80693c:	10803fcc 	andi	r2,r2,255
  806940:	1884b03a 	or	r2,r3,r2
  806944:	10bfffcc 	andi	r2,r2,65535
  806948:	e0bff315 	stw	r2,-52(fp)
   if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  80694c:	e0bff317 	ldw	r2,-52(fp)
  806950:	1000131e 	bne	r2,zero,8069a0 <chk_mounted+0x34c>
  806954:	e0bff717 	ldw	r2,-36(fp)
  806958:	108015c3 	ldbu	r2,87(r2)
  80695c:	10803fcc 	andi	r2,r2,255
  806960:	1006963a 	slli	r3,r2,24
  806964:	e0bff717 	ldw	r2,-36(fp)
  806968:	10801583 	ldbu	r2,86(r2)
  80696c:	10803fcc 	andi	r2,r2,255
  806970:	1004943a 	slli	r2,r2,16
  806974:	1884b03a 	or	r2,r3,r2
  806978:	e0fff717 	ldw	r3,-36(fp)
  80697c:	18c01543 	ldbu	r3,85(r3)
  806980:	18c03fcc 	andi	r3,r3,255
  806984:	1806923a 	slli	r3,r3,8
  806988:	10c6b03a 	or	r3,r2,r3
  80698c:	e0bff717 	ldw	r2,-36(fp)
  806990:	10801503 	ldbu	r2,84(r2)
  806994:	10803fcc 	andi	r2,r2,255
  806998:	1884b03a 	or	r2,r3,r2
  80699c:	e0bff315 	stw	r2,-52(fp)
   fs->fsize = fasize;
  8069a0:	e0bff717 	ldw	r2,-36(fp)
  8069a4:	e0fff317 	ldw	r3,-52(fp)
  8069a8:	10c00715 	stw	r3,28(r2)

   fs->n_fats = b = fs->win[BPB_NumFATs];          /* Number of FAT copies */
  8069ac:	e0bff717 	ldw	r2,-36(fp)
  8069b0:	10801003 	ldbu	r2,64(r2)
  8069b4:	e0bffa05 	stb	r2,-24(fp)
  8069b8:	e0bff717 	ldw	r2,-36(fp)
  8069bc:	e0fffa03 	ldbu	r3,-24(fp)
  8069c0:	10c000c5 	stb	r3,3(r2)
   if (b != 1 && b != 2) return FR_NO_FILESYSTEM;     /* (Must be 1 or 2) */
  8069c4:	e0bffa03 	ldbu	r2,-24(fp)
  8069c8:	10800060 	cmpeqi	r2,r2,1
  8069cc:	1000051e 	bne	r2,zero,8069e4 <chk_mounted+0x390>
  8069d0:	e0bffa03 	ldbu	r2,-24(fp)
  8069d4:	108000a0 	cmpeqi	r2,r2,2
  8069d8:	1000021e 	bne	r2,zero,8069e4 <chk_mounted+0x390>
  8069dc:	00800344 	movi	r2,13
  8069e0:	00016606 	br	806f7c <chk_mounted+0x928>
   fasize *= b;                              /* Number of sectors for FAT area */
  8069e4:	e0bffa03 	ldbu	r2,-24(fp)
  8069e8:	e0fff317 	ldw	r3,-52(fp)
  8069ec:	1885383a 	mul	r2,r3,r2
  8069f0:	e0bff315 	stw	r2,-52(fp)

   fs->csize = b = fs->win[BPB_SecPerClus];        /* Number of sectors per cluster */
  8069f4:	e0bff717 	ldw	r2,-36(fp)
  8069f8:	10800f43 	ldbu	r2,61(r2)
  8069fc:	e0bffa05 	stb	r2,-24(fp)
  806a00:	e0bff717 	ldw	r2,-36(fp)
  806a04:	e0fffa03 	ldbu	r3,-24(fp)
  806a08:	10c00085 	stb	r3,2(r2)
   if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;  /* (Must be power of 2) */
  806a0c:	e0bffa03 	ldbu	r2,-24(fp)
  806a10:	10000526 	beq	r2,zero,806a28 <chk_mounted+0x3d4>
  806a14:	e0fffa03 	ldbu	r3,-24(fp)
  806a18:	e0bffa03 	ldbu	r2,-24(fp)
  806a1c:	10bfffc4 	addi	r2,r2,-1
  806a20:	1884703a 	and	r2,r3,r2
  806a24:	10000226 	beq	r2,zero,806a30 <chk_mounted+0x3dc>
  806a28:	00800344 	movi	r2,13
  806a2c:	00015306 	br	806f7c <chk_mounted+0x928>

   fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);   /* Number of root directory entries */
  806a30:	e0bff717 	ldw	r2,-36(fp)
  806a34:	10801083 	ldbu	r2,66(r2)
  806a38:	10803fcc 	andi	r2,r2,255
  806a3c:	1004923a 	slli	r2,r2,8
  806a40:	1007883a 	mov	r3,r2
  806a44:	e0bff717 	ldw	r2,-36(fp)
  806a48:	10801043 	ldbu	r2,65(r2)
  806a4c:	10803fcc 	andi	r2,r2,255
  806a50:	1884b03a 	or	r2,r3,r2
  806a54:	1007883a 	mov	r3,r2
  806a58:	e0bff717 	ldw	r2,-36(fp)
  806a5c:	10c0020d 	sth	r3,8(r2)
   if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must be sector aligned) */
  806a60:	e0bff717 	ldw	r2,-36(fp)
  806a64:	1080020b 	ldhu	r2,8(r2)
  806a68:	108003cc 	andi	r2,r2,15
  806a6c:	10bfffcc 	andi	r2,r2,65535
  806a70:	10000226 	beq	r2,zero,806a7c <chk_mounted+0x428>
  806a74:	00800344 	movi	r2,13
  806a78:	00014006 	br	806f7c <chk_mounted+0x928>

   tsect = LD_WORD(fs->win+BPB_TotSec16);          /* Number of sectors on the volume */
  806a7c:	e0bff717 	ldw	r2,-36(fp)
  806a80:	10801103 	ldbu	r2,68(r2)
  806a84:	10803fcc 	andi	r2,r2,255
  806a88:	1004923a 	slli	r2,r2,8
  806a8c:	1007883a 	mov	r3,r2
  806a90:	e0bff717 	ldw	r2,-36(fp)
  806a94:	108010c3 	ldbu	r2,67(r2)
  806a98:	10803fcc 	andi	r2,r2,255
  806a9c:	1884b03a 	or	r2,r3,r2
  806aa0:	10bfffcc 	andi	r2,r2,65535
  806aa4:	e0bff415 	stw	r2,-48(fp)
   if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  806aa8:	e0bff417 	ldw	r2,-48(fp)
  806aac:	1000131e 	bne	r2,zero,806afc <chk_mounted+0x4a8>
  806ab0:	e0bff717 	ldw	r2,-36(fp)
  806ab4:	108014c3 	ldbu	r2,83(r2)
  806ab8:	10803fcc 	andi	r2,r2,255
  806abc:	1006963a 	slli	r3,r2,24
  806ac0:	e0bff717 	ldw	r2,-36(fp)
  806ac4:	10801483 	ldbu	r2,82(r2)
  806ac8:	10803fcc 	andi	r2,r2,255
  806acc:	1004943a 	slli	r2,r2,16
  806ad0:	1884b03a 	or	r2,r3,r2
  806ad4:	e0fff717 	ldw	r3,-36(fp)
  806ad8:	18c01443 	ldbu	r3,81(r3)
  806adc:	18c03fcc 	andi	r3,r3,255
  806ae0:	1806923a 	slli	r3,r3,8
  806ae4:	10c6b03a 	or	r3,r2,r3
  806ae8:	e0bff717 	ldw	r2,-36(fp)
  806aec:	10801403 	ldbu	r2,80(r2)
  806af0:	10803fcc 	andi	r2,r2,255
  806af4:	1884b03a 	or	r2,r3,r2
  806af8:	e0bff415 	stw	r2,-48(fp)

   nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);            /* Number of reserved sectors */
  806afc:	e0bff717 	ldw	r2,-36(fp)
  806b00:	10800fc3 	ldbu	r2,63(r2)
  806b04:	10803fcc 	andi	r2,r2,255
  806b08:	1004923a 	slli	r2,r2,8
  806b0c:	1007883a 	mov	r3,r2
  806b10:	e0bff717 	ldw	r2,-36(fp)
  806b14:	10800f83 	ldbu	r2,62(r2)
  806b18:	10803fcc 	andi	r2,r2,255
  806b1c:	1884b03a 	or	r2,r3,r2
  806b20:	e0bffa8d 	sth	r2,-22(fp)
   if (!nrsv) return FR_NO_FILESYSTEM;             /* (BPB_RsvdSecCnt must not be 0) */
  806b24:	e0bffa8b 	ldhu	r2,-22(fp)
  806b28:	1000021e 	bne	r2,zero,806b34 <chk_mounted+0x4e0>
  806b2c:	00800344 	movi	r2,13
  806b30:	00011206 	br	806f7c <chk_mounted+0x928>

   /* Determine the FAT sub type */
   sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR); /* RSV+FAT+DIR */
  806b34:	e0fffa8b 	ldhu	r3,-22(fp)
  806b38:	e0bff317 	ldw	r2,-52(fp)
  806b3c:	1887883a 	add	r3,r3,r2
  806b40:	e0bff717 	ldw	r2,-36(fp)
  806b44:	1080020b 	ldhu	r2,8(r2)
  806b48:	10bfffcc 	andi	r2,r2,65535
  806b4c:	1004d13a 	srli	r2,r2,4
  806b50:	10bfffcc 	andi	r2,r2,65535
  806b54:	1885883a 	add	r2,r3,r2
  806b58:	e0bffb15 	stw	r2,-20(fp)
   if (tsect < sysect) return FR_NO_FILESYSTEM;    /* (Invalid volume size) */
  806b5c:	e0fff417 	ldw	r3,-48(fp)
  806b60:	e0bffb17 	ldw	r2,-20(fp)
  806b64:	1880022e 	bgeu	r3,r2,806b70 <chk_mounted+0x51c>
  806b68:	00800344 	movi	r2,13
  806b6c:	00010306 	br	806f7c <chk_mounted+0x928>
   nclst = (tsect - sysect) / fs->csize;           /* Number of clusters */
  806b70:	e0fff417 	ldw	r3,-48(fp)
  806b74:	e0bffb17 	ldw	r2,-20(fp)
  806b78:	1887c83a 	sub	r3,r3,r2
  806b7c:	e0bff717 	ldw	r2,-36(fp)
  806b80:	10800083 	ldbu	r2,2(r2)
  806b84:	10803fcc 	andi	r2,r2,255
  806b88:	1809883a 	mov	r4,r3
  806b8c:	100b883a 	mov	r5,r2
  806b90:	080c6300 	call	80c630 <__udivsi3>
  806b94:	e0bffc15 	stw	r2,-16(fp)
   if (!nclst) return FR_NO_FILESYSTEM;            /* (Invalid volume size) */
  806b98:	e0bffc17 	ldw	r2,-16(fp)
  806b9c:	1000021e 	bne	r2,zero,806ba8 <chk_mounted+0x554>
  806ba0:	00800344 	movi	r2,13
  806ba4:	0000f506 	br	806f7c <chk_mounted+0x928>
   fmt = FS_FAT12;
  806ba8:	00800044 	movi	r2,1
  806bac:	e0bff005 	stb	r2,-64(fp)
   if (nclst >= MIN_FAT16) fmt = FS_FAT16;
  806bb0:	e0bffc17 	ldw	r2,-16(fp)
  806bb4:	1083fdb0 	cmpltui	r2,r2,4086
  806bb8:	1000021e 	bne	r2,zero,806bc4 <chk_mounted+0x570>
  806bbc:	00800084 	movi	r2,2
  806bc0:	e0bff005 	stb	r2,-64(fp)
   if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  806bc4:	e0bffc17 	ldw	r2,-16(fp)
  806bc8:	10bffdb0 	cmpltui	r2,r2,65526
  806bcc:	1000021e 	bne	r2,zero,806bd8 <chk_mounted+0x584>
  806bd0:	008000c4 	movi	r2,3
  806bd4:	e0bff005 	stb	r2,-64(fp)

   /* Boundaries and Limits */
   fs->n_fatent = nclst + 2;                    /* Number of FAT entries */
  806bd8:	e0bffc17 	ldw	r2,-16(fp)
  806bdc:	10c00084 	addi	r3,r2,2
  806be0:	e0bff717 	ldw	r2,-36(fp)
  806be4:	10c00615 	stw	r3,24(r2)
   fs->database = bsect + sysect;                  /* Data start sector */
  806be8:	e0fff217 	ldw	r3,-56(fp)
  806bec:	e0bffb17 	ldw	r2,-20(fp)
  806bf0:	1887883a 	add	r3,r3,r2
  806bf4:	e0bff717 	ldw	r2,-36(fp)
  806bf8:	10c00a15 	stw	r3,40(r2)
   fs->fatbase = bsect + nrsv;                  /* FAT start sector */
  806bfc:	e0fffa8b 	ldhu	r3,-22(fp)
  806c00:	e0bff217 	ldw	r2,-56(fp)
  806c04:	1887883a 	add	r3,r3,r2
  806c08:	e0bff717 	ldw	r2,-36(fp)
  806c0c:	10c00815 	stw	r3,32(r2)
   if (fmt == FS_FAT32) {
  806c10:	e0bff003 	ldbu	r2,-64(fp)
  806c14:	108000d8 	cmpnei	r2,r2,3
  806c18:	1000201e 	bne	r2,zero,806c9c <chk_mounted+0x648>
      if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
  806c1c:	e0bff717 	ldw	r2,-36(fp)
  806c20:	1080020b 	ldhu	r2,8(r2)
  806c24:	10bfffcc 	andi	r2,r2,65535
  806c28:	10000226 	beq	r2,zero,806c34 <chk_mounted+0x5e0>
  806c2c:	00800344 	movi	r2,13
  806c30:	0000d206 	br	806f7c <chk_mounted+0x928>
      fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
  806c34:	e0bff717 	ldw	r2,-36(fp)
  806c38:	108017c3 	ldbu	r2,95(r2)
  806c3c:	10803fcc 	andi	r2,r2,255
  806c40:	1006963a 	slli	r3,r2,24
  806c44:	e0bff717 	ldw	r2,-36(fp)
  806c48:	10801783 	ldbu	r2,94(r2)
  806c4c:	10803fcc 	andi	r2,r2,255
  806c50:	1004943a 	slli	r2,r2,16
  806c54:	1884b03a 	or	r2,r3,r2
  806c58:	e0fff717 	ldw	r3,-36(fp)
  806c5c:	18c01743 	ldbu	r3,93(r3)
  806c60:	18c03fcc 	andi	r3,r3,255
  806c64:	1806923a 	slli	r3,r3,8
  806c68:	10c6b03a 	or	r3,r2,r3
  806c6c:	e0bff717 	ldw	r2,-36(fp)
  806c70:	10801703 	ldbu	r2,92(r2)
  806c74:	10803fcc 	andi	r2,r2,255
  806c78:	1886b03a 	or	r3,r3,r2
  806c7c:	e0bff717 	ldw	r2,-36(fp)
  806c80:	10c00915 	stw	r3,36(r2)
      szbfat = fs->n_fatent * 4;                /* (Required FAT size) */
  806c84:	e0bff717 	ldw	r2,-36(fp)
  806c88:	10800617 	ldw	r2,24(r2)
  806c8c:	1085883a 	add	r2,r2,r2
  806c90:	1085883a 	add	r2,r2,r2
  806c94:	e0bff515 	stw	r2,-44(fp)
  806c98:	00001e06 	br	806d14 <chk_mounted+0x6c0>
   } else {
      if (!fs->n_rootdir)  return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must not be 0) */
  806c9c:	e0bff717 	ldw	r2,-36(fp)
  806ca0:	1080020b 	ldhu	r2,8(r2)
  806ca4:	10bfffcc 	andi	r2,r2,65535
  806ca8:	1000021e 	bne	r2,zero,806cb4 <chk_mounted+0x660>
  806cac:	00800344 	movi	r2,13
  806cb0:	0000b206 	br	806f7c <chk_mounted+0x928>
      fs->dirbase = fs->fatbase + fasize;          /* Root directory start sector */
  806cb4:	e0bff717 	ldw	r2,-36(fp)
  806cb8:	10c00817 	ldw	r3,32(r2)
  806cbc:	e0bff317 	ldw	r2,-52(fp)
  806cc0:	1887883a 	add	r3,r3,r2
  806cc4:	e0bff717 	ldw	r2,-36(fp)
  806cc8:	10c00915 	stw	r3,36(r2)
      szbfat = (fmt == FS_FAT16) ?              /* (Required FAT size) */
         fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  806ccc:	e0bff003 	ldbu	r2,-64(fp)
  806cd0:	10800098 	cmpnei	r2,r2,2
  806cd4:	1000041e 	bne	r2,zero,806ce8 <chk_mounted+0x694>
  806cd8:	e0bff717 	ldw	r2,-36(fp)
  806cdc:	10800617 	ldw	r2,24(r2)
  806ce0:	1085883a 	add	r2,r2,r2
  806ce4:	00000a06 	br	806d10 <chk_mounted+0x6bc>
  806ce8:	e0bff717 	ldw	r2,-36(fp)
  806cec:	10c00617 	ldw	r3,24(r2)
  806cf0:	1805883a 	mov	r2,r3
  806cf4:	1085883a 	add	r2,r2,r2
  806cf8:	10c5883a 	add	r2,r2,r3
  806cfc:	1006d07a 	srli	r3,r2,1
  806d00:	e0bff717 	ldw	r2,-36(fp)
  806d04:	10800617 	ldw	r2,24(r2)
  806d08:	1080004c 	andi	r2,r2,1
  806d0c:	1885883a 	add	r2,r3,r2
      fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
      szbfat = fs->n_fatent * 4;                /* (Required FAT size) */
   } else {
      if (!fs->n_rootdir)  return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must not be 0) */
      fs->dirbase = fs->fatbase + fasize;          /* Root directory start sector */
      szbfat = (fmt == FS_FAT16) ?              /* (Required FAT size) */
  806d10:	e0bff515 	stw	r2,-44(fp)
         fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   }
   if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))  /* (BPB_FATSz must not be less than required) */
  806d14:	e0bff717 	ldw	r2,-36(fp)
  806d18:	10c00717 	ldw	r3,28(r2)
  806d1c:	e0bff517 	ldw	r2,-44(fp)
  806d20:	10807fc4 	addi	r2,r2,511
  806d24:	1004d27a 	srli	r2,r2,9
  806d28:	1880022e 	bgeu	r3,r2,806d34 <chk_mounted+0x6e0>
      return FR_NO_FILESYSTEM;
  806d2c:	00800344 	movi	r2,13
  806d30:	00009206 	br	806f7c <chk_mounted+0x928>

#if !_FS_READONLY
   /* Initialize cluster allocation information */
   fs->free_clust = 0xFFFFFFFF;
  806d34:	e0bff717 	ldw	r2,-36(fp)
  806d38:	00ffffc4 	movi	r3,-1
  806d3c:	10c00415 	stw	r3,16(r2)
   fs->last_clust = 0;
  806d40:	e0bff717 	ldw	r2,-36(fp)
  806d44:	10000315 	stw	zero,12(r2)

   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
  806d48:	e0bff003 	ldbu	r2,-64(fp)
  806d4c:	108000d8 	cmpnei	r2,r2,3
  806d50:	10007c1e 	bne	r2,zero,806f44 <chk_mounted+0x8f0>
      fs->fsi_flag = 0;
  806d54:	e0bff717 	ldw	r2,-36(fp)
  806d58:	10000145 	stb	zero,5(r2)
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  806d5c:	e0bff717 	ldw	r2,-36(fp)
  806d60:	10801843 	ldbu	r2,97(r2)
  806d64:	10803fcc 	andi	r2,r2,255
  806d68:	1004923a 	slli	r2,r2,8
  806d6c:	1007883a 	mov	r3,r2
  806d70:	e0bff717 	ldw	r2,-36(fp)
  806d74:	10801803 	ldbu	r2,96(r2)
  806d78:	10803fcc 	andi	r2,r2,255
  806d7c:	1884b03a 	or	r2,r3,r2
  806d80:	10ffffcc 	andi	r3,r2,65535
  806d84:	e0bff217 	ldw	r2,-56(fp)
  806d88:	1887883a 	add	r3,r3,r2
  806d8c:	e0bff717 	ldw	r2,-36(fp)
  806d90:	10c00515 	stw	r3,20(r2)
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  806d94:	e0bff717 	ldw	r2,-36(fp)
  806d98:	10800043 	ldbu	r2,1(r2)
  806d9c:	11003fcc 	andi	r4,r2,255
  806da0:	e0bff717 	ldw	r2,-36(fp)
  806da4:	10c00c04 	addi	r3,r2,48
  806da8:	e0bff717 	ldw	r2,-36(fp)
  806dac:	10800517 	ldw	r2,20(r2)
  806db0:	180b883a 	mov	r5,r3
  806db4:	100d883a 	mov	r6,r2
  806db8:	01c00044 	movi	r7,1
  806dbc:	0803f800 	call	803f80 <ffs_DiskIORead>
  806dc0:	1000601e 	bne	r2,zero,806f44 <chk_mounted+0x8f0>
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  806dc4:	e0bff717 	ldw	r2,-36(fp)
  806dc8:	10808bc3 	ldbu	r2,559(r2)
  806dcc:	10803fcc 	andi	r2,r2,255
  806dd0:	1004923a 	slli	r2,r2,8
  806dd4:	1007883a 	mov	r3,r2
  806dd8:	e0bff717 	ldw	r2,-36(fp)
  806ddc:	10808b83 	ldbu	r2,558(r2)
  806de0:	10803fcc 	andi	r2,r2,255
  806de4:	1884b03a 	or	r2,r3,r2

   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  806de8:	10bfffcc 	andi	r2,r2,65535
  806dec:	10a0001c 	xori	r2,r2,32768
  806df0:	10a00004 	addi	r2,r2,-32768
  806df4:	10aa9558 	cmpnei	r2,r2,-21931
  806df8:	1000521e 	bne	r2,zero,806f44 <chk_mounted+0x8f0>
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  806dfc:	e0bff717 	ldw	r2,-36(fp)
  806e00:	10800cc3 	ldbu	r2,51(r2)
  806e04:	10803fcc 	andi	r2,r2,255
  806e08:	1006963a 	slli	r3,r2,24
  806e0c:	e0bff717 	ldw	r2,-36(fp)
  806e10:	10800c83 	ldbu	r2,50(r2)
  806e14:	10803fcc 	andi	r2,r2,255
  806e18:	1004943a 	slli	r2,r2,16
  806e1c:	1884b03a 	or	r2,r3,r2
  806e20:	e0fff717 	ldw	r3,-36(fp)
  806e24:	18c00c43 	ldbu	r3,49(r3)
  806e28:	18c03fcc 	andi	r3,r3,255
  806e2c:	1806923a 	slli	r3,r3,8
  806e30:	10c6b03a 	or	r3,r2,r3
  806e34:	e0bff717 	ldw	r2,-36(fp)
  806e38:	10800c03 	ldbu	r2,48(r2)
  806e3c:	10803fcc 	andi	r2,r2,255
  806e40:	1886b03a 	or	r3,r3,r2
   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  806e44:	00905874 	movhi	r2,16737
  806e48:	10949484 	addi	r2,r2,21074
  806e4c:	18803d1e 	bne	r3,r2,806f44 <chk_mounted+0x8f0>
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
         LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  806e50:	e0bff717 	ldw	r2,-36(fp)
  806e54:	108085c3 	ldbu	r2,535(r2)
  806e58:	10803fcc 	andi	r2,r2,255
  806e5c:	1006963a 	slli	r3,r2,24
  806e60:	e0bff717 	ldw	r2,-36(fp)
  806e64:	10808583 	ldbu	r2,534(r2)
  806e68:	10803fcc 	andi	r2,r2,255
  806e6c:	1004943a 	slli	r2,r2,16
  806e70:	1884b03a 	or	r2,r3,r2
  806e74:	e0fff717 	ldw	r3,-36(fp)
  806e78:	18c08543 	ldbu	r3,533(r3)
  806e7c:	18c03fcc 	andi	r3,r3,255
  806e80:	1806923a 	slli	r3,r3,8
  806e84:	10c6b03a 	or	r3,r2,r3
  806e88:	e0bff717 	ldw	r2,-36(fp)
  806e8c:	10808503 	ldbu	r2,532(r2)
  806e90:	10803fcc 	andi	r2,r2,255
  806e94:	1886b03a 	or	r3,r3,r2
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  806e98:	00985074 	movhi	r2,24897
  806e9c:	109c9c84 	addi	r2,r2,29298
  806ea0:	1880281e 	bne	r3,r2,806f44 <chk_mounted+0x8f0>
         LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
            fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  806ea4:	e0bff717 	ldw	r2,-36(fp)
  806ea8:	108087c3 	ldbu	r2,543(r2)
  806eac:	10803fcc 	andi	r2,r2,255
  806eb0:	1006963a 	slli	r3,r2,24
  806eb4:	e0bff717 	ldw	r2,-36(fp)
  806eb8:	10808783 	ldbu	r2,542(r2)
  806ebc:	10803fcc 	andi	r2,r2,255
  806ec0:	1004943a 	slli	r2,r2,16
  806ec4:	1884b03a 	or	r2,r3,r2
  806ec8:	e0fff717 	ldw	r3,-36(fp)
  806ecc:	18c08743 	ldbu	r3,541(r3)
  806ed0:	18c03fcc 	andi	r3,r3,255
  806ed4:	1806923a 	slli	r3,r3,8
  806ed8:	10c6b03a 	or	r3,r2,r3
  806edc:	e0bff717 	ldw	r2,-36(fp)
  806ee0:	10808703 	ldbu	r2,540(r2)
  806ee4:	10803fcc 	andi	r2,r2,255
  806ee8:	1886b03a 	or	r3,r3,r2
  806eec:	e0bff717 	ldw	r2,-36(fp)
  806ef0:	10c00315 	stw	r3,12(r2)
            fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  806ef4:	e0bff717 	ldw	r2,-36(fp)
  806ef8:	108086c3 	ldbu	r2,539(r2)
  806efc:	10803fcc 	andi	r2,r2,255
  806f00:	1006963a 	slli	r3,r2,24
  806f04:	e0bff717 	ldw	r2,-36(fp)
  806f08:	10808683 	ldbu	r2,538(r2)
  806f0c:	10803fcc 	andi	r2,r2,255
  806f10:	1004943a 	slli	r2,r2,16
  806f14:	1884b03a 	or	r2,r3,r2
  806f18:	e0fff717 	ldw	r3,-36(fp)
  806f1c:	18c08643 	ldbu	r3,537(r3)
  806f20:	18c03fcc 	andi	r3,r3,255
  806f24:	1806923a 	slli	r3,r3,8
  806f28:	10c6b03a 	or	r3,r2,r3
  806f2c:	e0bff717 	ldw	r2,-36(fp)
  806f30:	10808603 	ldbu	r2,536(r2)
  806f34:	10803fcc 	andi	r2,r2,255
  806f38:	1886b03a 	or	r3,r3,r2
  806f3c:	e0bff717 	ldw	r2,-36(fp)
  806f40:	10c00415 	stw	r3,16(r2)
      }
   }
#endif
   fs->fs_type = fmt;      /* FAT sub-type */
  806f44:	e0bff717 	ldw	r2,-36(fp)
  806f48:	e0fff003 	ldbu	r3,-64(fp)
  806f4c:	10c00005 	stb	r3,0(r2)
   fs->id = ++Fsid;     /* File system mount ID */
  806f50:	d0a76d0b 	ldhu	r2,-25164(gp)
  806f54:	10800044 	addi	r2,r2,1
  806f58:	d0a76d0d 	sth	r2,-25164(gp)
  806f5c:	d0e76d0b 	ldhu	r3,-25164(gp)
  806f60:	e0bff717 	ldw	r2,-36(fp)
  806f64:	10c0018d 	sth	r3,6(r2)
   fs->winsect = 0;     /* Invalidate sector cache */
  806f68:	e0bff717 	ldw	r2,-36(fp)
  806f6c:	10000b15 	stw	zero,44(r2)
   fs->wflag = 0;
  806f70:	e0bff717 	ldw	r2,-36(fp)
  806f74:	10000105 	stb	zero,4(r2)
#endif
#if _FS_SHARE           /* Clear file lock semaphores */
   clear_lock(fs);
#endif

   return FR_OK;
  806f78:	0005883a 	mov	r2,zero
}
  806f7c:	e037883a 	mov	sp,fp
  806f80:	dfc00117 	ldw	ra,4(sp)
  806f84:	df000017 	ldw	fp,0(sp)
  806f88:	dec00204 	addi	sp,sp,8
  806f8c:	f800283a 	ret

00806f90 <validate>:
static
FRESULT validate (   /* FR_OK(0): The object is valid, !=0: Invalid */
   FATFS *fs,     /* Pointer to the file system object */
   uint16_t id        /* Member id of the target object to be checked */
)
{
  806f90:	defffc04 	addi	sp,sp,-16
  806f94:	dfc00315 	stw	ra,12(sp)
  806f98:	df000215 	stw	fp,8(sp)
  806f9c:	df000204 	addi	fp,sp,8
  806fa0:	e13ffe15 	stw	r4,-8(fp)
  806fa4:	2805883a 	mov	r2,r5
  806fa8:	e0bfff0d 	sth	r2,-4(fp)
   if (!fs || !fs->fs_type || fs->id != id)
  806fac:	e0bffe17 	ldw	r2,-8(fp)
  806fb0:	10000926 	beq	r2,zero,806fd8 <validate+0x48>
  806fb4:	e0bffe17 	ldw	r2,-8(fp)
  806fb8:	10800003 	ldbu	r2,0(r2)
  806fbc:	10803fcc 	andi	r2,r2,255
  806fc0:	10000526 	beq	r2,zero,806fd8 <validate+0x48>
  806fc4:	e0bffe17 	ldw	r2,-8(fp)
  806fc8:	1080018b 	ldhu	r2,6(r2)
  806fcc:	10ffffcc 	andi	r3,r2,65535
  806fd0:	e0bfff0b 	ldhu	r2,-4(fp)
  806fd4:	18800226 	beq	r3,r2,806fe0 <validate+0x50>
      return FR_INVALID_OBJECT;
  806fd8:	00800244 	movi	r2,9
  806fdc:	00000b06 	br	80700c <validate+0x7c>

   ENTER_FF(fs);     /* Lock file system */

   if (disk_status(fs->drv) & STA_NOINIT)
  806fe0:	e0bffe17 	ldw	r2,-8(fp)
  806fe4:	10800043 	ldbu	r2,1(r2)
  806fe8:	10803fcc 	andi	r2,r2,255
  806fec:	1009883a 	mov	r4,r2
  806ff0:	0803f580 	call	803f58 <ffs_DiskIOStatus>
  806ff4:	10803fcc 	andi	r2,r2,255
  806ff8:	1080004c 	andi	r2,r2,1
  806ffc:	10000226 	beq	r2,zero,807008 <validate+0x78>
      return FR_NOT_READY;
  807000:	008000c4 	movi	r2,3
  807004:	00000106 	br	80700c <validate+0x7c>

   return FR_OK;
  807008:	0005883a 	mov	r2,zero
}
  80700c:	e037883a 	mov	sp,fp
  807010:	dfc00117 	ldw	ra,4(sp)
  807014:	df000017 	ldw	fp,0(sp)
  807018:	dec00204 	addi	sp,sp,8
  80701c:	f800283a 	ret

00807020 <f_mount>:

FRESULT f_mount (
   uint8_t vol,      /* Logical drive number to be mounted/unmounted */
   FATFS *fs      /* Pointer to new file system object (NULL for unmount)*/
)
{
  807020:	defffc04 	addi	sp,sp,-16
  807024:	df000315 	stw	fp,12(sp)
  807028:	df000304 	addi	fp,sp,12
  80702c:	2005883a 	mov	r2,r4
  807030:	e17fff15 	stw	r5,-4(fp)
  807034:	e0bffe05 	stb	r2,-8(fp)
   FATFS *rfs;


   if (vol >= _VOLUMES)    /* Check if the drive number is valid */
  807038:	e0bffe03 	ldbu	r2,-8(fp)
  80703c:	10000226 	beq	r2,zero,807048 <f_mount+0x28>
      return FR_INVALID_DRIVE;
  807040:	008002c4 	movi	r2,11
  807044:	00001706 	br	8070a4 <f_mount+0x84>
   rfs = FatFs[vol];       /* Get current fs object */
  807048:	e0bffe03 	ldbu	r2,-8(fp)
  80704c:	1085883a 	add	r2,r2,r2
  807050:	1087883a 	add	r3,r2,r2
  807054:	d0a76c04 	addi	r2,gp,-25168
  807058:	1885883a 	add	r2,r3,r2
  80705c:	10800017 	ldw	r2,0(r2)
  807060:	e0bffd15 	stw	r2,-12(fp)

   if (rfs) {
  807064:	e0bffd17 	ldw	r2,-12(fp)
  807068:	10000226 	beq	r2,zero,807074 <f_mount+0x54>
      clear_lock(rfs);
#endif
#if _FS_REENTRANT          /* Discard sync object of the current volume */
      if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
      rfs->fs_type = 0;    /* Clear old fs object */
  80706c:	e0bffd17 	ldw	r2,-12(fp)
  807070:	10000005 	stb	zero,0(r2)
   }

   if (fs) {
  807074:	e0bfff17 	ldw	r2,-4(fp)
  807078:	10000226 	beq	r2,zero,807084 <f_mount+0x64>
      fs->fs_type = 0;     /* Clear new fs object */
  80707c:	e0bfff17 	ldw	r2,-4(fp)
  807080:	10000005 	stb	zero,0(r2)
#if _FS_REENTRANT          /* Create sync object for the new volume */
      if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
   }
   FatFs[vol] = fs;        /* Register new fs object */
  807084:	e0bffe03 	ldbu	r2,-8(fp)
  807088:	1085883a 	add	r2,r2,r2
  80708c:	1087883a 	add	r3,r2,r2
  807090:	d0a76c04 	addi	r2,gp,-25168
  807094:	1885883a 	add	r2,r3,r2
  807098:	e0ffff17 	ldw	r3,-4(fp)
  80709c:	10c00015 	stw	r3,0(r2)

   return FR_OK;
  8070a0:	0005883a 	mov	r2,zero
}
  8070a4:	e037883a 	mov	sp,fp
  8070a8:	df000017 	ldw	fp,0(sp)
  8070ac:	dec00104 	addi	sp,sp,4
  8070b0:	f800283a 	ret

008070b4 <f_open>:
FRESULT f_open (
   FIL *fp,       /* Pointer to the blank file object */
   const TCHAR *path,   /* Pointer to the file name */
   uint8_t mode         /* Access mode and file open mode flags */
)
{
  8070b4:	deffed04 	addi	sp,sp,-76
  8070b8:	dfc01215 	stw	ra,72(sp)
  8070bc:	df001115 	stw	fp,68(sp)
  8070c0:	df001104 	addi	fp,sp,68
  8070c4:	e13ffd15 	stw	r4,-12(fp)
  8070c8:	e17ffe15 	stw	r5,-8(fp)
  8070cc:	3005883a 	mov	r2,r6
  8070d0:	e0bfff05 	stb	r2,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   fp->fs = 0;       /* Clear file object */
  8070d4:	e0bffd17 	ldw	r2,-12(fp)
  8070d8:	10000015 	stw	zero,0(r2)

#if !_FS_READONLY
   mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  8070dc:	e0bfff03 	ldbu	r2,-4(fp)
  8070e0:	108007cc 	andi	r2,r2,31
  8070e4:	e0bfff05 	stb	r2,-4(fp)
   res = chk_mounted(&path, &dj.fs, (uint8_t)(mode & ~FA_READ));
  8070e8:	e0bfff03 	ldbu	r2,-4(fp)
  8070ec:	10803f8c 	andi	r2,r2,254
  8070f0:	e13ffe04 	addi	r4,fp,-8
  8070f4:	e0fff304 	addi	r3,fp,-52
  8070f8:	180b883a 	mov	r5,r3
  8070fc:	100d883a 	mov	r6,r2
  807100:	08066540 	call	806654 <chk_mounted>
  807104:	e0bfef15 	stw	r2,-68(fp)
#else
   mode &= FA_READ;
   res = chk_mounted(&path, &dj.fs, 0);
#endif
   INIT_BUF(dj);
  807108:	e0bffa04 	addi	r2,fp,-24
  80710c:	e0bff915 	stw	r2,-28(fp)
   if (res == FR_OK)
  807110:	e0bfef17 	ldw	r2,-68(fp)
  807114:	1000061e 	bne	r2,zero,807130 <f_open+0x7c>
      res = follow_path(&dj, path); /* Follow the file path */
  807118:	e0bffe17 	ldw	r2,-8(fp)
  80711c:	e0fff304 	addi	r3,fp,-52
  807120:	1809883a 	mov	r4,r3
  807124:	100b883a 	mov	r5,r2
  807128:	08063100 	call	806310 <follow_path>
  80712c:	e0bfef15 	stw	r2,-68(fp)
   dir = dj.dir;
  807130:	e0bff817 	ldw	r2,-32(fp)
  807134:	e0bff015 	stw	r2,-64(fp)

#if !_FS_READONLY /* R/W configuration */
   if (res == FR_OK) {
  807138:	e0bfef17 	ldw	r2,-68(fp)
  80713c:	1000041e 	bne	r2,zero,807150 <f_open+0x9c>
      if (!dir)   /* Current dir itself */
  807140:	e0bff017 	ldw	r2,-64(fp)
  807144:	1000021e 	bne	r2,zero,807150 <f_open+0x9c>
         res = FR_INVALID_NAME;
  807148:	00800184 	movi	r2,6
  80714c:	e0bfef15 	stw	r2,-68(fp)
      else
         res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
   }
   /* Create or Open a file */
   if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  807150:	e0bfff03 	ldbu	r2,-4(fp)
  807154:	1080070c 	andi	r2,r2,28
  807158:	10008826 	beq	r2,zero,80737c <f_open+0x2c8>
      uint32_t dw, cl;

      if (res != FR_OK) {              /* No file, create new */
  80715c:	e0bfef17 	ldw	r2,-68(fp)
  807160:	10000d26 	beq	r2,zero,807198 <f_open+0xe4>
         if (res == FR_NO_FILE)        /* There is no file to open, create a new entry */
  807164:	e0bfef17 	ldw	r2,-68(fp)
  807168:	10800118 	cmpnei	r2,r2,4
  80716c:	1000041e 	bne	r2,zero,807180 <f_open+0xcc>
#if _FS_SHARE
            res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
            res = dir_register(&dj);
  807170:	e0bff304 	addi	r2,fp,-52
  807174:	1009883a 	mov	r4,r2
  807178:	0805c3c0 	call	805c3c <dir_register>
  80717c:	e0bfef15 	stw	r2,-68(fp)
#endif
         mode |= FA_CREATE_ALWAYS;     /* File is created */
  807180:	e0bfff03 	ldbu	r2,-4(fp)
  807184:	10800214 	ori	r2,r2,8
  807188:	e0bfff05 	stb	r2,-4(fp)
         dir = dj.dir;              /* New entry */
  80718c:	e0bff817 	ldw	r2,-32(fp)
  807190:	e0bff015 	stw	r2,-64(fp)
  807194:	00000e06 	br	8071d0 <f_open+0x11c>
      }
      else {                        /* Any object is already existing */
         if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {  /* Cannot overwrite it (R/O or DIR) */
  807198:	e0bff017 	ldw	r2,-64(fp)
  80719c:	108002c4 	addi	r2,r2,11
  8071a0:	10800003 	ldbu	r2,0(r2)
  8071a4:	10803fcc 	andi	r2,r2,255
  8071a8:	1080044c 	andi	r2,r2,17
  8071ac:	10000326 	beq	r2,zero,8071bc <f_open+0x108>
            res = FR_DENIED;
  8071b0:	008001c4 	movi	r2,7
  8071b4:	e0bfef15 	stw	r2,-68(fp)
  8071b8:	00000506 	br	8071d0 <f_open+0x11c>
         } else {
            if (mode & FA_CREATE_NEW)  /* Cannot create as new file */
  8071bc:	e0bfff03 	ldbu	r2,-4(fp)
  8071c0:	1080010c 	andi	r2,r2,4
  8071c4:	10000226 	beq	r2,zero,8071d0 <f_open+0x11c>
               res = FR_EXIST;
  8071c8:	00800204 	movi	r2,8
  8071cc:	e0bfef15 	stw	r2,-68(fp)
         }
      }
      if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {   /* Truncate it if overwrite mode */
  8071d0:	e0bfef17 	ldw	r2,-68(fp)
  8071d4:	1000681e 	bne	r2,zero,807378 <f_open+0x2c4>
  8071d8:	e0bfff03 	ldbu	r2,-4(fp)
  8071dc:	1080020c 	andi	r2,r2,8
  8071e0:	10006526 	beq	r2,zero,807378 <f_open+0x2c4>
         dw = get_fattime();              /* Created time */
  8071e4:	08046b00 	call	8046b0 <get_fattime>
  8071e8:	e0bff115 	stw	r2,-60(fp)
         ST_DWORD(dir+DIR_CrtTime, dw);
  8071ec:	e0bff017 	ldw	r2,-64(fp)
  8071f0:	10800384 	addi	r2,r2,14
  8071f4:	e0fff117 	ldw	r3,-60(fp)
  8071f8:	10c00005 	stb	r3,0(r2)
  8071fc:	e0bff017 	ldw	r2,-64(fp)
  807200:	108003c4 	addi	r2,r2,15
  807204:	e0fff117 	ldw	r3,-60(fp)
  807208:	18ffffcc 	andi	r3,r3,65535
  80720c:	1806d23a 	srli	r3,r3,8
  807210:	10c00005 	stb	r3,0(r2)
  807214:	e0bff017 	ldw	r2,-64(fp)
  807218:	10800404 	addi	r2,r2,16
  80721c:	e0fff117 	ldw	r3,-60(fp)
  807220:	1806d43a 	srli	r3,r3,16
  807224:	10c00005 	stb	r3,0(r2)
  807228:	e0bff017 	ldw	r2,-64(fp)
  80722c:	10800444 	addi	r2,r2,17
  807230:	e0fff117 	ldw	r3,-60(fp)
  807234:	1806d63a 	srli	r3,r3,24
  807238:	10c00005 	stb	r3,0(r2)
         dir[DIR_Attr] = 0;               /* Reset attribute */
  80723c:	e0bff017 	ldw	r2,-64(fp)
  807240:	108002c4 	addi	r2,r2,11
  807244:	10000005 	stb	zero,0(r2)
         ST_DWORD(dir+DIR_FileSize, 0);      /* size = 0 */
  807248:	e0bff017 	ldw	r2,-64(fp)
  80724c:	10800704 	addi	r2,r2,28
  807250:	10000005 	stb	zero,0(r2)
  807254:	e0bff017 	ldw	r2,-64(fp)
  807258:	10800744 	addi	r2,r2,29
  80725c:	10000005 	stb	zero,0(r2)
  807260:	e0bff017 	ldw	r2,-64(fp)
  807264:	10800784 	addi	r2,r2,30
  807268:	10000005 	stb	zero,0(r2)
  80726c:	e0bff017 	ldw	r2,-64(fp)
  807270:	108007c4 	addi	r2,r2,31
  807274:	10000005 	stb	zero,0(r2)
         cl = LD_CLUST(dir);              /* Get start cluster */
  807278:	e0bff017 	ldw	r2,-64(fp)
  80727c:	10800544 	addi	r2,r2,21
  807280:	10800003 	ldbu	r2,0(r2)
  807284:	10803fcc 	andi	r2,r2,255
  807288:	1004923a 	slli	r2,r2,8
  80728c:	1007883a 	mov	r3,r2
  807290:	e0bff017 	ldw	r2,-64(fp)
  807294:	10800504 	addi	r2,r2,20
  807298:	10800003 	ldbu	r2,0(r2)
  80729c:	10803fcc 	andi	r2,r2,255
  8072a0:	1884b03a 	or	r2,r3,r2
  8072a4:	10bfffcc 	andi	r2,r2,65535
  8072a8:	1006943a 	slli	r3,r2,16
  8072ac:	e0bff017 	ldw	r2,-64(fp)
  8072b0:	108006c4 	addi	r2,r2,27
  8072b4:	10800003 	ldbu	r2,0(r2)
  8072b8:	10803fcc 	andi	r2,r2,255
  8072bc:	1004923a 	slli	r2,r2,8
  8072c0:	1009883a 	mov	r4,r2
  8072c4:	e0bff017 	ldw	r2,-64(fp)
  8072c8:	10800684 	addi	r2,r2,26
  8072cc:	10800003 	ldbu	r2,0(r2)
  8072d0:	10803fcc 	andi	r2,r2,255
  8072d4:	2084b03a 	or	r2,r4,r2
  8072d8:	10bfffcc 	andi	r2,r2,65535
  8072dc:	1884b03a 	or	r2,r3,r2
  8072e0:	e0bff215 	stw	r2,-56(fp)
         ST_CLUST(dir, 0);             /* cluster = 0 */
  8072e4:	e0bff017 	ldw	r2,-64(fp)
  8072e8:	10800684 	addi	r2,r2,26
  8072ec:	10000005 	stb	zero,0(r2)
  8072f0:	e0bff017 	ldw	r2,-64(fp)
  8072f4:	108006c4 	addi	r2,r2,27
  8072f8:	10000005 	stb	zero,0(r2)
  8072fc:	e0bff017 	ldw	r2,-64(fp)
  807300:	10800504 	addi	r2,r2,20
  807304:	10000005 	stb	zero,0(r2)
  807308:	e0bff017 	ldw	r2,-64(fp)
  80730c:	10800544 	addi	r2,r2,21
  807310:	10000005 	stb	zero,0(r2)
         dj.fs->wflag = 1;
  807314:	e0bff317 	ldw	r2,-52(fp)
  807318:	00c00044 	movi	r3,1
  80731c:	10c00105 	stb	r3,4(r2)
         if (cl) {                     /* Remove the cluster chain if exist */
  807320:	e0bff217 	ldw	r2,-56(fp)
  807324:	10001426 	beq	r2,zero,807378 <f_open+0x2c4>
            dw = dj.fs->winsect;
  807328:	e0bff317 	ldw	r2,-52(fp)
  80732c:	10800b17 	ldw	r2,44(r2)
  807330:	e0bff115 	stw	r2,-60(fp)
            res = remove_chain(dj.fs, cl);
  807334:	e0bff317 	ldw	r2,-52(fp)
  807338:	1009883a 	mov	r4,r2
  80733c:	e17ff217 	ldw	r5,-56(fp)
  807340:	08052800 	call	805280 <remove_chain>
  807344:	e0bfef15 	stw	r2,-68(fp)
            if (res == FR_OK) {
  807348:	e0bfef17 	ldw	r2,-68(fp)
  80734c:	10000a1e 	bne	r2,zero,807378 <f_open+0x2c4>
               dj.fs->last_clust = cl - 1;   /* Reuse the cluster hole */
  807350:	e0bff317 	ldw	r2,-52(fp)
  807354:	e0fff217 	ldw	r3,-56(fp)
  807358:	18ffffc4 	addi	r3,r3,-1
  80735c:	10c00315 	stw	r3,12(r2)
               res = move_window(dj.fs, dw);
  807360:	e0bff317 	ldw	r2,-52(fp)
  807364:	1009883a 	mov	r4,r2
  807368:	e17ff117 	ldw	r5,-60(fp)
  80736c:	08048a80 	call	8048a8 <move_window>
  807370:	e0bfef15 	stw	r2,-68(fp)
  807374:	00001706 	br	8073d4 <f_open+0x320>
  807378:	00001606 	br	8073d4 <f_open+0x320>
            }
         }
      }
   }
   else {   /* Open an existing file */
      if (res == FR_OK) {                 /* Follow succeeded */
  80737c:	e0bfef17 	ldw	r2,-68(fp)
  807380:	1000141e 	bne	r2,zero,8073d4 <f_open+0x320>
         if (dir[DIR_Attr] & AM_DIR) {    /* It is a directory */
  807384:	e0bff017 	ldw	r2,-64(fp)
  807388:	108002c4 	addi	r2,r2,11
  80738c:	10800003 	ldbu	r2,0(r2)
  807390:	10803fcc 	andi	r2,r2,255
  807394:	1080040c 	andi	r2,r2,16
  807398:	10000326 	beq	r2,zero,8073a8 <f_open+0x2f4>
            res = FR_NO_FILE;
  80739c:	00800104 	movi	r2,4
  8073a0:	e0bfef15 	stw	r2,-68(fp)
  8073a4:	00000b06 	br	8073d4 <f_open+0x320>
         } else {
            if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  8073a8:	e0bfff03 	ldbu	r2,-4(fp)
  8073ac:	1080008c 	andi	r2,r2,2
  8073b0:	10000826 	beq	r2,zero,8073d4 <f_open+0x320>
  8073b4:	e0bff017 	ldw	r2,-64(fp)
  8073b8:	108002c4 	addi	r2,r2,11
  8073bc:	10800003 	ldbu	r2,0(r2)
  8073c0:	10803fcc 	andi	r2,r2,255
  8073c4:	1080004c 	andi	r2,r2,1
  8073c8:	10000226 	beq	r2,zero,8073d4 <f_open+0x320>
               res = FR_DENIED;
  8073cc:	008001c4 	movi	r2,7
  8073d0:	e0bfef15 	stw	r2,-68(fp)
         }
      }
   }
   if (res == FR_OK) {
  8073d4:	e0bfef17 	ldw	r2,-68(fp)
  8073d8:	10000d1e 	bne	r2,zero,807410 <f_open+0x35c>
      if (mode & FA_CREATE_ALWAYS)        /* Set file change flag if created or overwritten */
  8073dc:	e0bfff03 	ldbu	r2,-4(fp)
  8073e0:	1080020c 	andi	r2,r2,8
  8073e4:	10000326 	beq	r2,zero,8073f4 <f_open+0x340>
         mode |= FA__WRITTEN;
  8073e8:	e0bfff03 	ldbu	r2,-4(fp)
  8073ec:	10800814 	ori	r2,r2,32
  8073f0:	e0bfff05 	stb	r2,-4(fp)
      fp->dir_sect = dj.fs->winsect;         /* Pointer to the directory entry */
  8073f4:	e0bff317 	ldw	r2,-52(fp)
  8073f8:	10c00b17 	ldw	r3,44(r2)
  8073fc:	e0bffd17 	ldw	r2,-12(fp)
  807400:	10c00715 	stw	r3,28(r2)
      fp->dir_ptr = dir;
  807404:	e0bffd17 	ldw	r2,-12(fp)
  807408:	e0fff017 	ldw	r3,-64(fp)
  80740c:	10c00815 	stw	r3,32(r2)
      }
   }
#endif
   FREE_BUF();

   if (res == FR_OK) {
  807410:	e0bfef17 	ldw	r2,-68(fp)
  807414:	1000421e 	bne	r2,zero,807520 <f_open+0x46c>
      fp->flag = mode;              /* File access mode */
  807418:	e0bffd17 	ldw	r2,-12(fp)
  80741c:	e0ffff03 	ldbu	r3,-4(fp)
  807420:	10c00185 	stb	r3,6(r2)
      fp->sclust = LD_CLUST(dir);         /* File start cluster */
  807424:	e0bff017 	ldw	r2,-64(fp)
  807428:	10800544 	addi	r2,r2,21
  80742c:	10800003 	ldbu	r2,0(r2)
  807430:	10803fcc 	andi	r2,r2,255
  807434:	1004923a 	slli	r2,r2,8
  807438:	1007883a 	mov	r3,r2
  80743c:	e0bff017 	ldw	r2,-64(fp)
  807440:	10800504 	addi	r2,r2,20
  807444:	10800003 	ldbu	r2,0(r2)
  807448:	10803fcc 	andi	r2,r2,255
  80744c:	1884b03a 	or	r2,r3,r2
  807450:	10bfffcc 	andi	r2,r2,65535
  807454:	1006943a 	slli	r3,r2,16
  807458:	e0bff017 	ldw	r2,-64(fp)
  80745c:	108006c4 	addi	r2,r2,27
  807460:	10800003 	ldbu	r2,0(r2)
  807464:	10803fcc 	andi	r2,r2,255
  807468:	1004923a 	slli	r2,r2,8
  80746c:	1009883a 	mov	r4,r2
  807470:	e0bff017 	ldw	r2,-64(fp)
  807474:	10800684 	addi	r2,r2,26
  807478:	10800003 	ldbu	r2,0(r2)
  80747c:	10803fcc 	andi	r2,r2,255
  807480:	2084b03a 	or	r2,r4,r2
  807484:	10bfffcc 	andi	r2,r2,65535
  807488:	1886b03a 	or	r3,r3,r2
  80748c:	e0bffd17 	ldw	r2,-12(fp)
  807490:	10c00415 	stw	r3,16(r2)
      fp->fsize = LD_DWORD(dir+DIR_FileSize);   /* File size */
  807494:	e0bff017 	ldw	r2,-64(fp)
  807498:	108007c4 	addi	r2,r2,31
  80749c:	10800003 	ldbu	r2,0(r2)
  8074a0:	10803fcc 	andi	r2,r2,255
  8074a4:	1006963a 	slli	r3,r2,24
  8074a8:	e0bff017 	ldw	r2,-64(fp)
  8074ac:	10800784 	addi	r2,r2,30
  8074b0:	10800003 	ldbu	r2,0(r2)
  8074b4:	10803fcc 	andi	r2,r2,255
  8074b8:	1004943a 	slli	r2,r2,16
  8074bc:	1884b03a 	or	r2,r3,r2
  8074c0:	e0fff017 	ldw	r3,-64(fp)
  8074c4:	18c00744 	addi	r3,r3,29
  8074c8:	18c00003 	ldbu	r3,0(r3)
  8074cc:	18c03fcc 	andi	r3,r3,255
  8074d0:	1806923a 	slli	r3,r3,8
  8074d4:	10c6b03a 	or	r3,r2,r3
  8074d8:	e0bff017 	ldw	r2,-64(fp)
  8074dc:	10800704 	addi	r2,r2,28
  8074e0:	10800003 	ldbu	r2,0(r2)
  8074e4:	10803fcc 	andi	r2,r2,255
  8074e8:	1886b03a 	or	r3,r3,r2
  8074ec:	e0bffd17 	ldw	r2,-12(fp)
  8074f0:	10c00315 	stw	r3,12(r2)
      fp->fptr = 0;                 /* File pointer */
  8074f4:	e0bffd17 	ldw	r2,-12(fp)
  8074f8:	10000215 	stw	zero,8(r2)
      fp->dsect = 0;
  8074fc:	e0bffd17 	ldw	r2,-12(fp)
  807500:	10000615 	stw	zero,24(r2)
#if _USE_FASTSEEK
      fp->cltbl = 0;                /* Normal seek mode */
#endif
      fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
  807504:	e0fff317 	ldw	r3,-52(fp)
  807508:	e0bffd17 	ldw	r2,-12(fp)
  80750c:	10c00015 	stw	r3,0(r2)
  807510:	e0bff317 	ldw	r2,-52(fp)
  807514:	10c0018b 	ldhu	r3,6(r2)
  807518:	e0bffd17 	ldw	r2,-12(fp)
  80751c:	10c0010d 	sth	r3,4(r2)
   }

   LEAVE_FF(dj.fs, res);
  807520:	e0bfef17 	ldw	r2,-68(fp)
}
  807524:	e037883a 	mov	sp,fp
  807528:	dfc00117 	ldw	ra,4(sp)
  80752c:	df000017 	ldw	fp,0(sp)
  807530:	dec00204 	addi	sp,sp,8
  807534:	f800283a 	ret

00807538 <f_read>:
   FIL *fp,       /* Pointer to the file object */
   void *buff,    /* Pointer to data buffer */
   uint32_t btr,      /* Number of bytes to read */
   uint32_t *br    /* Pointer to number of bytes read */
)
{
  807538:	defff204 	addi	sp,sp,-56
  80753c:	dfc00d15 	stw	ra,52(sp)
  807540:	df000c15 	stw	fp,48(sp)
  807544:	df000c04 	addi	fp,sp,48
  807548:	e13ffc15 	stw	r4,-16(fp)
  80754c:	e17ffd15 	stw	r5,-12(fp)
  807550:	e1bffe15 	stw	r6,-8(fp)
  807554:	e1ffff15 	stw	r7,-4(fp)
   FRESULT res;
   uint32_t clst, sect, remain;
   uint32_t rcnt, cc;
   uint8_t csect, *rbuff = buff;
  807558:	e0bffd17 	ldw	r2,-12(fp)
  80755c:	e0bff715 	stw	r2,-36(fp)


   *br = 0; /* Initialize byte counter */
  807560:	e0bfff17 	ldw	r2,-4(fp)
  807564:	10000015 	stw	zero,0(r2)

   res = validate(fp->fs, fp->id);           /* Check validity */
  807568:	e0bffc17 	ldw	r2,-16(fp)
  80756c:	10c00017 	ldw	r3,0(r2)
  807570:	e0bffc17 	ldw	r2,-16(fp)
  807574:	1080010b 	ldhu	r2,4(r2)
  807578:	10bfffcc 	andi	r2,r2,65535
  80757c:	1809883a 	mov	r4,r3
  807580:	100b883a 	mov	r5,r2
  807584:	0806f900 	call	806f90 <validate>
  807588:	e0bff815 	stw	r2,-32(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
  80758c:	e0bff817 	ldw	r2,-32(fp)
  807590:	10000226 	beq	r2,zero,80759c <f_read+0x64>
  807594:	e0bff817 	ldw	r2,-32(fp)
  807598:	00011b06 	br	807a08 <f_read+0x4d0>
   if (fp->flag & FA__ERROR)              /* Aborted file? */
  80759c:	e0bffc17 	ldw	r2,-16(fp)
  8075a0:	10800183 	ldbu	r2,6(r2)
  8075a4:	10803fcc 	andi	r2,r2,255
  8075a8:	1080201c 	xori	r2,r2,128
  8075ac:	10bfe004 	addi	r2,r2,-128
  8075b0:	1000020e 	bge	r2,zero,8075bc <f_read+0x84>
      LEAVE_FF(fp->fs, FR_INT_ERR);
  8075b4:	00800084 	movi	r2,2
  8075b8:	00011306 	br	807a08 <f_read+0x4d0>
   if (!(fp->flag & FA_READ))                /* Check access mode */
  8075bc:	e0bffc17 	ldw	r2,-16(fp)
  8075c0:	10800183 	ldbu	r2,6(r2)
  8075c4:	10803fcc 	andi	r2,r2,255
  8075c8:	1080004c 	andi	r2,r2,1
  8075cc:	1000021e 	bne	r2,zero,8075d8 <f_read+0xa0>
      LEAVE_FF(fp->fs, FR_DENIED);
  8075d0:	008001c4 	movi	r2,7
  8075d4:	00010c06 	br	807a08 <f_read+0x4d0>
   remain = fp->fsize - fp->fptr;
  8075d8:	e0bffc17 	ldw	r2,-16(fp)
  8075dc:	10c00317 	ldw	r3,12(r2)
  8075e0:	e0bffc17 	ldw	r2,-16(fp)
  8075e4:	10800217 	ldw	r2,8(r2)
  8075e8:	1885c83a 	sub	r2,r3,r2
  8075ec:	e0bff915 	stw	r2,-28(fp)
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */
  8075f0:	e0bffe17 	ldw	r2,-8(fp)
  8075f4:	e0fff917 	ldw	r3,-28(fp)
  8075f8:	1880022e 	bgeu	r3,r2,807604 <f_read+0xcc>
  8075fc:	e0bff917 	ldw	r2,-28(fp)
  807600:	e0bffe15 	stw	r2,-8(fp)

   for ( ;  btr;                       /* Repeat until all data read */
  807604:	0000fd06 	br	8079fc <f_read+0x4c4>
      rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
      if ((fp->fptr % SS(fp->fs)) == 0) {    /* On the sector boundary? */
  807608:	e0bffc17 	ldw	r2,-16(fp)
  80760c:	10800217 	ldw	r2,8(r2)
  807610:	10807fcc 	andi	r2,r2,511
  807614:	1000d01e 	bne	r2,zero,807958 <f_read+0x420>
         csect = (uint8_t)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));   /* Sector offset in the cluster */
  807618:	e0bffc17 	ldw	r2,-16(fp)
  80761c:	10800217 	ldw	r2,8(r2)
  807620:	1004d27a 	srli	r2,r2,9
  807624:	1007883a 	mov	r3,r2
  807628:	e0bffc17 	ldw	r2,-16(fp)
  80762c:	10800017 	ldw	r2,0(r2)
  807630:	10800083 	ldbu	r2,2(r2)
  807634:	10bfffc4 	addi	r2,r2,-1
  807638:	1884703a 	and	r2,r3,r2
  80763c:	e0bffa05 	stb	r2,-24(fp)
         if (!csect) {                 /* On the cluster boundary? */
  807640:	e0bffa03 	ldbu	r2,-24(fp)
  807644:	10002a1e 	bne	r2,zero,8076f0 <f_read+0x1b8>
            if (fp->fptr == 0) {       /* On the top of the file? */
  807648:	e0bffc17 	ldw	r2,-16(fp)
  80764c:	10800217 	ldw	r2,8(r2)
  807650:	1000041e 	bne	r2,zero,807664 <f_read+0x12c>
               clst = fp->sclust;         /* Follow from the origin */
  807654:	e0bffc17 	ldw	r2,-16(fp)
  807658:	10800417 	ldw	r2,16(r2)
  80765c:	e0bff415 	stw	r2,-48(fp)
  807660:	00000806 	br	807684 <f_read+0x14c>
#if _USE_FASTSEEK
               if (fp->cltbl)
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = get_fat(fp->fs, fp->clust);  /* Follow cluster chain on the FAT */
  807664:	e0bffc17 	ldw	r2,-16(fp)
  807668:	10c00017 	ldw	r3,0(r2)
  80766c:	e0bffc17 	ldw	r2,-16(fp)
  807670:	10800517 	ldw	r2,20(r2)
  807674:	1809883a 	mov	r4,r3
  807678:	100b883a 	mov	r5,r2
  80767c:	0804c8c0 	call	804c8c <get_fat>
  807680:	e0bff415 	stw	r2,-48(fp)
            }
            if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  807684:	e0bff417 	ldw	r2,-48(fp)
  807688:	108000a8 	cmpgeui	r2,r2,2
  80768c:	1000091e 	bne	r2,zero,8076b4 <f_read+0x17c>
  807690:	e0bffc17 	ldw	r2,-16(fp)
  807694:	10c00183 	ldbu	r3,6(r2)
  807698:	00bfe004 	movi	r2,-128
  80769c:	1884b03a 	or	r2,r3,r2
  8076a0:	1007883a 	mov	r3,r2
  8076a4:	e0bffc17 	ldw	r2,-16(fp)
  8076a8:	10c00185 	stb	r3,6(r2)
  8076ac:	00800084 	movi	r2,2
  8076b0:	0000d506 	br	807a08 <f_read+0x4d0>
            if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  8076b4:	e0bff417 	ldw	r2,-48(fp)
  8076b8:	10bfffd8 	cmpnei	r2,r2,-1
  8076bc:	1000091e 	bne	r2,zero,8076e4 <f_read+0x1ac>
  8076c0:	e0bffc17 	ldw	r2,-16(fp)
  8076c4:	10c00183 	ldbu	r3,6(r2)
  8076c8:	00bfe004 	movi	r2,-128
  8076cc:	1884b03a 	or	r2,r3,r2
  8076d0:	1007883a 	mov	r3,r2
  8076d4:	e0bffc17 	ldw	r2,-16(fp)
  8076d8:	10c00185 	stb	r3,6(r2)
  8076dc:	00800044 	movi	r2,1
  8076e0:	0000c906 	br	807a08 <f_read+0x4d0>
            fp->clust = clst;          /* Update current cluster */
  8076e4:	e0bffc17 	ldw	r2,-16(fp)
  8076e8:	e0fff417 	ldw	r3,-48(fp)
  8076ec:	10c00515 	stw	r3,20(r2)
         }
         sect = clust2sect(fp->fs, fp->clust);  /* Get current sector */
  8076f0:	e0bffc17 	ldw	r2,-16(fp)
  8076f4:	10c00017 	ldw	r3,0(r2)
  8076f8:	e0bffc17 	ldw	r2,-16(fp)
  8076fc:	10800517 	ldw	r2,20(r2)
  807700:	1809883a 	mov	r4,r3
  807704:	100b883a 	mov	r5,r2
  807708:	0804c200 	call	804c20 <clust2sect>
  80770c:	e0bffb15 	stw	r2,-20(fp)
         if (!sect) ABORT(fp->fs, FR_INT_ERR);
  807710:	e0bffb17 	ldw	r2,-20(fp)
  807714:	1000091e 	bne	r2,zero,80773c <f_read+0x204>
  807718:	e0bffc17 	ldw	r2,-16(fp)
  80771c:	10c00183 	ldbu	r3,6(r2)
  807720:	00bfe004 	movi	r2,-128
  807724:	1884b03a 	or	r2,r3,r2
  807728:	1007883a 	mov	r3,r2
  80772c:	e0bffc17 	ldw	r2,-16(fp)
  807730:	10c00185 	stb	r3,6(r2)
  807734:	00800084 	movi	r2,2
  807738:	0000b306 	br	807a08 <f_read+0x4d0>
         sect += csect;
  80773c:	e0bffa03 	ldbu	r2,-24(fp)
  807740:	e0fffb17 	ldw	r3,-20(fp)
  807744:	1885883a 	add	r2,r3,r2
  807748:	e0bffb15 	stw	r2,-20(fp)
         cc = btr / SS(fp->fs);           /* When remaining bytes >= sector size, */
  80774c:	e0bffe17 	ldw	r2,-8(fp)
  807750:	1004d27a 	srli	r2,r2,9
  807754:	e0bff615 	stw	r2,-40(fp)
         if (cc) {                     /* Read maximum contiguous sectors directly */
  807758:	e0bff617 	ldw	r2,-40(fp)
  80775c:	10004026 	beq	r2,zero,807860 <f_read+0x328>
            if (csect + cc > fp->fs->csize)  /* Clip at cluster boundary */
  807760:	e0fffa03 	ldbu	r3,-24(fp)
  807764:	e0bff617 	ldw	r2,-40(fp)
  807768:	1885883a 	add	r2,r3,r2
  80776c:	e0fffc17 	ldw	r3,-16(fp)
  807770:	18c00017 	ldw	r3,0(r3)
  807774:	18c00083 	ldbu	r3,2(r3)
  807778:	18c03fcc 	andi	r3,r3,255
  80777c:	1880072e 	bgeu	r3,r2,80779c <f_read+0x264>
               cc = fp->fs->csize - csect;
  807780:	e0bffc17 	ldw	r2,-16(fp)
  807784:	10800017 	ldw	r2,0(r2)
  807788:	10800083 	ldbu	r2,2(r2)
  80778c:	10c03fcc 	andi	r3,r2,255
  807790:	e0bffa03 	ldbu	r2,-24(fp)
  807794:	1885c83a 	sub	r2,r3,r2
  807798:	e0bff615 	stw	r2,-40(fp)
            if (disk_read(fp->fs->drv, rbuff, sect, (uint8_t)cc) != RES_OK)
  80779c:	e0bffc17 	ldw	r2,-16(fp)
  8077a0:	10800017 	ldw	r2,0(r2)
  8077a4:	10800043 	ldbu	r2,1(r2)
  8077a8:	10c03fcc 	andi	r3,r2,255
  8077ac:	e0bff617 	ldw	r2,-40(fp)
  8077b0:	10803fcc 	andi	r2,r2,255
  8077b4:	1809883a 	mov	r4,r3
  8077b8:	e17ff717 	ldw	r5,-36(fp)
  8077bc:	e1bffb17 	ldw	r6,-20(fp)
  8077c0:	100f883a 	mov	r7,r2
  8077c4:	0803f800 	call	803f80 <ffs_DiskIORead>
  8077c8:	10000926 	beq	r2,zero,8077f0 <f_read+0x2b8>
               ABORT(fp->fs, FR_DISK_ERR);
  8077cc:	e0bffc17 	ldw	r2,-16(fp)
  8077d0:	10c00183 	ldbu	r3,6(r2)
  8077d4:	00bfe004 	movi	r2,-128
  8077d8:	1884b03a 	or	r2,r3,r2
  8077dc:	1007883a 	mov	r3,r2
  8077e0:	e0bffc17 	ldw	r2,-16(fp)
  8077e4:	10c00185 	stb	r3,6(r2)
  8077e8:	00800044 	movi	r2,1
  8077ec:	00008606 	br	807a08 <f_read+0x4d0>
#if !_FS_READONLY && _FS_MINIMIZE <= 2       /* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
            if (fp->fs->wflag && fp->fs->winsect - sect < cc)
               mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
            if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
  8077f0:	e0bffc17 	ldw	r2,-16(fp)
  8077f4:	10800183 	ldbu	r2,6(r2)
  8077f8:	10803fcc 	andi	r2,r2,255
  8077fc:	1080100c 	andi	r2,r2,64
  807800:	10001326 	beq	r2,zero,807850 <f_read+0x318>
  807804:	e0bffc17 	ldw	r2,-16(fp)
  807808:	10c00617 	ldw	r3,24(r2)
  80780c:	e0bffb17 	ldw	r2,-20(fp)
  807810:	1887c83a 	sub	r3,r3,r2
  807814:	e0bff617 	ldw	r2,-40(fp)
  807818:	18800d2e 	bgeu	r3,r2,807850 <f_read+0x318>
               mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
  80781c:	e0bffc17 	ldw	r2,-16(fp)
  807820:	10c00617 	ldw	r3,24(r2)
  807824:	e0bffb17 	ldw	r2,-20(fp)
  807828:	1885c83a 	sub	r2,r3,r2
  80782c:	1004927a 	slli	r2,r2,9
  807830:	e0fff717 	ldw	r3,-36(fp)
  807834:	1887883a 	add	r3,r3,r2
  807838:	e0bffc17 	ldw	r2,-16(fp)
  80783c:	10800904 	addi	r2,r2,36
  807840:	1809883a 	mov	r4,r3
  807844:	100b883a 	mov	r5,r2
  807848:	01808004 	movi	r6,512
  80784c:	08046dc0 	call	8046dc <mem_cpy>
#endif
#endif
            rcnt = SS(fp->fs) * cc;       /* Number of bytes transferred */
  807850:	e0bff617 	ldw	r2,-40(fp)
  807854:	1004927a 	slli	r2,r2,9
  807858:	e0bff515 	stw	r2,-44(fp)
            continue;
  80785c:	00005306 	br	8079ac <f_read+0x474>
         }
#if !_FS_TINY
         if (fp->dsect != sect) {         /* Load data sector if not in cache */
  807860:	e0bffc17 	ldw	r2,-16(fp)
  807864:	10c00617 	ldw	r3,24(r2)
  807868:	e0bffb17 	ldw	r2,-20(fp)
  80786c:	18803726 	beq	r3,r2,80794c <f_read+0x414>
#if !_FS_READONLY
            if (fp->flag & FA__DIRTY) {      /* Write-back dirty sector cache */
  807870:	e0bffc17 	ldw	r2,-16(fp)
  807874:	10800183 	ldbu	r2,6(r2)
  807878:	10803fcc 	andi	r2,r2,255
  80787c:	1080100c 	andi	r2,r2,64
  807880:	10001d26 	beq	r2,zero,8078f8 <f_read+0x3c0>
               if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  807884:	e0bffc17 	ldw	r2,-16(fp)
  807888:	10800017 	ldw	r2,0(r2)
  80788c:	10800043 	ldbu	r2,1(r2)
  807890:	11003fcc 	andi	r4,r2,255
  807894:	e0bffc17 	ldw	r2,-16(fp)
  807898:	10c00904 	addi	r3,r2,36
  80789c:	e0bffc17 	ldw	r2,-16(fp)
  8078a0:	10800617 	ldw	r2,24(r2)
  8078a4:	180b883a 	mov	r5,r3
  8078a8:	100d883a 	mov	r6,r2
  8078ac:	01c00044 	movi	r7,1
  8078b0:	080409c0 	call	80409c <ffs_DiskIOWrite>
  8078b4:	10000926 	beq	r2,zero,8078dc <f_read+0x3a4>
                  ABORT(fp->fs, FR_DISK_ERR);
  8078b8:	e0bffc17 	ldw	r2,-16(fp)
  8078bc:	10c00183 	ldbu	r3,6(r2)
  8078c0:	00bfe004 	movi	r2,-128
  8078c4:	1884b03a 	or	r2,r3,r2
  8078c8:	1007883a 	mov	r3,r2
  8078cc:	e0bffc17 	ldw	r2,-16(fp)
  8078d0:	10c00185 	stb	r3,6(r2)
  8078d4:	00800044 	movi	r2,1
  8078d8:	00004b06 	br	807a08 <f_read+0x4d0>
               fp->flag &= ~FA__DIRTY;
  8078dc:	e0bffc17 	ldw	r2,-16(fp)
  8078e0:	10c00183 	ldbu	r3,6(r2)
  8078e4:	00bfefc4 	movi	r2,-65
  8078e8:	1884703a 	and	r2,r3,r2
  8078ec:	1007883a 	mov	r3,r2
  8078f0:	e0bffc17 	ldw	r2,-16(fp)
  8078f4:	10c00185 	stb	r3,6(r2)
            }
#endif
            if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)  /* Fill sector cache */
  8078f8:	e0bffc17 	ldw	r2,-16(fp)
  8078fc:	10800017 	ldw	r2,0(r2)
  807900:	10800043 	ldbu	r2,1(r2)
  807904:	10c03fcc 	andi	r3,r2,255
  807908:	e0bffc17 	ldw	r2,-16(fp)
  80790c:	10800904 	addi	r2,r2,36
  807910:	1809883a 	mov	r4,r3
  807914:	100b883a 	mov	r5,r2
  807918:	e1bffb17 	ldw	r6,-20(fp)
  80791c:	01c00044 	movi	r7,1
  807920:	0803f800 	call	803f80 <ffs_DiskIORead>
  807924:	10000926 	beq	r2,zero,80794c <f_read+0x414>
               ABORT(fp->fs, FR_DISK_ERR);
  807928:	e0bffc17 	ldw	r2,-16(fp)
  80792c:	10c00183 	ldbu	r3,6(r2)
  807930:	00bfe004 	movi	r2,-128
  807934:	1884b03a 	or	r2,r3,r2
  807938:	1007883a 	mov	r3,r2
  80793c:	e0bffc17 	ldw	r2,-16(fp)
  807940:	10c00185 	stb	r3,6(r2)
  807944:	00800044 	movi	r2,1
  807948:	00002f06 	br	807a08 <f_read+0x4d0>
         }
#endif
         fp->dsect = sect;
  80794c:	e0bffc17 	ldw	r2,-16(fp)
  807950:	e0fffb17 	ldw	r3,-20(fp)
  807954:	10c00615 	stw	r3,24(r2)
      }
      rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs)); /* Get partial sector data from sector buffer */
  807958:	e0bffc17 	ldw	r2,-16(fp)
  80795c:	10800217 	ldw	r2,8(r2)
  807960:	10807fcc 	andi	r2,r2,511
  807964:	00c08004 	movi	r3,512
  807968:	1885c83a 	sub	r2,r3,r2
  80796c:	e0bff515 	stw	r2,-44(fp)
      if (rcnt > btr) rcnt = btr;
  807970:	e0bff517 	ldw	r2,-44(fp)
  807974:	e0fffe17 	ldw	r3,-8(fp)
  807978:	1880022e 	bgeu	r3,r2,807984 <f_read+0x44c>
  80797c:	e0bffe17 	ldw	r2,-8(fp)
  807980:	e0bff515 	stw	r2,-44(fp)
#if _FS_TINY
      if (move_window(fp->fs, fp->dsect))    /* Move sector window */
         ABORT(fp->fs, FR_DISK_ERR);
      mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);  /* Pick partial sector */
#else
      mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
  807984:	e0bffc17 	ldw	r2,-16(fp)
  807988:	10800217 	ldw	r2,8(r2)
  80798c:	10807fcc 	andi	r2,r2,511
  807990:	10800904 	addi	r2,r2,36
  807994:	e0fffc17 	ldw	r3,-16(fp)
  807998:	1885883a 	add	r2,r3,r2
  80799c:	e13ff717 	ldw	r4,-36(fp)
  8079a0:	100b883a 	mov	r5,r2
  8079a4:	e1bff517 	ldw	r6,-44(fp)
  8079a8:	08046dc0 	call	8046dc <mem_cpy>
      LEAVE_FF(fp->fs, FR_DENIED);
   remain = fp->fsize - fp->fptr;
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */

   for ( ;  btr;                       /* Repeat until all data read */
      rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  8079ac:	e0fff717 	ldw	r3,-36(fp)
  8079b0:	e0bff517 	ldw	r2,-44(fp)
  8079b4:	1885883a 	add	r2,r3,r2
  8079b8:	e0bff715 	stw	r2,-36(fp)
  8079bc:	e0bffc17 	ldw	r2,-16(fp)
  8079c0:	10c00217 	ldw	r3,8(r2)
  8079c4:	e0bff517 	ldw	r2,-44(fp)
  8079c8:	1887883a 	add	r3,r3,r2
  8079cc:	e0bffc17 	ldw	r2,-16(fp)
  8079d0:	10c00215 	stw	r3,8(r2)
  8079d4:	e0bfff17 	ldw	r2,-4(fp)
  8079d8:	10c00017 	ldw	r3,0(r2)
  8079dc:	e0bff517 	ldw	r2,-44(fp)
  8079e0:	1887883a 	add	r3,r3,r2
  8079e4:	e0bfff17 	ldw	r2,-4(fp)
  8079e8:	10c00015 	stw	r3,0(r2)
  8079ec:	e0fffe17 	ldw	r3,-8(fp)
  8079f0:	e0bff517 	ldw	r2,-44(fp)
  8079f4:	1885c83a 	sub	r2,r3,r2
  8079f8:	e0bffe15 	stw	r2,-8(fp)
   if (!(fp->flag & FA_READ))                /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   remain = fp->fsize - fp->fptr;
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */

   for ( ;  btr;                       /* Repeat until all data read */
  8079fc:	e0bffe17 	ldw	r2,-8(fp)
  807a00:	103f011e 	bne	r2,zero,807608 <__alt_data_end+0xff807608>
#else
      mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
#endif
   }

   LEAVE_FF(fp->fs, FR_OK);
  807a04:	0005883a 	mov	r2,zero
}
  807a08:	e037883a 	mov	sp,fp
  807a0c:	dfc00117 	ldw	ra,4(sp)
  807a10:	df000017 	ldw	fp,0(sp)
  807a14:	dec00204 	addi	sp,sp,8
  807a18:	f800283a 	ret

00807a1c <f_write>:
   FIL *fp,       /* Pointer to the file object */
   const void *buff, /* Pointer to the data to be written */
   uint32_t btw,         /* Number of bytes to write */
   uint32_t *bw       /* Pointer to number of bytes written */
)
{
  807a1c:	defff304 	addi	sp,sp,-52
  807a20:	dfc00c15 	stw	ra,48(sp)
  807a24:	df000b15 	stw	fp,44(sp)
  807a28:	df000b04 	addi	fp,sp,44
  807a2c:	e13ffc15 	stw	r4,-16(fp)
  807a30:	e17ffd15 	stw	r5,-12(fp)
  807a34:	e1bffe15 	stw	r6,-8(fp)
  807a38:	e1ffff15 	stw	r7,-4(fp)
   FRESULT res;
   uint32_t clst, sect;
   uint32_t wcnt, cc;
   const uint8_t *wbuff = buff;
  807a3c:	e0bffd17 	ldw	r2,-12(fp)
  807a40:	e0bff815 	stw	r2,-32(fp)
   uint8_t csect;


   *bw = 0; /* Initialize byte counter */
  807a44:	e0bfff17 	ldw	r2,-4(fp)
  807a48:	10000015 	stw	zero,0(r2)

   res = validate(fp->fs, fp->id);        /* Check validity */
  807a4c:	e0bffc17 	ldw	r2,-16(fp)
  807a50:	10c00017 	ldw	r3,0(r2)
  807a54:	e0bffc17 	ldw	r2,-16(fp)
  807a58:	1080010b 	ldhu	r2,4(r2)
  807a5c:	10bfffcc 	andi	r2,r2,65535
  807a60:	1809883a 	mov	r4,r3
  807a64:	100b883a 	mov	r5,r2
  807a68:	0806f900 	call	806f90 <validate>
  807a6c:	e0bff915 	stw	r2,-28(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
  807a70:	e0bff917 	ldw	r2,-28(fp)
  807a74:	10000226 	beq	r2,zero,807a80 <f_write+0x64>
  807a78:	e0bff917 	ldw	r2,-28(fp)
  807a7c:	00014106 	br	807f84 <f_write+0x568>
   if (fp->flag & FA__ERROR)           /* Aborted file? */
  807a80:	e0bffc17 	ldw	r2,-16(fp)
  807a84:	10800183 	ldbu	r2,6(r2)
  807a88:	10803fcc 	andi	r2,r2,255
  807a8c:	1080201c 	xori	r2,r2,128
  807a90:	10bfe004 	addi	r2,r2,-128
  807a94:	1000020e 	bge	r2,zero,807aa0 <f_write+0x84>
      LEAVE_FF(fp->fs, FR_INT_ERR);
  807a98:	00800084 	movi	r2,2
  807a9c:	00013906 	br	807f84 <f_write+0x568>
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
  807aa0:	e0bffc17 	ldw	r2,-16(fp)
  807aa4:	10800183 	ldbu	r2,6(r2)
  807aa8:	10803fcc 	andi	r2,r2,255
  807aac:	1080008c 	andi	r2,r2,2
  807ab0:	1000021e 	bne	r2,zero,807abc <f_write+0xa0>
      LEAVE_FF(fp->fs, FR_DENIED);
  807ab4:	008001c4 	movi	r2,7
  807ab8:	00013206 	br	807f84 <f_write+0x568>
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */
  807abc:	e0bffc17 	ldw	r2,-16(fp)
  807ac0:	10c00317 	ldw	r3,12(r2)
  807ac4:	e0bffe17 	ldw	r2,-8(fp)
  807ac8:	1887883a 	add	r3,r3,r2
  807acc:	e0bffc17 	ldw	r2,-16(fp)
  807ad0:	10800317 	ldw	r2,12(r2)
  807ad4:	1880012e 	bgeu	r3,r2,807adc <f_write+0xc0>
  807ad8:	e03ffe15 	stw	zero,-8(fp)

   for ( ;  btw;                    /* Repeat until all data written */
  807adc:	00011706 	br	807f3c <f_write+0x520>
      wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
      if ((fp->fptr % SS(fp->fs)) == 0) { /* On the sector boundary? */
  807ae0:	e0bffc17 	ldw	r2,-16(fp)
  807ae4:	10800217 	ldw	r2,8(r2)
  807ae8:	10807fcc 	andi	r2,r2,511
  807aec:	1000e41e 	bne	r2,zero,807e80 <f_write+0x464>
         csect = (uint8_t)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));   /* Sector offset in the cluster */
  807af0:	e0bffc17 	ldw	r2,-16(fp)
  807af4:	10800217 	ldw	r2,8(r2)
  807af8:	1004d27a 	srli	r2,r2,9
  807afc:	1007883a 	mov	r3,r2
  807b00:	e0bffc17 	ldw	r2,-16(fp)
  807b04:	10800017 	ldw	r2,0(r2)
  807b08:	10800083 	ldbu	r2,2(r2)
  807b0c:	10bfffc4 	addi	r2,r2,-1
  807b10:	1884703a 	and	r2,r3,r2
  807b14:	e0bffa05 	stb	r2,-24(fp)
         if (!csect) {              /* On the cluster boundary? */
  807b18:	e0bffa03 	ldbu	r2,-24(fp)
  807b1c:	1000381e 	bne	r2,zero,807c00 <f_write+0x1e4>
            if (fp->fptr == 0) {    /* On the top of the file? */
  807b20:	e0bffc17 	ldw	r2,-16(fp)
  807b24:	10800217 	ldw	r2,8(r2)
  807b28:	10000f1e 	bne	r2,zero,807b68 <f_write+0x14c>
               clst = fp->sclust;      /* Follow from the origin */
  807b2c:	e0bffc17 	ldw	r2,-16(fp)
  807b30:	10800417 	ldw	r2,16(r2)
  807b34:	e0bff515 	stw	r2,-44(fp)
               if (clst == 0)       /* When no cluster is allocated, */
  807b38:	e0bff517 	ldw	r2,-44(fp)
  807b3c:	1000121e 	bne	r2,zero,807b88 <f_write+0x16c>
                  fp->sclust = clst = create_chain(fp->fs, 0); /* Create a new cluster chain */
  807b40:	e0bffc17 	ldw	r2,-16(fp)
  807b44:	10800017 	ldw	r2,0(r2)
  807b48:	1009883a 	mov	r4,r2
  807b4c:	000b883a 	mov	r5,zero
  807b50:	08053940 	call	805394 <create_chain>
  807b54:	e0bff515 	stw	r2,-44(fp)
  807b58:	e0bffc17 	ldw	r2,-16(fp)
  807b5c:	e0fff517 	ldw	r3,-44(fp)
  807b60:	10c00415 	stw	r3,16(r2)
  807b64:	00000806 	br	807b88 <f_write+0x16c>
#if _USE_FASTSEEK
               if (fp->cltbl)
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = create_chain(fp->fs, fp->clust);   /* Follow or stretch cluster chain on the FAT */
  807b68:	e0bffc17 	ldw	r2,-16(fp)
  807b6c:	10c00017 	ldw	r3,0(r2)
  807b70:	e0bffc17 	ldw	r2,-16(fp)
  807b74:	10800517 	ldw	r2,20(r2)
  807b78:	1809883a 	mov	r4,r3
  807b7c:	100b883a 	mov	r5,r2
  807b80:	08053940 	call	805394 <create_chain>
  807b84:	e0bff515 	stw	r2,-44(fp)
            }
            if (clst == 0) break;      /* Could not allocate a new cluster (disk full) */
  807b88:	e0bff517 	ldw	r2,-44(fp)
  807b8c:	1000011e 	bne	r2,zero,807b94 <f_write+0x178>
  807b90:	0000ec06 	br	807f44 <f_write+0x528>
            if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  807b94:	e0bff517 	ldw	r2,-44(fp)
  807b98:	10800058 	cmpnei	r2,r2,1
  807b9c:	1000091e 	bne	r2,zero,807bc4 <f_write+0x1a8>
  807ba0:	e0bffc17 	ldw	r2,-16(fp)
  807ba4:	10c00183 	ldbu	r3,6(r2)
  807ba8:	00bfe004 	movi	r2,-128
  807bac:	1884b03a 	or	r2,r3,r2
  807bb0:	1007883a 	mov	r3,r2
  807bb4:	e0bffc17 	ldw	r2,-16(fp)
  807bb8:	10c00185 	stb	r3,6(r2)
  807bbc:	00800084 	movi	r2,2
  807bc0:	0000f006 	br	807f84 <f_write+0x568>
            if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  807bc4:	e0bff517 	ldw	r2,-44(fp)
  807bc8:	10bfffd8 	cmpnei	r2,r2,-1
  807bcc:	1000091e 	bne	r2,zero,807bf4 <f_write+0x1d8>
  807bd0:	e0bffc17 	ldw	r2,-16(fp)
  807bd4:	10c00183 	ldbu	r3,6(r2)
  807bd8:	00bfe004 	movi	r2,-128
  807bdc:	1884b03a 	or	r2,r3,r2
  807be0:	1007883a 	mov	r3,r2
  807be4:	e0bffc17 	ldw	r2,-16(fp)
  807be8:	10c00185 	stb	r3,6(r2)
  807bec:	00800044 	movi	r2,1
  807bf0:	0000e406 	br	807f84 <f_write+0x568>
            fp->clust = clst;       /* Update current cluster */
  807bf4:	e0bffc17 	ldw	r2,-16(fp)
  807bf8:	e0fff517 	ldw	r3,-44(fp)
  807bfc:	10c00515 	stw	r3,20(r2)
         }
#if _FS_TINY
         if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0)) /* Write-back sector cache */
            ABORT(fp->fs, FR_DISK_ERR);
#else
         if (fp->flag & FA__DIRTY) {      /* Write-back sector cache */
  807c00:	e0bffc17 	ldw	r2,-16(fp)
  807c04:	10800183 	ldbu	r2,6(r2)
  807c08:	10803fcc 	andi	r2,r2,255
  807c0c:	1080100c 	andi	r2,r2,64
  807c10:	10001d26 	beq	r2,zero,807c88 <f_write+0x26c>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  807c14:	e0bffc17 	ldw	r2,-16(fp)
  807c18:	10800017 	ldw	r2,0(r2)
  807c1c:	10800043 	ldbu	r2,1(r2)
  807c20:	11003fcc 	andi	r4,r2,255
  807c24:	e0bffc17 	ldw	r2,-16(fp)
  807c28:	10c00904 	addi	r3,r2,36
  807c2c:	e0bffc17 	ldw	r2,-16(fp)
  807c30:	10800617 	ldw	r2,24(r2)
  807c34:	180b883a 	mov	r5,r3
  807c38:	100d883a 	mov	r6,r2
  807c3c:	01c00044 	movi	r7,1
  807c40:	080409c0 	call	80409c <ffs_DiskIOWrite>
  807c44:	10000926 	beq	r2,zero,807c6c <f_write+0x250>
               ABORT(fp->fs, FR_DISK_ERR);
  807c48:	e0bffc17 	ldw	r2,-16(fp)
  807c4c:	10c00183 	ldbu	r3,6(r2)
  807c50:	00bfe004 	movi	r2,-128
  807c54:	1884b03a 	or	r2,r3,r2
  807c58:	1007883a 	mov	r3,r2
  807c5c:	e0bffc17 	ldw	r2,-16(fp)
  807c60:	10c00185 	stb	r3,6(r2)
  807c64:	00800044 	movi	r2,1
  807c68:	0000c606 	br	807f84 <f_write+0x568>
            fp->flag &= ~FA__DIRTY;
  807c6c:	e0bffc17 	ldw	r2,-16(fp)
  807c70:	10c00183 	ldbu	r3,6(r2)
  807c74:	00bfefc4 	movi	r2,-65
  807c78:	1884703a 	and	r2,r3,r2
  807c7c:	1007883a 	mov	r3,r2
  807c80:	e0bffc17 	ldw	r2,-16(fp)
  807c84:	10c00185 	stb	r3,6(r2)
         }
#endif
         sect = clust2sect(fp->fs, fp->clust);  /* Get current sector */
  807c88:	e0bffc17 	ldw	r2,-16(fp)
  807c8c:	10c00017 	ldw	r3,0(r2)
  807c90:	e0bffc17 	ldw	r2,-16(fp)
  807c94:	10800517 	ldw	r2,20(r2)
  807c98:	1809883a 	mov	r4,r3
  807c9c:	100b883a 	mov	r5,r2
  807ca0:	0804c200 	call	804c20 <clust2sect>
  807ca4:	e0bffb15 	stw	r2,-20(fp)
         if (!sect) ABORT(fp->fs, FR_INT_ERR);
  807ca8:	e0bffb17 	ldw	r2,-20(fp)
  807cac:	1000091e 	bne	r2,zero,807cd4 <f_write+0x2b8>
  807cb0:	e0bffc17 	ldw	r2,-16(fp)
  807cb4:	10c00183 	ldbu	r3,6(r2)
  807cb8:	00bfe004 	movi	r2,-128
  807cbc:	1884b03a 	or	r2,r3,r2
  807cc0:	1007883a 	mov	r3,r2
  807cc4:	e0bffc17 	ldw	r2,-16(fp)
  807cc8:	10c00185 	stb	r3,6(r2)
  807ccc:	00800084 	movi	r2,2
  807cd0:	0000ac06 	br	807f84 <f_write+0x568>
         sect += csect;
  807cd4:	e0bffa03 	ldbu	r2,-24(fp)
  807cd8:	e0fffb17 	ldw	r3,-20(fp)
  807cdc:	1885883a 	add	r2,r3,r2
  807ce0:	e0bffb15 	stw	r2,-20(fp)
         cc = btw / SS(fp->fs);        /* When remaining bytes >= sector size, */
  807ce4:	e0bffe17 	ldw	r2,-8(fp)
  807ce8:	1004d27a 	srli	r2,r2,9
  807cec:	e0bff715 	stw	r2,-36(fp)
         if (cc) {                  /* Write maximum contiguous sectors directly */
  807cf0:	e0bff717 	ldw	r2,-36(fp)
  807cf4:	10004126 	beq	r2,zero,807dfc <f_write+0x3e0>
            if (csect + cc > fp->fs->csize)  /* Clip at cluster boundary */
  807cf8:	e0fffa03 	ldbu	r3,-24(fp)
  807cfc:	e0bff717 	ldw	r2,-36(fp)
  807d00:	1885883a 	add	r2,r3,r2
  807d04:	e0fffc17 	ldw	r3,-16(fp)
  807d08:	18c00017 	ldw	r3,0(r3)
  807d0c:	18c00083 	ldbu	r3,2(r3)
  807d10:	18c03fcc 	andi	r3,r3,255
  807d14:	1880072e 	bgeu	r3,r2,807d34 <f_write+0x318>
               cc = fp->fs->csize - csect;
  807d18:	e0bffc17 	ldw	r2,-16(fp)
  807d1c:	10800017 	ldw	r2,0(r2)
  807d20:	10800083 	ldbu	r2,2(r2)
  807d24:	10c03fcc 	andi	r3,r2,255
  807d28:	e0bffa03 	ldbu	r2,-24(fp)
  807d2c:	1885c83a 	sub	r2,r3,r2
  807d30:	e0bff715 	stw	r2,-36(fp)
            if (disk_write(fp->fs->drv, wbuff, sect, (uint8_t)cc) != RES_OK)
  807d34:	e0bffc17 	ldw	r2,-16(fp)
  807d38:	10800017 	ldw	r2,0(r2)
  807d3c:	10800043 	ldbu	r2,1(r2)
  807d40:	10c03fcc 	andi	r3,r2,255
  807d44:	e0bff717 	ldw	r2,-36(fp)
  807d48:	10803fcc 	andi	r2,r2,255
  807d4c:	1809883a 	mov	r4,r3
  807d50:	e17ff817 	ldw	r5,-32(fp)
  807d54:	e1bffb17 	ldw	r6,-20(fp)
  807d58:	100f883a 	mov	r7,r2
  807d5c:	080409c0 	call	80409c <ffs_DiskIOWrite>
  807d60:	10000926 	beq	r2,zero,807d88 <f_write+0x36c>
               ABORT(fp->fs, FR_DISK_ERR);
  807d64:	e0bffc17 	ldw	r2,-16(fp)
  807d68:	10c00183 	ldbu	r3,6(r2)
  807d6c:	00bfe004 	movi	r2,-128
  807d70:	1884b03a 	or	r2,r3,r2
  807d74:	1007883a 	mov	r3,r2
  807d78:	e0bffc17 	ldw	r2,-16(fp)
  807d7c:	10c00185 	stb	r3,6(r2)
  807d80:	00800044 	movi	r2,1
  807d84:	00007f06 	br	807f84 <f_write+0x568>
            if (fp->fs->winsect - sect < cc) {  /* Refill sector cache if it gets invalidated by the direct write */
               mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
               fp->fs->wflag = 0;
            }
#else
            if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  807d88:	e0bffc17 	ldw	r2,-16(fp)
  807d8c:	10c00617 	ldw	r3,24(r2)
  807d90:	e0bffb17 	ldw	r2,-20(fp)
  807d94:	1887c83a 	sub	r3,r3,r2
  807d98:	e0bff717 	ldw	r2,-36(fp)
  807d9c:	1880132e 	bgeu	r3,r2,807dec <f_write+0x3d0>
               mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  807da0:	e0bffc17 	ldw	r2,-16(fp)
  807da4:	11000904 	addi	r4,r2,36
  807da8:	e0bffc17 	ldw	r2,-16(fp)
  807dac:	10c00617 	ldw	r3,24(r2)
  807db0:	e0bffb17 	ldw	r2,-20(fp)
  807db4:	1885c83a 	sub	r2,r3,r2
  807db8:	1004927a 	slli	r2,r2,9
  807dbc:	e0fff817 	ldw	r3,-32(fp)
  807dc0:	1885883a 	add	r2,r3,r2
  807dc4:	100b883a 	mov	r5,r2
  807dc8:	01808004 	movi	r6,512
  807dcc:	08046dc0 	call	8046dc <mem_cpy>
               fp->flag &= ~FA__DIRTY;
  807dd0:	e0bffc17 	ldw	r2,-16(fp)
  807dd4:	10c00183 	ldbu	r3,6(r2)
  807dd8:	00bfefc4 	movi	r2,-65
  807ddc:	1884703a 	and	r2,r3,r2
  807de0:	1007883a 	mov	r3,r2
  807de4:	e0bffc17 	ldw	r2,-16(fp)
  807de8:	10c00185 	stb	r3,6(r2)
            }
#endif
            wcnt = SS(fp->fs) * cc;    /* Number of bytes transferred */
  807dec:	e0bff717 	ldw	r2,-36(fp)
  807df0:	1004927a 	slli	r2,r2,9
  807df4:	e0bff615 	stw	r2,-40(fp)
            continue;
  807df8:	00003c06 	br	807eec <f_write+0x4d0>
         if (fp->fptr >= fp->fsize) {  /* Avoid silly cache filling at growing edge */
            if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
            fp->fs->winsect = sect;
         }
#else
         if (fp->dsect != sect) {      /* Fill sector cache with file data */
  807dfc:	e0bffc17 	ldw	r2,-16(fp)
  807e00:	10c00617 	ldw	r3,24(r2)
  807e04:	e0bffb17 	ldw	r2,-20(fp)
  807e08:	18801a26 	beq	r3,r2,807e74 <f_write+0x458>
            if (fp->fptr < fp->fsize &&
  807e0c:	e0bffc17 	ldw	r2,-16(fp)
  807e10:	10c00217 	ldw	r3,8(r2)
  807e14:	e0bffc17 	ldw	r2,-16(fp)
  807e18:	10800317 	ldw	r2,12(r2)
  807e1c:	1880152e 	bgeu	r3,r2,807e74 <f_write+0x458>
               disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  807e20:	e0bffc17 	ldw	r2,-16(fp)
  807e24:	10800017 	ldw	r2,0(r2)
  807e28:	10800043 	ldbu	r2,1(r2)
  807e2c:	10c03fcc 	andi	r3,r2,255
  807e30:	e0bffc17 	ldw	r2,-16(fp)
  807e34:	10800904 	addi	r2,r2,36
  807e38:	1809883a 	mov	r4,r3
  807e3c:	100b883a 	mov	r5,r2
  807e40:	e1bffb17 	ldw	r6,-20(fp)
  807e44:	01c00044 	movi	r7,1
  807e48:	0803f800 	call	803f80 <ffs_DiskIORead>
            if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
            fp->fs->winsect = sect;
         }
#else
         if (fp->dsect != sect) {      /* Fill sector cache with file data */
            if (fp->fptr < fp->fsize &&
  807e4c:	10000926 	beq	r2,zero,807e74 <f_write+0x458>
               disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
                  ABORT(fp->fs, FR_DISK_ERR);
  807e50:	e0bffc17 	ldw	r2,-16(fp)
  807e54:	10c00183 	ldbu	r3,6(r2)
  807e58:	00bfe004 	movi	r2,-128
  807e5c:	1884b03a 	or	r2,r3,r2
  807e60:	1007883a 	mov	r3,r2
  807e64:	e0bffc17 	ldw	r2,-16(fp)
  807e68:	10c00185 	stb	r3,6(r2)
  807e6c:	00800044 	movi	r2,1
  807e70:	00004406 	br	807f84 <f_write+0x568>
         }
#endif
         fp->dsect = sect;
  807e74:	e0bffc17 	ldw	r2,-16(fp)
  807e78:	e0fffb17 	ldw	r3,-20(fp)
  807e7c:	10c00615 	stw	r3,24(r2)
      }
      wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  807e80:	e0bffc17 	ldw	r2,-16(fp)
  807e84:	10800217 	ldw	r2,8(r2)
  807e88:	10807fcc 	andi	r2,r2,511
  807e8c:	00c08004 	movi	r3,512
  807e90:	1885c83a 	sub	r2,r3,r2
  807e94:	e0bff615 	stw	r2,-40(fp)
      if (wcnt > btw) wcnt = btw;
  807e98:	e0bff617 	ldw	r2,-40(fp)
  807e9c:	e0fffe17 	ldw	r3,-8(fp)
  807ea0:	1880022e 	bgeu	r3,r2,807eac <f_write+0x490>
  807ea4:	e0bffe17 	ldw	r2,-8(fp)
  807ea8:	e0bff615 	stw	r2,-40(fp)
      if (move_window(fp->fs, fp->dsect)) /* Move sector window */
         ABORT(fp->fs, FR_DISK_ERR);
      mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
      fp->fs->wflag = 1;
#else
      mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);   /* Fit partial sector */
  807eac:	e0bffc17 	ldw	r2,-16(fp)
  807eb0:	10800217 	ldw	r2,8(r2)
  807eb4:	10807fcc 	andi	r2,r2,511
  807eb8:	10800904 	addi	r2,r2,36
  807ebc:	e0fffc17 	ldw	r3,-16(fp)
  807ec0:	1885883a 	add	r2,r3,r2
  807ec4:	1009883a 	mov	r4,r2
  807ec8:	e17ff817 	ldw	r5,-32(fp)
  807ecc:	e1bff617 	ldw	r6,-40(fp)
  807ed0:	08046dc0 	call	8046dc <mem_cpy>
      fp->flag |= FA__DIRTY;
  807ed4:	e0bffc17 	ldw	r2,-16(fp)
  807ed8:	10800183 	ldbu	r2,6(r2)
  807edc:	10801014 	ori	r2,r2,64
  807ee0:	1007883a 	mov	r3,r2
  807ee4:	e0bffc17 	ldw	r2,-16(fp)
  807ee8:	10c00185 	stb	r3,6(r2)
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */

   for ( ;  btw;                    /* Repeat until all data written */
      wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  807eec:	e0fff817 	ldw	r3,-32(fp)
  807ef0:	e0bff617 	ldw	r2,-40(fp)
  807ef4:	1885883a 	add	r2,r3,r2
  807ef8:	e0bff815 	stw	r2,-32(fp)
  807efc:	e0bffc17 	ldw	r2,-16(fp)
  807f00:	10c00217 	ldw	r3,8(r2)
  807f04:	e0bff617 	ldw	r2,-40(fp)
  807f08:	1887883a 	add	r3,r3,r2
  807f0c:	e0bffc17 	ldw	r2,-16(fp)
  807f10:	10c00215 	stw	r3,8(r2)
  807f14:	e0bfff17 	ldw	r2,-4(fp)
  807f18:	10c00017 	ldw	r3,0(r2)
  807f1c:	e0bff617 	ldw	r2,-40(fp)
  807f20:	1887883a 	add	r3,r3,r2
  807f24:	e0bfff17 	ldw	r2,-4(fp)
  807f28:	10c00015 	stw	r3,0(r2)
  807f2c:	e0fffe17 	ldw	r3,-8(fp)
  807f30:	e0bff617 	ldw	r2,-40(fp)
  807f34:	1885c83a 	sub	r2,r3,r2
  807f38:	e0bffe15 	stw	r2,-8(fp)
      LEAVE_FF(fp->fs, FR_INT_ERR);
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */

   for ( ;  btw;                    /* Repeat until all data written */
  807f3c:	e0bffe17 	ldw	r2,-8(fp)
  807f40:	103ee71e 	bne	r2,zero,807ae0 <__alt_data_end+0xff807ae0>
      mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);   /* Fit partial sector */
      fp->flag |= FA__DIRTY;
#endif
   }

   if (fp->fptr > fp->fsize) fp->fsize = fp->fptr; /* Update file size if needed */
  807f44:	e0bffc17 	ldw	r2,-16(fp)
  807f48:	10800217 	ldw	r2,8(r2)
  807f4c:	e0fffc17 	ldw	r3,-16(fp)
  807f50:	18c00317 	ldw	r3,12(r3)
  807f54:	1880042e 	bgeu	r3,r2,807f68 <f_write+0x54c>
  807f58:	e0bffc17 	ldw	r2,-16(fp)
  807f5c:	10c00217 	ldw	r3,8(r2)
  807f60:	e0bffc17 	ldw	r2,-16(fp)
  807f64:	10c00315 	stw	r3,12(r2)
   fp->flag |= FA__WRITTEN;                  /* Set file change flag */
  807f68:	e0bffc17 	ldw	r2,-16(fp)
  807f6c:	10800183 	ldbu	r2,6(r2)
  807f70:	10800814 	ori	r2,r2,32
  807f74:	1007883a 	mov	r3,r2
  807f78:	e0bffc17 	ldw	r2,-16(fp)
  807f7c:	10c00185 	stb	r3,6(r2)

   LEAVE_FF(fp->fs, FR_OK);
  807f80:	0005883a 	mov	r2,zero
}
  807f84:	e037883a 	mov	sp,fp
  807f88:	dfc00117 	ldw	ra,4(sp)
  807f8c:	df000017 	ldw	fp,0(sp)
  807f90:	dec00204 	addi	sp,sp,8
  807f94:	f800283a 	ret

00807f98 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
   FIL *fp     /* Pointer to the file object */
)
{
  807f98:	defffa04 	addi	sp,sp,-24
  807f9c:	dfc00515 	stw	ra,20(sp)
  807fa0:	df000415 	stw	fp,16(sp)
  807fa4:	df000404 	addi	fp,sp,16
  807fa8:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   uint32_t tim;
   uint8_t *dir;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
  807fac:	e0bfff17 	ldw	r2,-4(fp)
  807fb0:	10c00017 	ldw	r3,0(r2)
  807fb4:	e0bfff17 	ldw	r2,-4(fp)
  807fb8:	1080010b 	ldhu	r2,4(r2)
  807fbc:	10bfffcc 	andi	r2,r2,65535
  807fc0:	1809883a 	mov	r4,r3
  807fc4:	100b883a 	mov	r5,r2
  807fc8:	0806f900 	call	806f90 <validate>
  807fcc:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK) {
  807fd0:	e0bffc17 	ldw	r2,-16(fp)
  807fd4:	10008c1e 	bne	r2,zero,808208 <f_sync+0x270>
      if (fp->flag & FA__WRITTEN) { /* Has the file been written? */
  807fd8:	e0bfff17 	ldw	r2,-4(fp)
  807fdc:	10800183 	ldbu	r2,6(r2)
  807fe0:	10803fcc 	andi	r2,r2,255
  807fe4:	1080080c 	andi	r2,r2,32
  807fe8:	10008726 	beq	r2,zero,808208 <f_sync+0x270>
#if !_FS_TINY  /* Write-back dirty buffer */
         if (fp->flag & FA__DIRTY) {
  807fec:	e0bfff17 	ldw	r2,-4(fp)
  807ff0:	10800183 	ldbu	r2,6(r2)
  807ff4:	10803fcc 	andi	r2,r2,255
  807ff8:	1080100c 	andi	r2,r2,64
  807ffc:	10001626 	beq	r2,zero,808058 <f_sync+0xc0>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  808000:	e0bfff17 	ldw	r2,-4(fp)
  808004:	10800017 	ldw	r2,0(r2)
  808008:	10800043 	ldbu	r2,1(r2)
  80800c:	11003fcc 	andi	r4,r2,255
  808010:	e0bfff17 	ldw	r2,-4(fp)
  808014:	10c00904 	addi	r3,r2,36
  808018:	e0bfff17 	ldw	r2,-4(fp)
  80801c:	10800617 	ldw	r2,24(r2)
  808020:	180b883a 	mov	r5,r3
  808024:	100d883a 	mov	r6,r2
  808028:	01c00044 	movi	r7,1
  80802c:	080409c0 	call	80409c <ffs_DiskIOWrite>
  808030:	10000226 	beq	r2,zero,80803c <f_sync+0xa4>
               LEAVE_FF(fp->fs, FR_DISK_ERR);
  808034:	00800044 	movi	r2,1
  808038:	00007406 	br	80820c <f_sync+0x274>
            fp->flag &= ~FA__DIRTY;
  80803c:	e0bfff17 	ldw	r2,-4(fp)
  808040:	10c00183 	ldbu	r3,6(r2)
  808044:	00bfefc4 	movi	r2,-65
  808048:	1884703a 	and	r2,r3,r2
  80804c:	1007883a 	mov	r3,r2
  808050:	e0bfff17 	ldw	r2,-4(fp)
  808054:	10c00185 	stb	r3,6(r2)
         }
#endif
         /* Update the directory entry */
         res = move_window(fp->fs, fp->dir_sect);
  808058:	e0bfff17 	ldw	r2,-4(fp)
  80805c:	10c00017 	ldw	r3,0(r2)
  808060:	e0bfff17 	ldw	r2,-4(fp)
  808064:	10800717 	ldw	r2,28(r2)
  808068:	1809883a 	mov	r4,r3
  80806c:	100b883a 	mov	r5,r2
  808070:	08048a80 	call	8048a8 <move_window>
  808074:	e0bffc15 	stw	r2,-16(fp)
         if (res == FR_OK) {
  808078:	e0bffc17 	ldw	r2,-16(fp)
  80807c:	1000621e 	bne	r2,zero,808208 <f_sync+0x270>
            dir = fp->dir_ptr;
  808080:	e0bfff17 	ldw	r2,-4(fp)
  808084:	10800817 	ldw	r2,32(r2)
  808088:	e0bffd15 	stw	r2,-12(fp)
            dir[DIR_Attr] |= AM_ARC;               /* Set archive bit */
  80808c:	e0bffd17 	ldw	r2,-12(fp)
  808090:	108002c4 	addi	r2,r2,11
  808094:	e0fffd17 	ldw	r3,-12(fp)
  808098:	18c002c4 	addi	r3,r3,11
  80809c:	18c00003 	ldbu	r3,0(r3)
  8080a0:	18c00814 	ori	r3,r3,32
  8080a4:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_FileSize, fp->fsize);    /* Update file size */
  8080a8:	e0bffd17 	ldw	r2,-12(fp)
  8080ac:	10800704 	addi	r2,r2,28
  8080b0:	e0ffff17 	ldw	r3,-4(fp)
  8080b4:	18c00317 	ldw	r3,12(r3)
  8080b8:	10c00005 	stb	r3,0(r2)
  8080bc:	e0bffd17 	ldw	r2,-12(fp)
  8080c0:	10800744 	addi	r2,r2,29
  8080c4:	e0ffff17 	ldw	r3,-4(fp)
  8080c8:	18c00317 	ldw	r3,12(r3)
  8080cc:	18ffffcc 	andi	r3,r3,65535
  8080d0:	1806d23a 	srli	r3,r3,8
  8080d4:	10c00005 	stb	r3,0(r2)
  8080d8:	e0bffd17 	ldw	r2,-12(fp)
  8080dc:	10800784 	addi	r2,r2,30
  8080e0:	e0ffff17 	ldw	r3,-4(fp)
  8080e4:	18c00317 	ldw	r3,12(r3)
  8080e8:	1806d43a 	srli	r3,r3,16
  8080ec:	10c00005 	stb	r3,0(r2)
  8080f0:	e0bffd17 	ldw	r2,-12(fp)
  8080f4:	108007c4 	addi	r2,r2,31
  8080f8:	e0ffff17 	ldw	r3,-4(fp)
  8080fc:	18c00317 	ldw	r3,12(r3)
  808100:	1806d63a 	srli	r3,r3,24
  808104:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, fp->sclust);             /* Update start cluster */
  808108:	e0bffd17 	ldw	r2,-12(fp)
  80810c:	10800684 	addi	r2,r2,26
  808110:	e0ffff17 	ldw	r3,-4(fp)
  808114:	18c00417 	ldw	r3,16(r3)
  808118:	10c00005 	stb	r3,0(r2)
  80811c:	e0bffd17 	ldw	r2,-12(fp)
  808120:	108006c4 	addi	r2,r2,27
  808124:	e0ffff17 	ldw	r3,-4(fp)
  808128:	18c00417 	ldw	r3,16(r3)
  80812c:	18ffffcc 	andi	r3,r3,65535
  808130:	1806d23a 	srli	r3,r3,8
  808134:	10c00005 	stb	r3,0(r2)
  808138:	e0bffd17 	ldw	r2,-12(fp)
  80813c:	10800504 	addi	r2,r2,20
  808140:	e0ffff17 	ldw	r3,-4(fp)
  808144:	18c00417 	ldw	r3,16(r3)
  808148:	1806d43a 	srli	r3,r3,16
  80814c:	10c00005 	stb	r3,0(r2)
  808150:	e0bffd17 	ldw	r2,-12(fp)
  808154:	10800544 	addi	r2,r2,21
  808158:	e0ffff17 	ldw	r3,-4(fp)
  80815c:	18c00417 	ldw	r3,16(r3)
  808160:	1806d43a 	srli	r3,r3,16
  808164:	18ffffcc 	andi	r3,r3,65535
  808168:	1806d23a 	srli	r3,r3,8
  80816c:	10c00005 	stb	r3,0(r2)
            tim = get_fattime();                /* Update updated time */
  808170:	08046b00 	call	8046b0 <get_fattime>
  808174:	e0bffe15 	stw	r2,-8(fp)
            ST_DWORD(dir+DIR_WrtTime, tim);
  808178:	e0bffd17 	ldw	r2,-12(fp)
  80817c:	10800584 	addi	r2,r2,22
  808180:	e0fffe17 	ldw	r3,-8(fp)
  808184:	10c00005 	stb	r3,0(r2)
  808188:	e0bffd17 	ldw	r2,-12(fp)
  80818c:	108005c4 	addi	r2,r2,23
  808190:	e0fffe17 	ldw	r3,-8(fp)
  808194:	18ffffcc 	andi	r3,r3,65535
  808198:	1806d23a 	srli	r3,r3,8
  80819c:	10c00005 	stb	r3,0(r2)
  8081a0:	e0bffd17 	ldw	r2,-12(fp)
  8081a4:	10800604 	addi	r2,r2,24
  8081a8:	e0fffe17 	ldw	r3,-8(fp)
  8081ac:	1806d43a 	srli	r3,r3,16
  8081b0:	10c00005 	stb	r3,0(r2)
  8081b4:	e0bffd17 	ldw	r2,-12(fp)
  8081b8:	10800644 	addi	r2,r2,25
  8081bc:	e0fffe17 	ldw	r3,-8(fp)
  8081c0:	1806d63a 	srli	r3,r3,24
  8081c4:	10c00005 	stb	r3,0(r2)
            fp->flag &= ~FA__WRITTEN;
  8081c8:	e0bfff17 	ldw	r2,-4(fp)
  8081cc:	10c00183 	ldbu	r3,6(r2)
  8081d0:	00bff7c4 	movi	r2,-33
  8081d4:	1884703a 	and	r2,r3,r2
  8081d8:	1007883a 	mov	r3,r2
  8081dc:	e0bfff17 	ldw	r2,-4(fp)
  8081e0:	10c00185 	stb	r3,6(r2)
            fp->fs->wflag = 1;
  8081e4:	e0bfff17 	ldw	r2,-4(fp)
  8081e8:	10800017 	ldw	r2,0(r2)
  8081ec:	00c00044 	movi	r3,1
  8081f0:	10c00105 	stb	r3,4(r2)
            res = sync(fp->fs);
  8081f4:	e0bfff17 	ldw	r2,-4(fp)
  8081f8:	10800017 	ldw	r2,0(r2)
  8081fc:	1009883a 	mov	r4,r2
  808200:	0804a040 	call	804a04 <sync>
  808204:	e0bffc15 	stw	r2,-16(fp)
         }
      }
   }

   LEAVE_FF(fp->fs, res);
  808208:	e0bffc17 	ldw	r2,-16(fp)
}
  80820c:	e037883a 	mov	sp,fp
  808210:	dfc00117 	ldw	ra,4(sp)
  808214:	df000017 	ldw	fp,0(sp)
  808218:	dec00204 	addi	sp,sp,8
  80821c:	f800283a 	ret

00808220 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
   FIL *fp     /* Pointer to the file object to be closed */
)
{
  808220:	defffc04 	addi	sp,sp,-16
  808224:	dfc00315 	stw	ra,12(sp)
  808228:	df000215 	stw	fp,8(sp)
  80822c:	df000204 	addi	fp,sp,8
  808230:	e13fff15 	stw	r4,-4(fp)
   res = validate(fs, fp->id);
   if (res == FR_OK) fp->fs = 0; /* Discard file object */
   LEAVE_FF(fs, res);

#else
   res = f_sync(fp);    /* Flush cached data */
  808234:	e13fff17 	ldw	r4,-4(fp)
  808238:	0807f980 	call	807f98 <f_sync>
  80823c:	e0bffe15 	stw	r2,-8(fp)
#else
      res = dec_lock(fp->lockid);
#endif
   }
#endif
   if (res == FR_OK) fp->fs = 0; /* Discard file object */
  808240:	e0bffe17 	ldw	r2,-8(fp)
  808244:	1000021e 	bne	r2,zero,808250 <f_close+0x30>
  808248:	e0bfff17 	ldw	r2,-4(fp)
  80824c:	10000015 	stw	zero,0(r2)
   return res;
  808250:	e0bffe17 	ldw	r2,-8(fp)
#endif
}
  808254:	e037883a 	mov	sp,fp
  808258:	dfc00117 	ldw	ra,4(sp)
  80825c:	df000017 	ldw	fp,0(sp)
  808260:	dec00204 	addi	sp,sp,8
  808264:	f800283a 	ret

00808268 <f_lseek>:

FRESULT f_lseek (
   FIL *fp,          /* Pointer to the file object */
   uint32_t ofs      /* File pointer from top of file */
)
{
  808268:	defff604 	addi	sp,sp,-40
  80826c:	dfc00915 	stw	ra,36(sp)
  808270:	df000815 	stw	fp,32(sp)
  808274:	dc000715 	stw	r16,28(sp)
  808278:	df000804 	addi	fp,sp,32
  80827c:	e13ffd15 	stw	r4,-12(fp)
  808280:	e17ffe15 	stw	r5,-8(fp)
   FRESULT res;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
  808284:	e0bffd17 	ldw	r2,-12(fp)
  808288:	10c00017 	ldw	r3,0(r2)
  80828c:	e0bffd17 	ldw	r2,-12(fp)
  808290:	1080010b 	ldhu	r2,4(r2)
  808294:	10bfffcc 	andi	r2,r2,65535
  808298:	1809883a 	mov	r4,r3
  80829c:	100b883a 	mov	r5,r2
  8082a0:	0806f900 	call	806f90 <validate>
  8082a4:	e0bffa15 	stw	r2,-24(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
  8082a8:	e0bffa17 	ldw	r2,-24(fp)
  8082ac:	10000226 	beq	r2,zero,8082b8 <f_lseek+0x50>
  8082b0:	e0bffa17 	ldw	r2,-24(fp)
  8082b4:	00012106 	br	80873c <f_lseek+0x4d4>
   if (fp->flag & FA__ERROR)        /* Check abort flag */
  8082b8:	e0bffd17 	ldw	r2,-12(fp)
  8082bc:	10800183 	ldbu	r2,6(r2)
  8082c0:	10803fcc 	andi	r2,r2,255
  8082c4:	1080201c 	xori	r2,r2,128
  8082c8:	10bfe004 	addi	r2,r2,-128
  8082cc:	1000020e 	bge	r2,zero,8082d8 <f_lseek+0x70>
      LEAVE_FF(fp->fs, FR_INT_ERR);
  8082d0:	00800084 	movi	r2,2
  8082d4:	00011906 	br	80873c <f_lseek+0x4d4>

   /* Normal Seek */
   {
      uint32_t clst, bcs, nsect, ifptr;

      if (ofs > fp->fsize              /* In read-only mode, clip offset with the file size */
  8082d8:	e0bffd17 	ldw	r2,-12(fp)
  8082dc:	10c00317 	ldw	r3,12(r2)
  8082e0:	e0bffe17 	ldw	r2,-8(fp)
  8082e4:	1880082e 	bgeu	r3,r2,808308 <f_lseek+0xa0>
#if !_FS_READONLY
          && !(fp->flag & FA_WRITE)
  8082e8:	e0bffd17 	ldw	r2,-12(fp)
  8082ec:	10800183 	ldbu	r2,6(r2)
  8082f0:	10803fcc 	andi	r2,r2,255
  8082f4:	1080008c 	andi	r2,r2,2
  8082f8:	1000031e 	bne	r2,zero,808308 <f_lseek+0xa0>
#endif
         ) ofs = fp->fsize;
  8082fc:	e0bffd17 	ldw	r2,-12(fp)
  808300:	10800317 	ldw	r2,12(r2)
  808304:	e0bffe15 	stw	r2,-8(fp)

      ifptr = fp->fptr;
  808308:	e0bffd17 	ldw	r2,-12(fp)
  80830c:	10800217 	ldw	r2,8(r2)
  808310:	e0bffb15 	stw	r2,-20(fp)
      fp->fptr = nsect = 0;
  808314:	e03ff915 	stw	zero,-28(fp)
  808318:	e0bffd17 	ldw	r2,-12(fp)
  80831c:	e0fff917 	ldw	r3,-28(fp)
  808320:	10c00215 	stw	r3,8(r2)
      if (ofs) {
  808324:	e0bffe17 	ldw	r2,-8(fp)
  808328:	1000b226 	beq	r2,zero,8085f4 <f_lseek+0x38c>
         bcs = (uint32_t)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
  80832c:	e0bffd17 	ldw	r2,-12(fp)
  808330:	10800017 	ldw	r2,0(r2)
  808334:	10800083 	ldbu	r2,2(r2)
  808338:	10803fcc 	andi	r2,r2,255
  80833c:	1004927a 	slli	r2,r2,9
  808340:	e0bffc15 	stw	r2,-16(fp)
         if (ifptr > 0 &&
  808344:	e0bffb17 	ldw	r2,-20(fp)
  808348:	10001c26 	beq	r2,zero,8083bc <f_lseek+0x154>
            (ofs - 1) / bcs >= (ifptr - 1) / bcs) {   /* When seek to same or following cluster, */
  80834c:	e0bffe17 	ldw	r2,-8(fp)
  808350:	10bfffc4 	addi	r2,r2,-1
  808354:	1009883a 	mov	r4,r2
  808358:	e17ffc17 	ldw	r5,-16(fp)
  80835c:	080c6300 	call	80c630 <__udivsi3>
  808360:	1021883a 	mov	r16,r2
  808364:	e0bffb17 	ldw	r2,-20(fp)
  808368:	10bfffc4 	addi	r2,r2,-1
  80836c:	1009883a 	mov	r4,r2
  808370:	e17ffc17 	ldw	r5,-16(fp)
  808374:	080c6300 	call	80c630 <__udivsi3>

      ifptr = fp->fptr;
      fp->fptr = nsect = 0;
      if (ofs) {
         bcs = (uint32_t)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
         if (ifptr > 0 &&
  808378:	80801036 	bltu	r16,r2,8083bc <f_lseek+0x154>
            (ofs - 1) / bcs >= (ifptr - 1) / bcs) {   /* When seek to same or following cluster, */
            fp->fptr = (ifptr - 1) & ~(bcs - 1);   /* start from the current cluster */
  80837c:	e0bffb17 	ldw	r2,-20(fp)
  808380:	10ffffc4 	addi	r3,r2,-1
  808384:	e0bffc17 	ldw	r2,-16(fp)
  808388:	0085c83a 	sub	r2,zero,r2
  80838c:	1886703a 	and	r3,r3,r2
  808390:	e0bffd17 	ldw	r2,-12(fp)
  808394:	10c00215 	stw	r3,8(r2)
            ofs -= fp->fptr;
  808398:	e0bffd17 	ldw	r2,-12(fp)
  80839c:	10800217 	ldw	r2,8(r2)
  8083a0:	e0fffe17 	ldw	r3,-8(fp)
  8083a4:	1885c83a 	sub	r2,r3,r2
  8083a8:	e0bffe15 	stw	r2,-8(fp)
            clst = fp->clust;
  8083ac:	e0bffd17 	ldw	r2,-12(fp)
  8083b0:	10800517 	ldw	r2,20(r2)
  8083b4:	e0bff815 	stw	r2,-32(fp)
  8083b8:	00002906 	br	808460 <f_lseek+0x1f8>
         } else {                         /* When seek to back cluster, */
            clst = fp->sclust;                  /* start from the first cluster */
  8083bc:	e0bffd17 	ldw	r2,-12(fp)
  8083c0:	10800417 	ldw	r2,16(r2)
  8083c4:	e0bff815 	stw	r2,-32(fp)
#if !_FS_READONLY
            if (clst == 0) {                 /* If no cluster chain, create a new chain */
  8083c8:	e0bff817 	ldw	r2,-32(fp)
  8083cc:	1000211e 	bne	r2,zero,808454 <f_lseek+0x1ec>
               clst = create_chain(fp->fs, 0);
  8083d0:	e0bffd17 	ldw	r2,-12(fp)
  8083d4:	10800017 	ldw	r2,0(r2)
  8083d8:	1009883a 	mov	r4,r2
  8083dc:	000b883a 	mov	r5,zero
  8083e0:	08053940 	call	805394 <create_chain>
  8083e4:	e0bff815 	stw	r2,-32(fp)
               if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  8083e8:	e0bff817 	ldw	r2,-32(fp)
  8083ec:	10800058 	cmpnei	r2,r2,1
  8083f0:	1000091e 	bne	r2,zero,808418 <f_lseek+0x1b0>
  8083f4:	e0bffd17 	ldw	r2,-12(fp)
  8083f8:	10c00183 	ldbu	r3,6(r2)
  8083fc:	00bfe004 	movi	r2,-128
  808400:	1884b03a 	or	r2,r3,r2
  808404:	1007883a 	mov	r3,r2
  808408:	e0bffd17 	ldw	r2,-12(fp)
  80840c:	10c00185 	stb	r3,6(r2)
  808410:	00800084 	movi	r2,2
  808414:	0000c906 	br	80873c <f_lseek+0x4d4>
               if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  808418:	e0bff817 	ldw	r2,-32(fp)
  80841c:	10bfffd8 	cmpnei	r2,r2,-1
  808420:	1000091e 	bne	r2,zero,808448 <f_lseek+0x1e0>
  808424:	e0bffd17 	ldw	r2,-12(fp)
  808428:	10c00183 	ldbu	r3,6(r2)
  80842c:	00bfe004 	movi	r2,-128
  808430:	1884b03a 	or	r2,r3,r2
  808434:	1007883a 	mov	r3,r2
  808438:	e0bffd17 	ldw	r2,-12(fp)
  80843c:	10c00185 	stb	r3,6(r2)
  808440:	00800044 	movi	r2,1
  808444:	0000bd06 	br	80873c <f_lseek+0x4d4>
               fp->sclust = clst;
  808448:	e0bffd17 	ldw	r2,-12(fp)
  80844c:	e0fff817 	ldw	r3,-32(fp)
  808450:	10c00415 	stw	r3,16(r2)
            }
#endif
            fp->clust = clst;
  808454:	e0bffd17 	ldw	r2,-12(fp)
  808458:	e0fff817 	ldw	r3,-32(fp)
  80845c:	10c00515 	stw	r3,20(r2)
         }
         if (clst != 0) {
  808460:	e0bff817 	ldw	r2,-32(fp)
  808464:	10006326 	beq	r2,zero,8085f4 <f_lseek+0x38c>
            while (ofs > bcs) {                 /* Cluster following loop */
  808468:	00004006 	br	80856c <f_lseek+0x304>
#if !_FS_READONLY
               if (fp->flag & FA_WRITE) {       /* Check if in write mode or not */
  80846c:	e0bffd17 	ldw	r2,-12(fp)
  808470:	10800183 	ldbu	r2,6(r2)
  808474:	10803fcc 	andi	r2,r2,255
  808478:	1080008c 	andi	r2,r2,2
  80847c:	10000b26 	beq	r2,zero,8084ac <f_lseek+0x244>
                  clst = create_chain(fp->fs, clst);  /* Force stretch if in write mode */
  808480:	e0bffd17 	ldw	r2,-12(fp)
  808484:	10800017 	ldw	r2,0(r2)
  808488:	1009883a 	mov	r4,r2
  80848c:	e17ff817 	ldw	r5,-32(fp)
  808490:	08053940 	call	805394 <create_chain>
  808494:	e0bff815 	stw	r2,-32(fp)
                  if (clst == 0) {           /* When disk gets full, clip file size */
  808498:	e0bff817 	ldw	r2,-32(fp)
  80849c:	1000091e 	bne	r2,zero,8084c4 <f_lseek+0x25c>
                     ofs = bcs; break;
  8084a0:	e0bffc17 	ldw	r2,-16(fp)
  8084a4:	e0bffe15 	stw	r2,-8(fp)
  8084a8:	00003306 	br	808578 <f_lseek+0x310>
                  }
               } else
#endif
                  clst = get_fat(fp->fs, clst); /* Follow cluster chain if not in write mode */
  8084ac:	e0bffd17 	ldw	r2,-12(fp)
  8084b0:	10800017 	ldw	r2,0(r2)
  8084b4:	1009883a 	mov	r4,r2
  8084b8:	e17ff817 	ldw	r5,-32(fp)
  8084bc:	0804c8c0 	call	804c8c <get_fat>
  8084c0:	e0bff815 	stw	r2,-32(fp)
               if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  8084c4:	e0bff817 	ldw	r2,-32(fp)
  8084c8:	10bfffd8 	cmpnei	r2,r2,-1
  8084cc:	1000091e 	bne	r2,zero,8084f4 <f_lseek+0x28c>
  8084d0:	e0bffd17 	ldw	r2,-12(fp)
  8084d4:	10c00183 	ldbu	r3,6(r2)
  8084d8:	00bfe004 	movi	r2,-128
  8084dc:	1884b03a 	or	r2,r3,r2
  8084e0:	1007883a 	mov	r3,r2
  8084e4:	e0bffd17 	ldw	r2,-12(fp)
  8084e8:	10c00185 	stb	r3,6(r2)
  8084ec:	00800044 	movi	r2,1
  8084f0:	00009206 	br	80873c <f_lseek+0x4d4>
               if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  8084f4:	e0bff817 	ldw	r2,-32(fp)
  8084f8:	108000b0 	cmpltui	r2,r2,2
  8084fc:	1000051e 	bne	r2,zero,808514 <f_lseek+0x2ac>
  808500:	e0bffd17 	ldw	r2,-12(fp)
  808504:	10800017 	ldw	r2,0(r2)
  808508:	10800617 	ldw	r2,24(r2)
  80850c:	e0fff817 	ldw	r3,-32(fp)
  808510:	18800936 	bltu	r3,r2,808538 <f_lseek+0x2d0>
  808514:	e0bffd17 	ldw	r2,-12(fp)
  808518:	10c00183 	ldbu	r3,6(r2)
  80851c:	00bfe004 	movi	r2,-128
  808520:	1884b03a 	or	r2,r3,r2
  808524:	1007883a 	mov	r3,r2
  808528:	e0bffd17 	ldw	r2,-12(fp)
  80852c:	10c00185 	stb	r3,6(r2)
  808530:	00800084 	movi	r2,2
  808534:	00008106 	br	80873c <f_lseek+0x4d4>
               fp->clust = clst;
  808538:	e0bffd17 	ldw	r2,-12(fp)
  80853c:	e0fff817 	ldw	r3,-32(fp)
  808540:	10c00515 	stw	r3,20(r2)
               fp->fptr += bcs;
  808544:	e0bffd17 	ldw	r2,-12(fp)
  808548:	10c00217 	ldw	r3,8(r2)
  80854c:	e0bffc17 	ldw	r2,-16(fp)
  808550:	1887883a 	add	r3,r3,r2
  808554:	e0bffd17 	ldw	r2,-12(fp)
  808558:	10c00215 	stw	r3,8(r2)
               ofs -= bcs;
  80855c:	e0fffe17 	ldw	r3,-8(fp)
  808560:	e0bffc17 	ldw	r2,-16(fp)
  808564:	1885c83a 	sub	r2,r3,r2
  808568:	e0bffe15 	stw	r2,-8(fp)
            }
#endif
            fp->clust = clst;
         }
         if (clst != 0) {
            while (ofs > bcs) {                 /* Cluster following loop */
  80856c:	e0bffe17 	ldw	r2,-8(fp)
  808570:	e0fffc17 	ldw	r3,-16(fp)
  808574:	18bfbd36 	bltu	r3,r2,80846c <__alt_data_end+0xff80846c>
               if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
               fp->clust = clst;
               fp->fptr += bcs;
               ofs -= bcs;
            }
            fp->fptr += ofs;
  808578:	e0bffd17 	ldw	r2,-12(fp)
  80857c:	10c00217 	ldw	r3,8(r2)
  808580:	e0bffe17 	ldw	r2,-8(fp)
  808584:	1887883a 	add	r3,r3,r2
  808588:	e0bffd17 	ldw	r2,-12(fp)
  80858c:	10c00215 	stw	r3,8(r2)
            if (ofs % SS(fp->fs)) {
  808590:	e0bffe17 	ldw	r2,-8(fp)
  808594:	10807fcc 	andi	r2,r2,511
  808598:	10001626 	beq	r2,zero,8085f4 <f_lseek+0x38c>
               nsect = clust2sect(fp->fs, clst);   /* Current sector */
  80859c:	e0bffd17 	ldw	r2,-12(fp)
  8085a0:	10800017 	ldw	r2,0(r2)
  8085a4:	1009883a 	mov	r4,r2
  8085a8:	e17ff817 	ldw	r5,-32(fp)
  8085ac:	0804c200 	call	804c20 <clust2sect>
  8085b0:	e0bff915 	stw	r2,-28(fp)
               if (!nsect) ABORT(fp->fs, FR_INT_ERR);
  8085b4:	e0bff917 	ldw	r2,-28(fp)
  8085b8:	1000091e 	bne	r2,zero,8085e0 <f_lseek+0x378>
  8085bc:	e0bffd17 	ldw	r2,-12(fp)
  8085c0:	10c00183 	ldbu	r3,6(r2)
  8085c4:	00bfe004 	movi	r2,-128
  8085c8:	1884b03a 	or	r2,r3,r2
  8085cc:	1007883a 	mov	r3,r2
  8085d0:	e0bffd17 	ldw	r2,-12(fp)
  8085d4:	10c00185 	stb	r3,6(r2)
  8085d8:	00800084 	movi	r2,2
  8085dc:	00005706 	br	80873c <f_lseek+0x4d4>
               nsect += ofs / SS(fp->fs);
  8085e0:	e0bffe17 	ldw	r2,-8(fp)
  8085e4:	1004d27a 	srli	r2,r2,9
  8085e8:	e0fff917 	ldw	r3,-28(fp)
  8085ec:	1885883a 	add	r2,r3,r2
  8085f0:	e0bff915 	stw	r2,-28(fp)
            }
         }
      }
      if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) { /* Fill sector cache if needed */
  8085f4:	e0bffd17 	ldw	r2,-12(fp)
  8085f8:	10800217 	ldw	r2,8(r2)
  8085fc:	10807fcc 	andi	r2,r2,511
  808600:	10003e26 	beq	r2,zero,8086fc <f_lseek+0x494>
  808604:	e0bffd17 	ldw	r2,-12(fp)
  808608:	10c00617 	ldw	r3,24(r2)
  80860c:	e0bff917 	ldw	r2,-28(fp)
  808610:	18803a26 	beq	r3,r2,8086fc <f_lseek+0x494>
#if !_FS_TINY
#if !_FS_READONLY
         if (fp->flag & FA__DIRTY) {         /* Write-back dirty sector cache */
  808614:	e0bffd17 	ldw	r2,-12(fp)
  808618:	10800183 	ldbu	r2,6(r2)
  80861c:	10803fcc 	andi	r2,r2,255
  808620:	1080100c 	andi	r2,r2,64
  808624:	10001d26 	beq	r2,zero,80869c <f_lseek+0x434>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  808628:	e0bffd17 	ldw	r2,-12(fp)
  80862c:	10800017 	ldw	r2,0(r2)
  808630:	10800043 	ldbu	r2,1(r2)
  808634:	11003fcc 	andi	r4,r2,255
  808638:	e0bffd17 	ldw	r2,-12(fp)
  80863c:	10c00904 	addi	r3,r2,36
  808640:	e0bffd17 	ldw	r2,-12(fp)
  808644:	10800617 	ldw	r2,24(r2)
  808648:	180b883a 	mov	r5,r3
  80864c:	100d883a 	mov	r6,r2
  808650:	01c00044 	movi	r7,1
  808654:	080409c0 	call	80409c <ffs_DiskIOWrite>
  808658:	10000926 	beq	r2,zero,808680 <f_lseek+0x418>
               ABORT(fp->fs, FR_DISK_ERR);
  80865c:	e0bffd17 	ldw	r2,-12(fp)
  808660:	10c00183 	ldbu	r3,6(r2)
  808664:	00bfe004 	movi	r2,-128
  808668:	1884b03a 	or	r2,r3,r2
  80866c:	1007883a 	mov	r3,r2
  808670:	e0bffd17 	ldw	r2,-12(fp)
  808674:	10c00185 	stb	r3,6(r2)
  808678:	00800044 	movi	r2,1
  80867c:	00002f06 	br	80873c <f_lseek+0x4d4>
            fp->flag &= ~FA__DIRTY;
  808680:	e0bffd17 	ldw	r2,-12(fp)
  808684:	10c00183 	ldbu	r3,6(r2)
  808688:	00bfefc4 	movi	r2,-65
  80868c:	1884703a 	and	r2,r3,r2
  808690:	1007883a 	mov	r3,r2
  808694:	e0bffd17 	ldw	r2,-12(fp)
  808698:	10c00185 	stb	r3,6(r2)
         }
#endif
         if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK) /* Fill sector cache */
  80869c:	e0bffd17 	ldw	r2,-12(fp)
  8086a0:	10800017 	ldw	r2,0(r2)
  8086a4:	10800043 	ldbu	r2,1(r2)
  8086a8:	10c03fcc 	andi	r3,r2,255
  8086ac:	e0bffd17 	ldw	r2,-12(fp)
  8086b0:	10800904 	addi	r2,r2,36
  8086b4:	1809883a 	mov	r4,r3
  8086b8:	100b883a 	mov	r5,r2
  8086bc:	e1bff917 	ldw	r6,-28(fp)
  8086c0:	01c00044 	movi	r7,1
  8086c4:	0803f800 	call	803f80 <ffs_DiskIORead>
  8086c8:	10000926 	beq	r2,zero,8086f0 <f_lseek+0x488>
            ABORT(fp->fs, FR_DISK_ERR);
  8086cc:	e0bffd17 	ldw	r2,-12(fp)
  8086d0:	10c00183 	ldbu	r3,6(r2)
  8086d4:	00bfe004 	movi	r2,-128
  8086d8:	1884b03a 	or	r2,r3,r2
  8086dc:	1007883a 	mov	r3,r2
  8086e0:	e0bffd17 	ldw	r2,-12(fp)
  8086e4:	10c00185 	stb	r3,6(r2)
  8086e8:	00800044 	movi	r2,1
  8086ec:	00001306 	br	80873c <f_lseek+0x4d4>
#endif
         fp->dsect = nsect;
  8086f0:	e0bffd17 	ldw	r2,-12(fp)
  8086f4:	e0fff917 	ldw	r3,-28(fp)
  8086f8:	10c00615 	stw	r3,24(r2)
      }
#if !_FS_READONLY
      if (fp->fptr > fp->fsize) {         /* Set file change flag if the file size is extended */
  8086fc:	e0bffd17 	ldw	r2,-12(fp)
  808700:	10800217 	ldw	r2,8(r2)
  808704:	e0fffd17 	ldw	r3,-12(fp)
  808708:	18c00317 	ldw	r3,12(r3)
  80870c:	18800a2e 	bgeu	r3,r2,808738 <f_lseek+0x4d0>
         fp->fsize = fp->fptr;
  808710:	e0bffd17 	ldw	r2,-12(fp)
  808714:	10c00217 	ldw	r3,8(r2)
  808718:	e0bffd17 	ldw	r2,-12(fp)
  80871c:	10c00315 	stw	r3,12(r2)
         fp->flag |= FA__WRITTEN;
  808720:	e0bffd17 	ldw	r2,-12(fp)
  808724:	10800183 	ldbu	r2,6(r2)
  808728:	10800814 	ori	r2,r2,32
  80872c:	1007883a 	mov	r3,r2
  808730:	e0bffd17 	ldw	r2,-12(fp)
  808734:	10c00185 	stb	r3,6(r2)
      }
#endif
   }

   LEAVE_FF(fp->fs, res);
  808738:	e0bffa17 	ldw	r2,-24(fp)
}
  80873c:	e6ffff04 	addi	sp,fp,-4
  808740:	dfc00217 	ldw	ra,8(sp)
  808744:	df000117 	ldw	fp,4(sp)
  808748:	dc000017 	ldw	r16,0(sp)
  80874c:	dec00304 	addi	sp,sp,12
  808750:	f800283a 	ret

00808754 <f_opendir>:

FRESULT f_opendir (
   DIR *dj,       /* Pointer to directory object to create */
   const TCHAR *path /* Pointer to the directory path */
)
{
  808754:	defff804 	addi	sp,sp,-32
  808758:	dfc00715 	stw	ra,28(sp)
  80875c:	df000615 	stw	fp,24(sp)
  808760:	df000604 	addi	fp,sp,24
  808764:	e13ffe15 	stw	r4,-8(fp)
  808768:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj->fs, 0);
  80876c:	e0bffe17 	ldw	r2,-8(fp)
  808770:	e0ffff04 	addi	r3,fp,-4
  808774:	1809883a 	mov	r4,r3
  808778:	100b883a 	mov	r5,r2
  80877c:	000d883a 	mov	r6,zero
  808780:	08066540 	call	806654 <chk_mounted>
  808784:	e0bffa15 	stw	r2,-24(fp)
   if (res == FR_OK) {
  808788:	e0bffa17 	ldw	r2,-24(fp)
  80878c:	1000471e 	bne	r2,zero,8088ac <f_opendir+0x158>

      INIT_BUF(*dj);
  808790:	e0bffe17 	ldw	r2,-8(fp)
  808794:	e0fffb04 	addi	r3,fp,-20
  808798:	10c00615 	stw	r3,24(r2)
      res = follow_path(dj, path);        /* Follow the path to the directory */
  80879c:	e0bfff17 	ldw	r2,-4(fp)
  8087a0:	e13ffe17 	ldw	r4,-8(fp)
  8087a4:	100b883a 	mov	r5,r2
  8087a8:	08063100 	call	806310 <follow_path>
  8087ac:	e0bffa15 	stw	r2,-24(fp)
      FREE_BUF();
      if (res == FR_OK) {                 /* Follow completed */
  8087b0:	e0bffa17 	ldw	r2,-24(fp)
  8087b4:	1000381e 	bne	r2,zero,808898 <f_opendir+0x144>
         if (dj->dir) {                /* It is not the root dir */
  8087b8:	e0bffe17 	ldw	r2,-8(fp)
  8087bc:	10800517 	ldw	r2,20(r2)
  8087c0:	10002a26 	beq	r2,zero,80886c <f_opendir+0x118>
            if (dj->dir[DIR_Attr] & AM_DIR) {   /* The object is a directory */
  8087c4:	e0bffe17 	ldw	r2,-8(fp)
  8087c8:	10800517 	ldw	r2,20(r2)
  8087cc:	108002c4 	addi	r2,r2,11
  8087d0:	10800003 	ldbu	r2,0(r2)
  8087d4:	10803fcc 	andi	r2,r2,255
  8087d8:	1080040c 	andi	r2,r2,16
  8087dc:	10002126 	beq	r2,zero,808864 <f_opendir+0x110>
               dj->sclust = LD_CLUST(dj->dir);
  8087e0:	e0bffe17 	ldw	r2,-8(fp)
  8087e4:	10800517 	ldw	r2,20(r2)
  8087e8:	10800544 	addi	r2,r2,21
  8087ec:	10800003 	ldbu	r2,0(r2)
  8087f0:	10803fcc 	andi	r2,r2,255
  8087f4:	1004923a 	slli	r2,r2,8
  8087f8:	1007883a 	mov	r3,r2
  8087fc:	e0bffe17 	ldw	r2,-8(fp)
  808800:	10800517 	ldw	r2,20(r2)
  808804:	10800504 	addi	r2,r2,20
  808808:	10800003 	ldbu	r2,0(r2)
  80880c:	10803fcc 	andi	r2,r2,255
  808810:	1884b03a 	or	r2,r3,r2
  808814:	10bfffcc 	andi	r2,r2,65535
  808818:	1006943a 	slli	r3,r2,16
  80881c:	e0bffe17 	ldw	r2,-8(fp)
  808820:	10800517 	ldw	r2,20(r2)
  808824:	108006c4 	addi	r2,r2,27
  808828:	10800003 	ldbu	r2,0(r2)
  80882c:	10803fcc 	andi	r2,r2,255
  808830:	1004923a 	slli	r2,r2,8
  808834:	1009883a 	mov	r4,r2
  808838:	e0bffe17 	ldw	r2,-8(fp)
  80883c:	10800517 	ldw	r2,20(r2)
  808840:	10800684 	addi	r2,r2,26
  808844:	10800003 	ldbu	r2,0(r2)
  808848:	10803fcc 	andi	r2,r2,255
  80884c:	2084b03a 	or	r2,r4,r2
  808850:	10bfffcc 	andi	r2,r2,65535
  808854:	1886b03a 	or	r3,r3,r2
  808858:	e0bffe17 	ldw	r2,-8(fp)
  80885c:	10c00215 	stw	r3,8(r2)
  808860:	00000206 	br	80886c <f_opendir+0x118>
            } else {                /* The object is not a directory */
               res = FR_NO_PATH;
  808864:	00800144 	movi	r2,5
  808868:	e0bffa15 	stw	r2,-24(fp)
            }
         }
         if (res == FR_OK) {
  80886c:	e0bffa17 	ldw	r2,-24(fp)
  808870:	1000091e 	bne	r2,zero,808898 <f_opendir+0x144>
            dj->id = dj->fs->id;
  808874:	e0bffe17 	ldw	r2,-8(fp)
  808878:	10800017 	ldw	r2,0(r2)
  80887c:	10c0018b 	ldhu	r3,6(r2)
  808880:	e0bffe17 	ldw	r2,-8(fp)
  808884:	10c0010d 	sth	r3,4(r2)
            res = dir_sdi(dj, 0);         /* Rewind dir */
  808888:	e13ffe17 	ldw	r4,-8(fp)
  80888c:	000b883a 	mov	r5,zero
  808890:	08055780 	call	805578 <dir_sdi>
  808894:	e0bffa15 	stw	r2,-24(fp)
         }
      }
      if (res == FR_NO_FILE) res = FR_NO_PATH;
  808898:	e0bffa17 	ldw	r2,-24(fp)
  80889c:	10800118 	cmpnei	r2,r2,4
  8088a0:	1000021e 	bne	r2,zero,8088ac <f_opendir+0x158>
  8088a4:	00800144 	movi	r2,5
  8088a8:	e0bffa15 	stw	r2,-24(fp)
   }

   LEAVE_FF(dj->fs, res);
  8088ac:	e0bffa17 	ldw	r2,-24(fp)
}
  8088b0:	e037883a 	mov	sp,fp
  8088b4:	dfc00117 	ldw	ra,4(sp)
  8088b8:	df000017 	ldw	fp,0(sp)
  8088bc:	dec00204 	addi	sp,sp,8
  8088c0:	f800283a 	ret

008088c4 <f_readdir>:

FRESULT f_readdir (
   DIR *dj,       /* Pointer to the open directory object */
   FILINFO *fno      /* Pointer to file information to return */
)
{
  8088c4:	defff804 	addi	sp,sp,-32
  8088c8:	dfc00715 	stw	ra,28(sp)
  8088cc:	df000615 	stw	fp,24(sp)
  8088d0:	df000604 	addi	fp,sp,24
  8088d4:	e13ffe15 	stw	r4,-8(fp)
  8088d8:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DEF_NAMEBUF;


   res = validate(dj->fs, dj->id);        /* Check validity of the object */
  8088dc:	e0bffe17 	ldw	r2,-8(fp)
  8088e0:	10c00017 	ldw	r3,0(r2)
  8088e4:	e0bffe17 	ldw	r2,-8(fp)
  8088e8:	1080010b 	ldhu	r2,4(r2)
  8088ec:	10bfffcc 	andi	r2,r2,65535
  8088f0:	1809883a 	mov	r4,r3
  8088f4:	100b883a 	mov	r5,r2
  8088f8:	0806f900 	call	806f90 <validate>
  8088fc:	e0bffa15 	stw	r2,-24(fp)
   if (res == FR_OK) {
  808900:	e0bffa17 	ldw	r2,-24(fp)
  808904:	1000221e 	bne	r2,zero,808990 <f_readdir+0xcc>

      if (!fno) {
  808908:	e0bfff17 	ldw	r2,-4(fp)
  80890c:	1000051e 	bne	r2,zero,808924 <f_readdir+0x60>
         res = dir_sdi(dj, 0);         /* Rewind the directory object */
  808910:	e13ffe17 	ldw	r4,-8(fp)
  808914:	000b883a 	mov	r5,zero
  808918:	08055780 	call	805578 <dir_sdi>
  80891c:	e0bffa15 	stw	r2,-24(fp)
  808920:	00001b06 	br	808990 <f_readdir+0xcc>
      } else {
         INIT_BUF(*dj);
  808924:	e0bffe17 	ldw	r2,-8(fp)
  808928:	e0fffb04 	addi	r3,fp,-20
  80892c:	10c00615 	stw	r3,24(r2)
         res = dir_read(dj);           /* Read an directory item */
  808930:	e13ffe17 	ldw	r4,-8(fp)
  808934:	0805b400 	call	805b40 <dir_read>
  808938:	e0bffa15 	stw	r2,-24(fp)
         if (res == FR_NO_FILE) {      /* Reached end of dir */
  80893c:	e0bffa17 	ldw	r2,-24(fp)
  808940:	10800118 	cmpnei	r2,r2,4
  808944:	1000031e 	bne	r2,zero,808954 <f_readdir+0x90>
            dj->sect = 0;
  808948:	e0bffe17 	ldw	r2,-8(fp)
  80894c:	10000415 	stw	zero,16(r2)
            res = FR_OK;
  808950:	e03ffa15 	stw	zero,-24(fp)
         }
         if (res == FR_OK) {           /* A valid entry is found */
  808954:	e0bffa17 	ldw	r2,-24(fp)
  808958:	10000d1e 	bne	r2,zero,808990 <f_readdir+0xcc>

            get_fileinfo(dj, fno);     /* Get the object information */
  80895c:	e13ffe17 	ldw	r4,-8(fp)
  808960:	e17fff17 	ldw	r5,-4(fp)
  808964:	08060e00 	call	8060e0 <get_fileinfo>
            res = dir_next(dj, 0);     /* Increment index for next */
  808968:	e13ffe17 	ldw	r4,-8(fp)
  80896c:	000b883a 	mov	r5,zero
  808970:	08057640 	call	805764 <dir_next>
  808974:	e0bffa15 	stw	r2,-24(fp)
            if (res == FR_NO_FILE) {
  808978:	e0bffa17 	ldw	r2,-24(fp)
  80897c:	10800118 	cmpnei	r2,r2,4
  808980:	1000031e 	bne	r2,zero,808990 <f_readdir+0xcc>

               dj->sect = 0;
  808984:	e0bffe17 	ldw	r2,-8(fp)
  808988:	10000415 	stw	zero,16(r2)
               res = FR_OK;
  80898c:	e03ffa15 	stw	zero,-24(fp)
         }
         FREE_BUF();
      }
   }

   LEAVE_FF(dj->fs, res);
  808990:	e0bffa17 	ldw	r2,-24(fp)
}
  808994:	e037883a 	mov	sp,fp
  808998:	dfc00117 	ldw	ra,4(sp)
  80899c:	df000017 	ldw	fp,0(sp)
  8089a0:	dec00204 	addi	sp,sp,8
  8089a4:	f800283a 	ret

008089a8 <f_stat>:

FRESULT f_stat (
   const TCHAR *path,   /* Pointer to the file path */
   FILINFO *fno      /* Pointer to file information to return */
)
{
  8089a8:	defff104 	addi	sp,sp,-60
  8089ac:	dfc00e15 	stw	ra,56(sp)
  8089b0:	df000d15 	stw	fp,52(sp)
  8089b4:	df000d04 	addi	fp,sp,52
  8089b8:	e13ffe15 	stw	r4,-8(fp)
  8089bc:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DIR dj;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 0);
  8089c0:	e0fffe04 	addi	r3,fp,-8
  8089c4:	e0bff404 	addi	r2,fp,-48
  8089c8:	1809883a 	mov	r4,r3
  8089cc:	100b883a 	mov	r5,r2
  8089d0:	000d883a 	mov	r6,zero
  8089d4:	08066540 	call	806654 <chk_mounted>
  8089d8:	e0bff315 	stw	r2,-52(fp)
   if (res == FR_OK) {
  8089dc:	e0bff317 	ldw	r2,-52(fp)
  8089e0:	1000131e 	bne	r2,zero,808a30 <f_stat+0x88>
      INIT_BUF(dj);
  8089e4:	e0bffb04 	addi	r2,fp,-20
  8089e8:	e0bffa15 	stw	r2,-24(fp)
      res = follow_path(&dj, path); /* Follow the file path */
  8089ec:	e0bffe17 	ldw	r2,-8(fp)
  8089f0:	e0fff404 	addi	r3,fp,-48
  8089f4:	1809883a 	mov	r4,r3
  8089f8:	100b883a 	mov	r5,r2
  8089fc:	08063100 	call	806310 <follow_path>
  808a00:	e0bff315 	stw	r2,-52(fp)
      if (res == FR_OK) {           /* Follow completed */
  808a04:	e0bff317 	ldw	r2,-52(fp)
  808a08:	1000091e 	bne	r2,zero,808a30 <f_stat+0x88>
         if (dj.dir)    /* Found an object */
  808a0c:	e0bff917 	ldw	r2,-28(fp)
  808a10:	10000526 	beq	r2,zero,808a28 <f_stat+0x80>
            get_fileinfo(&dj, fno);
  808a14:	e0bff404 	addi	r2,fp,-48
  808a18:	1009883a 	mov	r4,r2
  808a1c:	e17fff17 	ldw	r5,-4(fp)
  808a20:	08060e00 	call	8060e0 <get_fileinfo>
  808a24:	00000206 	br	808a30 <f_stat+0x88>
         else        /* It is root dir */
            res = FR_INVALID_NAME;
  808a28:	00800184 	movi	r2,6
  808a2c:	e0bff315 	stw	r2,-52(fp)
      }
      FREE_BUF();
   }

   LEAVE_FF(dj.fs, res);
  808a30:	e0bff317 	ldw	r2,-52(fp)
}
  808a34:	e037883a 	mov	sp,fp
  808a38:	dfc00117 	ldw	ra,4(sp)
  808a3c:	df000017 	ldw	fp,0(sp)
  808a40:	dec00204 	addi	sp,sp,8
  808a44:	f800283a 	ret

00808a48 <f_getfree>:
FRESULT f_getfree (
   const TCHAR *path,   /* Pointer to the logical drive number (root dir) */
   uint32_t *nclst,     /* Pointer to the variable to return number of free clusters */
   FATFS **fatfs     /* Pointer to pointer to corresponding file system object to return */
)
{
  808a48:	defff304 	addi	sp,sp,-52
  808a4c:	dfc00c15 	stw	ra,48(sp)
  808a50:	df000b15 	stw	fp,44(sp)
  808a54:	df000b04 	addi	fp,sp,44
  808a58:	e13ffd15 	stw	r4,-12(fp)
  808a5c:	e17ffe15 	stw	r5,-8(fp)
  808a60:	e1bfff15 	stw	r6,-4(fp)
   uint32_t i;
   uint8_t fat, *p;


   /* Get drive number */
   res = chk_mounted(&path, fatfs, 0);
  808a64:	e0bffd04 	addi	r2,fp,-12
  808a68:	1009883a 	mov	r4,r2
  808a6c:	e17fff17 	ldw	r5,-4(fp)
  808a70:	000d883a 	mov	r6,zero
  808a74:	08066540 	call	806654 <chk_mounted>
  808a78:	e0bff515 	stw	r2,-44(fp)
   if (res == FR_OK) {
  808a7c:	e0bff517 	ldw	r2,-44(fp)
  808a80:	1000a61e 	bne	r2,zero,808d1c <f_getfree+0x2d4>
      /* If free_clust is valid, return it without full cluster scan */
      if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
  808a84:	e0bfff17 	ldw	r2,-4(fp)
  808a88:	10800017 	ldw	r2,0(r2)
  808a8c:	10800417 	ldw	r2,16(r2)
  808a90:	e0ffff17 	ldw	r3,-4(fp)
  808a94:	18c00017 	ldw	r3,0(r3)
  808a98:	18c00617 	ldw	r3,24(r3)
  808a9c:	18ffff84 	addi	r3,r3,-2
  808aa0:	18800636 	bltu	r3,r2,808abc <f_getfree+0x74>
         *nclst = (*fatfs)->free_clust;
  808aa4:	e0bfff17 	ldw	r2,-4(fp)
  808aa8:	10800017 	ldw	r2,0(r2)
  808aac:	10c00417 	ldw	r3,16(r2)
  808ab0:	e0bffe17 	ldw	r2,-8(fp)
  808ab4:	10c00015 	stw	r3,0(r2)
  808ab8:	00009806 	br	808d1c <f_getfree+0x2d4>
      } else {
         /* Get number of free clusters */
         fat = (*fatfs)->fs_type;
  808abc:	e0bfff17 	ldw	r2,-4(fp)
  808ac0:	10800017 	ldw	r2,0(r2)
  808ac4:	10800003 	ldbu	r2,0(r2)
  808ac8:	e0bffb05 	stb	r2,-20(fp)
         n = 0;
  808acc:	e03ff615 	stw	zero,-40(fp)
         if (fat == FS_FAT12) {
  808ad0:	e0bffb03 	ldbu	r2,-20(fp)
  808ad4:	10800058 	cmpnei	r2,r2,1
  808ad8:	1000231e 	bne	r2,zero,808b68 <f_getfree+0x120>
            clst = 2;
  808adc:	00800084 	movi	r2,2
  808ae0:	e0bff715 	stw	r2,-36(fp)
            do {
               stat = get_fat(*fatfs, clst);
  808ae4:	e0bfff17 	ldw	r2,-4(fp)
  808ae8:	10800017 	ldw	r2,0(r2)
  808aec:	1009883a 	mov	r4,r2
  808af0:	e17ff717 	ldw	r5,-36(fp)
  808af4:	0804c8c0 	call	804c8c <get_fat>
  808af8:	e0bffc15 	stw	r2,-16(fp)
               if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  808afc:	e0bffc17 	ldw	r2,-16(fp)
  808b00:	10bfffd8 	cmpnei	r2,r2,-1
  808b04:	1000031e 	bne	r2,zero,808b14 <f_getfree+0xcc>
  808b08:	00800044 	movi	r2,1
  808b0c:	e0bff515 	stw	r2,-44(fp)
  808b10:	00001406 	br	808b64 <f_getfree+0x11c>
               if (stat == 1) { res = FR_INT_ERR; break; }
  808b14:	e0bffc17 	ldw	r2,-16(fp)
  808b18:	10800058 	cmpnei	r2,r2,1
  808b1c:	1000031e 	bne	r2,zero,808b2c <f_getfree+0xe4>
  808b20:	00800084 	movi	r2,2
  808b24:	e0bff515 	stw	r2,-44(fp)
  808b28:	00000e06 	br	808b64 <f_getfree+0x11c>
               if (stat == 0) n++;
  808b2c:	e0bffc17 	ldw	r2,-16(fp)
  808b30:	1000031e 	bne	r2,zero,808b40 <f_getfree+0xf8>
  808b34:	e0bff617 	ldw	r2,-40(fp)
  808b38:	10800044 	addi	r2,r2,1
  808b3c:	e0bff615 	stw	r2,-40(fp)
            } while (++clst < (*fatfs)->n_fatent);
  808b40:	e0bff717 	ldw	r2,-36(fp)
  808b44:	10800044 	addi	r2,r2,1
  808b48:	e0bff715 	stw	r2,-36(fp)
  808b4c:	e0bfff17 	ldw	r2,-4(fp)
  808b50:	10800017 	ldw	r2,0(r2)
  808b54:	10800617 	ldw	r2,24(r2)
  808b58:	e0fff717 	ldw	r3,-36(fp)
  808b5c:	18bfe136 	bltu	r3,r2,808ae4 <__alt_data_end+0xff808ae4>
  808b60:	00006006 	br	808ce4 <f_getfree+0x29c>
  808b64:	00005f06 	br	808ce4 <f_getfree+0x29c>
         } else {
            clst = (*fatfs)->n_fatent;
  808b68:	e0bfff17 	ldw	r2,-4(fp)
  808b6c:	10800017 	ldw	r2,0(r2)
  808b70:	10800617 	ldw	r2,24(r2)
  808b74:	e0bff715 	stw	r2,-36(fp)
            sect = (*fatfs)->fatbase;
  808b78:	e0bfff17 	ldw	r2,-4(fp)
  808b7c:	10800017 	ldw	r2,0(r2)
  808b80:	10800817 	ldw	r2,32(r2)
  808b84:	e0bff815 	stw	r2,-32(fp)
            i = 0; p = 0;
  808b88:	e03ff915 	stw	zero,-28(fp)
  808b8c:	e03ffa15 	stw	zero,-24(fp)
            do {
               if (!i) {
  808b90:	e0bff917 	ldw	r2,-28(fp)
  808b94:	1000111e 	bne	r2,zero,808bdc <f_getfree+0x194>
                  res = move_window(*fatfs, sect++);
  808b98:	e0bfff17 	ldw	r2,-4(fp)
  808b9c:	11000017 	ldw	r4,0(r2)
  808ba0:	e0bff817 	ldw	r2,-32(fp)
  808ba4:	10c00044 	addi	r3,r2,1
  808ba8:	e0fff815 	stw	r3,-32(fp)
  808bac:	100b883a 	mov	r5,r2
  808bb0:	08048a80 	call	8048a8 <move_window>
  808bb4:	e0bff515 	stw	r2,-44(fp)
                  if (res != FR_OK) break;
  808bb8:	e0bff517 	ldw	r2,-44(fp)
  808bbc:	10000126 	beq	r2,zero,808bc4 <f_getfree+0x17c>
  808bc0:	00004806 	br	808ce4 <f_getfree+0x29c>
                  p = (*fatfs)->win;
  808bc4:	e0bfff17 	ldw	r2,-4(fp)
  808bc8:	10800017 	ldw	r2,0(r2)
  808bcc:	10800c04 	addi	r2,r2,48
  808bd0:	e0bffa15 	stw	r2,-24(fp)
                  i = SS(*fatfs);
  808bd4:	00808004 	movi	r2,512
  808bd8:	e0bff915 	stw	r2,-28(fp)
               }
               if (fat == FS_FAT16) {
  808bdc:	e0bffb03 	ldbu	r2,-20(fp)
  808be0:	10800098 	cmpnei	r2,r2,2
  808be4:	1000181e 	bne	r2,zero,808c48 <f_getfree+0x200>
                  if (LD_WORD(p) == 0) n++;
  808be8:	e0bffa17 	ldw	r2,-24(fp)
  808bec:	10800044 	addi	r2,r2,1
  808bf0:	10800003 	ldbu	r2,0(r2)
  808bf4:	10803fcc 	andi	r2,r2,255
  808bf8:	1004923a 	slli	r2,r2,8
  808bfc:	1007883a 	mov	r3,r2
  808c00:	e0bffa17 	ldw	r2,-24(fp)
  808c04:	10800003 	ldbu	r2,0(r2)
  808c08:	10803fcc 	andi	r2,r2,255
  808c0c:	1884b03a 	or	r2,r3,r2
  808c10:	10bfffcc 	andi	r2,r2,65535
  808c14:	10a0001c 	xori	r2,r2,32768
  808c18:	10a00004 	addi	r2,r2,-32768
  808c1c:	1000031e 	bne	r2,zero,808c2c <f_getfree+0x1e4>
  808c20:	e0bff617 	ldw	r2,-40(fp)
  808c24:	10800044 	addi	r2,r2,1
  808c28:	e0bff615 	stw	r2,-40(fp)
                  p += 2; i -= 2;
  808c2c:	e0bffa17 	ldw	r2,-24(fp)
  808c30:	10800084 	addi	r2,r2,2
  808c34:	e0bffa15 	stw	r2,-24(fp)
  808c38:	e0bff917 	ldw	r2,-28(fp)
  808c3c:	10bfff84 	addi	r2,r2,-2
  808c40:	e0bff915 	stw	r2,-28(fp)
  808c44:	00002206 	br	808cd0 <f_getfree+0x288>
               } else {
                  if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
  808c48:	e0bffa17 	ldw	r2,-24(fp)
  808c4c:	108000c4 	addi	r2,r2,3
  808c50:	10800003 	ldbu	r2,0(r2)
  808c54:	10803fcc 	andi	r2,r2,255
  808c58:	1006963a 	slli	r3,r2,24
  808c5c:	e0bffa17 	ldw	r2,-24(fp)
  808c60:	10800084 	addi	r2,r2,2
  808c64:	10800003 	ldbu	r2,0(r2)
  808c68:	10803fcc 	andi	r2,r2,255
  808c6c:	1004943a 	slli	r2,r2,16
  808c70:	1884b03a 	or	r2,r3,r2
  808c74:	e0fffa17 	ldw	r3,-24(fp)
  808c78:	18c00044 	addi	r3,r3,1
  808c7c:	18c00003 	ldbu	r3,0(r3)
  808c80:	18c03fcc 	andi	r3,r3,255
  808c84:	1806923a 	slli	r3,r3,8
  808c88:	10c6b03a 	or	r3,r2,r3
  808c8c:	e0bffa17 	ldw	r2,-24(fp)
  808c90:	10800003 	ldbu	r2,0(r2)
  808c94:	10803fcc 	andi	r2,r2,255
  808c98:	1886b03a 	or	r3,r3,r2
  808c9c:	00840034 	movhi	r2,4096
  808ca0:	10bfffc4 	addi	r2,r2,-1
  808ca4:	1884703a 	and	r2,r3,r2
  808ca8:	1000031e 	bne	r2,zero,808cb8 <f_getfree+0x270>
  808cac:	e0bff617 	ldw	r2,-40(fp)
  808cb0:	10800044 	addi	r2,r2,1
  808cb4:	e0bff615 	stw	r2,-40(fp)
                  p += 4; i -= 4;
  808cb8:	e0bffa17 	ldw	r2,-24(fp)
  808cbc:	10800104 	addi	r2,r2,4
  808cc0:	e0bffa15 	stw	r2,-24(fp)
  808cc4:	e0bff917 	ldw	r2,-28(fp)
  808cc8:	10bfff04 	addi	r2,r2,-4
  808ccc:	e0bff915 	stw	r2,-28(fp)
               }
            } while (--clst);
  808cd0:	e0bff717 	ldw	r2,-36(fp)
  808cd4:	10bfffc4 	addi	r2,r2,-1
  808cd8:	e0bff715 	stw	r2,-36(fp)
  808cdc:	e0bff717 	ldw	r2,-36(fp)
  808ce0:	103fab1e 	bne	r2,zero,808b90 <__alt_data_end+0xff808b90>
         }
         (*fatfs)->free_clust = n;
  808ce4:	e0bfff17 	ldw	r2,-4(fp)
  808ce8:	10800017 	ldw	r2,0(r2)
  808cec:	e0fff617 	ldw	r3,-40(fp)
  808cf0:	10c00415 	stw	r3,16(r2)
         if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
  808cf4:	e0bffb03 	ldbu	r2,-20(fp)
  808cf8:	108000d8 	cmpnei	r2,r2,3
  808cfc:	1000041e 	bne	r2,zero,808d10 <f_getfree+0x2c8>
  808d00:	e0bfff17 	ldw	r2,-4(fp)
  808d04:	10800017 	ldw	r2,0(r2)
  808d08:	00c00044 	movi	r3,1
  808d0c:	10c00145 	stb	r3,5(r2)
         *nclst = n;
  808d10:	e0bffe17 	ldw	r2,-8(fp)
  808d14:	e0fff617 	ldw	r3,-40(fp)
  808d18:	10c00015 	stw	r3,0(r2)
      }
   }
   LEAVE_FF(*fatfs, res);
  808d1c:	e0bff517 	ldw	r2,-44(fp)
}
  808d20:	e037883a 	mov	sp,fp
  808d24:	dfc00117 	ldw	ra,4(sp)
  808d28:	df000017 	ldw	fp,0(sp)
  808d2c:	dec00204 	addi	sp,sp,8
  808d30:	f800283a 	ret

00808d34 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
   FIL *fp     /* Pointer to the file object */
)
{
  808d34:	defffb04 	addi	sp,sp,-20
  808d38:	dfc00415 	stw	ra,16(sp)
  808d3c:	df000315 	stw	fp,12(sp)
  808d40:	df000304 	addi	fp,sp,12
  808d44:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   uint32_t ncl;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
  808d48:	e0bfff17 	ldw	r2,-4(fp)
  808d4c:	10c00017 	ldw	r3,0(r2)
  808d50:	e0bfff17 	ldw	r2,-4(fp)
  808d54:	1080010b 	ldhu	r2,4(r2)
  808d58:	10bfffcc 	andi	r2,r2,65535
  808d5c:	1809883a 	mov	r4,r3
  808d60:	100b883a 	mov	r5,r2
  808d64:	0806f900 	call	806f90 <validate>
  808d68:	e0bffd15 	stw	r2,-12(fp)
   if (res == FR_OK) {
  808d6c:	e0bffd17 	ldw	r2,-12(fp)
  808d70:	1000101e 	bne	r2,zero,808db4 <f_truncate+0x80>
      if (fp->flag & FA__ERROR) {         /* Check abort flag */
  808d74:	e0bfff17 	ldw	r2,-4(fp)
  808d78:	10800183 	ldbu	r2,6(r2)
  808d7c:	10803fcc 	andi	r2,r2,255
  808d80:	1080201c 	xori	r2,r2,128
  808d84:	10bfe004 	addi	r2,r2,-128
  808d88:	1000030e 	bge	r2,zero,808d98 <f_truncate+0x64>
         res = FR_INT_ERR;
  808d8c:	00800084 	movi	r2,2
  808d90:	e0bffd15 	stw	r2,-12(fp)
  808d94:	00000706 	br	808db4 <f_truncate+0x80>
      } else {
         if (!(fp->flag & FA_WRITE))      /* Check access mode */
  808d98:	e0bfff17 	ldw	r2,-4(fp)
  808d9c:	10800183 	ldbu	r2,6(r2)
  808da0:	10803fcc 	andi	r2,r2,255
  808da4:	1080008c 	andi	r2,r2,2
  808da8:	1000021e 	bne	r2,zero,808db4 <f_truncate+0x80>
            res = FR_DENIED;
  808dac:	008001c4 	movi	r2,7
  808db0:	e0bffd15 	stw	r2,-12(fp)
      }
   }
   if (res == FR_OK) {
  808db4:	e0bffd17 	ldw	r2,-12(fp)
  808db8:	1000521e 	bne	r2,zero,808f04 <f_truncate+0x1d0>
      if (fp->fsize > fp->fptr) {
  808dbc:	e0bfff17 	ldw	r2,-4(fp)
  808dc0:	10800317 	ldw	r2,12(r2)
  808dc4:	e0ffff17 	ldw	r3,-4(fp)
  808dc8:	18c00217 	ldw	r3,8(r3)
  808dcc:	1880442e 	bgeu	r3,r2,808ee0 <f_truncate+0x1ac>
         fp->fsize = fp->fptr;   /* Set file size to current R/W point */
  808dd0:	e0bfff17 	ldw	r2,-4(fp)
  808dd4:	10c00217 	ldw	r3,8(r2)
  808dd8:	e0bfff17 	ldw	r2,-4(fp)
  808ddc:	10c00315 	stw	r3,12(r2)
         fp->flag |= FA__WRITTEN;
  808de0:	e0bfff17 	ldw	r2,-4(fp)
  808de4:	10800183 	ldbu	r2,6(r2)
  808de8:	10800814 	ori	r2,r2,32
  808dec:	1007883a 	mov	r3,r2
  808df0:	e0bfff17 	ldw	r2,-4(fp)
  808df4:	10c00185 	stb	r3,6(r2)
         if (fp->fptr == 0) { /* When set file size to zero, remove entire cluster chain */
  808df8:	e0bfff17 	ldw	r2,-4(fp)
  808dfc:	10800217 	ldw	r2,8(r2)
  808e00:	10000b1e 	bne	r2,zero,808e30 <f_truncate+0xfc>
            res = remove_chain(fp->fs, fp->sclust);
  808e04:	e0bfff17 	ldw	r2,-4(fp)
  808e08:	10c00017 	ldw	r3,0(r2)
  808e0c:	e0bfff17 	ldw	r2,-4(fp)
  808e10:	10800417 	ldw	r2,16(r2)
  808e14:	1809883a 	mov	r4,r3
  808e18:	100b883a 	mov	r5,r2
  808e1c:	08052800 	call	805280 <remove_chain>
  808e20:	e0bffd15 	stw	r2,-12(fp)
            fp->sclust = 0;
  808e24:	e0bfff17 	ldw	r2,-4(fp)
  808e28:	10000415 	stw	zero,16(r2)
  808e2c:	00002c06 	br	808ee0 <f_truncate+0x1ac>
         } else {          /* When truncate a part of the file, remove remaining clusters */
            ncl = get_fat(fp->fs, fp->clust);
  808e30:	e0bfff17 	ldw	r2,-4(fp)
  808e34:	10c00017 	ldw	r3,0(r2)
  808e38:	e0bfff17 	ldw	r2,-4(fp)
  808e3c:	10800517 	ldw	r2,20(r2)
  808e40:	1809883a 	mov	r4,r3
  808e44:	100b883a 	mov	r5,r2
  808e48:	0804c8c0 	call	804c8c <get_fat>
  808e4c:	e0bffe15 	stw	r2,-8(fp)
            res = FR_OK;
  808e50:	e03ffd15 	stw	zero,-12(fp)
            if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
  808e54:	e0bffe17 	ldw	r2,-8(fp)
  808e58:	10bfffd8 	cmpnei	r2,r2,-1
  808e5c:	1000021e 	bne	r2,zero,808e68 <f_truncate+0x134>
  808e60:	00800044 	movi	r2,1
  808e64:	e0bffd15 	stw	r2,-12(fp)
            if (ncl == 1) res = FR_INT_ERR;
  808e68:	e0bffe17 	ldw	r2,-8(fp)
  808e6c:	10800058 	cmpnei	r2,r2,1
  808e70:	1000021e 	bne	r2,zero,808e7c <f_truncate+0x148>
  808e74:	00800084 	movi	r2,2
  808e78:	e0bffd15 	stw	r2,-12(fp)
            if (res == FR_OK && ncl < fp->fs->n_fatent) {
  808e7c:	e0bffd17 	ldw	r2,-12(fp)
  808e80:	1000171e 	bne	r2,zero,808ee0 <f_truncate+0x1ac>
  808e84:	e0bfff17 	ldw	r2,-4(fp)
  808e88:	10800017 	ldw	r2,0(r2)
  808e8c:	10800617 	ldw	r2,24(r2)
  808e90:	e0fffe17 	ldw	r3,-8(fp)
  808e94:	1880122e 	bgeu	r3,r2,808ee0 <f_truncate+0x1ac>
               res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
  808e98:	e0bfff17 	ldw	r2,-4(fp)
  808e9c:	10c00017 	ldw	r3,0(r2)
  808ea0:	e0bfff17 	ldw	r2,-4(fp)
  808ea4:	10800517 	ldw	r2,20(r2)
  808ea8:	1809883a 	mov	r4,r3
  808eac:	100b883a 	mov	r5,r2
  808eb0:	01840034 	movhi	r6,4096
  808eb4:	31bfffc4 	addi	r6,r6,-1
  808eb8:	0804f100 	call	804f10 <put_fat>
  808ebc:	e0bffd15 	stw	r2,-12(fp)
               if (res == FR_OK) res = remove_chain(fp->fs, ncl);
  808ec0:	e0bffd17 	ldw	r2,-12(fp)
  808ec4:	1000061e 	bne	r2,zero,808ee0 <f_truncate+0x1ac>
  808ec8:	e0bfff17 	ldw	r2,-4(fp)
  808ecc:	10800017 	ldw	r2,0(r2)
  808ed0:	1009883a 	mov	r4,r2
  808ed4:	e17ffe17 	ldw	r5,-8(fp)
  808ed8:	08052800 	call	805280 <remove_chain>
  808edc:	e0bffd15 	stw	r2,-12(fp)
            }
         }
      }
      if (res != FR_OK) fp->flag |= FA__ERROR;
  808ee0:	e0bffd17 	ldw	r2,-12(fp)
  808ee4:	10000726 	beq	r2,zero,808f04 <f_truncate+0x1d0>
  808ee8:	e0bfff17 	ldw	r2,-4(fp)
  808eec:	10c00183 	ldbu	r3,6(r2)
  808ef0:	00bfe004 	movi	r2,-128
  808ef4:	1884b03a 	or	r2,r3,r2
  808ef8:	1007883a 	mov	r3,r2
  808efc:	e0bfff17 	ldw	r2,-4(fp)
  808f00:	10c00185 	stb	r3,6(r2)
   }

   LEAVE_FF(fp->fs, res);
  808f04:	e0bffd17 	ldw	r2,-12(fp)
}
  808f08:	e037883a 	mov	sp,fp
  808f0c:	dfc00117 	ldw	ra,4(sp)
  808f10:	df000017 	ldw	fp,0(sp)
  808f14:	dec00204 	addi	sp,sp,8
  808f18:	f800283a 	ret

00808f1c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
   const TCHAR *path    /* Pointer to the file or directory path */
)
{
  808f1c:	deffe904 	addi	sp,sp,-92
  808f20:	dfc01615 	stw	ra,88(sp)
  808f24:	df001515 	stw	fp,84(sp)
  808f28:	df001504 	addi	fp,sp,84
  808f2c:	e13fff15 	stw	r4,-4(fp)
   uint8_t *dir;
   uint32_t dclst;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  808f30:	e0ffff04 	addi	r3,fp,-4
  808f34:	e0bfee04 	addi	r2,fp,-72
  808f38:	1809883a 	mov	r4,r3
  808f3c:	100b883a 	mov	r5,r2
  808f40:	01800044 	movi	r6,1
  808f44:	08066540 	call	806654 <chk_mounted>
  808f48:	e0bfeb15 	stw	r2,-84(fp)
   if (res == FR_OK) {
  808f4c:	e0bfeb17 	ldw	r2,-84(fp)
  808f50:	1000721e 	bne	r2,zero,80911c <f_unlink+0x200>
      INIT_BUF(dj);
  808f54:	e0bffc04 	addi	r2,fp,-16
  808f58:	e0bff415 	stw	r2,-48(fp)
      res = follow_path(&dj, path);    /* Follow the file path */
  808f5c:	e0bfff17 	ldw	r2,-4(fp)
  808f60:	e0ffee04 	addi	r3,fp,-72
  808f64:	1809883a 	mov	r4,r3
  808f68:	100b883a 	mov	r5,r2
  808f6c:	08063100 	call	806310 <follow_path>
  808f70:	e0bfeb15 	stw	r2,-84(fp)
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;        /* Cannot remove dot entry */
#if _FS_SHARE
      if (res == FR_OK) res = chk_lock(&dj, 2); /* Cannot remove open file */
#endif
      if (res == FR_OK) {              /* The object is accessible */
  808f74:	e0bfeb17 	ldw	r2,-84(fp)
  808f78:	1000681e 	bne	r2,zero,80911c <f_unlink+0x200>
         dir = dj.dir;
  808f7c:	e0bff317 	ldw	r2,-52(fp)
  808f80:	e0bfec15 	stw	r2,-80(fp)
         if (!dir) {
  808f84:	e0bfec17 	ldw	r2,-80(fp)
  808f88:	1000031e 	bne	r2,zero,808f98 <f_unlink+0x7c>
            res = FR_INVALID_NAME;     /* Cannot remove the start directory */
  808f8c:	00800184 	movi	r2,6
  808f90:	e0bfeb15 	stw	r2,-84(fp)
  808f94:	00000806 	br	808fb8 <f_unlink+0x9c>
         } else {
            if (dir[DIR_Attr] & AM_RDO)
  808f98:	e0bfec17 	ldw	r2,-80(fp)
  808f9c:	108002c4 	addi	r2,r2,11
  808fa0:	10800003 	ldbu	r2,0(r2)
  808fa4:	10803fcc 	andi	r2,r2,255
  808fa8:	1080004c 	andi	r2,r2,1
  808fac:	10000226 	beq	r2,zero,808fb8 <f_unlink+0x9c>
               res = FR_DENIED;     /* Cannot remove R/O object */
  808fb0:	008001c4 	movi	r2,7
  808fb4:	e0bfeb15 	stw	r2,-84(fp)
         }
         dclst = LD_CLUST(dir);
  808fb8:	e0bfec17 	ldw	r2,-80(fp)
  808fbc:	10800544 	addi	r2,r2,21
  808fc0:	10800003 	ldbu	r2,0(r2)
  808fc4:	10803fcc 	andi	r2,r2,255
  808fc8:	1004923a 	slli	r2,r2,8
  808fcc:	1007883a 	mov	r3,r2
  808fd0:	e0bfec17 	ldw	r2,-80(fp)
  808fd4:	10800504 	addi	r2,r2,20
  808fd8:	10800003 	ldbu	r2,0(r2)
  808fdc:	10803fcc 	andi	r2,r2,255
  808fe0:	1884b03a 	or	r2,r3,r2
  808fe4:	10bfffcc 	andi	r2,r2,65535
  808fe8:	1006943a 	slli	r3,r2,16
  808fec:	e0bfec17 	ldw	r2,-80(fp)
  808ff0:	108006c4 	addi	r2,r2,27
  808ff4:	10800003 	ldbu	r2,0(r2)
  808ff8:	10803fcc 	andi	r2,r2,255
  808ffc:	1004923a 	slli	r2,r2,8
  809000:	1009883a 	mov	r4,r2
  809004:	e0bfec17 	ldw	r2,-80(fp)
  809008:	10800684 	addi	r2,r2,26
  80900c:	10800003 	ldbu	r2,0(r2)
  809010:	10803fcc 	andi	r2,r2,255
  809014:	2084b03a 	or	r2,r4,r2
  809018:	10bfffcc 	andi	r2,r2,65535
  80901c:	1884b03a 	or	r2,r3,r2
  809020:	e0bfed15 	stw	r2,-76(fp)
         if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) { /* Is it a sub-dir? */
  809024:	e0bfeb17 	ldw	r2,-84(fp)
  809028:	1000271e 	bne	r2,zero,8090c8 <f_unlink+0x1ac>
  80902c:	e0bfec17 	ldw	r2,-80(fp)
  809030:	108002c4 	addi	r2,r2,11
  809034:	10800003 	ldbu	r2,0(r2)
  809038:	10803fcc 	andi	r2,r2,255
  80903c:	1080040c 	andi	r2,r2,16
  809040:	10002126 	beq	r2,zero,8090c8 <f_unlink+0x1ac>
            if (dclst < 2) {
  809044:	e0bfed17 	ldw	r2,-76(fp)
  809048:	108000a8 	cmpgeui	r2,r2,2
  80904c:	1000031e 	bne	r2,zero,80905c <f_unlink+0x140>
               res = FR_INT_ERR;
  809050:	00800084 	movi	r2,2
  809054:	e0bfeb15 	stw	r2,-84(fp)
  809058:	00001b06 	br	8090c8 <f_unlink+0x1ac>
            } else {
               mem_cpy(&sdj, &dj, sizeof(DIR)); /* Check if the sub-dir is empty or not */
  80905c:	e0fff504 	addi	r3,fp,-44
  809060:	e0bfee04 	addi	r2,fp,-72
  809064:	1809883a 	mov	r4,r3
  809068:	100b883a 	mov	r5,r2
  80906c:	01800704 	movi	r6,28
  809070:	08046dc0 	call	8046dc <mem_cpy>
               sdj.sclust = dclst;
  809074:	e0bfed17 	ldw	r2,-76(fp)
  809078:	e0bff715 	stw	r2,-36(fp)
               res = dir_sdi(&sdj, 2);    /* Exclude dot entries */
  80907c:	e0bff504 	addi	r2,fp,-44
  809080:	1009883a 	mov	r4,r2
  809084:	01400084 	movi	r5,2
  809088:	08055780 	call	805578 <dir_sdi>
  80908c:	e0bfeb15 	stw	r2,-84(fp)
               if (res == FR_OK) {
  809090:	e0bfeb17 	ldw	r2,-84(fp)
  809094:	10000c1e 	bne	r2,zero,8090c8 <f_unlink+0x1ac>
                  res = dir_read(&sdj);
  809098:	e0bff504 	addi	r2,fp,-44
  80909c:	1009883a 	mov	r4,r2
  8090a0:	0805b400 	call	805b40 <dir_read>
  8090a4:	e0bfeb15 	stw	r2,-84(fp)
                  if (res == FR_OK        /* Not empty dir */
  8090a8:	e0bfeb17 	ldw	r2,-84(fp)
  8090ac:	1000021e 	bne	r2,zero,8090b8 <f_unlink+0x19c>
#if _FS_RPATH
                  || dclst == sdj.fs->cdir   /* Current dir */
#endif
                  ) res = FR_DENIED;
  8090b0:	008001c4 	movi	r2,7
  8090b4:	e0bfeb15 	stw	r2,-84(fp)
                  if (res == FR_NO_FILE) res = FR_OK; /* Empty */
  8090b8:	e0bfeb17 	ldw	r2,-84(fp)
  8090bc:	10800118 	cmpnei	r2,r2,4
  8090c0:	1000011e 	bne	r2,zero,8090c8 <f_unlink+0x1ac>
  8090c4:	e03feb15 	stw	zero,-84(fp)
               }
            }
         }
         if (res == FR_OK) {
  8090c8:	e0bfeb17 	ldw	r2,-84(fp)
  8090cc:	1000131e 	bne	r2,zero,80911c <f_unlink+0x200>
            res = dir_remove(&dj);     /* Remove the directory entry */
  8090d0:	e0bfee04 	addi	r2,fp,-72
  8090d4:	1009883a 	mov	r4,r2
  8090d8:	0805d5c0 	call	805d5c <dir_remove>
  8090dc:	e0bfeb15 	stw	r2,-84(fp)
            if (res == FR_OK) {
  8090e0:	e0bfeb17 	ldw	r2,-84(fp)
  8090e4:	10000d1e 	bne	r2,zero,80911c <f_unlink+0x200>
               if (dclst)           /* Remove the cluster chain if exist */
  8090e8:	e0bfed17 	ldw	r2,-76(fp)
  8090ec:	10000526 	beq	r2,zero,809104 <f_unlink+0x1e8>
                  res = remove_chain(dj.fs, dclst);
  8090f0:	e0bfee17 	ldw	r2,-72(fp)
  8090f4:	1009883a 	mov	r4,r2
  8090f8:	e17fed17 	ldw	r5,-76(fp)
  8090fc:	08052800 	call	805280 <remove_chain>
  809100:	e0bfeb15 	stw	r2,-84(fp)
               if (res == FR_OK) res = sync(dj.fs);
  809104:	e0bfeb17 	ldw	r2,-84(fp)
  809108:	1000041e 	bne	r2,zero,80911c <f_unlink+0x200>
  80910c:	e0bfee17 	ldw	r2,-72(fp)
  809110:	1009883a 	mov	r4,r2
  809114:	0804a040 	call	804a04 <sync>
  809118:	e0bfeb15 	stw	r2,-84(fp)
            }
         }
      }
      FREE_BUF();
   }
   LEAVE_FF(dj.fs, res);
  80911c:	e0bfeb17 	ldw	r2,-84(fp)
}
  809120:	e037883a 	mov	sp,fp
  809124:	dfc00117 	ldw	ra,4(sp)
  809128:	df000017 	ldw	fp,0(sp)
  80912c:	dec00204 	addi	sp,sp,8
  809130:	f800283a 	ret

00809134 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
   const TCHAR *path    /* Pointer to the directory path */
)
{
  809134:	deffec04 	addi	sp,sp,-80
  809138:	dfc01315 	stw	ra,76(sp)
  80913c:	df001215 	stw	fp,72(sp)
  809140:	df001204 	addi	fp,sp,72
  809144:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   DIR dj;
   uint8_t *dir, n;
   uint32_t dsc, dcl, pcl, tim = get_fattime();
  809148:	08046b00 	call	8046b0 <get_fattime>
  80914c:	e0bff215 	stw	r2,-56(fp)
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  809150:	e0ffff04 	addi	r3,fp,-4
  809154:	e0bff504 	addi	r2,fp,-44
  809158:	1809883a 	mov	r4,r3
  80915c:	100b883a 	mov	r5,r2
  809160:	01800044 	movi	r6,1
  809164:	08066540 	call	806654 <chk_mounted>
  809168:	e0bfee15 	stw	r2,-72(fp)
   if (res == FR_OK) {
  80916c:	e0bfee17 	ldw	r2,-72(fp)
  809170:	1000fa1e 	bne	r2,zero,80955c <f_mkdir+0x428>
      INIT_BUF(dj);
  809174:	e0bffc04 	addi	r2,fp,-16
  809178:	e0bffb15 	stw	r2,-20(fp)
      res = follow_path(&dj, path);       /* Follow the file path */
  80917c:	e0bfff17 	ldw	r2,-4(fp)
  809180:	e0fff504 	addi	r3,fp,-44
  809184:	1809883a 	mov	r4,r3
  809188:	100b883a 	mov	r5,r2
  80918c:	08063100 	call	806310 <follow_path>
  809190:	e0bfee15 	stw	r2,-72(fp)
      if (res == FR_OK) res = FR_EXIST;      /* Any object with same name is already existing */
  809194:	e0bfee17 	ldw	r2,-72(fp)
  809198:	1000021e 	bne	r2,zero,8091a4 <f_mkdir+0x70>
  80919c:	00800204 	movi	r2,8
  8091a0:	e0bfee15 	stw	r2,-72(fp)
      if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_NO_FILE) {            /* Can create a new directory */
  8091a4:	e0bfee17 	ldw	r2,-72(fp)
  8091a8:	10800118 	cmpnei	r2,r2,4
  8091ac:	1000eb1e 	bne	r2,zero,80955c <f_mkdir+0x428>
         dcl = create_chain(dj.fs, 0);    /* Allocate a cluster for the new directory table */
  8091b0:	e0bff517 	ldw	r2,-44(fp)
  8091b4:	1009883a 	mov	r4,r2
  8091b8:	000b883a 	mov	r5,zero
  8091bc:	08053940 	call	805394 <create_chain>
  8091c0:	e0bff315 	stw	r2,-52(fp)
         res = FR_OK;
  8091c4:	e03fee15 	stw	zero,-72(fp)
         if (dcl == 0) res = FR_DENIED;      /* No space to allocate a new cluster */
  8091c8:	e0bff317 	ldw	r2,-52(fp)
  8091cc:	1000021e 	bne	r2,zero,8091d8 <f_mkdir+0xa4>
  8091d0:	008001c4 	movi	r2,7
  8091d4:	e0bfee15 	stw	r2,-72(fp)
         if (dcl == 1) res = FR_INT_ERR;
  8091d8:	e0bff317 	ldw	r2,-52(fp)
  8091dc:	10800058 	cmpnei	r2,r2,1
  8091e0:	1000021e 	bne	r2,zero,8091ec <f_mkdir+0xb8>
  8091e4:	00800084 	movi	r2,2
  8091e8:	e0bfee15 	stw	r2,-72(fp)
         if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
  8091ec:	e0bff317 	ldw	r2,-52(fp)
  8091f0:	10bfffd8 	cmpnei	r2,r2,-1
  8091f4:	1000021e 	bne	r2,zero,809200 <f_mkdir+0xcc>
  8091f8:	00800044 	movi	r2,1
  8091fc:	e0bfee15 	stw	r2,-72(fp)
         if (res == FR_OK)             /* Flush FAT */
  809200:	e0bfee17 	ldw	r2,-72(fp)
  809204:	1000051e 	bne	r2,zero,80921c <f_mkdir+0xe8>
            res = move_window(dj.fs, 0);
  809208:	e0bff517 	ldw	r2,-44(fp)
  80920c:	1009883a 	mov	r4,r2
  809210:	000b883a 	mov	r5,zero
  809214:	08048a80 	call	8048a8 <move_window>
  809218:	e0bfee15 	stw	r2,-72(fp)
         if (res == FR_OK) {              /* Initialize the new directory table */
  80921c:	e0bfee17 	ldw	r2,-72(fp)
  809220:	10008a1e 	bne	r2,zero,80944c <f_mkdir+0x318>
            dsc = clust2sect(dj.fs, dcl);
  809224:	e0bff517 	ldw	r2,-44(fp)
  809228:	1009883a 	mov	r4,r2
  80922c:	e17ff317 	ldw	r5,-52(fp)
  809230:	0804c200 	call	804c20 <clust2sect>
  809234:	e0bff015 	stw	r2,-64(fp)
            dir = dj.fs->win;
  809238:	e0bff517 	ldw	r2,-44(fp)
  80923c:	10800c04 	addi	r2,r2,48
  809240:	e0bff415 	stw	r2,-48(fp)
            mem_set(dir, 0, SS(dj.fs));
  809244:	e13ff417 	ldw	r4,-48(fp)
  809248:	000b883a 	mov	r5,zero
  80924c:	01808004 	movi	r6,512
  809250:	08047480 	call	804748 <mem_set>
            mem_set(dir+DIR_Name, ' ', 8+3); /* Create "." entry */
  809254:	e13ff417 	ldw	r4,-48(fp)
  809258:	01400804 	movi	r5,32
  80925c:	018002c4 	movi	r6,11
  809260:	08047480 	call	804748 <mem_set>
            dir[DIR_Name] = '.';
  809264:	e0bff417 	ldw	r2,-48(fp)
  809268:	00c00b84 	movi	r3,46
  80926c:	10c00005 	stb	r3,0(r2)
            dir[DIR_Attr] = AM_DIR;
  809270:	e0bff417 	ldw	r2,-48(fp)
  809274:	108002c4 	addi	r2,r2,11
  809278:	00c00404 	movi	r3,16
  80927c:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_WrtTime, tim);
  809280:	e0bff417 	ldw	r2,-48(fp)
  809284:	10800584 	addi	r2,r2,22
  809288:	e0fff217 	ldw	r3,-56(fp)
  80928c:	10c00005 	stb	r3,0(r2)
  809290:	e0bff417 	ldw	r2,-48(fp)
  809294:	108005c4 	addi	r2,r2,23
  809298:	e0fff217 	ldw	r3,-56(fp)
  80929c:	18ffffcc 	andi	r3,r3,65535
  8092a0:	1806d23a 	srli	r3,r3,8
  8092a4:	10c00005 	stb	r3,0(r2)
  8092a8:	e0bff417 	ldw	r2,-48(fp)
  8092ac:	10800604 	addi	r2,r2,24
  8092b0:	e0fff217 	ldw	r3,-56(fp)
  8092b4:	1806d43a 	srli	r3,r3,16
  8092b8:	10c00005 	stb	r3,0(r2)
  8092bc:	e0bff417 	ldw	r2,-48(fp)
  8092c0:	10800644 	addi	r2,r2,25
  8092c4:	e0fff217 	ldw	r3,-56(fp)
  8092c8:	1806d63a 	srli	r3,r3,24
  8092cc:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, dcl);
  8092d0:	e0bff417 	ldw	r2,-48(fp)
  8092d4:	10800684 	addi	r2,r2,26
  8092d8:	e0fff317 	ldw	r3,-52(fp)
  8092dc:	10c00005 	stb	r3,0(r2)
  8092e0:	e0bff417 	ldw	r2,-48(fp)
  8092e4:	108006c4 	addi	r2,r2,27
  8092e8:	e0fff317 	ldw	r3,-52(fp)
  8092ec:	18ffffcc 	andi	r3,r3,65535
  8092f0:	1806d23a 	srli	r3,r3,8
  8092f4:	10c00005 	stb	r3,0(r2)
  8092f8:	e0bff417 	ldw	r2,-48(fp)
  8092fc:	10800504 	addi	r2,r2,20
  809300:	e0fff317 	ldw	r3,-52(fp)
  809304:	1806d43a 	srli	r3,r3,16
  809308:	10c00005 	stb	r3,0(r2)
  80930c:	e0bff417 	ldw	r2,-48(fp)
  809310:	10800544 	addi	r2,r2,21
  809314:	e0fff317 	ldw	r3,-52(fp)
  809318:	1806d43a 	srli	r3,r3,16
  80931c:	18ffffcc 	andi	r3,r3,65535
  809320:	1806d23a 	srli	r3,r3,8
  809324:	10c00005 	stb	r3,0(r2)
            mem_cpy(dir+SZ_DIR, dir, SZ_DIR);   /* Create ".." entry */
  809328:	e0bff417 	ldw	r2,-48(fp)
  80932c:	10800804 	addi	r2,r2,32
  809330:	1009883a 	mov	r4,r2
  809334:	e17ff417 	ldw	r5,-48(fp)
  809338:	01800804 	movi	r6,32
  80933c:	08046dc0 	call	8046dc <mem_cpy>
            dir[33] = '.'; pcl = dj.sclust;
  809340:	e0bff417 	ldw	r2,-48(fp)
  809344:	10800844 	addi	r2,r2,33
  809348:	00c00b84 	movi	r3,46
  80934c:	10c00005 	stb	r3,0(r2)
  809350:	e0bff717 	ldw	r2,-36(fp)
  809354:	e0bff115 	stw	r2,-60(fp)
            if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  809358:	e0bff517 	ldw	r2,-44(fp)
  80935c:	10800003 	ldbu	r2,0(r2)
  809360:	10803fcc 	andi	r2,r2,255
  809364:	108000d8 	cmpnei	r2,r2,3
  809368:	1000051e 	bne	r2,zero,809380 <f_mkdir+0x24c>
  80936c:	e0bff517 	ldw	r2,-44(fp)
  809370:	10c00917 	ldw	r3,36(r2)
  809374:	e0bff117 	ldw	r2,-60(fp)
  809378:	1880011e 	bne	r3,r2,809380 <f_mkdir+0x24c>
               pcl = 0;
  80937c:	e03ff115 	stw	zero,-60(fp)
            ST_CLUST(dir+SZ_DIR, pcl);
  809380:	e0bff417 	ldw	r2,-48(fp)
  809384:	10800e84 	addi	r2,r2,58
  809388:	e0fff117 	ldw	r3,-60(fp)
  80938c:	10c00005 	stb	r3,0(r2)
  809390:	e0bff417 	ldw	r2,-48(fp)
  809394:	10800ec4 	addi	r2,r2,59
  809398:	e0fff117 	ldw	r3,-60(fp)
  80939c:	18ffffcc 	andi	r3,r3,65535
  8093a0:	1806d23a 	srli	r3,r3,8
  8093a4:	10c00005 	stb	r3,0(r2)
  8093a8:	e0bff417 	ldw	r2,-48(fp)
  8093ac:	10800d04 	addi	r2,r2,52
  8093b0:	e0fff117 	ldw	r3,-60(fp)
  8093b4:	1806d43a 	srli	r3,r3,16
  8093b8:	10c00005 	stb	r3,0(r2)
  8093bc:	e0bff417 	ldw	r2,-48(fp)
  8093c0:	10800d44 	addi	r2,r2,53
  8093c4:	e0fff117 	ldw	r3,-60(fp)
  8093c8:	1806d43a 	srli	r3,r3,16
  8093cc:	18ffffcc 	andi	r3,r3,65535
  8093d0:	1806d23a 	srli	r3,r3,8
  8093d4:	10c00005 	stb	r3,0(r2)
            for (n = dj.fs->csize; n; n--) { /* Write dot entries and clear following sectors */
  8093d8:	e0bff517 	ldw	r2,-44(fp)
  8093dc:	10800083 	ldbu	r2,2(r2)
  8093e0:	e0bfef05 	stb	r2,-68(fp)
  8093e4:	00001706 	br	809444 <f_mkdir+0x310>
               dj.fs->winsect = dsc++;
  8093e8:	e0fff517 	ldw	r3,-44(fp)
  8093ec:	e0bff017 	ldw	r2,-64(fp)
  8093f0:	11000044 	addi	r4,r2,1
  8093f4:	e13ff015 	stw	r4,-64(fp)
  8093f8:	18800b15 	stw	r2,44(r3)
               dj.fs->wflag = 1;
  8093fc:	e0bff517 	ldw	r2,-44(fp)
  809400:	00c00044 	movi	r3,1
  809404:	10c00105 	stb	r3,4(r2)
               res = move_window(dj.fs, 0);
  809408:	e0bff517 	ldw	r2,-44(fp)
  80940c:	1009883a 	mov	r4,r2
  809410:	000b883a 	mov	r5,zero
  809414:	08048a80 	call	8048a8 <move_window>
  809418:	e0bfee15 	stw	r2,-72(fp)
               if (res != FR_OK) break;
  80941c:	e0bfee17 	ldw	r2,-72(fp)
  809420:	10000126 	beq	r2,zero,809428 <f_mkdir+0x2f4>
  809424:	00000906 	br	80944c <f_mkdir+0x318>
               mem_set(dir, 0, SS(dj.fs));
  809428:	e13ff417 	ldw	r4,-48(fp)
  80942c:	000b883a 	mov	r5,zero
  809430:	01808004 	movi	r6,512
  809434:	08047480 	call	804748 <mem_set>
            mem_cpy(dir+SZ_DIR, dir, SZ_DIR);   /* Create ".." entry */
            dir[33] = '.'; pcl = dj.sclust;
            if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
               pcl = 0;
            ST_CLUST(dir+SZ_DIR, pcl);
            for (n = dj.fs->csize; n; n--) { /* Write dot entries and clear following sectors */
  809438:	e0bfef03 	ldbu	r2,-68(fp)
  80943c:	10bfffc4 	addi	r2,r2,-1
  809440:	e0bfef05 	stb	r2,-68(fp)
  809444:	e0bfef03 	ldbu	r2,-68(fp)
  809448:	103fe71e 	bne	r2,zero,8093e8 <__alt_data_end+0xff8093e8>
               res = move_window(dj.fs, 0);
               if (res != FR_OK) break;
               mem_set(dir, 0, SS(dj.fs));
            }
         }
         if (res == FR_OK) res = dir_register(&dj);   /* Register the object to the directoy */
  80944c:	e0bfee17 	ldw	r2,-72(fp)
  809450:	1000041e 	bne	r2,zero,809464 <f_mkdir+0x330>
  809454:	e0bff504 	addi	r2,fp,-44
  809458:	1009883a 	mov	r4,r2
  80945c:	0805c3c0 	call	805c3c <dir_register>
  809460:	e0bfee15 	stw	r2,-72(fp)
         if (res != FR_OK) {
  809464:	e0bfee17 	ldw	r2,-72(fp)
  809468:	10000526 	beq	r2,zero,809480 <f_mkdir+0x34c>
            remove_chain(dj.fs, dcl);        /* Could not register, remove cluster chain */
  80946c:	e0bff517 	ldw	r2,-44(fp)
  809470:	1009883a 	mov	r4,r2
  809474:	e17ff317 	ldw	r5,-52(fp)
  809478:	08052800 	call	805280 <remove_chain>
  80947c:	00003706 	br	80955c <f_mkdir+0x428>
         } else {
            dir = dj.dir;
  809480:	e0bffa17 	ldw	r2,-24(fp)
  809484:	e0bff415 	stw	r2,-48(fp)
            dir[DIR_Attr] = AM_DIR;          /* Attribute */
  809488:	e0bff417 	ldw	r2,-48(fp)
  80948c:	108002c4 	addi	r2,r2,11
  809490:	00c00404 	movi	r3,16
  809494:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_WrtTime, tim);     /* Created time */
  809498:	e0bff417 	ldw	r2,-48(fp)
  80949c:	10800584 	addi	r2,r2,22
  8094a0:	e0fff217 	ldw	r3,-56(fp)
  8094a4:	10c00005 	stb	r3,0(r2)
  8094a8:	e0bff417 	ldw	r2,-48(fp)
  8094ac:	108005c4 	addi	r2,r2,23
  8094b0:	e0fff217 	ldw	r3,-56(fp)
  8094b4:	18ffffcc 	andi	r3,r3,65535
  8094b8:	1806d23a 	srli	r3,r3,8
  8094bc:	10c00005 	stb	r3,0(r2)
  8094c0:	e0bff417 	ldw	r2,-48(fp)
  8094c4:	10800604 	addi	r2,r2,24
  8094c8:	e0fff217 	ldw	r3,-56(fp)
  8094cc:	1806d43a 	srli	r3,r3,16
  8094d0:	10c00005 	stb	r3,0(r2)
  8094d4:	e0bff417 	ldw	r2,-48(fp)
  8094d8:	10800644 	addi	r2,r2,25
  8094dc:	e0fff217 	ldw	r3,-56(fp)
  8094e0:	1806d63a 	srli	r3,r3,24
  8094e4:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, dcl);              /* Table start cluster */
  8094e8:	e0bff417 	ldw	r2,-48(fp)
  8094ec:	10800684 	addi	r2,r2,26
  8094f0:	e0fff317 	ldw	r3,-52(fp)
  8094f4:	10c00005 	stb	r3,0(r2)
  8094f8:	e0bff417 	ldw	r2,-48(fp)
  8094fc:	108006c4 	addi	r2,r2,27
  809500:	e0fff317 	ldw	r3,-52(fp)
  809504:	18ffffcc 	andi	r3,r3,65535
  809508:	1806d23a 	srli	r3,r3,8
  80950c:	10c00005 	stb	r3,0(r2)
  809510:	e0bff417 	ldw	r2,-48(fp)
  809514:	10800504 	addi	r2,r2,20
  809518:	e0fff317 	ldw	r3,-52(fp)
  80951c:	1806d43a 	srli	r3,r3,16
  809520:	10c00005 	stb	r3,0(r2)
  809524:	e0bff417 	ldw	r2,-48(fp)
  809528:	10800544 	addi	r2,r2,21
  80952c:	e0fff317 	ldw	r3,-52(fp)
  809530:	1806d43a 	srli	r3,r3,16
  809534:	18ffffcc 	andi	r3,r3,65535
  809538:	1806d23a 	srli	r3,r3,8
  80953c:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
  809540:	e0bff517 	ldw	r2,-44(fp)
  809544:	00c00044 	movi	r3,1
  809548:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
  80954c:	e0bff517 	ldw	r2,-44(fp)
  809550:	1009883a 	mov	r4,r2
  809554:	0804a040 	call	804a04 <sync>
  809558:	e0bfee15 	stw	r2,-72(fp)
         }
      }
      FREE_BUF();
   }

   LEAVE_FF(dj.fs, res);
  80955c:	e0bfee17 	ldw	r2,-72(fp)
}
  809560:	e037883a 	mov	sp,fp
  809564:	dfc00117 	ldw	ra,4(sp)
  809568:	df000017 	ldw	fp,0(sp)
  80956c:	dec00204 	addi	sp,sp,8
  809570:	f800283a 	ret

00809574 <f_chmod>:
FRESULT f_chmod (
   const TCHAR *path,   /* Pointer to the file path */
   uint8_t value,       /* Attribute bits */
   uint8_t mask         /* Attribute mask to change */
)
{
  809574:	deffef04 	addi	sp,sp,-68
  809578:	dfc01015 	stw	ra,64(sp)
  80957c:	df000f15 	stw	fp,60(sp)
  809580:	df000f04 	addi	fp,sp,60
  809584:	e13ffd15 	stw	r4,-12(fp)
  809588:	2807883a 	mov	r3,r5
  80958c:	3005883a 	mov	r2,r6
  809590:	e0fffe05 	stb	r3,-8(fp)
  809594:	e0bfff05 	stb	r2,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  809598:	e0fffd04 	addi	r3,fp,-12
  80959c:	e0bff304 	addi	r2,fp,-52
  8095a0:	1809883a 	mov	r4,r3
  8095a4:	100b883a 	mov	r5,r2
  8095a8:	01800044 	movi	r6,1
  8095ac:	08066540 	call	806654 <chk_mounted>
  8095b0:	e0bff115 	stw	r2,-60(fp)
   if (res == FR_OK) {
  8095b4:	e0bff117 	ldw	r2,-60(fp)
  8095b8:	1000291e 	bne	r2,zero,809660 <f_chmod+0xec>
      INIT_BUF(dj);
  8095bc:	e0bffa04 	addi	r2,fp,-24
  8095c0:	e0bff915 	stw	r2,-28(fp)
      res = follow_path(&dj, path);    /* Follow the file path */
  8095c4:	e0bffd17 	ldw	r2,-12(fp)
  8095c8:	e0fff304 	addi	r3,fp,-52
  8095cc:	1809883a 	mov	r4,r3
  8095d0:	100b883a 	mov	r5,r2
  8095d4:	08063100 	call	806310 <follow_path>
  8095d8:	e0bff115 	stw	r2,-60(fp)
      FREE_BUF();
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_OK) {
  8095dc:	e0bff117 	ldw	r2,-60(fp)
  8095e0:	10001f1e 	bne	r2,zero,809660 <f_chmod+0xec>
         dir = dj.dir;
  8095e4:	e0bff817 	ldw	r2,-32(fp)
  8095e8:	e0bff215 	stw	r2,-56(fp)
         if (!dir) {                /* Is it a root directory? */
  8095ec:	e0bff217 	ldw	r2,-56(fp)
  8095f0:	1000031e 	bne	r2,zero,809600 <f_chmod+0x8c>
            res = FR_INVALID_NAME;
  8095f4:	00800184 	movi	r2,6
  8095f8:	e0bff115 	stw	r2,-60(fp)
  8095fc:	00001806 	br	809660 <f_chmod+0xec>
         } else {                /* File or sub directory */
            mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;   /* Valid attribute mask */
  809600:	e0bfff03 	ldbu	r2,-4(fp)
  809604:	108009cc 	andi	r2,r2,39
  809608:	e0bfff05 	stb	r2,-4(fp)
            dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (uint8_t)~mask);   /* Apply attribute change */
  80960c:	e0bff217 	ldw	r2,-56(fp)
  809610:	108002c4 	addi	r2,r2,11
  809614:	e13ffe03 	ldbu	r4,-8(fp)
  809618:	e0ffff03 	ldbu	r3,-4(fp)
  80961c:	20c6703a 	and	r3,r4,r3
  809620:	180b883a 	mov	r5,r3
  809624:	e0fff217 	ldw	r3,-56(fp)
  809628:	18c002c4 	addi	r3,r3,11
  80962c:	18c00003 	ldbu	r3,0(r3)
  809630:	e13fff03 	ldbu	r4,-4(fp)
  809634:	0108303a 	nor	r4,zero,r4
  809638:	1906703a 	and	r3,r3,r4
  80963c:	28c6b03a 	or	r3,r5,r3
  809640:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
  809644:	e0bff317 	ldw	r2,-52(fp)
  809648:	00c00044 	movi	r3,1
  80964c:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
  809650:	e0bff317 	ldw	r2,-52(fp)
  809654:	1009883a 	mov	r4,r2
  809658:	0804a040 	call	804a04 <sync>
  80965c:	e0bff115 	stw	r2,-60(fp)
         }
      }
   }

   LEAVE_FF(dj.fs, res);
  809660:	e0bff117 	ldw	r2,-60(fp)
}
  809664:	e037883a 	mov	sp,fp
  809668:	dfc00117 	ldw	ra,4(sp)
  80966c:	df000017 	ldw	fp,0(sp)
  809670:	dec00204 	addi	sp,sp,8
  809674:	f800283a 	ret

00809678 <f_utime>:

FRESULT f_utime (
   const TCHAR *path,   /* Pointer to the file/directory name */
   const FILINFO *fno   /* Pointer to the time stamp to be set */
)
{
  809678:	defff004 	addi	sp,sp,-64
  80967c:	dfc00f15 	stw	ra,60(sp)
  809680:	df000e15 	stw	fp,56(sp)
  809684:	df000e04 	addi	fp,sp,56
  809688:	e13ffe15 	stw	r4,-8(fp)
  80968c:	e17fff15 	stw	r5,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  809690:	e0fffe04 	addi	r3,fp,-8
  809694:	e0bff404 	addi	r2,fp,-48
  809698:	1809883a 	mov	r4,r3
  80969c:	100b883a 	mov	r5,r2
  8096a0:	01800044 	movi	r6,1
  8096a4:	08066540 	call	806654 <chk_mounted>
  8096a8:	e0bff215 	stw	r2,-56(fp)
   if (res == FR_OK) {
  8096ac:	e0bff217 	ldw	r2,-56(fp)
  8096b0:	1000301e 	bne	r2,zero,809774 <f_utime+0xfc>
      INIT_BUF(dj);
  8096b4:	e0bffb04 	addi	r2,fp,-20
  8096b8:	e0bffa15 	stw	r2,-24(fp)
      res = follow_path(&dj, path); /* Follow the file path */
  8096bc:	e0bffe17 	ldw	r2,-8(fp)
  8096c0:	e0fff404 	addi	r3,fp,-48
  8096c4:	1809883a 	mov	r4,r3
  8096c8:	100b883a 	mov	r5,r2
  8096cc:	08063100 	call	806310 <follow_path>
  8096d0:	e0bff215 	stw	r2,-56(fp)
      FREE_BUF();
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_OK) {
  8096d4:	e0bff217 	ldw	r2,-56(fp)
  8096d8:	1000261e 	bne	r2,zero,809774 <f_utime+0xfc>
         dir = dj.dir;
  8096dc:	e0bff917 	ldw	r2,-28(fp)
  8096e0:	e0bff315 	stw	r2,-52(fp)
         if (!dir) {             /* Root directory */
  8096e4:	e0bff317 	ldw	r2,-52(fp)
  8096e8:	1000031e 	bne	r2,zero,8096f8 <f_utime+0x80>
            res = FR_INVALID_NAME;
  8096ec:	00800184 	movi	r2,6
  8096f0:	e0bff215 	stw	r2,-56(fp)
  8096f4:	00001f06 	br	809774 <f_utime+0xfc>
         } else {             /* File or sub-directory */
            ST_WORD(dir+DIR_WrtTime, fno->ftime);
  8096f8:	e0bff317 	ldw	r2,-52(fp)
  8096fc:	10800584 	addi	r2,r2,22
  809700:	e0ffff17 	ldw	r3,-4(fp)
  809704:	18c0018b 	ldhu	r3,6(r3)
  809708:	10c00005 	stb	r3,0(r2)
  80970c:	e0bff317 	ldw	r2,-52(fp)
  809710:	108005c4 	addi	r2,r2,23
  809714:	e0ffff17 	ldw	r3,-4(fp)
  809718:	18c0018b 	ldhu	r3,6(r3)
  80971c:	18ffffcc 	andi	r3,r3,65535
  809720:	1806d23a 	srli	r3,r3,8
  809724:	10c00005 	stb	r3,0(r2)
            ST_WORD(dir+DIR_WrtDate, fno->fdate);
  809728:	e0bff317 	ldw	r2,-52(fp)
  80972c:	10800604 	addi	r2,r2,24
  809730:	e0ffff17 	ldw	r3,-4(fp)
  809734:	18c0010b 	ldhu	r3,4(r3)
  809738:	10c00005 	stb	r3,0(r2)
  80973c:	e0bff317 	ldw	r2,-52(fp)
  809740:	10800644 	addi	r2,r2,25
  809744:	e0ffff17 	ldw	r3,-4(fp)
  809748:	18c0010b 	ldhu	r3,4(r3)
  80974c:	18ffffcc 	andi	r3,r3,65535
  809750:	1806d23a 	srli	r3,r3,8
  809754:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
  809758:	e0bff417 	ldw	r2,-48(fp)
  80975c:	00c00044 	movi	r3,1
  809760:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
  809764:	e0bff417 	ldw	r2,-48(fp)
  809768:	1009883a 	mov	r4,r2
  80976c:	0804a040 	call	804a04 <sync>
  809770:	e0bff215 	stw	r2,-56(fp)
         }
      }
   }

   LEAVE_FF(dj.fs, res);
  809774:	e0bff217 	ldw	r2,-56(fp)
}
  809778:	e037883a 	mov	sp,fp
  80977c:	dfc00117 	ldw	ra,4(sp)
  809780:	df000017 	ldw	fp,0(sp)
  809784:	dec00204 	addi	sp,sp,8
  809788:	f800283a 	ret

0080978c <f_rename>:

FRESULT f_rename (
   const TCHAR *path_old,  /* Pointer to the old name */
   const TCHAR *path_new   /* Pointer to the new name */
)
{
  80978c:	deffe204 	addi	sp,sp,-120
  809790:	dfc01d15 	stw	ra,116(sp)
  809794:	df001c15 	stw	fp,112(sp)
  809798:	df001c04 	addi	fp,sp,112
  80979c:	e13ffe15 	stw	r4,-8(fp)
  8097a0:	e17fff15 	stw	r5,-4(fp)
   uint8_t buf[21], *dir;
   uint32_t dw;
   DEF_NAMEBUF;


   res = chk_mounted(&path_old, &djo.fs, 1);
  8097a4:	e0fffe04 	addi	r3,fp,-8
  8097a8:	e0bfe704 	addi	r2,fp,-100
  8097ac:	1809883a 	mov	r4,r3
  8097b0:	100b883a 	mov	r5,r2
  8097b4:	01800044 	movi	r6,1
  8097b8:	08066540 	call	806654 <chk_mounted>
  8097bc:	e0bfe415 	stw	r2,-112(fp)
   if (res == FR_OK) {
  8097c0:	e0bfe417 	ldw	r2,-112(fp)
  8097c4:	1000b01e 	bne	r2,zero,809a88 <f_rename+0x2fc>
      djn.fs = djo.fs;
  8097c8:	e0bfe717 	ldw	r2,-100(fp)
  8097cc:	e0bfee15 	stw	r2,-72(fp)
      INIT_BUF(djo);
  8097d0:	e0bffa44 	addi	r2,fp,-23
  8097d4:	e0bfed15 	stw	r2,-76(fp)
      res = follow_path(&djo, path_old);     /* Check old object */
  8097d8:	e0bffe17 	ldw	r2,-8(fp)
  8097dc:	e0ffe704 	addi	r3,fp,-100
  8097e0:	1809883a 	mov	r4,r3
  8097e4:	100b883a 	mov	r5,r2
  8097e8:	08063100 	call	806310 <follow_path>
  8097ec:	e0bfe415 	stw	r2,-112(fp)
      if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
#if _FS_SHARE
      if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
      if (res == FR_OK) {                 /* Old object is found */
  8097f0:	e0bfe417 	ldw	r2,-112(fp)
  8097f4:	1000a41e 	bne	r2,zero,809a88 <f_rename+0x2fc>
         if (!djo.dir) {                  /* Is root dir? */
  8097f8:	e0bfec17 	ldw	r2,-80(fp)
  8097fc:	1000031e 	bne	r2,zero,80980c <f_rename+0x80>
            res = FR_NO_FILE;
  809800:	00800104 	movi	r2,4
  809804:	e0bfe415 	stw	r2,-112(fp)
  809808:	00009f06 	br	809a88 <f_rename+0x2fc>
         } else {
            mem_cpy(buf, djo.dir+DIR_Attr, 21);    /* Save the object information except for name */
  80980c:	e0bfec17 	ldw	r2,-80(fp)
  809810:	108002c4 	addi	r2,r2,11
  809814:	e0fff504 	addi	r3,fp,-44
  809818:	1809883a 	mov	r4,r3
  80981c:	100b883a 	mov	r5,r2
  809820:	01800544 	movi	r6,21
  809824:	08046dc0 	call	8046dc <mem_cpy>
            mem_cpy(&djn, &djo, sizeof(DIR));      /* Check new object */
  809828:	e0ffee04 	addi	r3,fp,-72
  80982c:	e0bfe704 	addi	r2,fp,-100
  809830:	1809883a 	mov	r4,r3
  809834:	100b883a 	mov	r5,r2
  809838:	01800704 	movi	r6,28
  80983c:	08046dc0 	call	8046dc <mem_cpy>
            res = follow_path(&djn, path_new);
  809840:	e0bfee04 	addi	r2,fp,-72
  809844:	1009883a 	mov	r4,r2
  809848:	e17fff17 	ldw	r5,-4(fp)
  80984c:	08063100 	call	806310 <follow_path>
  809850:	e0bfe415 	stw	r2,-112(fp)
            if (res == FR_OK) res = FR_EXIST;      /* The new object name is already existing */
  809854:	e0bfe417 	ldw	r2,-112(fp)
  809858:	1000021e 	bne	r2,zero,809864 <f_rename+0xd8>
  80985c:	00800204 	movi	r2,8
  809860:	e0bfe415 	stw	r2,-112(fp)
            if (res == FR_NO_FILE) {            /* Is it a valid path and no name collision? */
  809864:	e0bfe417 	ldw	r2,-112(fp)
  809868:	10800118 	cmpnei	r2,r2,4
  80986c:	1000861e 	bne	r2,zero,809a88 <f_rename+0x2fc>
/* Start critical section that any interruption or error can cause cross-link */
               res = dir_register(&djn);        /* Register the new entry */
  809870:	e0bfee04 	addi	r2,fp,-72
  809874:	1009883a 	mov	r4,r2
  809878:	0805c3c0 	call	805c3c <dir_register>
  80987c:	e0bfe415 	stw	r2,-112(fp)
               if (res == FR_OK) {
  809880:	e0bfe417 	ldw	r2,-112(fp)
  809884:	1000801e 	bne	r2,zero,809a88 <f_rename+0x2fc>
                  dir = djn.dir;             /* Copy object information except for name */
  809888:	e0bff317 	ldw	r2,-52(fp)
  80988c:	e0bfe515 	stw	r2,-108(fp)
                  mem_cpy(dir+13, buf+2, 19);
  809890:	e0bfe517 	ldw	r2,-108(fp)
  809894:	10c00344 	addi	r3,r2,13
  809898:	e0bff504 	addi	r2,fp,-44
  80989c:	10800084 	addi	r2,r2,2
  8098a0:	1809883a 	mov	r4,r3
  8098a4:	100b883a 	mov	r5,r2
  8098a8:	018004c4 	movi	r6,19
  8098ac:	08046dc0 	call	8046dc <mem_cpy>
                  dir[DIR_Attr] = buf[0] | AM_ARC;
  8098b0:	e0bfe517 	ldw	r2,-108(fp)
  8098b4:	108002c4 	addi	r2,r2,11
  8098b8:	e0fff503 	ldbu	r3,-44(fp)
  8098bc:	18c00814 	ori	r3,r3,32
  8098c0:	10c00005 	stb	r3,0(r2)
                  djo.fs->wflag = 1;
  8098c4:	e0bfe717 	ldw	r2,-100(fp)
  8098c8:	00c00044 	movi	r3,1
  8098cc:	10c00105 	stb	r3,4(r2)
                  if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {    /* Update .. entry in the directory if needed */
  8098d0:	e0ffe917 	ldw	r3,-92(fp)
  8098d4:	e0bff017 	ldw	r2,-64(fp)
  8098d8:	18805f26 	beq	r3,r2,809a58 <f_rename+0x2cc>
  8098dc:	e0bfe517 	ldw	r2,-108(fp)
  8098e0:	108002c4 	addi	r2,r2,11
  8098e4:	10800003 	ldbu	r2,0(r2)
  8098e8:	10803fcc 	andi	r2,r2,255
  8098ec:	1080040c 	andi	r2,r2,16
  8098f0:	10005926 	beq	r2,zero,809a58 <f_rename+0x2cc>
                     dw = clust2sect(djn.fs, LD_CLUST(dir));
  8098f4:	e13fee17 	ldw	r4,-72(fp)
  8098f8:	e0bfe517 	ldw	r2,-108(fp)
  8098fc:	10800544 	addi	r2,r2,21
  809900:	10800003 	ldbu	r2,0(r2)
  809904:	10803fcc 	andi	r2,r2,255
  809908:	1004923a 	slli	r2,r2,8
  80990c:	1007883a 	mov	r3,r2
  809910:	e0bfe517 	ldw	r2,-108(fp)
  809914:	10800504 	addi	r2,r2,20
  809918:	10800003 	ldbu	r2,0(r2)
  80991c:	10803fcc 	andi	r2,r2,255
  809920:	1884b03a 	or	r2,r3,r2
  809924:	10bfffcc 	andi	r2,r2,65535
  809928:	1006943a 	slli	r3,r2,16
  80992c:	e0bfe517 	ldw	r2,-108(fp)
  809930:	108006c4 	addi	r2,r2,27
  809934:	10800003 	ldbu	r2,0(r2)
  809938:	10803fcc 	andi	r2,r2,255
  80993c:	1004923a 	slli	r2,r2,8
  809940:	100b883a 	mov	r5,r2
  809944:	e0bfe517 	ldw	r2,-108(fp)
  809948:	10800684 	addi	r2,r2,26
  80994c:	10800003 	ldbu	r2,0(r2)
  809950:	10803fcc 	andi	r2,r2,255
  809954:	2884b03a 	or	r2,r5,r2
  809958:	10bfffcc 	andi	r2,r2,65535
  80995c:	1884b03a 	or	r2,r3,r2
  809960:	100b883a 	mov	r5,r2
  809964:	0804c200 	call	804c20 <clust2sect>
  809968:	e0bfe615 	stw	r2,-104(fp)
                     if (!dw) {
  80996c:	e0bfe617 	ldw	r2,-104(fp)
  809970:	1000031e 	bne	r2,zero,809980 <f_rename+0x1f4>
                        res = FR_INT_ERR;
  809974:	00800084 	movi	r2,2
  809978:	e0bfe415 	stw	r2,-112(fp)
  80997c:	00003606 	br	809a58 <f_rename+0x2cc>
                     } else {
                        res = move_window(djn.fs, dw);
  809980:	e0bfee17 	ldw	r2,-72(fp)
  809984:	1009883a 	mov	r4,r2
  809988:	e17fe617 	ldw	r5,-104(fp)
  80998c:	08048a80 	call	8048a8 <move_window>
  809990:	e0bfe415 	stw	r2,-112(fp)
                        dir = djn.fs->win+SZ_DIR;  /* .. entry */
  809994:	e0bfee17 	ldw	r2,-72(fp)
  809998:	10801404 	addi	r2,r2,80
  80999c:	e0bfe515 	stw	r2,-108(fp)
                        if (res == FR_OK && dir[1] == '.') {
  8099a0:	e0bfe417 	ldw	r2,-112(fp)
  8099a4:	10002c1e 	bne	r2,zero,809a58 <f_rename+0x2cc>
  8099a8:	e0bfe517 	ldw	r2,-108(fp)
  8099ac:	10800044 	addi	r2,r2,1
  8099b0:	10800003 	ldbu	r2,0(r2)
  8099b4:	10803fcc 	andi	r2,r2,255
  8099b8:	10800b98 	cmpnei	r2,r2,46
  8099bc:	1000261e 	bne	r2,zero,809a58 <f_rename+0x2cc>
                           dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
  8099c0:	e0bfee17 	ldw	r2,-72(fp)
  8099c4:	10800003 	ldbu	r2,0(r2)
  8099c8:	10803fcc 	andi	r2,r2,255
  8099cc:	108000d8 	cmpnei	r2,r2,3
  8099d0:	1000041e 	bne	r2,zero,8099e4 <f_rename+0x258>
  8099d4:	e0fff017 	ldw	r3,-64(fp)
  8099d8:	e0bfee17 	ldw	r2,-72(fp)
  8099dc:	10800917 	ldw	r2,36(r2)
  8099e0:	18800226 	beq	r3,r2,8099ec <f_rename+0x260>
  8099e4:	e0bff017 	ldw	r2,-64(fp)
  8099e8:	00000106 	br	8099f0 <f_rename+0x264>
  8099ec:	0005883a 	mov	r2,zero
  8099f0:	e0bfe615 	stw	r2,-104(fp)
                           ST_CLUST(dir, dw);
  8099f4:	e0bfe517 	ldw	r2,-108(fp)
  8099f8:	10800684 	addi	r2,r2,26
  8099fc:	e0ffe617 	ldw	r3,-104(fp)
  809a00:	10c00005 	stb	r3,0(r2)
  809a04:	e0bfe517 	ldw	r2,-108(fp)
  809a08:	108006c4 	addi	r2,r2,27
  809a0c:	e0ffe617 	ldw	r3,-104(fp)
  809a10:	18ffffcc 	andi	r3,r3,65535
  809a14:	1806d23a 	srli	r3,r3,8
  809a18:	10c00005 	stb	r3,0(r2)
  809a1c:	e0bfe517 	ldw	r2,-108(fp)
  809a20:	10800504 	addi	r2,r2,20
  809a24:	e0ffe617 	ldw	r3,-104(fp)
  809a28:	1806d43a 	srli	r3,r3,16
  809a2c:	10c00005 	stb	r3,0(r2)
  809a30:	e0bfe517 	ldw	r2,-108(fp)
  809a34:	10800544 	addi	r2,r2,21
  809a38:	e0ffe617 	ldw	r3,-104(fp)
  809a3c:	1806d43a 	srli	r3,r3,16
  809a40:	18ffffcc 	andi	r3,r3,65535
  809a44:	1806d23a 	srli	r3,r3,8
  809a48:	10c00005 	stb	r3,0(r2)
                           djn.fs->wflag = 1;
  809a4c:	e0bfee17 	ldw	r2,-72(fp)
  809a50:	00c00044 	movi	r3,1
  809a54:	10c00105 	stb	r3,4(r2)
                        }
                     }
                  }
                  if (res == FR_OK) {
  809a58:	e0bfe417 	ldw	r2,-112(fp)
  809a5c:	10000a1e 	bne	r2,zero,809a88 <f_rename+0x2fc>
                     res = dir_remove(&djo);    /* Remove old entry */
  809a60:	e0bfe704 	addi	r2,fp,-100
  809a64:	1009883a 	mov	r4,r2
  809a68:	0805d5c0 	call	805d5c <dir_remove>
  809a6c:	e0bfe415 	stw	r2,-112(fp)
                     if (res == FR_OK)
  809a70:	e0bfe417 	ldw	r2,-112(fp)
  809a74:	1000041e 	bne	r2,zero,809a88 <f_rename+0x2fc>
                        res = sync(djo.fs);
  809a78:	e0bfe717 	ldw	r2,-100(fp)
  809a7c:	1009883a 	mov	r4,r2
  809a80:	0804a040 	call	804a04 <sync>
  809a84:	e0bfe415 	stw	r2,-112(fp)
            }
         }
      }
      FREE_BUF();
   }
   LEAVE_FF(djo.fs, res);
  809a88:	e0bfe417 	ldw	r2,-112(fp)
}
  809a8c:	e037883a 	mov	sp,fp
  809a90:	dfc00117 	ldw	ra,4(sp)
  809a94:	df000017 	ldw	fp,0(sp)
  809a98:	dec00204 	addi	sp,sp,8
  809a9c:	f800283a 	ret

00809aa0 <f_mkfs>:
FRESULT f_mkfs (
   uint8_t drv,      /* Logical drive number */
   uint8_t sfd,      /* Partitioning rule 0:FDISK, 1:SFD */
   uint32_t au        /* Allocation unit size [bytes] */
)
{
  809aa0:	deffea04 	addi	sp,sp,-88
  809aa4:	dfc01515 	stw	ra,84(sp)
  809aa8:	df001415 	stw	fp,80(sp)
  809aac:	df001404 	addi	fp,sp,80
  809ab0:	2007883a 	mov	r3,r4
  809ab4:	2805883a 	mov	r2,r5
  809ab8:	e1bfff15 	stw	r6,-4(fp)
  809abc:	e0fffd05 	stb	r3,-12(fp)
  809ac0:	e0bffe05 	stb	r2,-8(fp)
   FATFS *fs;
   DSTATUS stat;


   /* Check mounted drive and clear work area */
   if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
  809ac4:	e0bffd03 	ldbu	r2,-12(fp)
  809ac8:	10000226 	beq	r2,zero,809ad4 <f_mkfs+0x34>
  809acc:	008002c4 	movi	r2,11
  809ad0:	00039d06 	br	80a948 <f_mkfs+0xea8>
   if (sfd > 1) return FR_INVALID_PARAMETER;
  809ad4:	e0bffe03 	ldbu	r2,-8(fp)
  809ad8:	108000b0 	cmpltui	r2,r2,2
  809adc:	1000021e 	bne	r2,zero,809ae8 <f_mkfs+0x48>
  809ae0:	008004c4 	movi	r2,19
  809ae4:	00039806 	br	80a948 <f_mkfs+0xea8>
   if (au & (au - 1)) return FR_INVALID_PARAMETER;
  809ae8:	e0bfff17 	ldw	r2,-4(fp)
  809aec:	10ffffc4 	addi	r3,r2,-1
  809af0:	e0bfff17 	ldw	r2,-4(fp)
  809af4:	1884703a 	and	r2,r3,r2
  809af8:	10000226 	beq	r2,zero,809b04 <f_mkfs+0x64>
  809afc:	008004c4 	movi	r2,19
  809b00:	00039106 	br	80a948 <f_mkfs+0xea8>
   fs = FatFs[drv];
  809b04:	e0bffd03 	ldbu	r2,-12(fp)
  809b08:	1085883a 	add	r2,r2,r2
  809b0c:	1087883a 	add	r3,r2,r2
  809b10:	d0a76c04 	addi	r2,gp,-25168
  809b14:	1885883a 	add	r2,r3,r2
  809b18:	10800017 	ldw	r2,0(r2)
  809b1c:	e0bff315 	stw	r2,-52(fp)
   if (!fs) return FR_NOT_ENABLED;
  809b20:	e0bff317 	ldw	r2,-52(fp)
  809b24:	1000021e 	bne	r2,zero,809b30 <f_mkfs+0x90>
  809b28:	00800304 	movi	r2,12
  809b2c:	00038606 	br	80a948 <f_mkfs+0xea8>
   fs->fs_type = 0;
  809b30:	e0bff317 	ldw	r2,-52(fp)
  809b34:	10000005 	stb	zero,0(r2)
   pdrv = LD2PD(drv);   /* Physical drive */
  809b38:	e0bffd03 	ldbu	r2,-12(fp)
  809b3c:	e0bff405 	stb	r2,-48(fp)
   part = LD2PT(drv);   /* Partition (0:auto detect, 1-4:get from partition table)*/
  809b40:	e03ff445 	stb	zero,-47(fp)

   /* Get disk statics */
   stat = disk_initialize(pdrv);
  809b44:	e0bff403 	ldbu	r2,-48(fp)
  809b48:	1009883a 	mov	r4,r2
  809b4c:	0803cfc0 	call	803cfc <ffs_DiskIOInitialize>
  809b50:	e0bff485 	stb	r2,-46(fp)
   if (stat & STA_NOINIT) return FR_NOT_READY;
  809b54:	e0bff483 	ldbu	r2,-46(fp)
  809b58:	1080004c 	andi	r2,r2,1
  809b5c:	10000226 	beq	r2,zero,809b68 <f_mkfs+0xc8>
  809b60:	008000c4 	movi	r2,3
  809b64:	00037806 	br	80a948 <f_mkfs+0xea8>
   if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
  809b68:	e0bff483 	ldbu	r2,-46(fp)
  809b6c:	1080010c 	andi	r2,r2,4
  809b70:	10000226 	beq	r2,zero,809b7c <f_mkfs+0xdc>
  809b74:	00800284 	movi	r2,10
  809b78:	00037306 	br	80a948 <f_mkfs+0xea8>
      if (!tbl[4]) return FR_MKFS_ABORTED;   /* No partition? */
      b_vol = LD_DWORD(tbl+8);   /* Volume start sector */
      n_vol = LD_DWORD(tbl+12);  /* Volume size */
   } else {
      /* Create a partition in this function */
      if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
  809b7c:	e0fff403 	ldbu	r3,-48(fp)
  809b80:	e0bffc04 	addi	r2,fp,-16
  809b84:	1809883a 	mov	r4,r3
  809b88:	01400044 	movi	r5,1
  809b8c:	100d883a 	mov	r6,r2
  809b90:	08042080 	call	804208 <ffs_DiskIOIoctl>
  809b94:	1000031e 	bne	r2,zero,809ba4 <f_mkfs+0x104>
  809b98:	e0bffc17 	ldw	r2,-16(fp)
  809b9c:	10802028 	cmpgeui	r2,r2,128
  809ba0:	1000021e 	bne	r2,zero,809bac <f_mkfs+0x10c>
         return FR_DISK_ERR;
  809ba4:	00800044 	movi	r2,1
  809ba8:	00036706 	br	80a948 <f_mkfs+0xea8>
      b_vol = (sfd) ? 0 : 63;    /* Volume start sector */
  809bac:	e0bffe03 	ldbu	r2,-8(fp)
  809bb0:	10000226 	beq	r2,zero,809bbc <f_mkfs+0x11c>
  809bb4:	0005883a 	mov	r2,zero
  809bb8:	00000106 	br	809bc0 <f_mkfs+0x120>
  809bbc:	00800fc4 	movi	r2,63
  809bc0:	e0bff515 	stw	r2,-44(fp)
      n_vol -= b_vol;            /* Volume size */
  809bc4:	e0fffc17 	ldw	r3,-16(fp)
  809bc8:	e0bff517 	ldw	r2,-44(fp)
  809bcc:	1885c83a 	sub	r2,r3,r2
  809bd0:	e0bffc15 	stw	r2,-16(fp)
   }

   if (!au) {           /* AU auto selection */
  809bd4:	e0bfff17 	ldw	r2,-4(fp)
  809bd8:	10001b1e 	bne	r2,zero,809c48 <f_mkfs+0x1a8>
      vs = n_vol / (2000 / (SS(fs) / 512));
  809bdc:	e0bffc17 	ldw	r2,-16(fp)
  809be0:	1009883a 	mov	r4,r2
  809be4:	0141f404 	movi	r5,2000
  809be8:	080c6300 	call	80c630 <__udivsi3>
  809bec:	e0bff615 	stw	r2,-40(fp)
      for (i = 0; vs < vst[i]; i++) ;
  809bf0:	e03fee15 	stw	zero,-72(fp)
  809bf4:	00000306 	br	809c04 <f_mkfs+0x164>
  809bf8:	e0bfee17 	ldw	r2,-72(fp)
  809bfc:	10800044 	addi	r2,r2,1
  809c00:	e0bfee15 	stw	r2,-72(fp)
  809c04:	008020b4 	movhi	r2,130
  809c08:	10af6f04 	addi	r2,r2,-16964
  809c0c:	e0ffee17 	ldw	r3,-72(fp)
  809c10:	18c7883a 	add	r3,r3,r3
  809c14:	10c5883a 	add	r2,r2,r3
  809c18:	1080000b 	ldhu	r2,0(r2)
  809c1c:	10bfffcc 	andi	r2,r2,65535
  809c20:	e0fff617 	ldw	r3,-40(fp)
  809c24:	18bff436 	bltu	r3,r2,809bf8 <__alt_data_end+0xff809bf8>
      au = cst[i];
  809c28:	008020b4 	movhi	r2,130
  809c2c:	10af7484 	addi	r2,r2,-16942
  809c30:	e0ffee17 	ldw	r3,-72(fp)
  809c34:	18c7883a 	add	r3,r3,r3
  809c38:	10c5883a 	add	r2,r2,r3
  809c3c:	1080000b 	ldhu	r2,0(r2)
  809c40:	10bfffcc 	andi	r2,r2,65535
  809c44:	e0bfff15 	stw	r2,-4(fp)
   }
   au /= SS(fs);     /* Number of sectors per cluster */
  809c48:	e0bfff17 	ldw	r2,-4(fp)
  809c4c:	1004d27a 	srli	r2,r2,9
  809c50:	e0bfff15 	stw	r2,-4(fp)
   if (au == 0) au = 1;
  809c54:	e0bfff17 	ldw	r2,-4(fp)
  809c58:	1000021e 	bne	r2,zero,809c64 <f_mkfs+0x1c4>
  809c5c:	00800044 	movi	r2,1
  809c60:	e0bfff15 	stw	r2,-4(fp)
   if (au > 128) au = 128;
  809c64:	e0bfff17 	ldw	r2,-4(fp)
  809c68:	10802070 	cmpltui	r2,r2,129
  809c6c:	1000021e 	bne	r2,zero,809c78 <f_mkfs+0x1d8>
  809c70:	00802004 	movi	r2,128
  809c74:	e0bfff15 	stw	r2,-4(fp)

   /* Pre-compute number of clusters and FAT syb-type */
   n_clst = n_vol / au;
  809c78:	e0bffc17 	ldw	r2,-16(fp)
  809c7c:	1009883a 	mov	r4,r2
  809c80:	e17fff17 	ldw	r5,-4(fp)
  809c84:	080c6300 	call	80c630 <__udivsi3>
  809c88:	e0bff715 	stw	r2,-36(fp)
   fmt = FS_FAT12;
  809c8c:	00800044 	movi	r2,1
  809c90:	e0bfec05 	stb	r2,-80(fp)
   if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
  809c94:	e0bff717 	ldw	r2,-36(fp)
  809c98:	1083fdb0 	cmpltui	r2,r2,4086
  809c9c:	1000021e 	bne	r2,zero,809ca8 <f_mkfs+0x208>
  809ca0:	00800084 	movi	r2,2
  809ca4:	e0bfec05 	stb	r2,-80(fp)
   if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
  809ca8:	e0bff717 	ldw	r2,-36(fp)
  809cac:	10bffdb0 	cmpltui	r2,r2,65526
  809cb0:	1000021e 	bne	r2,zero,809cbc <f_mkfs+0x21c>
  809cb4:	008000c4 	movi	r2,3
  809cb8:	e0bfec05 	stb	r2,-80(fp)

   /* Determine offset and size of FAT structure */
   if (fmt == FS_FAT32) {
  809cbc:	e0bfec03 	ldbu	r2,-80(fp)
  809cc0:	108000d8 	cmpnei	r2,r2,3
  809cc4:	10000b1e 	bne	r2,zero,809cf4 <f_mkfs+0x254>
      n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
  809cc8:	e0bff717 	ldw	r2,-36(fp)
  809ccc:	10802084 	addi	r2,r2,130
  809cd0:	1085883a 	add	r2,r2,r2
  809cd4:	1085883a 	add	r2,r2,r2
  809cd8:	10bfffc4 	addi	r2,r2,-1
  809cdc:	1004d27a 	srli	r2,r2,9
  809ce0:	e0bff115 	stw	r2,-60(fp)
      n_rsv = 32;
  809ce4:	00800804 	movi	r2,32
  809ce8:	e0bff015 	stw	r2,-64(fp)
      n_dir = 0;
  809cec:	e03ff215 	stw	zero,-56(fp)
  809cf0:	00001706 	br	809d50 <f_mkfs+0x2b0>
   } else {
      n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
  809cf4:	e0bfec03 	ldbu	r2,-80(fp)
  809cf8:	10800058 	cmpnei	r2,r2,1
  809cfc:	1000081e 	bne	r2,zero,809d20 <f_mkfs+0x280>
  809d00:	e0fff717 	ldw	r3,-36(fp)
  809d04:	1805883a 	mov	r2,r3
  809d08:	1085883a 	add	r2,r2,r2
  809d0c:	10c5883a 	add	r2,r2,r3
  809d10:	10800044 	addi	r2,r2,1
  809d14:	1004d07a 	srli	r2,r2,1
  809d18:	108000c4 	addi	r2,r2,3
  809d1c:	00000306 	br	809d2c <f_mkfs+0x28c>
  809d20:	e0bff717 	ldw	r2,-36(fp)
  809d24:	10800084 	addi	r2,r2,2
  809d28:	1085883a 	add	r2,r2,r2
  809d2c:	e0bff115 	stw	r2,-60(fp)
      n_fat = (n_fat + SS(fs) - 1) / SS(fs);
  809d30:	e0bff117 	ldw	r2,-60(fp)
  809d34:	10807fc4 	addi	r2,r2,511
  809d38:	1004d27a 	srli	r2,r2,9
  809d3c:	e0bff115 	stw	r2,-60(fp)
      n_rsv = 1;
  809d40:	00800044 	movi	r2,1
  809d44:	e0bff015 	stw	r2,-64(fp)
      n_dir = (uint32_t)N_ROOTDIR * SZ_DIR / SS(fs);
  809d48:	00800804 	movi	r2,32
  809d4c:	e0bff215 	stw	r2,-56(fp)
   }
   b_fat = b_vol + n_rsv;           /* FAT area start sector */
  809d50:	e0fff517 	ldw	r3,-44(fp)
  809d54:	e0bff017 	ldw	r2,-64(fp)
  809d58:	1885883a 	add	r2,r3,r2
  809d5c:	e0bfef15 	stw	r2,-68(fp)
   b_dir = b_fat + n_fat * N_FATS;     /* Directory area start sector */
  809d60:	e0ffef17 	ldw	r3,-68(fp)
  809d64:	e0bff117 	ldw	r2,-60(fp)
  809d68:	1885883a 	add	r2,r3,r2
  809d6c:	e0bff815 	stw	r2,-32(fp)
   b_data = b_dir + n_dir;          /* Data area start sector */
  809d70:	e0fff817 	ldw	r3,-32(fp)
  809d74:	e0bff217 	ldw	r2,-56(fp)
  809d78:	1885883a 	add	r2,r3,r2
  809d7c:	e0bff915 	stw	r2,-28(fp)
   if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED; /* Too small volume */
  809d80:	e0fff917 	ldw	r3,-28(fp)
  809d84:	e0bfff17 	ldw	r2,-4(fp)
  809d88:	1887883a 	add	r3,r3,r2
  809d8c:	e0bff517 	ldw	r2,-44(fp)
  809d90:	1885c83a 	sub	r2,r3,r2
  809d94:	e0fffc17 	ldw	r3,-16(fp)
  809d98:	1880022e 	bgeu	r3,r2,809da4 <f_mkfs+0x304>
  809d9c:	00800384 	movi	r2,14
  809da0:	0002e906 	br	80a948 <f_mkfs+0xea8>

   /* Align data start sector to erase block boundary (for flash memory media) */
   if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
  809da4:	e0fff403 	ldbu	r3,-48(fp)
  809da8:	e0bffb04 	addi	r2,fp,-20
  809dac:	1809883a 	mov	r4,r3
  809db0:	014000c4 	movi	r5,3
  809db4:	100d883a 	mov	r6,r2
  809db8:	08042080 	call	804208 <ffs_DiskIOIoctl>
  809dbc:	1000051e 	bne	r2,zero,809dd4 <f_mkfs+0x334>
  809dc0:	e0bffb17 	ldw	r2,-20(fp)
  809dc4:	10000326 	beq	r2,zero,809dd4 <f_mkfs+0x334>
  809dc8:	e0bffb17 	ldw	r2,-20(fp)
  809dcc:	10a00070 	cmpltui	r2,r2,32769
  809dd0:	1000021e 	bne	r2,zero,809ddc <f_mkfs+0x33c>
  809dd4:	00800044 	movi	r2,1
  809dd8:	e0bffb15 	stw	r2,-20(fp)
   n = (b_data + n - 1) & ~(n - 1); /* Next nearest erase block from current data start */
  809ddc:	e0fffb17 	ldw	r3,-20(fp)
  809de0:	e0bff917 	ldw	r2,-28(fp)
  809de4:	1885883a 	add	r2,r3,r2
  809de8:	10ffffc4 	addi	r3,r2,-1
  809dec:	e0bffb17 	ldw	r2,-20(fp)
  809df0:	0085c83a 	sub	r2,zero,r2
  809df4:	1884703a 	and	r2,r3,r2
  809df8:	e0bffb15 	stw	r2,-20(fp)
   n = (n - b_data) / N_FATS;
  809dfc:	e0fffb17 	ldw	r3,-20(fp)
  809e00:	e0bff917 	ldw	r2,-28(fp)
  809e04:	1885c83a 	sub	r2,r3,r2
  809e08:	e0bffb15 	stw	r2,-20(fp)
   if (fmt == FS_FAT32) {     /* FAT32: Move FAT offset */
  809e0c:	e0bfec03 	ldbu	r2,-80(fp)
  809e10:	108000d8 	cmpnei	r2,r2,3
  809e14:	1000091e 	bne	r2,zero,809e3c <f_mkfs+0x39c>
      n_rsv += n;
  809e18:	e0bffb17 	ldw	r2,-20(fp)
  809e1c:	e0fff017 	ldw	r3,-64(fp)
  809e20:	1885883a 	add	r2,r3,r2
  809e24:	e0bff015 	stw	r2,-64(fp)
      b_fat += n;
  809e28:	e0bffb17 	ldw	r2,-20(fp)
  809e2c:	e0ffef17 	ldw	r3,-68(fp)
  809e30:	1885883a 	add	r2,r3,r2
  809e34:	e0bfef15 	stw	r2,-68(fp)
  809e38:	00000406 	br	809e4c <f_mkfs+0x3ac>
   } else {             /* FAT12/16: Expand FAT size */
      n_fat += n;
  809e3c:	e0bffb17 	ldw	r2,-20(fp)
  809e40:	e0fff117 	ldw	r3,-60(fp)
  809e44:	1885883a 	add	r2,r3,r2
  809e48:	e0bff115 	stw	r2,-60(fp)
   }

   /* Determine number of clusters and final check of validity of the FAT sub-type */
   n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
  809e4c:	e0fffc17 	ldw	r3,-16(fp)
  809e50:	e0bff017 	ldw	r2,-64(fp)
  809e54:	1887c83a 	sub	r3,r3,r2
  809e58:	e0bff117 	ldw	r2,-60(fp)
  809e5c:	1887c83a 	sub	r3,r3,r2
  809e60:	e0bff217 	ldw	r2,-56(fp)
  809e64:	1885c83a 	sub	r2,r3,r2
  809e68:	1009883a 	mov	r4,r2
  809e6c:	e17fff17 	ldw	r5,-4(fp)
  809e70:	080c6300 	call	80c630 <__udivsi3>
  809e74:	e0bff715 	stw	r2,-36(fp)
   if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
  809e78:	e0bfec03 	ldbu	r2,-80(fp)
  809e7c:	10800098 	cmpnei	r2,r2,2
  809e80:	1000031e 	bne	r2,zero,809e90 <f_mkfs+0x3f0>
  809e84:	e0bff717 	ldw	r2,-36(fp)
  809e88:	1083fdb0 	cmpltui	r2,r2,4086
  809e8c:	1000061e 	bne	r2,zero,809ea8 <f_mkfs+0x408>
      || (fmt == FS_FAT32 && n_clst < MIN_FAT32))
  809e90:	e0bfec03 	ldbu	r2,-80(fp)
  809e94:	108000d8 	cmpnei	r2,r2,3
  809e98:	1000051e 	bne	r2,zero,809eb0 <f_mkfs+0x410>
  809e9c:	e0bff717 	ldw	r2,-36(fp)
  809ea0:	10bffda8 	cmpgeui	r2,r2,65526
  809ea4:	1000021e 	bne	r2,zero,809eb0 <f_mkfs+0x410>
      return FR_MKFS_ABORTED;
  809ea8:	00800384 	movi	r2,14
  809eac:	0002a606 	br	80a948 <f_mkfs+0xea8>

   switch (fmt) { /* Determine system ID for partition table */
  809eb0:	e0bfec03 	ldbu	r2,-80(fp)
  809eb4:	10c00060 	cmpeqi	r3,r2,1
  809eb8:	1800031e 	bne	r3,zero,809ec8 <f_mkfs+0x428>
  809ebc:	108000a0 	cmpeqi	r2,r2,2
  809ec0:	1000041e 	bne	r2,zero,809ed4 <f_mkfs+0x434>
  809ec4:	00000b06 	br	809ef4 <f_mkfs+0x454>
   case FS_FAT12: sys = 0x01; break;
  809ec8:	00800044 	movi	r2,1
  809ecc:	e0bfec85 	stb	r2,-78(fp)
  809ed0:	00000a06 	br	809efc <f_mkfs+0x45c>
   case FS_FAT16: sys = (n_vol < 0x10000) ? 0x04 : 0x06; break;
  809ed4:	e0bffc17 	ldw	r2,-16(fp)
  809ed8:	00ffffd4 	movui	r3,65535
  809edc:	18800236 	bltu	r3,r2,809ee8 <f_mkfs+0x448>
  809ee0:	00800104 	movi	r2,4
  809ee4:	00000106 	br	809eec <f_mkfs+0x44c>
  809ee8:	00800184 	movi	r2,6
  809eec:	e0bfec85 	stb	r2,-78(fp)
  809ef0:	00000206 	br	809efc <f_mkfs+0x45c>
   default:       sys = 0x0C;
  809ef4:	00800304 	movi	r2,12
  809ef8:	e0bfec85 	stb	r2,-78(fp)
      tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
      tbl[4] = sys;
      if (disk_write(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
      md = 0xF8;
   } else {
      if (sfd) {  /* No patition table (SFD) */
  809efc:	e0bffe03 	ldbu	r2,-8(fp)
  809f00:	10000326 	beq	r2,zero,809f10 <f_mkfs+0x470>
         md = 0xF0;
  809f04:	00bffc04 	movi	r2,-16
  809f08:	e0bfec45 	stb	r2,-79(fp)
  809f0c:	00006106 	br	80a094 <f_mkfs+0x5f4>
      } else { /* Create partition table (FDISK) */
         mem_set(fs->win, 0, SS(fs));
  809f10:	e0bff317 	ldw	r2,-52(fp)
  809f14:	10800c04 	addi	r2,r2,48
  809f18:	1009883a 	mov	r4,r2
  809f1c:	000b883a 	mov	r5,zero
  809f20:	01808004 	movi	r6,512
  809f24:	08047480 	call	804748 <mem_set>
         tbl = fs->win+MBR_Table;   /* Create partiton table for single partition in the drive */
  809f28:	e0bff317 	ldw	r2,-52(fp)
  809f2c:	10807b84 	addi	r2,r2,494
  809f30:	e0bffa15 	stw	r2,-24(fp)
         tbl[1] = 1;                /* Partition start head */
  809f34:	e0bffa17 	ldw	r2,-24(fp)
  809f38:	10800044 	addi	r2,r2,1
  809f3c:	00c00044 	movi	r3,1
  809f40:	10c00005 	stb	r3,0(r2)
         tbl[2] = 1;                /* Partition start sector */
  809f44:	e0bffa17 	ldw	r2,-24(fp)
  809f48:	10800084 	addi	r2,r2,2
  809f4c:	00c00044 	movi	r3,1
  809f50:	10c00005 	stb	r3,0(r2)
         tbl[3] = 0;                /* Partition start cylinder */
  809f54:	e0bffa17 	ldw	r2,-24(fp)
  809f58:	108000c4 	addi	r2,r2,3
  809f5c:	10000005 	stb	zero,0(r2)
         tbl[4] = sys;              /* System type */
  809f60:	e0bffa17 	ldw	r2,-24(fp)
  809f64:	10800104 	addi	r2,r2,4
  809f68:	e0ffec83 	ldbu	r3,-78(fp)
  809f6c:	10c00005 	stb	r3,0(r2)
         tbl[5] = 254;              /* Partition end head */
  809f70:	e0bffa17 	ldw	r2,-24(fp)
  809f74:	10800144 	addi	r2,r2,5
  809f78:	00ffff84 	movi	r3,-2
  809f7c:	10c00005 	stb	r3,0(r2)
         n = (b_vol + n_vol) / 63 / 255;
  809f80:	e0fffc17 	ldw	r3,-16(fp)
  809f84:	e0bff517 	ldw	r2,-44(fp)
  809f88:	1885883a 	add	r2,r3,r2
  809f8c:	1009883a 	mov	r4,r2
  809f90:	014fb044 	movi	r5,16065
  809f94:	080c6300 	call	80c630 <__udivsi3>
  809f98:	e0bffb15 	stw	r2,-20(fp)
         tbl[6] = (uint8_t)((n >> 2) | 63);  /* Partiiton end sector */
  809f9c:	e0bffa17 	ldw	r2,-24(fp)
  809fa0:	10800184 	addi	r2,r2,6
  809fa4:	e0fffb17 	ldw	r3,-20(fp)
  809fa8:	1806d0ba 	srli	r3,r3,2
  809fac:	18c00fd4 	ori	r3,r3,63
  809fb0:	10c00005 	stb	r3,0(r2)
         tbl[7] = (uint8_t)n;          /* End cylinder */
  809fb4:	e0bffa17 	ldw	r2,-24(fp)
  809fb8:	108001c4 	addi	r2,r2,7
  809fbc:	e0fffb17 	ldw	r3,-20(fp)
  809fc0:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+8, 63);       /* Partition start in LBA */
  809fc4:	e0bffa17 	ldw	r2,-24(fp)
  809fc8:	10800204 	addi	r2,r2,8
  809fcc:	00c00fc4 	movi	r3,63
  809fd0:	10c00005 	stb	r3,0(r2)
  809fd4:	e0bffa17 	ldw	r2,-24(fp)
  809fd8:	10800244 	addi	r2,r2,9
  809fdc:	10000005 	stb	zero,0(r2)
  809fe0:	e0bffa17 	ldw	r2,-24(fp)
  809fe4:	10800284 	addi	r2,r2,10
  809fe8:	10000005 	stb	zero,0(r2)
  809fec:	e0bffa17 	ldw	r2,-24(fp)
  809ff0:	108002c4 	addi	r2,r2,11
  809ff4:	10000005 	stb	zero,0(r2)
         ST_DWORD(tbl+12, n_vol);      /* Partition size in LBA */
  809ff8:	e0bffa17 	ldw	r2,-24(fp)
  809ffc:	10800304 	addi	r2,r2,12
  80a000:	e0fffc17 	ldw	r3,-16(fp)
  80a004:	10c00005 	stb	r3,0(r2)
  80a008:	e0bffa17 	ldw	r2,-24(fp)
  80a00c:	10800344 	addi	r2,r2,13
  80a010:	e0fffc17 	ldw	r3,-16(fp)
  80a014:	18ffffcc 	andi	r3,r3,65535
  80a018:	1806d23a 	srli	r3,r3,8
  80a01c:	10c00005 	stb	r3,0(r2)
  80a020:	e0bffa17 	ldw	r2,-24(fp)
  80a024:	10800384 	addi	r2,r2,14
  80a028:	e0fffc17 	ldw	r3,-16(fp)
  80a02c:	1806d43a 	srli	r3,r3,16
  80a030:	10c00005 	stb	r3,0(r2)
  80a034:	e0bffa17 	ldw	r2,-24(fp)
  80a038:	108003c4 	addi	r2,r2,15
  80a03c:	e0fffc17 	ldw	r3,-16(fp)
  80a040:	1806d63a 	srli	r3,r3,24
  80a044:	10c00005 	stb	r3,0(r2)
         ST_WORD(fs->win+BS_55AA, 0xAA55);   /* MBR signature */
  80a048:	e0bff317 	ldw	r2,-52(fp)
  80a04c:	00c01544 	movi	r3,85
  80a050:	10c08b85 	stb	r3,558(r2)
  80a054:	e0bff317 	ldw	r2,-52(fp)
  80a058:	00ffea84 	movi	r3,-86
  80a05c:	10c08bc5 	stb	r3,559(r2)
         if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)  /* Write it to the MBR sector */
  80a060:	e0fff403 	ldbu	r3,-48(fp)
  80a064:	e0bff317 	ldw	r2,-52(fp)
  80a068:	10800c04 	addi	r2,r2,48
  80a06c:	1809883a 	mov	r4,r3
  80a070:	100b883a 	mov	r5,r2
  80a074:	000d883a 	mov	r6,zero
  80a078:	01c00044 	movi	r7,1
  80a07c:	080409c0 	call	80409c <ffs_DiskIOWrite>
  80a080:	10000226 	beq	r2,zero,80a08c <f_mkfs+0x5ec>
            return FR_DISK_ERR;
  80a084:	00800044 	movi	r2,1
  80a088:	00022f06 	br	80a948 <f_mkfs+0xea8>
         md = 0xF8;
  80a08c:	00bffe04 	movi	r2,-8
  80a090:	e0bfec45 	stb	r2,-79(fp)
      }
   }

   /* Create BPB in the VBR */
   tbl = fs->win;                   /* Clear sector */
  80a094:	e0bff317 	ldw	r2,-52(fp)
  80a098:	10800c04 	addi	r2,r2,48
  80a09c:	e0bffa15 	stw	r2,-24(fp)
   mem_set(tbl, 0, SS(fs));
  80a0a0:	e13ffa17 	ldw	r4,-24(fp)
  80a0a4:	000b883a 	mov	r5,zero
  80a0a8:	01808004 	movi	r6,512
  80a0ac:	08047480 	call	804748 <mem_set>
   mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
  80a0b0:	e13ffa17 	ldw	r4,-24(fp)
  80a0b4:	014020b4 	movhi	r5,130
  80a0b8:	296f4204 	addi	r5,r5,-17144
  80a0bc:	018002c4 	movi	r6,11
  80a0c0:	08046dc0 	call	8046dc <mem_cpy>
   i = SS(fs);                      /* Sector size */
  80a0c4:	00808004 	movi	r2,512
  80a0c8:	e0bfee15 	stw	r2,-72(fp)
   ST_WORD(tbl+BPB_BytsPerSec, i);
  80a0cc:	e0bffa17 	ldw	r2,-24(fp)
  80a0d0:	108002c4 	addi	r2,r2,11
  80a0d4:	e0ffee17 	ldw	r3,-72(fp)
  80a0d8:	10c00005 	stb	r3,0(r2)
  80a0dc:	e0bffa17 	ldw	r2,-24(fp)
  80a0e0:	10800304 	addi	r2,r2,12
  80a0e4:	e0ffee17 	ldw	r3,-72(fp)
  80a0e8:	18ffffcc 	andi	r3,r3,65535
  80a0ec:	1806d23a 	srli	r3,r3,8
  80a0f0:	10c00005 	stb	r3,0(r2)
   tbl[BPB_SecPerClus] = (uint8_t)au;        /* Sectors per cluster */
  80a0f4:	e0bffa17 	ldw	r2,-24(fp)
  80a0f8:	10800344 	addi	r2,r2,13
  80a0fc:	e0ffff17 	ldw	r3,-4(fp)
  80a100:	10c00005 	stb	r3,0(r2)
   ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);    /* Reserved sectors */
  80a104:	e0bffa17 	ldw	r2,-24(fp)
  80a108:	10800384 	addi	r2,r2,14
  80a10c:	e0fff017 	ldw	r3,-64(fp)
  80a110:	10c00005 	stb	r3,0(r2)
  80a114:	e0bffa17 	ldw	r2,-24(fp)
  80a118:	108003c4 	addi	r2,r2,15
  80a11c:	e0fff017 	ldw	r3,-64(fp)
  80a120:	18ffffcc 	andi	r3,r3,65535
  80a124:	1806d23a 	srli	r3,r3,8
  80a128:	10c00005 	stb	r3,0(r2)
   tbl[BPB_NumFATs] = N_FATS;          /* Number of FATs */
  80a12c:	e0bffa17 	ldw	r2,-24(fp)
  80a130:	10800404 	addi	r2,r2,16
  80a134:	00c00044 	movi	r3,1
  80a138:	10c00005 	stb	r3,0(r2)
   i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR; /* Number of rootdir entries */
  80a13c:	e0bfec03 	ldbu	r2,-80(fp)
  80a140:	108000d8 	cmpnei	r2,r2,3
  80a144:	1000021e 	bne	r2,zero,80a150 <f_mkfs+0x6b0>
  80a148:	0005883a 	mov	r2,zero
  80a14c:	00000106 	br	80a154 <f_mkfs+0x6b4>
  80a150:	00808004 	movi	r2,512
  80a154:	e0bfee15 	stw	r2,-72(fp)
   ST_WORD(tbl+BPB_RootEntCnt, i);
  80a158:	e0bffa17 	ldw	r2,-24(fp)
  80a15c:	10800444 	addi	r2,r2,17
  80a160:	e0ffee17 	ldw	r3,-72(fp)
  80a164:	10c00005 	stb	r3,0(r2)
  80a168:	e0bffa17 	ldw	r2,-24(fp)
  80a16c:	10800484 	addi	r2,r2,18
  80a170:	e0ffee17 	ldw	r3,-72(fp)
  80a174:	18ffffcc 	andi	r3,r3,65535
  80a178:	1806d23a 	srli	r3,r3,8
  80a17c:	10c00005 	stb	r3,0(r2)
   if (n_vol < 0x10000) {              /* Number of total sectors */
  80a180:	e0bffc17 	ldw	r2,-16(fp)
  80a184:	00ffffd4 	movui	r3,65535
  80a188:	18800b36 	bltu	r3,r2,80a1b8 <f_mkfs+0x718>
      ST_WORD(tbl+BPB_TotSec16, n_vol);
  80a18c:	e0bffa17 	ldw	r2,-24(fp)
  80a190:	108004c4 	addi	r2,r2,19
  80a194:	e0fffc17 	ldw	r3,-16(fp)
  80a198:	10c00005 	stb	r3,0(r2)
  80a19c:	e0bffa17 	ldw	r2,-24(fp)
  80a1a0:	10800504 	addi	r2,r2,20
  80a1a4:	e0fffc17 	ldw	r3,-16(fp)
  80a1a8:	18ffffcc 	andi	r3,r3,65535
  80a1ac:	1806d23a 	srli	r3,r3,8
  80a1b0:	10c00005 	stb	r3,0(r2)
  80a1b4:	00001406 	br	80a208 <f_mkfs+0x768>
   } else {
      ST_DWORD(tbl+BPB_TotSec32, n_vol);
  80a1b8:	e0bffa17 	ldw	r2,-24(fp)
  80a1bc:	10800804 	addi	r2,r2,32
  80a1c0:	e0fffc17 	ldw	r3,-16(fp)
  80a1c4:	10c00005 	stb	r3,0(r2)
  80a1c8:	e0bffa17 	ldw	r2,-24(fp)
  80a1cc:	10800844 	addi	r2,r2,33
  80a1d0:	e0fffc17 	ldw	r3,-16(fp)
  80a1d4:	18ffffcc 	andi	r3,r3,65535
  80a1d8:	1806d23a 	srli	r3,r3,8
  80a1dc:	10c00005 	stb	r3,0(r2)
  80a1e0:	e0bffa17 	ldw	r2,-24(fp)
  80a1e4:	10800884 	addi	r2,r2,34
  80a1e8:	e0fffc17 	ldw	r3,-16(fp)
  80a1ec:	1806d43a 	srli	r3,r3,16
  80a1f0:	10c00005 	stb	r3,0(r2)
  80a1f4:	e0bffa17 	ldw	r2,-24(fp)
  80a1f8:	108008c4 	addi	r2,r2,35
  80a1fc:	e0fffc17 	ldw	r3,-16(fp)
  80a200:	1806d63a 	srli	r3,r3,24
  80a204:	10c00005 	stb	r3,0(r2)
   }
   tbl[BPB_Media] = md;             /* Media descriptor */
  80a208:	e0bffa17 	ldw	r2,-24(fp)
  80a20c:	10800544 	addi	r2,r2,21
  80a210:	e0ffec43 	ldbu	r3,-79(fp)
  80a214:	10c00005 	stb	r3,0(r2)
   ST_WORD(tbl+BPB_SecPerTrk, 63);        /* Number of sectors per track */
  80a218:	e0bffa17 	ldw	r2,-24(fp)
  80a21c:	10800604 	addi	r2,r2,24
  80a220:	00c00fc4 	movi	r3,63
  80a224:	10c00005 	stb	r3,0(r2)
  80a228:	e0bffa17 	ldw	r2,-24(fp)
  80a22c:	10800644 	addi	r2,r2,25
  80a230:	10000005 	stb	zero,0(r2)
   ST_WORD(tbl+BPB_NumHeads, 255);        /* Number of heads */
  80a234:	e0bffa17 	ldw	r2,-24(fp)
  80a238:	10800684 	addi	r2,r2,26
  80a23c:	00ffffc4 	movi	r3,-1
  80a240:	10c00005 	stb	r3,0(r2)
  80a244:	e0bffa17 	ldw	r2,-24(fp)
  80a248:	108006c4 	addi	r2,r2,27
  80a24c:	10000005 	stb	zero,0(r2)
   ST_DWORD(tbl+BPB_HiddSec, b_vol);      /* Hidden sectors */
  80a250:	e0bffa17 	ldw	r2,-24(fp)
  80a254:	10800704 	addi	r2,r2,28
  80a258:	e0fff517 	ldw	r3,-44(fp)
  80a25c:	10c00005 	stb	r3,0(r2)
  80a260:	e0bffa17 	ldw	r2,-24(fp)
  80a264:	10800744 	addi	r2,r2,29
  80a268:	e0fff517 	ldw	r3,-44(fp)
  80a26c:	18ffffcc 	andi	r3,r3,65535
  80a270:	1806d23a 	srli	r3,r3,8
  80a274:	10c00005 	stb	r3,0(r2)
  80a278:	e0bffa17 	ldw	r2,-24(fp)
  80a27c:	10800784 	addi	r2,r2,30
  80a280:	e0fff517 	ldw	r3,-44(fp)
  80a284:	1806d43a 	srli	r3,r3,16
  80a288:	10c00005 	stb	r3,0(r2)
  80a28c:	e0bffa17 	ldw	r2,-24(fp)
  80a290:	108007c4 	addi	r2,r2,31
  80a294:	e0fff517 	ldw	r3,-44(fp)
  80a298:	1806d63a 	srli	r3,r3,24
  80a29c:	10c00005 	stb	r3,0(r2)
   n = get_fattime();                  /* Use current time as VSN */
  80a2a0:	08046b00 	call	8046b0 <get_fattime>
  80a2a4:	e0bffb15 	stw	r2,-20(fp)
   if (fmt == FS_FAT32) {
  80a2a8:	e0bfec03 	ldbu	r2,-80(fp)
  80a2ac:	108000d8 	cmpnei	r2,r2,3
  80a2b0:	1000531e 	bne	r2,zero,80a400 <f_mkfs+0x960>
      ST_DWORD(tbl+BS_VolID32, n);     /* VSN */
  80a2b4:	e0bffa17 	ldw	r2,-24(fp)
  80a2b8:	108010c4 	addi	r2,r2,67
  80a2bc:	e0fffb17 	ldw	r3,-20(fp)
  80a2c0:	10c00005 	stb	r3,0(r2)
  80a2c4:	e0bffa17 	ldw	r2,-24(fp)
  80a2c8:	10801104 	addi	r2,r2,68
  80a2cc:	e0fffb17 	ldw	r3,-20(fp)
  80a2d0:	18ffffcc 	andi	r3,r3,65535
  80a2d4:	1806d23a 	srli	r3,r3,8
  80a2d8:	10c00005 	stb	r3,0(r2)
  80a2dc:	e0bffa17 	ldw	r2,-24(fp)
  80a2e0:	10801144 	addi	r2,r2,69
  80a2e4:	e0fffb17 	ldw	r3,-20(fp)
  80a2e8:	1806d43a 	srli	r3,r3,16
  80a2ec:	10c00005 	stb	r3,0(r2)
  80a2f0:	e0bffa17 	ldw	r2,-24(fp)
  80a2f4:	10801184 	addi	r2,r2,70
  80a2f8:	e0fffb17 	ldw	r3,-20(fp)
  80a2fc:	1806d63a 	srli	r3,r3,24
  80a300:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+BPB_FATSz32, n_fat);   /* Number of sectors per FAT */
  80a304:	e0bffa17 	ldw	r2,-24(fp)
  80a308:	10800904 	addi	r2,r2,36
  80a30c:	e0fff117 	ldw	r3,-60(fp)
  80a310:	10c00005 	stb	r3,0(r2)
  80a314:	e0bffa17 	ldw	r2,-24(fp)
  80a318:	10800944 	addi	r2,r2,37
  80a31c:	e0fff117 	ldw	r3,-60(fp)
  80a320:	18ffffcc 	andi	r3,r3,65535
  80a324:	1806d23a 	srli	r3,r3,8
  80a328:	10c00005 	stb	r3,0(r2)
  80a32c:	e0bffa17 	ldw	r2,-24(fp)
  80a330:	10800984 	addi	r2,r2,38
  80a334:	e0fff117 	ldw	r3,-60(fp)
  80a338:	1806d43a 	srli	r3,r3,16
  80a33c:	10c00005 	stb	r3,0(r2)
  80a340:	e0bffa17 	ldw	r2,-24(fp)
  80a344:	108009c4 	addi	r2,r2,39
  80a348:	e0fff117 	ldw	r3,-60(fp)
  80a34c:	1806d63a 	srli	r3,r3,24
  80a350:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+BPB_RootClus, 2);      /* Root directory start cluster (2) */
  80a354:	e0bffa17 	ldw	r2,-24(fp)
  80a358:	10800b04 	addi	r2,r2,44
  80a35c:	00c00084 	movi	r3,2
  80a360:	10c00005 	stb	r3,0(r2)
  80a364:	e0bffa17 	ldw	r2,-24(fp)
  80a368:	10800b44 	addi	r2,r2,45
  80a36c:	10000005 	stb	zero,0(r2)
  80a370:	e0bffa17 	ldw	r2,-24(fp)
  80a374:	10800b84 	addi	r2,r2,46
  80a378:	10000005 	stb	zero,0(r2)
  80a37c:	e0bffa17 	ldw	r2,-24(fp)
  80a380:	10800bc4 	addi	r2,r2,47
  80a384:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BPB_FSInfo, 1);         /* FSInfo record offset (VBR+1) */
  80a388:	e0bffa17 	ldw	r2,-24(fp)
  80a38c:	10800c04 	addi	r2,r2,48
  80a390:	00c00044 	movi	r3,1
  80a394:	10c00005 	stb	r3,0(r2)
  80a398:	e0bffa17 	ldw	r2,-24(fp)
  80a39c:	10800c44 	addi	r2,r2,49
  80a3a0:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BPB_BkBootSec, 6);      /* Backup boot record offset (VBR+6) */
  80a3a4:	e0bffa17 	ldw	r2,-24(fp)
  80a3a8:	10800c84 	addi	r2,r2,50
  80a3ac:	00c00184 	movi	r3,6
  80a3b0:	10c00005 	stb	r3,0(r2)
  80a3b4:	e0bffa17 	ldw	r2,-24(fp)
  80a3b8:	10800cc4 	addi	r2,r2,51
  80a3bc:	10000005 	stb	zero,0(r2)
      tbl[BS_DrvNum32] = 0x80;         /* Drive number */
  80a3c0:	e0bffa17 	ldw	r2,-24(fp)
  80a3c4:	10801004 	addi	r2,r2,64
  80a3c8:	00ffe004 	movi	r3,-128
  80a3cc:	10c00005 	stb	r3,0(r2)
      tbl[BS_BootSig32] = 0x29;        /* Extended boot signature */
  80a3d0:	e0bffa17 	ldw	r2,-24(fp)
  80a3d4:	10801084 	addi	r2,r2,66
  80a3d8:	00c00a44 	movi	r3,41
  80a3dc:	10c00005 	stb	r3,0(r2)
      mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);  /* Volume label, FAT signature */
  80a3e0:	e0bffa17 	ldw	r2,-24(fp)
  80a3e4:	108011c4 	addi	r2,r2,71
  80a3e8:	1009883a 	mov	r4,r2
  80a3ec:	014020b4 	movhi	r5,130
  80a3f0:	296f4504 	addi	r5,r5,-17132
  80a3f4:	018004c4 	movi	r6,19
  80a3f8:	08046dc0 	call	8046dc <mem_cpy>
  80a3fc:	00002d06 	br	80a4b4 <f_mkfs+0xa14>
   } else {
      ST_DWORD(tbl+BS_VolID, n);       /* VSN */
  80a400:	e0bffa17 	ldw	r2,-24(fp)
  80a404:	108009c4 	addi	r2,r2,39
  80a408:	e0fffb17 	ldw	r3,-20(fp)
  80a40c:	10c00005 	stb	r3,0(r2)
  80a410:	e0bffa17 	ldw	r2,-24(fp)
  80a414:	10800a04 	addi	r2,r2,40
  80a418:	e0fffb17 	ldw	r3,-20(fp)
  80a41c:	18ffffcc 	andi	r3,r3,65535
  80a420:	1806d23a 	srli	r3,r3,8
  80a424:	10c00005 	stb	r3,0(r2)
  80a428:	e0bffa17 	ldw	r2,-24(fp)
  80a42c:	10800a44 	addi	r2,r2,41
  80a430:	e0fffb17 	ldw	r3,-20(fp)
  80a434:	1806d43a 	srli	r3,r3,16
  80a438:	10c00005 	stb	r3,0(r2)
  80a43c:	e0bffa17 	ldw	r2,-24(fp)
  80a440:	10800a84 	addi	r2,r2,42
  80a444:	e0fffb17 	ldw	r3,-20(fp)
  80a448:	1806d63a 	srli	r3,r3,24
  80a44c:	10c00005 	stb	r3,0(r2)
      ST_WORD(tbl+BPB_FATSz16, n_fat); /* Number of sectors per FAT */
  80a450:	e0bffa17 	ldw	r2,-24(fp)
  80a454:	10800584 	addi	r2,r2,22
  80a458:	e0fff117 	ldw	r3,-60(fp)
  80a45c:	10c00005 	stb	r3,0(r2)
  80a460:	e0bffa17 	ldw	r2,-24(fp)
  80a464:	108005c4 	addi	r2,r2,23
  80a468:	e0fff117 	ldw	r3,-60(fp)
  80a46c:	18ffffcc 	andi	r3,r3,65535
  80a470:	1806d23a 	srli	r3,r3,8
  80a474:	10c00005 	stb	r3,0(r2)
      tbl[BS_DrvNum] = 0x80;           /* Drive number */
  80a478:	e0bffa17 	ldw	r2,-24(fp)
  80a47c:	10800904 	addi	r2,r2,36
  80a480:	00ffe004 	movi	r3,-128
  80a484:	10c00005 	stb	r3,0(r2)
      tbl[BS_BootSig] = 0x29;          /* Extended boot signature */
  80a488:	e0bffa17 	ldw	r2,-24(fp)
  80a48c:	10800984 	addi	r2,r2,38
  80a490:	00c00a44 	movi	r3,41
  80a494:	10c00005 	stb	r3,0(r2)
      mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature */
  80a498:	e0bffa17 	ldw	r2,-24(fp)
  80a49c:	10800ac4 	addi	r2,r2,43
  80a4a0:	1009883a 	mov	r4,r2
  80a4a4:	014020b4 	movhi	r5,130
  80a4a8:	296f4a04 	addi	r5,r5,-17112
  80a4ac:	018004c4 	movi	r6,19
  80a4b0:	08046dc0 	call	8046dc <mem_cpy>
   }
   ST_WORD(tbl+BS_55AA, 0xAA55);       /* Signature (Offset is fixed here regardless of sector size) */
  80a4b4:	e0bffa17 	ldw	r2,-24(fp)
  80a4b8:	10807f84 	addi	r2,r2,510
  80a4bc:	00c01544 	movi	r3,85
  80a4c0:	10c00005 	stb	r3,0(r2)
  80a4c4:	e0bffa17 	ldw	r2,-24(fp)
  80a4c8:	10807fc4 	addi	r2,r2,511
  80a4cc:	00ffea84 	movi	r3,-86
  80a4d0:	10c00005 	stb	r3,0(r2)
   if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)  /* Write it to the VBR sector */
  80a4d4:	e0bff403 	ldbu	r2,-48(fp)
  80a4d8:	1009883a 	mov	r4,r2
  80a4dc:	e17ffa17 	ldw	r5,-24(fp)
  80a4e0:	e1bff517 	ldw	r6,-44(fp)
  80a4e4:	01c00044 	movi	r7,1
  80a4e8:	080409c0 	call	80409c <ffs_DiskIOWrite>
  80a4ec:	10000226 	beq	r2,zero,80a4f8 <f_mkfs+0xa58>
      return FR_DISK_ERR;
  80a4f0:	00800044 	movi	r2,1
  80a4f4:	00011406 	br	80a948 <f_mkfs+0xea8>
   if (fmt == FS_FAT32)                   /* Write backup VBR if needed (VBR+6) */
  80a4f8:	e0bfec03 	ldbu	r2,-80(fp)
  80a4fc:	108000d8 	cmpnei	r2,r2,3
  80a500:	1000081e 	bne	r2,zero,80a524 <f_mkfs+0xa84>
      disk_write(pdrv, tbl, b_vol + 6, 1);
  80a504:	e0fff403 	ldbu	r3,-48(fp)
  80a508:	e0bff517 	ldw	r2,-44(fp)
  80a50c:	10800184 	addi	r2,r2,6
  80a510:	1809883a 	mov	r4,r3
  80a514:	e17ffa17 	ldw	r5,-24(fp)
  80a518:	100d883a 	mov	r6,r2
  80a51c:	01c00044 	movi	r7,1
  80a520:	080409c0 	call	80409c <ffs_DiskIOWrite>

   /* Initialize FAT area */
   wsect = b_fat;
  80a524:	e0bfef17 	ldw	r2,-68(fp)
  80a528:	e0bfed15 	stw	r2,-76(fp)
   for (i = 0; i < N_FATS; i++) {      /* Initialize each FAT copy */
  80a52c:	e03fee15 	stw	zero,-72(fp)
  80a530:	00008606 	br	80a74c <f_mkfs+0xcac>
      mem_set(tbl, 0, SS(fs));         /* 1st sector of the FAT  */
  80a534:	e13ffa17 	ldw	r4,-24(fp)
  80a538:	000b883a 	mov	r5,zero
  80a53c:	01808004 	movi	r6,512
  80a540:	08047480 	call	804748 <mem_set>
      n = md;                       /* Media descriptor byte */
  80a544:	e0bfec43 	ldbu	r2,-79(fp)
  80a548:	e0bffb15 	stw	r2,-20(fp)
      if (fmt != FS_FAT32) {
  80a54c:	e0bfec03 	ldbu	r2,-80(fp)
  80a550:	108000e0 	cmpeqi	r2,r2,3
  80a554:	10001f1e 	bne	r2,zero,80a5d4 <f_mkfs+0xb34>
         n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
  80a558:	e0bfec03 	ldbu	r2,-80(fp)
  80a55c:	10800058 	cmpnei	r2,r2,1
  80a560:	1000031e 	bne	r2,zero,80a570 <f_mkfs+0xad0>
  80a564:	00804034 	movhi	r2,256
  80a568:	10bfc004 	addi	r2,r2,-256
  80a56c:	00000106 	br	80a574 <f_mkfs+0xad4>
  80a570:	00bfc004 	movi	r2,-256
  80a574:	e0fffb17 	ldw	r3,-20(fp)
  80a578:	10c4b03a 	or	r2,r2,r3
  80a57c:	e0bffb15 	stw	r2,-20(fp)
         ST_DWORD(tbl+0, n);           /* Reserve cluster #0-1 (FAT12/16) */
  80a580:	e0bffb17 	ldw	r2,-20(fp)
  80a584:	1007883a 	mov	r3,r2
  80a588:	e0bffa17 	ldw	r2,-24(fp)
  80a58c:	10c00005 	stb	r3,0(r2)
  80a590:	e0bffa17 	ldw	r2,-24(fp)
  80a594:	10800044 	addi	r2,r2,1
  80a598:	e0fffb17 	ldw	r3,-20(fp)
  80a59c:	18ffffcc 	andi	r3,r3,65535
  80a5a0:	1806d23a 	srli	r3,r3,8
  80a5a4:	10c00005 	stb	r3,0(r2)
  80a5a8:	e0bffa17 	ldw	r2,-24(fp)
  80a5ac:	10800084 	addi	r2,r2,2
  80a5b0:	e0fffb17 	ldw	r3,-20(fp)
  80a5b4:	1806d43a 	srli	r3,r3,16
  80a5b8:	10c00005 	stb	r3,0(r2)
  80a5bc:	e0bffa17 	ldw	r2,-24(fp)
  80a5c0:	108000c4 	addi	r2,r2,3
  80a5c4:	e0fffb17 	ldw	r3,-20(fp)
  80a5c8:	1806d63a 	srli	r3,r3,24
  80a5cc:	10c00005 	stb	r3,0(r2)
  80a5d0:	00003806 	br	80a6b4 <f_mkfs+0xc14>
      } else {
         n |= 0xFFFFFF00;
  80a5d4:	e0fffb17 	ldw	r3,-20(fp)
  80a5d8:	00bfc004 	movi	r2,-256
  80a5dc:	1884b03a 	or	r2,r3,r2
  80a5e0:	e0bffb15 	stw	r2,-20(fp)
         ST_DWORD(tbl+0, n);           /* Reserve cluster #0-1 (FAT32) */
  80a5e4:	e0bffb17 	ldw	r2,-20(fp)
  80a5e8:	1007883a 	mov	r3,r2
  80a5ec:	e0bffa17 	ldw	r2,-24(fp)
  80a5f0:	10c00005 	stb	r3,0(r2)
  80a5f4:	e0bffa17 	ldw	r2,-24(fp)
  80a5f8:	10800044 	addi	r2,r2,1
  80a5fc:	e0fffb17 	ldw	r3,-20(fp)
  80a600:	18ffffcc 	andi	r3,r3,65535
  80a604:	1806d23a 	srli	r3,r3,8
  80a608:	10c00005 	stb	r3,0(r2)
  80a60c:	e0bffa17 	ldw	r2,-24(fp)
  80a610:	10800084 	addi	r2,r2,2
  80a614:	e0fffb17 	ldw	r3,-20(fp)
  80a618:	1806d43a 	srli	r3,r3,16
  80a61c:	10c00005 	stb	r3,0(r2)
  80a620:	e0bffa17 	ldw	r2,-24(fp)
  80a624:	108000c4 	addi	r2,r2,3
  80a628:	e0fffb17 	ldw	r3,-20(fp)
  80a62c:	1806d63a 	srli	r3,r3,24
  80a630:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+4, 0xFFFFFFFF);
  80a634:	e0bffa17 	ldw	r2,-24(fp)
  80a638:	10800104 	addi	r2,r2,4
  80a63c:	00ffffc4 	movi	r3,-1
  80a640:	10c00005 	stb	r3,0(r2)
  80a644:	e0bffa17 	ldw	r2,-24(fp)
  80a648:	10800144 	addi	r2,r2,5
  80a64c:	00ffffc4 	movi	r3,-1
  80a650:	10c00005 	stb	r3,0(r2)
  80a654:	e0bffa17 	ldw	r2,-24(fp)
  80a658:	10800184 	addi	r2,r2,6
  80a65c:	00ffffc4 	movi	r3,-1
  80a660:	10c00005 	stb	r3,0(r2)
  80a664:	e0bffa17 	ldw	r2,-24(fp)
  80a668:	108001c4 	addi	r2,r2,7
  80a66c:	00ffffc4 	movi	r3,-1
  80a670:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+8, 0x0FFFFFFF);  /* Reserve cluster #2 for root dir */
  80a674:	e0bffa17 	ldw	r2,-24(fp)
  80a678:	10800204 	addi	r2,r2,8
  80a67c:	00ffffc4 	movi	r3,-1
  80a680:	10c00005 	stb	r3,0(r2)
  80a684:	e0bffa17 	ldw	r2,-24(fp)
  80a688:	10800244 	addi	r2,r2,9
  80a68c:	00ffffc4 	movi	r3,-1
  80a690:	10c00005 	stb	r3,0(r2)
  80a694:	e0bffa17 	ldw	r2,-24(fp)
  80a698:	10800284 	addi	r2,r2,10
  80a69c:	00ffffc4 	movi	r3,-1
  80a6a0:	10c00005 	stb	r3,0(r2)
  80a6a4:	e0bffa17 	ldw	r2,-24(fp)
  80a6a8:	108002c4 	addi	r2,r2,11
  80a6ac:	00c003c4 	movi	r3,15
  80a6b0:	10c00005 	stb	r3,0(r2)
      }
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  80a6b4:	e13ff403 	ldbu	r4,-48(fp)
  80a6b8:	e0bfed17 	ldw	r2,-76(fp)
  80a6bc:	10c00044 	addi	r3,r2,1
  80a6c0:	e0ffed15 	stw	r3,-76(fp)
  80a6c4:	e17ffa17 	ldw	r5,-24(fp)
  80a6c8:	100d883a 	mov	r6,r2
  80a6cc:	01c00044 	movi	r7,1
  80a6d0:	080409c0 	call	80409c <ffs_DiskIOWrite>
  80a6d4:	10000226 	beq	r2,zero,80a6e0 <f_mkfs+0xc40>
         return FR_DISK_ERR;
  80a6d8:	00800044 	movi	r2,1
  80a6dc:	00009a06 	br	80a948 <f_mkfs+0xea8>
      mem_set(tbl, 0, SS(fs));         /* Fill following FAT entries with zero */
  80a6e0:	e13ffa17 	ldw	r4,-24(fp)
  80a6e4:	000b883a 	mov	r5,zero
  80a6e8:	01808004 	movi	r6,512
  80a6ec:	08047480 	call	804748 <mem_set>
      for (n = 1; n < n_fat; n++) {    /* This loop may take a time on FAT32 volume due to many single sector writes */
  80a6f0:	00800044 	movi	r2,1
  80a6f4:	e0bffb15 	stw	r2,-20(fp)
  80a6f8:	00000e06 	br	80a734 <f_mkfs+0xc94>
         if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  80a6fc:	e13ff403 	ldbu	r4,-48(fp)
  80a700:	e0bfed17 	ldw	r2,-76(fp)
  80a704:	10c00044 	addi	r3,r2,1
  80a708:	e0ffed15 	stw	r3,-76(fp)
  80a70c:	e17ffa17 	ldw	r5,-24(fp)
  80a710:	100d883a 	mov	r6,r2
  80a714:	01c00044 	movi	r7,1
  80a718:	080409c0 	call	80409c <ffs_DiskIOWrite>
  80a71c:	10000226 	beq	r2,zero,80a728 <f_mkfs+0xc88>
            return FR_DISK_ERR;
  80a720:	00800044 	movi	r2,1
  80a724:	00008806 	br	80a948 <f_mkfs+0xea8>
         ST_DWORD(tbl+8, 0x0FFFFFFF);  /* Reserve cluster #2 for root dir */
      }
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
         return FR_DISK_ERR;
      mem_set(tbl, 0, SS(fs));         /* Fill following FAT entries with zero */
      for (n = 1; n < n_fat; n++) {    /* This loop may take a time on FAT32 volume due to many single sector writes */
  80a728:	e0bffb17 	ldw	r2,-20(fp)
  80a72c:	10800044 	addi	r2,r2,1
  80a730:	e0bffb15 	stw	r2,-20(fp)
  80a734:	e0fffb17 	ldw	r3,-20(fp)
  80a738:	e0bff117 	ldw	r2,-60(fp)
  80a73c:	18bfef36 	bltu	r3,r2,80a6fc <__alt_data_end+0xff80a6fc>
   if (fmt == FS_FAT32)                   /* Write backup VBR if needed (VBR+6) */
      disk_write(pdrv, tbl, b_vol + 6, 1);

   /* Initialize FAT area */
   wsect = b_fat;
   for (i = 0; i < N_FATS; i++) {      /* Initialize each FAT copy */
  80a740:	e0bfee17 	ldw	r2,-72(fp)
  80a744:	10800044 	addi	r2,r2,1
  80a748:	e0bfee15 	stw	r2,-72(fp)
  80a74c:	e0bfee17 	ldw	r2,-72(fp)
  80a750:	103f7826 	beq	r2,zero,80a534 <__alt_data_end+0xff80a534>
            return FR_DISK_ERR;
      }
   }

   /* Initialize root directory */
   i = (fmt == FS_FAT32) ? au : n_dir;
  80a754:	e0bfec03 	ldbu	r2,-80(fp)
  80a758:	108000d8 	cmpnei	r2,r2,3
  80a75c:	1000021e 	bne	r2,zero,80a768 <f_mkfs+0xcc8>
  80a760:	e0bfff17 	ldw	r2,-4(fp)
  80a764:	00000106 	br	80a76c <f_mkfs+0xccc>
  80a768:	e0bff217 	ldw	r2,-56(fp)
  80a76c:	e0bfee15 	stw	r2,-72(fp)
   do {
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  80a770:	e13ff403 	ldbu	r4,-48(fp)
  80a774:	e0bfed17 	ldw	r2,-76(fp)
  80a778:	10c00044 	addi	r3,r2,1
  80a77c:	e0ffed15 	stw	r3,-76(fp)
  80a780:	e17ffa17 	ldw	r5,-24(fp)
  80a784:	100d883a 	mov	r6,r2
  80a788:	01c00044 	movi	r7,1
  80a78c:	080409c0 	call	80409c <ffs_DiskIOWrite>
  80a790:	10000226 	beq	r2,zero,80a79c <f_mkfs+0xcfc>
         return FR_DISK_ERR;
  80a794:	00800044 	movi	r2,1
  80a798:	00006b06 	br	80a948 <f_mkfs+0xea8>
   } while (--i);
  80a79c:	e0bfee17 	ldw	r2,-72(fp)
  80a7a0:	10bfffc4 	addi	r2,r2,-1
  80a7a4:	e0bfee15 	stw	r2,-72(fp)
  80a7a8:	e0bfee17 	ldw	r2,-72(fp)
  80a7ac:	103ff01e 	bne	r2,zero,80a770 <__alt_data_end+0xff80a770>
      disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
   }
#endif

   /* Create FSInfo if needed */
   if (fmt == FS_FAT32) {
  80a7b0:	e0bfec03 	ldbu	r2,-80(fp)
  80a7b4:	108000d8 	cmpnei	r2,r2,3
  80a7b8:	10005c1e 	bne	r2,zero,80a92c <f_mkfs+0xe8c>
      ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
  80a7bc:	e0bffa17 	ldw	r2,-24(fp)
  80a7c0:	00c01484 	movi	r3,82
  80a7c4:	10c00005 	stb	r3,0(r2)
  80a7c8:	e0bffa17 	ldw	r2,-24(fp)
  80a7cc:	10800044 	addi	r2,r2,1
  80a7d0:	00c01484 	movi	r3,82
  80a7d4:	10c00005 	stb	r3,0(r2)
  80a7d8:	e0bffa17 	ldw	r2,-24(fp)
  80a7dc:	10800084 	addi	r2,r2,2
  80a7e0:	00c01844 	movi	r3,97
  80a7e4:	10c00005 	stb	r3,0(r2)
  80a7e8:	e0bffa17 	ldw	r2,-24(fp)
  80a7ec:	108000c4 	addi	r2,r2,3
  80a7f0:	00c01044 	movi	r3,65
  80a7f4:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
  80a7f8:	e0bffa17 	ldw	r2,-24(fp)
  80a7fc:	10807904 	addi	r2,r2,484
  80a800:	00c01c84 	movi	r3,114
  80a804:	10c00005 	stb	r3,0(r2)
  80a808:	e0bffa17 	ldw	r2,-24(fp)
  80a80c:	10807944 	addi	r2,r2,485
  80a810:	00c01c84 	movi	r3,114
  80a814:	10c00005 	stb	r3,0(r2)
  80a818:	e0bffa17 	ldw	r2,-24(fp)
  80a81c:	10807984 	addi	r2,r2,486
  80a820:	00c01044 	movi	r3,65
  80a824:	10c00005 	stb	r3,0(r2)
  80a828:	e0bffa17 	ldw	r2,-24(fp)
  80a82c:	108079c4 	addi	r2,r2,487
  80a830:	00c01844 	movi	r3,97
  80a834:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_Free_Count, n_clst - 1); /* Number of free clusters */
  80a838:	e0bffa17 	ldw	r2,-24(fp)
  80a83c:	10807a04 	addi	r2,r2,488
  80a840:	e0fff717 	ldw	r3,-36(fp)
  80a844:	18ffffc4 	addi	r3,r3,-1
  80a848:	10c00005 	stb	r3,0(r2)
  80a84c:	e0bffa17 	ldw	r2,-24(fp)
  80a850:	10807a44 	addi	r2,r2,489
  80a854:	e0fff717 	ldw	r3,-36(fp)
  80a858:	18ffffc4 	addi	r3,r3,-1
  80a85c:	18ffffcc 	andi	r3,r3,65535
  80a860:	1806d23a 	srli	r3,r3,8
  80a864:	10c00005 	stb	r3,0(r2)
  80a868:	e0bffa17 	ldw	r2,-24(fp)
  80a86c:	10807a84 	addi	r2,r2,490
  80a870:	e0fff717 	ldw	r3,-36(fp)
  80a874:	18ffffc4 	addi	r3,r3,-1
  80a878:	1806d43a 	srli	r3,r3,16
  80a87c:	10c00005 	stb	r3,0(r2)
  80a880:	e0bffa17 	ldw	r2,-24(fp)
  80a884:	10807ac4 	addi	r2,r2,491
  80a888:	e0fff717 	ldw	r3,-36(fp)
  80a88c:	18ffffc4 	addi	r3,r3,-1
  80a890:	1806d63a 	srli	r3,r3,24
  80a894:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_Nxt_Free, 2);            /* Last allocated cluster# */
  80a898:	e0bffa17 	ldw	r2,-24(fp)
  80a89c:	10807b04 	addi	r2,r2,492
  80a8a0:	00c00084 	movi	r3,2
  80a8a4:	10c00005 	stb	r3,0(r2)
  80a8a8:	e0bffa17 	ldw	r2,-24(fp)
  80a8ac:	10807b44 	addi	r2,r2,493
  80a8b0:	10000005 	stb	zero,0(r2)
  80a8b4:	e0bffa17 	ldw	r2,-24(fp)
  80a8b8:	10807b84 	addi	r2,r2,494
  80a8bc:	10000005 	stb	zero,0(r2)
  80a8c0:	e0bffa17 	ldw	r2,-24(fp)
  80a8c4:	10807bc4 	addi	r2,r2,495
  80a8c8:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BS_55AA, 0xAA55);
  80a8cc:	e0bffa17 	ldw	r2,-24(fp)
  80a8d0:	10807f84 	addi	r2,r2,510
  80a8d4:	00c01544 	movi	r3,85
  80a8d8:	10c00005 	stb	r3,0(r2)
  80a8dc:	e0bffa17 	ldw	r2,-24(fp)
  80a8e0:	10807fc4 	addi	r2,r2,511
  80a8e4:	00ffea84 	movi	r3,-86
  80a8e8:	10c00005 	stb	r3,0(r2)
      disk_write(pdrv, tbl, b_vol + 1, 1);   /* Write original (VBR+1) */
  80a8ec:	e0fff403 	ldbu	r3,-48(fp)
  80a8f0:	e0bff517 	ldw	r2,-44(fp)
  80a8f4:	10800044 	addi	r2,r2,1
  80a8f8:	1809883a 	mov	r4,r3
  80a8fc:	e17ffa17 	ldw	r5,-24(fp)
  80a900:	100d883a 	mov	r6,r2
  80a904:	01c00044 	movi	r7,1
  80a908:	080409c0 	call	80409c <ffs_DiskIOWrite>
      disk_write(pdrv, tbl, b_vol + 7, 1);   /* Write backup (VBR+7) */
  80a90c:	e0fff403 	ldbu	r3,-48(fp)
  80a910:	e0bff517 	ldw	r2,-44(fp)
  80a914:	108001c4 	addi	r2,r2,7
  80a918:	1809883a 	mov	r4,r3
  80a91c:	e17ffa17 	ldw	r5,-24(fp)
  80a920:	100d883a 	mov	r6,r2
  80a924:	01c00044 	movi	r7,1
  80a928:	080409c0 	call	80409c <ffs_DiskIOWrite>
   }

   return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
  80a92c:	e0bff403 	ldbu	r2,-48(fp)
  80a930:	1009883a 	mov	r4,r2
  80a934:	000b883a 	mov	r5,zero
  80a938:	000d883a 	mov	r6,zero
  80a93c:	08042080 	call	804208 <ffs_DiskIOIoctl>
  80a940:	1004c03a 	cmpne	r2,r2,zero
  80a944:	10803fcc 	andi	r2,r2,255
}
  80a948:	e037883a 	mov	sp,fp
  80a94c:	dfc00117 	ldw	ra,4(sp)
  80a950:	df000017 	ldw	fp,0(sp)
  80a954:	dec00204 	addi	sp,sp,8
  80a958:	f800283a 	ret

0080a95c <f_gets>:
TCHAR* f_gets (
   TCHAR* buff,   /* Pointer to the string buffer to read */
   int len,    /* Size of string buffer (characters) */
   FIL* fil    /* Pointer to the file object */
)
{
  80a95c:	defff704 	addi	sp,sp,-36
  80a960:	dfc00815 	stw	ra,32(sp)
  80a964:	df000715 	stw	fp,28(sp)
  80a968:	df000704 	addi	fp,sp,28
  80a96c:	e13ffd15 	stw	r4,-12(fp)
  80a970:	e17ffe15 	stw	r5,-8(fp)
  80a974:	e1bfff15 	stw	r6,-4(fp)
   int n = 0;
  80a978:	e03ff915 	stw	zero,-28(fp)
   TCHAR c, *p = buff;
  80a97c:	e0bffd17 	ldw	r2,-12(fp)
  80a980:	e0bffa15 	stw	r2,-24(fp)
   uint8_t s[2];
   uint32_t rc;


   while (n < len - 1) {         /* Read bytes until buffer gets filled */
  80a984:	00001906 	br	80a9ec <f_gets+0x90>
      f_read(fil, s, 1, &rc);
  80a988:	e0fffb44 	addi	r3,fp,-19
  80a98c:	e0bffc04 	addi	r2,fp,-16
  80a990:	e13fff17 	ldw	r4,-4(fp)
  80a994:	180b883a 	mov	r5,r3
  80a998:	01800044 	movi	r6,1
  80a99c:	100f883a 	mov	r7,r2
  80a9a0:	08075380 	call	807538 <f_read>
      if (rc != 1) break;        /* Break on EOF or error */
  80a9a4:	e0bffc17 	ldw	r2,-16(fp)
  80a9a8:	10800060 	cmpeqi	r2,r2,1
  80a9ac:	1000011e 	bne	r2,zero,80a9b4 <f_gets+0x58>
  80a9b0:	00001206 	br	80a9fc <f_gets+0xa0>
      c = s[0];
  80a9b4:	e0bffb43 	ldbu	r2,-19(fp)
  80a9b8:	e0bffb05 	stb	r2,-20(fp)
      }
#endif
#if _USE_STRFUNC >= 2
      if (c == '\r') continue;   /* Strip '\r' */
#endif
      *p++ = c;
  80a9bc:	e0bffa17 	ldw	r2,-24(fp)
  80a9c0:	10c00044 	addi	r3,r2,1
  80a9c4:	e0fffa15 	stw	r3,-24(fp)
  80a9c8:	e0fffb03 	ldbu	r3,-20(fp)
  80a9cc:	10c00005 	stb	r3,0(r2)
      n++;
  80a9d0:	e0bff917 	ldw	r2,-28(fp)
  80a9d4:	10800044 	addi	r2,r2,1
  80a9d8:	e0bff915 	stw	r2,-28(fp)
      if (c == '\n') break;      /* Break on EOL */
  80a9dc:	e0bffb07 	ldb	r2,-20(fp)
  80a9e0:	10800298 	cmpnei	r2,r2,10
  80a9e4:	1000011e 	bne	r2,zero,80a9ec <f_gets+0x90>
  80a9e8:	00000406 	br	80a9fc <f_gets+0xa0>
   TCHAR c, *p = buff;
   uint8_t s[2];
   uint32_t rc;


   while (n < len - 1) {         /* Read bytes until buffer gets filled */
  80a9ec:	e0bffe17 	ldw	r2,-8(fp)
  80a9f0:	10bfffc4 	addi	r2,r2,-1
  80a9f4:	e0fff917 	ldw	r3,-28(fp)
  80a9f8:	18bfe316 	blt	r3,r2,80a988 <__alt_data_end+0xff80a988>
#endif
      *p++ = c;
      n++;
      if (c == '\n') break;      /* Break on EOL */
   }
   *p = 0;
  80a9fc:	e0bffa17 	ldw	r2,-24(fp)
  80aa00:	10000005 	stb	zero,0(r2)
   return n ? buff : 0;       /* When no data read (eof or error), return with error. */
  80aa04:	e0bff917 	ldw	r2,-28(fp)
  80aa08:	10000226 	beq	r2,zero,80aa14 <f_gets+0xb8>
  80aa0c:	e0bffd17 	ldw	r2,-12(fp)
  80aa10:	00000106 	br	80aa18 <f_gets+0xbc>
  80aa14:	0005883a 	mov	r2,zero
}
  80aa18:	e037883a 	mov	sp,fp
  80aa1c:	dfc00117 	ldw	ra,4(sp)
  80aa20:	df000017 	ldw	fp,0(sp)
  80aa24:	dec00204 	addi	sp,sp,8
  80aa28:	f800283a 	ret

0080aa2c <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
   TCHAR c, /* A character to be output */
   FIL* fil /* Pointer to the file object */
)
{
  80aa2c:	defff904 	addi	sp,sp,-28
  80aa30:	dfc00615 	stw	ra,24(sp)
  80aa34:	df000515 	stw	fp,20(sp)
  80aa38:	df000504 	addi	fp,sp,20
  80aa3c:	2005883a 	mov	r2,r4
  80aa40:	e17fff15 	stw	r5,-4(fp)
  80aa44:	e0bffe05 	stb	r2,-8(fp)
         s[2] = (uint8_t)(0x80 | (c & 0x3F));
         btw = 3;
      }
   }
#else          /* Write the character without conversion */
   s[0] = (uint8_t)c;
  80aa48:	e0bffe03 	ldbu	r2,-8(fp)
  80aa4c:	e0bffd05 	stb	r2,-12(fp)
   btw = 1;
  80aa50:	00800044 	movi	r2,1
  80aa54:	e0bffb15 	stw	r2,-20(fp)
#endif
   f_write(fil, s, btw, &bw);    /* Write the char to the file */
  80aa58:	e0fffd04 	addi	r3,fp,-12
  80aa5c:	e0bffc04 	addi	r2,fp,-16
  80aa60:	e13fff17 	ldw	r4,-4(fp)
  80aa64:	180b883a 	mov	r5,r3
  80aa68:	e1bffb17 	ldw	r6,-20(fp)
  80aa6c:	100f883a 	mov	r7,r2
  80aa70:	0807a1c0 	call	807a1c <f_write>
   return (bw == btw) ? 1 : EOF; /* Return the result */
  80aa74:	e0fffc17 	ldw	r3,-16(fp)
  80aa78:	e0bffb17 	ldw	r2,-20(fp)
  80aa7c:	1880021e 	bne	r3,r2,80aa88 <f_putc+0x5c>
  80aa80:	00800044 	movi	r2,1
  80aa84:	00000106 	br	80aa8c <f_putc+0x60>
  80aa88:	00bfffc4 	movi	r2,-1
}
  80aa8c:	e037883a 	mov	sp,fp
  80aa90:	dfc00117 	ldw	ra,4(sp)
  80aa94:	df000017 	ldw	fp,0(sp)
  80aa98:	dec00204 	addi	sp,sp,8
  80aa9c:	f800283a 	ret

0080aaa0 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
   const TCHAR* str, /* Pointer to the string to be output */
   FIL* fil       /* Pointer to the file object */
)
{
  80aaa0:	defffb04 	addi	sp,sp,-20
  80aaa4:	dfc00415 	stw	ra,16(sp)
  80aaa8:	df000315 	stw	fp,12(sp)
  80aaac:	df000304 	addi	fp,sp,12
  80aab0:	e13ffe15 	stw	r4,-8(fp)
  80aab4:	e17fff15 	stw	r5,-4(fp)
   int n;


   for (n = 0; *str; str++, n++) {
  80aab8:	e03ffd15 	stw	zero,-12(fp)
  80aabc:	00001206 	br	80ab08 <f_puts+0x68>
      if (f_putc(*str, fil) == EOF) return EOF;
  80aac0:	e0bffe17 	ldw	r2,-8(fp)
  80aac4:	10800003 	ldbu	r2,0(r2)
  80aac8:	10803fcc 	andi	r2,r2,255
  80aacc:	1080201c 	xori	r2,r2,128
  80aad0:	10bfe004 	addi	r2,r2,-128
  80aad4:	1009883a 	mov	r4,r2
  80aad8:	e17fff17 	ldw	r5,-4(fp)
  80aadc:	080aa2c0 	call	80aa2c <f_putc>
  80aae0:	10bfffd8 	cmpnei	r2,r2,-1
  80aae4:	1000021e 	bne	r2,zero,80aaf0 <f_puts+0x50>
  80aae8:	00bfffc4 	movi	r2,-1
  80aaec:	00000d06 	br	80ab24 <f_puts+0x84>
)
{
   int n;


   for (n = 0; *str; str++, n++) {
  80aaf0:	e0bffe17 	ldw	r2,-8(fp)
  80aaf4:	10800044 	addi	r2,r2,1
  80aaf8:	e0bffe15 	stw	r2,-8(fp)
  80aafc:	e0bffd17 	ldw	r2,-12(fp)
  80ab00:	10800044 	addi	r2,r2,1
  80ab04:	e0bffd15 	stw	r2,-12(fp)
  80ab08:	e0bffe17 	ldw	r2,-8(fp)
  80ab0c:	10800003 	ldbu	r2,0(r2)
  80ab10:	10803fcc 	andi	r2,r2,255
  80ab14:	1080201c 	xori	r2,r2,128
  80ab18:	10bfe004 	addi	r2,r2,-128
  80ab1c:	103fe81e 	bne	r2,zero,80aac0 <__alt_data_end+0xff80aac0>
      if (f_putc(*str, fil) == EOF) return EOF;
   }
   return n;
  80ab20:	e0bffd17 	ldw	r2,-12(fp)
}
  80ab24:	e037883a 	mov	sp,fp
  80ab28:	dfc00117 	ldw	ra,4(sp)
  80ab2c:	df000017 	ldw	fp,0(sp)
  80ab30:	dec00204 	addi	sp,sp,8
  80ab34:	f800283a 	ret

0080ab38 <f_printf>:
int f_printf (
   FIL* fil,         /* Pointer to the file object */
   const TCHAR* str, /* Pointer to the format string */
   ...               /* Optional arguments... */
)
{
  80ab38:	deffeb04 	addi	sp,sp,-84
  80ab3c:	dfc01215 	stw	ra,72(sp)
  80ab40:	df001115 	stw	fp,68(sp)
  80ab44:	df001104 	addi	fp,sp,68
  80ab48:	e13ffe15 	stw	r4,-8(fp)
  80ab4c:	e1800215 	stw	r6,8(fp)
  80ab50:	e1c00315 	stw	r7,12(fp)
  80ab54:	e17fff15 	stw	r5,-4(fp)
   uint32_t v;
   TCHAR c, d, s[16], *p;
   int res, chc, cc;


   va_start(arp, str);
  80ab58:	e0800204 	addi	r2,fp,8
  80ab5c:	e0bff915 	stw	r2,-28(fp)

   for (cc = res = 0; cc != EOF; res += cc) {
  80ab60:	e03ff515 	stw	zero,-44(fp)
  80ab64:	e0bff517 	ldw	r2,-44(fp)
  80ab68:	e0bff715 	stw	r2,-36(fp)
  80ab6c:	00017806 	br	80b150 <f_printf+0x618>
      c = *str++;
  80ab70:	e0bfff17 	ldw	r2,-4(fp)
  80ab74:	10c00044 	addi	r3,r2,1
  80ab78:	e0ffff15 	stw	r3,-4(fp)
  80ab7c:	10800003 	ldbu	r2,0(r2)
  80ab80:	e0bff405 	stb	r2,-48(fp)
      if (c == 0) break;         /* End of string */
  80ab84:	e0bff407 	ldb	r2,-48(fp)
  80ab88:	1000011e 	bne	r2,zero,80ab90 <f_printf+0x58>
  80ab8c:	00017306 	br	80b15c <f_printf+0x624>
      if (c != '%') {            /* Non escape character */
  80ab90:	e0bff407 	ldb	r2,-48(fp)
  80ab94:	10800960 	cmpeqi	r2,r2,37
  80ab98:	10000c1e 	bne	r2,zero,80abcc <f_printf+0x94>
         cc = f_putc(c, fil);
  80ab9c:	e0bff407 	ldb	r2,-48(fp)
  80aba0:	1009883a 	mov	r4,r2
  80aba4:	e17ffe17 	ldw	r5,-8(fp)
  80aba8:	080aa2c0 	call	80aa2c <f_putc>
  80abac:	e0bff715 	stw	r2,-36(fp)
         if (cc != EOF) cc = 1;
  80abb0:	e0bff717 	ldw	r2,-36(fp)
  80abb4:	10bfffe0 	cmpeqi	r2,r2,-1
  80abb8:	1000031e 	bne	r2,zero,80abc8 <f_printf+0x90>
  80abbc:	00800044 	movi	r2,1
  80abc0:	e0bff715 	stw	r2,-36(fp)
         continue;
  80abc4:	00015e06 	br	80b140 <f_printf+0x608>
  80abc8:	00015d06 	br	80b140 <f_printf+0x608>
      }
      w = f = 0;
  80abcc:	e03fef05 	stb	zero,-68(fp)
  80abd0:	e03ff215 	stw	zero,-56(fp)
      c = *str++;
  80abd4:	e0bfff17 	ldw	r2,-4(fp)
  80abd8:	10c00044 	addi	r3,r2,1
  80abdc:	e0ffff15 	stw	r3,-4(fp)
  80abe0:	10800003 	ldbu	r2,0(r2)
  80abe4:	e0bff405 	stb	r2,-48(fp)
      if (c == '0') {            /* Flag: '0' padding */
  80abe8:	e0bff407 	ldb	r2,-48(fp)
  80abec:	10800c18 	cmpnei	r2,r2,48
  80abf0:	1000081e 	bne	r2,zero,80ac14 <f_printf+0xdc>
         f = 1; c = *str++;
  80abf4:	00800044 	movi	r2,1
  80abf8:	e0bfef05 	stb	r2,-68(fp)
  80abfc:	e0bfff17 	ldw	r2,-4(fp)
  80ac00:	10c00044 	addi	r3,r2,1
  80ac04:	e0ffff15 	stw	r3,-4(fp)
  80ac08:	10800003 	ldbu	r2,0(r2)
  80ac0c:	e0bff405 	stb	r2,-48(fp)
  80ac10:	00000a06 	br	80ac3c <f_printf+0x104>
      } else {
         if (c == '-') {         /* Flag: left justified */
  80ac14:	e0bff407 	ldb	r2,-48(fp)
  80ac18:	10800b58 	cmpnei	r2,r2,45
  80ac1c:	1000071e 	bne	r2,zero,80ac3c <f_printf+0x104>
            f = 2; c = *str++;
  80ac20:	00800084 	movi	r2,2
  80ac24:	e0bfef05 	stb	r2,-68(fp)
  80ac28:	e0bfff17 	ldw	r2,-4(fp)
  80ac2c:	10c00044 	addi	r3,r2,1
  80ac30:	e0ffff15 	stw	r3,-4(fp)
  80ac34:	10800003 	ldbu	r2,0(r2)
  80ac38:	e0bff405 	stb	r2,-48(fp)
         }
      }
      while (IsDigit(c)) {    /* Precision */
  80ac3c:	00000b06 	br	80ac6c <f_printf+0x134>
         w = w * 10 + c - '0';
  80ac40:	e0bff217 	ldw	r2,-56(fp)
  80ac44:	10c002a4 	muli	r3,r2,10
  80ac48:	e0bff407 	ldb	r2,-48(fp)
  80ac4c:	1885883a 	add	r2,r3,r2
  80ac50:	10bff404 	addi	r2,r2,-48
  80ac54:	e0bff215 	stw	r2,-56(fp)
         c = *str++;
  80ac58:	e0bfff17 	ldw	r2,-4(fp)
  80ac5c:	10c00044 	addi	r3,r2,1
  80ac60:	e0ffff15 	stw	r3,-4(fp)
  80ac64:	10800003 	ldbu	r2,0(r2)
  80ac68:	e0bff405 	stb	r2,-48(fp)
      } else {
         if (c == '-') {         /* Flag: left justified */
            f = 2; c = *str++;
         }
      }
      while (IsDigit(c)) {    /* Precision */
  80ac6c:	e0bff407 	ldb	r2,-48(fp)
  80ac70:	10800c10 	cmplti	r2,r2,48
  80ac74:	1000031e 	bne	r2,zero,80ac84 <f_printf+0x14c>
  80ac78:	e0bff407 	ldb	r2,-48(fp)
  80ac7c:	10800e90 	cmplti	r2,r2,58
  80ac80:	103fef1e 	bne	r2,zero,80ac40 <__alt_data_end+0xff80ac40>
         w = w * 10 + c - '0';
         c = *str++;
      }
      if (c == 'l' || c == 'L') {   /* Prefix: Size is long int */
  80ac84:	e0bff407 	ldb	r2,-48(fp)
  80ac88:	10801b20 	cmpeqi	r2,r2,108
  80ac8c:	1000031e 	bne	r2,zero,80ac9c <f_printf+0x164>
  80ac90:	e0bff407 	ldb	r2,-48(fp)
  80ac94:	10801318 	cmpnei	r2,r2,76
  80ac98:	1000081e 	bne	r2,zero,80acbc <f_printf+0x184>
         f |= 4; c = *str++;
  80ac9c:	e0bfef03 	ldbu	r2,-68(fp)
  80aca0:	10800114 	ori	r2,r2,4
  80aca4:	e0bfef05 	stb	r2,-68(fp)
  80aca8:	e0bfff17 	ldw	r2,-4(fp)
  80acac:	10c00044 	addi	r3,r2,1
  80acb0:	e0ffff15 	stw	r3,-4(fp)
  80acb4:	10800003 	ldbu	r2,0(r2)
  80acb8:	e0bff405 	stb	r2,-48(fp)
      }
      if (!c) break;
  80acbc:	e0bff407 	ldb	r2,-48(fp)
  80acc0:	1000011e 	bne	r2,zero,80acc8 <f_printf+0x190>
  80acc4:	00012506 	br	80b15c <f_printf+0x624>
      d = c;
  80acc8:	e0bff403 	ldbu	r2,-48(fp)
  80accc:	e0bff445 	stb	r2,-47(fp)
      if (IsLower(d)) d -= 0x20;
  80acd0:	e0bff447 	ldb	r2,-47(fp)
  80acd4:	10801850 	cmplti	r2,r2,97
  80acd8:	1000061e 	bne	r2,zero,80acf4 <f_printf+0x1bc>
  80acdc:	e0bff447 	ldb	r2,-47(fp)
  80ace0:	10801ec8 	cmpgei	r2,r2,123
  80ace4:	1000031e 	bne	r2,zero,80acf4 <f_printf+0x1bc>
  80ace8:	e0bff443 	ldbu	r2,-47(fp)
  80acec:	10bff804 	addi	r2,r2,-32
  80acf0:	e0bff445 	stb	r2,-47(fp)
      switch (d) {            /* Type is... */
  80acf4:	e0bff447 	ldb	r2,-47(fp)
  80acf8:	10bfef84 	addi	r2,r2,-66
  80acfc:	10c005e8 	cmpgeui	r3,r2,23
  80ad00:	1800761e 	bne	r3,zero,80aedc <f_printf+0x3a4>
  80ad04:	100690ba 	slli	r3,r2,2
  80ad08:	00802074 	movhi	r2,129
  80ad0c:	10ab4704 	addi	r2,r2,-21220
  80ad10:	1885883a 	add	r2,r3,r2
  80ad14:	10800017 	ldw	r2,0(r2)
  80ad18:	1000683a 	jmp	r2
  80ad1c:	0080aeac 	andhi	r2,zero,698
  80ad20:	0080ae7c 	xorhi	r2,zero,697
  80ad24:	0080aec4 	movi	r2,699
  80ad28:	0080aedc 	xori	r2,zero,699
  80ad2c:	0080aedc 	xori	r2,zero,699
  80ad30:	0080aedc 	xori	r2,zero,699
  80ad34:	0080aedc 	xori	r2,zero,699
  80ad38:	0080aedc 	xori	r2,zero,699
  80ad3c:	0080aedc 	xori	r2,zero,699
  80ad40:	0080aedc 	xori	r2,zero,699
  80ad44:	0080aedc 	xori	r2,zero,699
  80ad48:	0080aedc 	xori	r2,zero,699
  80ad4c:	0080aedc 	xori	r2,zero,699
  80ad50:	0080aeb8 	rdprs	r2,zero,698
  80ad54:	0080aedc 	xori	r2,zero,699
  80ad58:	0080aedc 	xori	r2,zero,699
  80ad5c:	0080aedc 	xori	r2,zero,699
  80ad60:	0080ad78 	rdprs	r2,zero,693
  80ad64:	0080aedc 	xori	r2,zero,699
  80ad68:	0080aec4 	movi	r2,699
  80ad6c:	0080aedc 	xori	r2,zero,699
  80ad70:	0080aedc 	xori	r2,zero,699
  80ad74:	0080aed0 	cmplti	r2,zero,699
      case 'S' :              /* String */
         p = va_arg(arp, TCHAR*);
  80ad78:	e0bff917 	ldw	r2,-28(fp)
  80ad7c:	10c00104 	addi	r3,r2,4
  80ad80:	e0fff915 	stw	r3,-28(fp)
  80ad84:	10800017 	ldw	r2,0(r2)
  80ad88:	e0bff815 	stw	r2,-32(fp)
         for (j = 0; p[j]; j++) ;
  80ad8c:	e03ff115 	stw	zero,-60(fp)
  80ad90:	00000306 	br	80ada0 <f_printf+0x268>
  80ad94:	e0bff117 	ldw	r2,-60(fp)
  80ad98:	10800044 	addi	r2,r2,1
  80ad9c:	e0bff115 	stw	r2,-60(fp)
  80ada0:	e0fff817 	ldw	r3,-32(fp)
  80ada4:	e0bff117 	ldw	r2,-60(fp)
  80ada8:	1885883a 	add	r2,r3,r2
  80adac:	10800003 	ldbu	r2,0(r2)
  80adb0:	10803fcc 	andi	r2,r2,255
  80adb4:	1080201c 	xori	r2,r2,128
  80adb8:	10bfe004 	addi	r2,r2,-128
  80adbc:	103ff51e 	bne	r2,zero,80ad94 <__alt_data_end+0xff80ad94>
         chc = 0;
  80adc0:	e03ff615 	stw	zero,-40(fp)
         if (!(f & 2)) {
  80adc4:	e0bfef03 	ldbu	r2,-68(fp)
  80adc8:	1080008c 	andi	r2,r2,2
  80adcc:	10000e1e 	bne	r2,zero,80ae08 <f_printf+0x2d0>
            while (j++ < w) chc += (cc = f_putc(' ', fil));
  80add0:	00000806 	br	80adf4 <f_printf+0x2bc>
  80add4:	01000804 	movi	r4,32
  80add8:	e17ffe17 	ldw	r5,-8(fp)
  80addc:	080aa2c0 	call	80aa2c <f_putc>
  80ade0:	e0bff715 	stw	r2,-36(fp)
  80ade4:	e0bff717 	ldw	r2,-36(fp)
  80ade8:	e0fff617 	ldw	r3,-40(fp)
  80adec:	1885883a 	add	r2,r3,r2
  80adf0:	e0bff615 	stw	r2,-40(fp)
  80adf4:	e0bff117 	ldw	r2,-60(fp)
  80adf8:	10c00044 	addi	r3,r2,1
  80adfc:	e0fff115 	stw	r3,-60(fp)
  80ae00:	e0fff217 	ldw	r3,-56(fp)
  80ae04:	10fff336 	bltu	r2,r3,80add4 <__alt_data_end+0xff80add4>
         }
         chc += (cc = f_puts(p, fil));
  80ae08:	e13ff817 	ldw	r4,-32(fp)
  80ae0c:	e17ffe17 	ldw	r5,-8(fp)
  80ae10:	080aaa00 	call	80aaa0 <f_puts>
  80ae14:	e0bff715 	stw	r2,-36(fp)
  80ae18:	e0bff717 	ldw	r2,-36(fp)
  80ae1c:	e0fff617 	ldw	r3,-40(fp)
  80ae20:	1885883a 	add	r2,r3,r2
  80ae24:	e0bff615 	stw	r2,-40(fp)
         while (j++ < w) chc += (cc = f_putc(' ', fil));
  80ae28:	00000806 	br	80ae4c <f_printf+0x314>
  80ae2c:	01000804 	movi	r4,32
  80ae30:	e17ffe17 	ldw	r5,-8(fp)
  80ae34:	080aa2c0 	call	80aa2c <f_putc>
  80ae38:	e0bff715 	stw	r2,-36(fp)
  80ae3c:	e0bff717 	ldw	r2,-36(fp)
  80ae40:	e0fff617 	ldw	r3,-40(fp)
  80ae44:	1885883a 	add	r2,r3,r2
  80ae48:	e0bff615 	stw	r2,-40(fp)
  80ae4c:	e0bff117 	ldw	r2,-60(fp)
  80ae50:	10c00044 	addi	r3,r2,1
  80ae54:	e0fff115 	stw	r3,-60(fp)
  80ae58:	e0fff217 	ldw	r3,-56(fp)
  80ae5c:	10fff336 	bltu	r2,r3,80ae2c <__alt_data_end+0xff80ae2c>
         if (cc != EOF) cc = chc;
  80ae60:	e0bff717 	ldw	r2,-36(fp)
  80ae64:	10bfffe0 	cmpeqi	r2,r2,-1
  80ae68:	1000031e 	bne	r2,zero,80ae78 <f_printf+0x340>
  80ae6c:	e0bff617 	ldw	r2,-40(fp)
  80ae70:	e0bff715 	stw	r2,-36(fp)
         continue;
  80ae74:	0000b206 	br	80b140 <f_printf+0x608>
  80ae78:	0000b106 	br	80b140 <f_printf+0x608>
      case 'C' :              /* Character */
         cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
  80ae7c:	e0bff917 	ldw	r2,-28(fp)
  80ae80:	10c00104 	addi	r3,r2,4
  80ae84:	e0fff915 	stw	r3,-28(fp)
  80ae88:	10800017 	ldw	r2,0(r2)
  80ae8c:	10803fcc 	andi	r2,r2,255
  80ae90:	1080201c 	xori	r2,r2,128
  80ae94:	10bfe004 	addi	r2,r2,-128
  80ae98:	1009883a 	mov	r4,r2
  80ae9c:	e17ffe17 	ldw	r5,-8(fp)
  80aea0:	080aa2c0 	call	80aa2c <f_putc>
  80aea4:	e0bff715 	stw	r2,-36(fp)
  80aea8:	0000a506 	br	80b140 <f_printf+0x608>
      case 'B' :              /* Binary */
         r = 2; break;
  80aeac:	00800084 	movi	r2,2
  80aeb0:	e0bfef45 	stb	r2,-67(fp)
  80aeb4:	00000f06 	br	80aef4 <f_printf+0x3bc>
      case 'O' :              /* Octal */
         r = 8; break;
  80aeb8:	00800204 	movi	r2,8
  80aebc:	e0bfef45 	stb	r2,-67(fp)
  80aec0:	00000c06 	br	80aef4 <f_printf+0x3bc>
      case 'D' :              /* Signed decimal */
      case 'U' :              /* Unsigned decimal */
         r = 10; break;
  80aec4:	00800284 	movi	r2,10
  80aec8:	e0bfef45 	stb	r2,-67(fp)
  80aecc:	00000906 	br	80aef4 <f_printf+0x3bc>
      case 'X' :              /* Hexdecimal */
         r = 16; break;
  80aed0:	00800404 	movi	r2,16
  80aed4:	e0bfef45 	stb	r2,-67(fp)
  80aed8:	00000606 	br	80aef4 <f_printf+0x3bc>
      default:             /* Unknown type (passthrough) */
         cc = f_putc(c, fil); continue;
  80aedc:	e0bff407 	ldb	r2,-48(fp)
  80aee0:	1009883a 	mov	r4,r2
  80aee4:	e17ffe17 	ldw	r5,-8(fp)
  80aee8:	080aa2c0 	call	80aa2c <f_putc>
  80aeec:	e0bff715 	stw	r2,-36(fp)
  80aef0:	00009306 	br	80b140 <f_printf+0x608>
      }

      /* Get an argument and put it in numeral */
      v = (f & 4) ? (uint32_t)va_arg(arp, long) : ((d == 'D') ? (uint32_t)(long)va_arg(arp, int) : (uint32_t)va_arg(arp, unsigned int));
  80aef4:	e0bfef03 	ldbu	r2,-68(fp)
  80aef8:	1080010c 	andi	r2,r2,4
  80aefc:	10000526 	beq	r2,zero,80af14 <f_printf+0x3dc>
  80af00:	e0bff917 	ldw	r2,-28(fp)
  80af04:	10c00104 	addi	r3,r2,4
  80af08:	e0fff915 	stw	r3,-28(fp)
  80af0c:	10800017 	ldw	r2,0(r2)
  80af10:	00000c06 	br	80af44 <f_printf+0x40c>
  80af14:	e0bff447 	ldb	r2,-47(fp)
  80af18:	10801118 	cmpnei	r2,r2,68
  80af1c:	1000051e 	bne	r2,zero,80af34 <f_printf+0x3fc>
  80af20:	e0bff917 	ldw	r2,-28(fp)
  80af24:	10c00104 	addi	r3,r2,4
  80af28:	e0fff915 	stw	r3,-28(fp)
  80af2c:	10800017 	ldw	r2,0(r2)
  80af30:	00000406 	br	80af44 <f_printf+0x40c>
  80af34:	e0bff917 	ldw	r2,-28(fp)
  80af38:	10c00104 	addi	r3,r2,4
  80af3c:	e0fff915 	stw	r3,-28(fp)
  80af40:	10800017 	ldw	r2,0(r2)
  80af44:	e0bff315 	stw	r2,-52(fp)
      if (d == 'D' && (v & 0x80000000)) {
  80af48:	e0bff447 	ldb	r2,-47(fp)
  80af4c:	10801118 	cmpnei	r2,r2,68
  80af50:	1000081e 	bne	r2,zero,80af74 <f_printf+0x43c>
  80af54:	e0bff317 	ldw	r2,-52(fp)
  80af58:	1000060e 	bge	r2,zero,80af74 <f_printf+0x43c>
         v = 0 - v;
  80af5c:	e0bff317 	ldw	r2,-52(fp)
  80af60:	0085c83a 	sub	r2,zero,r2
  80af64:	e0bff315 	stw	r2,-52(fp)
         f |= 8;
  80af68:	e0bfef03 	ldbu	r2,-68(fp)
  80af6c:	10800214 	ori	r2,r2,8
  80af70:	e0bfef05 	stb	r2,-68(fp)
      }
      i = 0;
  80af74:	e03ff015 	stw	zero,-64(fp)
      do {
         d = (TCHAR)(v % r); v /= r;
  80af78:	e0bfef43 	ldbu	r2,-67(fp)
  80af7c:	e0fff317 	ldw	r3,-52(fp)
  80af80:	1809883a 	mov	r4,r3
  80af84:	100b883a 	mov	r5,r2
  80af88:	080c6380 	call	80c638 <__umodsi3>
  80af8c:	e0bff445 	stb	r2,-47(fp)
  80af90:	e0bfef43 	ldbu	r2,-67(fp)
  80af94:	e13ff317 	ldw	r4,-52(fp)
  80af98:	100b883a 	mov	r5,r2
  80af9c:	080c6300 	call	80c630 <__udivsi3>
  80afa0:	e0bff315 	stw	r2,-52(fp)
         if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
  80afa4:	e0bff447 	ldb	r2,-47(fp)
  80afa8:	10800290 	cmplti	r2,r2,10
  80afac:	1000091e 	bne	r2,zero,80afd4 <f_printf+0x49c>
  80afb0:	e0bff407 	ldb	r2,-48(fp)
  80afb4:	10801e18 	cmpnei	r2,r2,120
  80afb8:	1000021e 	bne	r2,zero,80afc4 <f_printf+0x48c>
  80afbc:	008009c4 	movi	r2,39
  80afc0:	00000106 	br	80afc8 <f_printf+0x490>
  80afc4:	008001c4 	movi	r2,7
  80afc8:	e0fff443 	ldbu	r3,-47(fp)
  80afcc:	10c5883a 	add	r2,r2,r3
  80afd0:	e0bff445 	stb	r2,-47(fp)
         s[i++] = d + '0';
  80afd4:	e0bff017 	ldw	r2,-64(fp)
  80afd8:	10c00044 	addi	r3,r2,1
  80afdc:	e0fff015 	stw	r3,-64(fp)
  80afe0:	e0fff443 	ldbu	r3,-47(fp)
  80afe4:	18c00c04 	addi	r3,r3,48
  80afe8:	1809883a 	mov	r4,r3
  80afec:	e0fffa04 	addi	r3,fp,-24
  80aff0:	1885883a 	add	r2,r3,r2
  80aff4:	11000005 	stb	r4,0(r2)
      } while (v && i < sizeof(s) / sizeof(s[0]));
  80aff8:	e0bff317 	ldw	r2,-52(fp)
  80affc:	10000326 	beq	r2,zero,80b00c <f_printf+0x4d4>
  80b000:	e0bff017 	ldw	r2,-64(fp)
  80b004:	10800430 	cmpltui	r2,r2,16
  80b008:	103fdb1e 	bne	r2,zero,80af78 <__alt_data_end+0xff80af78>
      if (f & 8) s[i++] = '-';
  80b00c:	e0bfef03 	ldbu	r2,-68(fp)
  80b010:	1080020c 	andi	r2,r2,8
  80b014:	10000726 	beq	r2,zero,80b034 <f_printf+0x4fc>
  80b018:	e0bff017 	ldw	r2,-64(fp)
  80b01c:	10c00044 	addi	r3,r2,1
  80b020:	e0fff015 	stw	r3,-64(fp)
  80b024:	e0fffa04 	addi	r3,fp,-24
  80b028:	1885883a 	add	r2,r3,r2
  80b02c:	00c00b44 	movi	r3,45
  80b030:	10c00005 	stb	r3,0(r2)
      j = i; d = (f & 1) ? '0' : ' ';
  80b034:	e0bff017 	ldw	r2,-64(fp)
  80b038:	e0bff115 	stw	r2,-60(fp)
  80b03c:	e0bfef03 	ldbu	r2,-68(fp)
  80b040:	1080004c 	andi	r2,r2,1
  80b044:	10000226 	beq	r2,zero,80b050 <f_printf+0x518>
  80b048:	00800c04 	movi	r2,48
  80b04c:	00000106 	br	80b054 <f_printf+0x51c>
  80b050:	00800804 	movi	r2,32
  80b054:	e0bff445 	stb	r2,-47(fp)
      res = 0;
  80b058:	e03ff515 	stw	zero,-44(fp)
      while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
  80b05c:	00000906 	br	80b084 <f_printf+0x54c>
  80b060:	e0bff447 	ldb	r2,-47(fp)
  80b064:	1009883a 	mov	r4,r2
  80b068:	e17ffe17 	ldw	r5,-8(fp)
  80b06c:	080aa2c0 	call	80aa2c <f_putc>
  80b070:	e0bff715 	stw	r2,-36(fp)
  80b074:	e0bff717 	ldw	r2,-36(fp)
  80b078:	e0fff517 	ldw	r3,-44(fp)
  80b07c:	1885883a 	add	r2,r3,r2
  80b080:	e0bff515 	stw	r2,-44(fp)
  80b084:	e0bfef03 	ldbu	r2,-68(fp)
  80b088:	1080008c 	andi	r2,r2,2
  80b08c:	1000051e 	bne	r2,zero,80b0a4 <f_printf+0x56c>
  80b090:	e0bff117 	ldw	r2,-60(fp)
  80b094:	10c00044 	addi	r3,r2,1
  80b098:	e0fff115 	stw	r3,-60(fp)
  80b09c:	e0fff217 	ldw	r3,-56(fp)
  80b0a0:	10ffef36 	bltu	r2,r3,80b060 <__alt_data_end+0xff80b060>
      do res += (cc = f_putc(s[--i], fil)); while(i);
  80b0a4:	e0bff017 	ldw	r2,-64(fp)
  80b0a8:	10bfffc4 	addi	r2,r2,-1
  80b0ac:	e0bff015 	stw	r2,-64(fp)
  80b0b0:	e0fffa04 	addi	r3,fp,-24
  80b0b4:	e0bff017 	ldw	r2,-64(fp)
  80b0b8:	1885883a 	add	r2,r3,r2
  80b0bc:	10800003 	ldbu	r2,0(r2)
  80b0c0:	10803fcc 	andi	r2,r2,255
  80b0c4:	1080201c 	xori	r2,r2,128
  80b0c8:	10bfe004 	addi	r2,r2,-128
  80b0cc:	1009883a 	mov	r4,r2
  80b0d0:	e17ffe17 	ldw	r5,-8(fp)
  80b0d4:	080aa2c0 	call	80aa2c <f_putc>
  80b0d8:	e0bff715 	stw	r2,-36(fp)
  80b0dc:	e0bff717 	ldw	r2,-36(fp)
  80b0e0:	e0fff517 	ldw	r3,-44(fp)
  80b0e4:	1885883a 	add	r2,r3,r2
  80b0e8:	e0bff515 	stw	r2,-44(fp)
  80b0ec:	e0bff017 	ldw	r2,-64(fp)
  80b0f0:	103fec1e 	bne	r2,zero,80b0a4 <__alt_data_end+0xff80b0a4>
      while (j++ < w) res += (cc = f_putc(' ', fil));
  80b0f4:	00000806 	br	80b118 <f_printf+0x5e0>
  80b0f8:	01000804 	movi	r4,32
  80b0fc:	e17ffe17 	ldw	r5,-8(fp)
  80b100:	080aa2c0 	call	80aa2c <f_putc>
  80b104:	e0bff715 	stw	r2,-36(fp)
  80b108:	e0bff717 	ldw	r2,-36(fp)
  80b10c:	e0fff517 	ldw	r3,-44(fp)
  80b110:	1885883a 	add	r2,r3,r2
  80b114:	e0bff515 	stw	r2,-44(fp)
  80b118:	e0bff117 	ldw	r2,-60(fp)
  80b11c:	10c00044 	addi	r3,r2,1
  80b120:	e0fff115 	stw	r3,-60(fp)
  80b124:	e0fff217 	ldw	r3,-56(fp)
  80b128:	10fff336 	bltu	r2,r3,80b0f8 <__alt_data_end+0xff80b0f8>
      if (cc != EOF) cc = res;
  80b12c:	e0bff717 	ldw	r2,-36(fp)
  80b130:	10bfffe0 	cmpeqi	r2,r2,-1
  80b134:	1000021e 	bne	r2,zero,80b140 <f_printf+0x608>
  80b138:	e0bff517 	ldw	r2,-44(fp)
  80b13c:	e0bff715 	stw	r2,-36(fp)
   int res, chc, cc;


   va_start(arp, str);

   for (cc = res = 0; cc != EOF; res += cc) {
  80b140:	e0fff517 	ldw	r3,-44(fp)
  80b144:	e0bff717 	ldw	r2,-36(fp)
  80b148:	1885883a 	add	r2,r3,r2
  80b14c:	e0bff515 	stw	r2,-44(fp)
  80b150:	e0bff717 	ldw	r2,-36(fp)
  80b154:	10bfffd8 	cmpnei	r2,r2,-1
  80b158:	103e851e 	bne	r2,zero,80ab70 <__alt_data_end+0xff80ab70>
      while (j++ < w) res += (cc = f_putc(' ', fil));
      if (cc != EOF) cc = res;
   }

   va_end(arp);
   return (cc == EOF) ? cc : res;
  80b15c:	e0bff717 	ldw	r2,-36(fp)
  80b160:	10bfffd8 	cmpnei	r2,r2,-1
  80b164:	1000021e 	bne	r2,zero,80b170 <f_printf+0x638>
  80b168:	e0bff717 	ldw	r2,-36(fp)
  80b16c:	00000106 	br	80b174 <f_printf+0x63c>
  80b170:	e0bff517 	ldw	r2,-44(fp)
}
  80b174:	e037883a 	mov	sp,fp
  80b178:	dfc00117 	ldw	ra,4(sp)
  80b17c:	df000017 	ldw	fp,0(sp)
  80b180:	dec00404 	addi	sp,sp,16
  80b184:	f800283a 	ret

0080b188 <TimerFunction>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static alt_u32 TimerFunction (void *context)
{
  80b188:	defffd04 	addi	sp,sp,-12
  80b18c:	dfc00215 	stw	ra,8(sp)
  80b190:	df000115 	stw	fp,4(sp)
  80b194:	df000104 	addi	fp,sp,4
  80b198:	e13fff15 	stw	r4,-4(fp)
   static unsigned short wTimer10ms = 0;

   (void)context;

   Systick++;
  80b19c:	d0a76e17 	ldw	r2,-25160(gp)
  80b1a0:	10800044 	addi	r2,r2,1
  80b1a4:	d0a76e15 	stw	r2,-25160(gp)
   wTimer10ms++;
  80b1a8:	d0a7738b 	ldhu	r2,-25138(gp)
  80b1ac:	10800044 	addi	r2,r2,1
  80b1b0:	d0a7738d 	sth	r2,-25138(gp)
   Timer++; /* Performance counter for this module */
  80b1b4:	d0a76f0b 	ldhu	r2,-25156(gp)
  80b1b8:	10800044 	addi	r2,r2,1
  80b1bc:	d0a76f0d 	sth	r2,-25156(gp)

   if (wTimer10ms == 10)
  80b1c0:	d0a7738b 	ldhu	r2,-25138(gp)
  80b1c4:	10bfffcc 	andi	r2,r2,65535
  80b1c8:	10800298 	cmpnei	r2,r2,10
  80b1cc:	1000021e 	bne	r2,zero,80b1d8 <TimerFunction+0x50>
   {
      wTimer10ms = 0;
  80b1d0:	d027738d 	sth	zero,-25138(gp)
      ffs_DiskIOTimerproc();  /* Drive timer procedure of low level disk I/O module */
  80b1d4:	0803bf40 	call	803bf4 <ffs_DiskIOTimerproc>
   }

   return(1);
  80b1d8:	00800044 	movi	r2,1
} /* TimerFunction */
  80b1dc:	e037883a 	mov	sp,fp
  80b1e0:	dfc00117 	ldw	ra,4(sp)
  80b1e4:	df000017 	ldw	fp,0(sp)
  80b1e8:	dec00204 	addi	sp,sp,8
  80b1ec:	f800283a 	ret

0080b1f0 <IoInit>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void IoInit(void)
{
  80b1f0:	defffe04 	addi	sp,sp,-8
  80b1f4:	dfc00115 	stw	ra,4(sp)
  80b1f8:	df000015 	stw	fp,0(sp)
  80b1fc:	d839883a 	mov	fp,sp
   uart0_init(115200);
  80b200:	010000b4 	movhi	r4,2
  80b204:	21308004 	addi	r4,r4,-15872
  80b208:	080c4640 	call	80c464 <uart0_init>

   /* Init diskio interface */
   ffs_DiskIOInit();
  80b20c:	0803bc80 	call	803bc8 <ffs_DiskIOInit>

   //SetHighSpeed();

   /* Init timer system */
   alt_alarm_start(&alarm, 1, &TimerFunction, NULL);
  80b210:	010020b4 	movhi	r4,130
  80b214:	213fca04 	addi	r4,r4,-216
  80b218:	01400044 	movi	r5,1
  80b21c:	01802074 	movhi	r6,129
  80b220:	31ac6204 	addi	r6,r6,-20088
  80b224:	000f883a 	mov	r7,zero
  80b228:	0819f140 	call	819f14 <alt_alarm_start>

} /* IoInit */
  80b22c:	e037883a 	mov	sp,fp
  80b230:	dfc00117 	ldw	ra,4(sp)
  80b234:	df000017 	ldw	fp,0(sp)
  80b238:	dec00204 	addi	sp,sp,8
  80b23c:	f800283a 	ret

0080b240 <scan_files>:
DIR Dir;                        /* Directory object */
uint8_t Buff[8192] __attribute__ ((aligned(4)));  /* Working buffer */

static
FRESULT scan_files(char *path)
{
  80b240:	defff304 	addi	sp,sp,-52
  80b244:	dfc00c15 	stw	ra,48(sp)
  80b248:	df000b15 	stw	fp,44(sp)
  80b24c:	df000b04 	addi	fp,sp,44
  80b250:	e13fff15 	stw	r4,-4(fp)
    FRESULT res;
    uint8_t i;
    char *fn;


    if ((res = f_opendir(&dirs, path)) == FR_OK) {
  80b254:	e0bff804 	addi	r2,fp,-32
  80b258:	1009883a 	mov	r4,r2
  80b25c:	e17fff17 	ldw	r5,-4(fp)
  80b260:	08087540 	call	808754 <f_opendir>
  80b264:	e0bff515 	stw	r2,-44(fp)
  80b268:	e0bff517 	ldw	r2,-44(fp)
  80b26c:	10003e1e 	bne	r2,zero,80b368 <scan_files+0x128>
        i = (uint8_t)strlen(path);
  80b270:	e13fff17 	ldw	r4,-4(fp)
  80b274:	080e8b40 	call	80e8b4 <strlen>
  80b278:	e0bff605 	stb	r2,-40(fp)
        while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
  80b27c:	00002b06 	br	80b32c <scan_files+0xec>
            if (_FS_RPATH && Finfo.fname[0] == '.')
                continue;
#if _USE_LFN
            fn = *Finfo.lfname ? Finfo.lfname : Finfo.fname;
#else
            fn = Finfo.fname;
  80b280:	008020b4 	movhi	r2,130
  80b284:	10815544 	addi	r2,r2,1365
  80b288:	e0bff715 	stw	r2,-36(fp)
#endif
            if (Finfo.fattrib & AM_DIR) {
  80b28c:	008020b4 	movhi	r2,130
  80b290:	10815304 	addi	r2,r2,1356
  80b294:	10800203 	ldbu	r2,8(r2)
  80b298:	10803fcc 	andi	r2,r2,255
  80b29c:	1080040c 	andi	r2,r2,16
  80b2a0:	10001926 	beq	r2,zero,80b308 <scan_files+0xc8>
                acc_dirs++;
  80b2a4:	d0a7770b 	ldhu	r2,-25124(gp)
  80b2a8:	10800044 	addi	r2,r2,1
  80b2ac:	d0a7770d 	sth	r2,-25124(gp)
                *(path + i) = '/';
  80b2b0:	e0bff603 	ldbu	r2,-40(fp)
  80b2b4:	e0ffff17 	ldw	r3,-4(fp)
  80b2b8:	1885883a 	add	r2,r3,r2
  80b2bc:	00c00bc4 	movi	r3,47
  80b2c0:	10c00005 	stb	r3,0(r2)
                strcpy(path + i + 1, fn);
  80b2c4:	e0bff603 	ldbu	r2,-40(fp)
  80b2c8:	10800044 	addi	r2,r2,1
  80b2cc:	e0ffff17 	ldw	r3,-4(fp)
  80b2d0:	1885883a 	add	r2,r3,r2
  80b2d4:	1009883a 	mov	r4,r2
  80b2d8:	e17ff717 	ldw	r5,-36(fp)
  80b2dc:	080e8240 	call	80e824 <strcpy>
                res = scan_files(path);
  80b2e0:	e13fff17 	ldw	r4,-4(fp)
  80b2e4:	080b2400 	call	80b240 <scan_files>
  80b2e8:	e0bff515 	stw	r2,-44(fp)
                *(path + i) = '\0';
  80b2ec:	e0bff603 	ldbu	r2,-40(fp)
  80b2f0:	e0ffff17 	ldw	r3,-4(fp)
  80b2f4:	1885883a 	add	r2,r3,r2
  80b2f8:	10000005 	stb	zero,0(r2)
                if (res != FR_OK)
  80b2fc:	e0bff517 	ldw	r2,-44(fp)
  80b300:	10000a26 	beq	r2,zero,80b32c <scan_files+0xec>
                    break;
  80b304:	00001806 	br	80b368 <scan_files+0x128>
            } else {
                //      xprintf("%s/%s\n", path, fn);
                acc_files++;
  80b308:	d0a77a0b 	ldhu	r2,-25112(gp)
  80b30c:	10800044 	addi	r2,r2,1
  80b310:	d0a77a0d 	sth	r2,-25112(gp)
                acc_size += Finfo.fsize;
  80b314:	008020b4 	movhi	r2,130
  80b318:	10815304 	addi	r2,r2,1356
  80b31c:	10c00017 	ldw	r3,0(r2)
  80b320:	d0a77e17 	ldw	r2,-25096(gp)
  80b324:	1885883a 	add	r2,r3,r2
  80b328:	d0a77e15 	stw	r2,-25096(gp)
    char *fn;


    if ((res = f_opendir(&dirs, path)) == FR_OK) {
        i = (uint8_t)strlen(path);
        while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
  80b32c:	e0bff804 	addi	r2,fp,-32
  80b330:	1009883a 	mov	r4,r2
  80b334:	014020b4 	movhi	r5,130
  80b338:	29415304 	addi	r5,r5,1356
  80b33c:	08088c40 	call	8088c4 <f_readdir>
  80b340:	e0bff515 	stw	r2,-44(fp)
  80b344:	e0bff517 	ldw	r2,-44(fp)
  80b348:	1000071e 	bne	r2,zero,80b368 <scan_files+0x128>
  80b34c:	008020b4 	movhi	r2,130
  80b350:	10815304 	addi	r2,r2,1356
  80b354:	10800243 	ldbu	r2,9(r2)
  80b358:	10803fcc 	andi	r2,r2,255
  80b35c:	1080201c 	xori	r2,r2,128
  80b360:	10bfe004 	addi	r2,r2,-128
  80b364:	103fc61e 	bne	r2,zero,80b280 <__alt_data_end+0xff80b280>
                acc_size += Finfo.fsize;
            }
        }
    }

    return res;
  80b368:	e0bff517 	ldw	r2,-44(fp)
}
  80b36c:	e037883a 	mov	sp,fp
  80b370:	dfc00117 	ldw	ra,4(sp)
  80b374:	df000017 	ldw	fp,0(sp)
  80b378:	dec00204 	addi	sp,sp,8
  80b37c:	f800283a 	ret

0080b380 <selectLCD>:
uint8_t res, b1, drv = 0;
uint16_t w1;


// Selects a song using the LCD screen, will store the index of the song after play is pressed
void selectLCD (){
  80b380:	defffd04 	addi	sp,sp,-12
  80b384:	dfc00215 	stw	ra,8(sp)
  80b388:	df000115 	stw	fp,4(sp)
  80b38c:	df000104 	addi	fp,sp,4
	alt_u8 currbutton;

	alt_u8 button = IORD(BUTTON_PIO_BASE,0);
  80b390:	00804034 	movhi	r2,256
  80b394:	10844804 	addi	r2,r2,4384
  80b398:	10800037 	ldwio	r2,0(r2)
  80b39c:	e0bfff45 	stb	r2,-3(fp)
	fprintf(lcd,"%i. %s\n\n", currIndex+1, filename[currIndex]);
  80b3a0:	d1277417 	ldw	r4,-25136(gp)
  80b3a4:	d0a77117 	ldw	r2,-25148(gp)
  80b3a8:	11800044 	addi	r6,r2,1
  80b3ac:	d0a77117 	ldw	r2,-25148(gp)
  80b3b0:	10c00524 	muli	r3,r2,20
  80b3b4:	008020b4 	movhi	r2,130
  80b3b8:	10bfd004 	addi	r2,r2,-192
  80b3bc:	1885883a 	add	r2,r3,r2
  80b3c0:	014020b4 	movhi	r5,130
  80b3c4:	296f7a04 	addi	r5,r5,-16920
  80b3c8:	100f883a 	mov	r7,r2
  80b3cc:	080c7740 	call	80c774 <fprintf>

	// Do not allow song to instantly play if pause is pressed
	if (button == 0xd) {
  80b3d0:	e0bfff43 	ldbu	r2,-3(fp)
  80b3d4:	10800358 	cmpnei	r2,r2,13
  80b3d8:	1000091e 	bne	r2,zero,80b400 <selectLCD+0x80>
		while(button == 0xd)button = IORD(BUTTON_PIO_BASE,0) & 0xf;
  80b3dc:	00000506 	br	80b3f4 <selectLCD+0x74>
  80b3e0:	00804034 	movhi	r2,256
  80b3e4:	10844804 	addi	r2,r2,4384
  80b3e8:	10800037 	ldwio	r2,0(r2)
  80b3ec:	108003cc 	andi	r2,r2,15
  80b3f0:	e0bfff45 	stb	r2,-3(fp)
  80b3f4:	e0bfff43 	ldbu	r2,-3(fp)
  80b3f8:	10800360 	cmpeqi	r2,r2,13
  80b3fc:	103ff81e 	bne	r2,zero,80b3e0 <__alt_data_end+0xff80b3e0>
	}

	while (1){
	  button = IORD(BUTTON_PIO_BASE,0) & 0xf;
  80b400:	00804034 	movhi	r2,256
  80b404:	10844804 	addi	r2,r2,4384
  80b408:	10800037 	ldwio	r2,0(r2)
  80b40c:	108003cc 	andi	r2,r2,15
  80b410:	e0bfff45 	stb	r2,-3(fp)

	  if (button == 0xe || button == 0xd || button == 0x7){
  80b414:	e0bfff43 	ldbu	r2,-3(fp)
  80b418:	108003a0 	cmpeqi	r2,r2,14
  80b41c:	1000061e 	bne	r2,zero,80b438 <selectLCD+0xb8>
  80b420:	e0bfff43 	ldbu	r2,-3(fp)
  80b424:	10800360 	cmpeqi	r2,r2,13
  80b428:	1000031e 	bne	r2,zero,80b438 <selectLCD+0xb8>
  80b42c:	e0bfff43 	ldbu	r2,-3(fp)
  80b430:	108001d8 	cmpnei	r2,r2,7
  80b434:	1000341e 	bne	r2,zero,80b508 <selectLCD+0x188>
		  currbutton = button;
  80b438:	e0bfff43 	ldbu	r2,-3(fp)
  80b43c:	e0bfff05 	stb	r2,-4(fp)

		  // Wait for button to be let go
		  while(currbutton == button){
  80b440:	00000506 	br	80b458 <selectLCD+0xd8>
			  currbutton = IORD(BUTTON_PIO_BASE,0) & 0xf;
  80b444:	00804034 	movhi	r2,256
  80b448:	10844804 	addi	r2,r2,4384
  80b44c:	10800037 	ldwio	r2,0(r2)
  80b450:	108003cc 	andi	r2,r2,15
  80b454:	e0bfff05 	stb	r2,-4(fp)

	  if (button == 0xe || button == 0xd || button == 0x7){
		  currbutton = button;

		  // Wait for button to be let go
		  while(currbutton == button){
  80b458:	e0ffff03 	ldbu	r3,-4(fp)
  80b45c:	e0bfff43 	ldbu	r2,-3(fp)
  80b460:	18bff826 	beq	r3,r2,80b444 <__alt_data_end+0xff80b444>
			  currbutton = IORD(BUTTON_PIO_BASE,0) & 0xf;
		  }

		  if (button == 0xe){ // fast forward
  80b464:	e0bfff43 	ldbu	r2,-3(fp)
  80b468:	10800398 	cmpnei	r2,r2,14
  80b46c:	10000a1e 	bne	r2,zero,80b498 <selectLCD+0x118>
			  if (currIndex < filenum - 1){
  80b470:	d0a77017 	ldw	r2,-25152(gp)
  80b474:	10bfffc4 	addi	r2,r2,-1
  80b478:	d0e77117 	ldw	r3,-25148(gp)
  80b47c:	1880040e 	bge	r3,r2,80b490 <selectLCD+0x110>
				  currIndex++;
  80b480:	d0a77117 	ldw	r2,-25148(gp)
  80b484:	10800044 	addi	r2,r2,1
  80b488:	d0a77115 	stw	r2,-25148(gp)
  80b48c:	00001206 	br	80b4d8 <selectLCD+0x158>
			  } else {
				  currIndex = 0;
  80b490:	d0277115 	stw	zero,-25148(gp)
  80b494:	00001006 	br	80b4d8 <selectLCD+0x158>
			  }
		  } else if (button == 0xd){ // play/pause
  80b498:	e0bfff43 	ldbu	r2,-3(fp)
  80b49c:	10800358 	cmpnei	r2,r2,13
  80b4a0:	1000011e 	bne	r2,zero,80b4a8 <selectLCD+0x128>
			  break;
  80b4a4:	00001906 	br	80b50c <selectLCD+0x18c>
		  } else if (button == 0x7){ // backwards
  80b4a8:	e0bfff43 	ldbu	r2,-3(fp)
  80b4ac:	108001d8 	cmpnei	r2,r2,7
  80b4b0:	1000091e 	bne	r2,zero,80b4d8 <selectLCD+0x158>
			  if (currIndex > 0){
  80b4b4:	d0a77117 	ldw	r2,-25148(gp)
  80b4b8:	0080040e 	bge	zero,r2,80b4cc <selectLCD+0x14c>
				  currIndex--;
  80b4bc:	d0a77117 	ldw	r2,-25148(gp)
  80b4c0:	10bfffc4 	addi	r2,r2,-1
  80b4c4:	d0a77115 	stw	r2,-25148(gp)
  80b4c8:	00000306 	br	80b4d8 <selectLCD+0x158>
			  } else {
				  currIndex = filenum - 1;
  80b4cc:	d0a77017 	ldw	r2,-25152(gp)
  80b4d0:	10bfffc4 	addi	r2,r2,-1
  80b4d4:	d0a77115 	stw	r2,-25148(gp)
			  }
		  }

		  fprintf(lcd,"%i. %s\n\n", currIndex+1, filename[currIndex]);
  80b4d8:	d1277417 	ldw	r4,-25136(gp)
  80b4dc:	d0a77117 	ldw	r2,-25148(gp)
  80b4e0:	11800044 	addi	r6,r2,1
  80b4e4:	d0a77117 	ldw	r2,-25148(gp)
  80b4e8:	10c00524 	muli	r3,r2,20
  80b4ec:	008020b4 	movhi	r2,130
  80b4f0:	10bfd004 	addi	r2,r2,-192
  80b4f4:	1885883a 	add	r2,r3,r2
  80b4f8:	014020b4 	movhi	r5,130
  80b4fc:	296f7a04 	addi	r5,r5,-16920
  80b500:	100f883a 	mov	r7,r2
  80b504:	080c7740 	call	80c774 <fprintf>

	  }
	}
  80b508:	003fbd06 	br	80b400 <__alt_data_end+0xff80b400>

	return;
  80b50c:	0001883a 	nop
}
  80b510:	e037883a 	mov	sp,fp
  80b514:	dfc00117 	ldw	ra,4(sp)
  80b518:	df000017 	ldw	fp,0(sp)
  80b51c:	dec00204 	addi	sp,sp,8
  80b520:	f800283a 	ret

0080b524 <playSong>:



int playSong(){
  80b524:	defff704 	addi	sp,sp,-36
  80b528:	dfc00815 	stw	ra,32(sp)
  80b52c:	df000715 	stw	fp,28(sp)
  80b530:	df000704 	addi	fp,sp,28

	uint8_t out = 0;
  80b534:	e03ff905 	stb	zero,-28(fp)
	uint8_t rr_forward = 0;
  80b538:	e03ff945 	stb	zero,-27(fp)
	int count = 0;
  80b53c:	e03ffa15 	stw	zero,-24(fp)
	int jump_bytes = 0;
  80b540:	e03ffb15 	stw	zero,-20(fp)

	int p1_i = fileSize[currIndex];
  80b544:	d0e77117 	ldw	r3,-25148(gp)
  80b548:	008020b4 	movhi	r2,130
  80b54c:	10815904 	addi	r2,r2,1380
  80b550:	18c7883a 	add	r3,r3,r3
  80b554:	18c7883a 	add	r3,r3,r3
  80b558:	10c5883a 	add	r2,r2,r3
  80b55c:	10800017 	ldw	r2,0(r2)
  80b560:	e0bffe15 	stw	r2,-8(fp)
	alt_u8 button = IORD(BUTTON_PIO_BASE,0);
  80b564:	00804034 	movhi	r2,256
  80b568:	10844804 	addi	r2,r2,4384
  80b56c:	10800037 	ldwio	r2,0(r2)
  80b570:	e0bffc05 	stb	r2,-16(fp)

	// If current selected song does not match what was paused from before, update file parameters
	if (currSong != currIndex || p1 == 0){
  80b574:	d0e77217 	ldw	r3,-25144(gp)
  80b578:	d0a77117 	ldw	r2,-25148(gp)
  80b57c:	1880021e 	bne	r3,r2,80b588 <playSong+0x64>
  80b580:	d0a77c17 	ldw	r2,-25104(gp)
  80b584:	1000121e 	bne	r2,zero,80b5d0 <playSong+0xac>
		f_open(&File1, filename[currIndex], 1);
  80b588:	d0a77117 	ldw	r2,-25148(gp)
  80b58c:	10c00524 	muli	r3,r2,20
  80b590:	008020b4 	movhi	r2,130
  80b594:	10bfd004 	addi	r2,r2,-192
  80b598:	1885883a 	add	r2,r3,r2
  80b59c:	010020b4 	movhi	r4,130
  80b5a0:	2100ca04 	addi	r4,r4,808
  80b5a4:	100b883a 	mov	r5,r2
  80b5a8:	01800044 	movi	r6,1
  80b5ac:	08070b40 	call	8070b4 <f_open>
		p1 = fileSize[currIndex];
  80b5b0:	d0e77117 	ldw	r3,-25148(gp)
  80b5b4:	008020b4 	movhi	r2,130
  80b5b8:	10815904 	addi	r2,r2,1380
  80b5bc:	18c7883a 	add	r3,r3,r3
  80b5c0:	18c7883a 	add	r3,r3,r3
  80b5c4:	10c5883a 	add	r2,r2,r3
  80b5c8:	10800017 	ldw	r2,0(r2)
  80b5cc:	d0a77c15 	stw	r2,-25104(gp)
	}

	// Keep reading the song until stop/pause is pressed or the song runs out of data to read
	while (p1>0 && !out) {
  80b5d0:	0000b506 	br	80b8a8 <playSong+0x384>
		button = IORD(BUTTON_PIO_BASE,0);
  80b5d4:	00804034 	movhi	r2,256
  80b5d8:	10844804 	addi	r2,r2,4384
  80b5dc:	10800037 	ldwio	r2,0(r2)
  80b5e0:	e0bffc05 	stb	r2,-16(fp)

		if (button != 0x7){
  80b5e4:	e0bffc03 	ldbu	r2,-16(fp)
  80b5e8:	108001e0 	cmpeqi	r2,r2,7
  80b5ec:	1000021e 	bne	r2,zero,80b5f8 <playSong+0xd4>
			rr_forward = 0;
  80b5f0:	e03ff945 	stb	zero,-27(fp)
			count = 0;
  80b5f4:	e03ffa15 	stw	zero,-24(fp)
		}

		int n = 0; // Location of where you are reading from in the buffer
  80b5f8:	e03ffd15 	stw	zero,-12(fp)

		if (button == 0x7 && !rr_forward) { // Skips file pointer back to play in rewind
  80b5fc:	e0bffc03 	ldbu	r2,-16(fp)
  80b600:	108001d8 	cmpnei	r2,r2,7
  80b604:	1000311e 	bne	r2,zero,80b6cc <playSong+0x1a8>
  80b608:	e0bff943 	ldbu	r2,-27(fp)
  80b60c:	10002f1e 	bne	r2,zero,80b6cc <playSong+0x1a8>

			rr_forward = 1;
  80b610:	00800044 	movi	r2,1
  80b614:	e0bff945 	stb	r2,-27(fp)
			p1 += 384000;
  80b618:	d0e77c17 	ldw	r3,-25104(gp)
  80b61c:	008001b4 	movhi	r2,6
  80b620:	10b70004 	addi	r2,r2,-9216
  80b624:	1885883a 	add	r2,r3,r2
  80b628:	d0a77c15 	stw	r2,-25104(gp)

			if (p1_i > p1) {
  80b62c:	d0e77c17 	ldw	r3,-25104(gp)
  80b630:	e0bffe17 	ldw	r2,-8(fp)
  80b634:	1880070e 	bge	r3,r2,80b654 <playSong+0x130>
				jump_bytes = p1_i - p1;
  80b638:	d0a77c17 	ldw	r2,-25104(gp)
  80b63c:	e0fffe17 	ldw	r3,-8(fp)
  80b640:	1885c83a 	sub	r2,r3,r2
  80b644:	e0bffb15 	stw	r2,-20(fp)
				count = 350;
  80b648:	00805784 	movi	r2,350
  80b64c:	e0bffa15 	stw	r2,-24(fp)
  80b650:	00001206 	br	80b69c <playSong+0x178>
			} else {
				jump_bytes = 0;
  80b654:	e03ffb15 	stw	zero,-20(fp)
				p1 = fileSize[currIndex];
  80b658:	d0e77117 	ldw	r3,-25148(gp)
  80b65c:	008020b4 	movhi	r2,130
  80b660:	10815904 	addi	r2,r2,1380
  80b664:	18c7883a 	add	r3,r3,r3
  80b668:	18c7883a 	add	r3,r3,r3
  80b66c:	10c5883a 	add	r2,r2,r3
  80b670:	10800017 	ldw	r2,0(r2)
  80b674:	d0a77c15 	stw	r2,-25104(gp)
				while(button == 0x7)button = IORD(BUTTON_PIO_BASE,0) & 0xf;
  80b678:	00000506 	br	80b690 <playSong+0x16c>
  80b67c:	00804034 	movhi	r2,256
  80b680:	10844804 	addi	r2,r2,4384
  80b684:	10800037 	ldwio	r2,0(r2)
  80b688:	108003cc 	andi	r2,r2,15
  80b68c:	e0bffc05 	stb	r2,-16(fp)
  80b690:	e0bffc03 	ldbu	r2,-16(fp)
  80b694:	108001e0 	cmpeqi	r2,r2,7
  80b698:	103ff81e 	bne	r2,zero,80b67c <__alt_data_end+0xff80b67c>
			}

			res = f_lseek(&File1, jump_bytes  );
  80b69c:	e0bffb17 	ldw	r2,-20(fp)
  80b6a0:	010020b4 	movhi	r4,130
  80b6a4:	2100ca04 	addi	r4,r4,808
  80b6a8:	100b883a 	mov	r5,r2
  80b6ac:	08082680 	call	808268 <f_lseek>
  80b6b0:	d0a78205 	stb	r2,-25080(gp)
			p1 -= 512;
  80b6b4:	d0a77c17 	ldw	r2,-25104(gp)
  80b6b8:	10bf8004 	addi	r2,r2,-512
  80b6bc:	d0a77c15 	stw	r2,-25104(gp)
			cnt = 512;
  80b6c0:	00808004 	movi	r2,512
  80b6c4:	d0a77815 	stw	r2,-25120(gp)
  80b6c8:	00000c06 	br	80b6fc <playSong+0x1d8>

		} else if ((uint32_t) p1 >= 512){
  80b6cc:	d0a77c17 	ldw	r2,-25104(gp)
  80b6d0:	10808030 	cmpltui	r2,r2,512
  80b6d4:	1000061e 	bne	r2,zero,80b6f0 <playSong+0x1cc>
		    cnt = 512;
  80b6d8:	00808004 	movi	r2,512
  80b6dc:	d0a77815 	stw	r2,-25120(gp)
		    p1 -= 512;
  80b6e0:	d0a77c17 	ldw	r2,-25104(gp)
  80b6e4:	10bf8004 	addi	r2,r2,-512
  80b6e8:	d0a77c15 	stw	r2,-25104(gp)
  80b6ec:	00000306 	br	80b6fc <playSong+0x1d8>
		} else {
			cnt = p1;
  80b6f0:	d0a77c17 	ldw	r2,-25104(gp)
  80b6f4:	d0a77815 	stw	r2,-25120(gp)
			p1 = 0;
  80b6f8:	d0277c15 	stw	zero,-25104(gp)
		}

		res = f_read(&File1, Buff, cnt, &s2);
  80b6fc:	d0a77817 	ldw	r2,-25120(gp)
  80b700:	010020b4 	movhi	r4,130
  80b704:	2100ca04 	addi	r4,r4,808
  80b708:	014020b4 	movhi	r5,130
  80b70c:	29416d04 	addi	r5,r5,1460
  80b710:	100d883a 	mov	r6,r2
  80b714:	d1e77f04 	addi	r7,gp,-25092
  80b718:	08075380 	call	807538 <f_read>
  80b71c:	d0a78205 	stb	r2,-25080(gp)

		// Checks for stop or pause button presses
		if (button == 0xb) { // Stop
  80b720:	e0bffc03 	ldbu	r2,-16(fp)
  80b724:	108002d8 	cmpnei	r2,r2,11
  80b728:	1000061e 	bne	r2,zero,80b744 <playSong+0x220>
		   out++;
  80b72c:	e0bff903 	ldbu	r2,-28(fp)
  80b730:	10800044 	addi	r2,r2,1
  80b734:	e0bff905 	stb	r2,-28(fp)
		   currSong = -1;
  80b738:	00bfffc4 	movi	r2,-1
  80b73c:	d0a77215 	stw	r2,-25144(gp)
  80b740:	00000806 	br	80b764 <playSong+0x240>
		} else if (button == 0xd) { // Pause
  80b744:	e0bffc03 	ldbu	r2,-16(fp)
  80b748:	10800358 	cmpnei	r2,r2,13
  80b74c:	1000051e 	bne	r2,zero,80b764 <playSong+0x240>
		   out++;
  80b750:	e0bff903 	ldbu	r2,-28(fp)
  80b754:	10800044 	addi	r2,r2,1
  80b758:	e0bff905 	stb	r2,-28(fp)
		   currSong = currIndex;
  80b75c:	d0a77117 	ldw	r2,-25148(gp)
  80b760:	d0a77215 	stw	r2,-25144(gp)
		}

		// Writes 512 bytes of buffer into the device
		while (((n+3) < cnt) && !out) {
  80b764:	00003e06 	br	80b860 <playSong+0x33c>
			int fifospace = alt_up_audio_write_fifo_space(audio_dev, ALT_UP_AUDIO_RIGHT);
  80b768:	d0a77917 	ldw	r2,-25116(gp)
  80b76c:	1009883a 	mov	r4,r2
  80b770:	01400044 	movi	r5,1
  80b774:	08029500 	call	802950 <alt_up_audio_write_fifo_space>
  80b778:	e0bfff15 	stw	r2,-4(fp)
			if (fifospace > 0) // check if write space is available
  80b77c:	e0bfff17 	ldw	r2,-4(fp)
  80b780:	0080370e 	bge	zero,r2,80b860 <playSong+0x33c>
			{
			  l_buf = (Buff[n+1] << 8) + Buff[n];
  80b784:	e0bffd17 	ldw	r2,-12(fp)
  80b788:	10c00044 	addi	r3,r2,1
  80b78c:	008020b4 	movhi	r2,130
  80b790:	10816d04 	addi	r2,r2,1460
  80b794:	10c5883a 	add	r2,r2,r3
  80b798:	10800003 	ldbu	r2,0(r2)
  80b79c:	10803fcc 	andi	r2,r2,255
  80b7a0:	1006923a 	slli	r3,r2,8
  80b7a4:	008020b4 	movhi	r2,130
  80b7a8:	10816d04 	addi	r2,r2,1460
  80b7ac:	e13ffd17 	ldw	r4,-12(fp)
  80b7b0:	1105883a 	add	r2,r2,r4
  80b7b4:	10800003 	ldbu	r2,0(r2)
  80b7b8:	10803fcc 	andi	r2,r2,255
  80b7bc:	1885883a 	add	r2,r3,r2
  80b7c0:	d0a78115 	stw	r2,-25084(gp)
			  r_buf = (Buff[n+3] << 8) + Buff[n+2];
  80b7c4:	e0bffd17 	ldw	r2,-12(fp)
  80b7c8:	10c000c4 	addi	r3,r2,3
  80b7cc:	008020b4 	movhi	r2,130
  80b7d0:	10816d04 	addi	r2,r2,1460
  80b7d4:	10c5883a 	add	r2,r2,r3
  80b7d8:	10800003 	ldbu	r2,0(r2)
  80b7dc:	10803fcc 	andi	r2,r2,255
  80b7e0:	1006923a 	slli	r3,r2,8
  80b7e4:	e0bffd17 	ldw	r2,-12(fp)
  80b7e8:	11000084 	addi	r4,r2,2
  80b7ec:	008020b4 	movhi	r2,130
  80b7f0:	10816d04 	addi	r2,r2,1460
  80b7f4:	1105883a 	add	r2,r2,r4
  80b7f8:	10800003 	ldbu	r2,0(r2)
  80b7fc:	10803fcc 	andi	r2,r2,255
  80b800:	1885883a 	add	r2,r3,r2
  80b804:	d0a77d15 	stw	r2,-25100(gp)

			  alt_up_audio_write_fifo(audio_dev, & (r_buf), 1, ALT_UP_AUDIO_RIGHT);
  80b808:	d0a77917 	ldw	r2,-25116(gp)
  80b80c:	1009883a 	mov	r4,r2
  80b810:	d1677d04 	addi	r5,gp,-25100
  80b814:	01800044 	movi	r6,1
  80b818:	01c00044 	movi	r7,1
  80b81c:	0802b600 	call	802b60 <alt_up_audio_write_fifo>
			  alt_up_audio_write_fifo(audio_dev, & (l_buf), 1, ALT_UP_AUDIO_LEFT);
  80b820:	d0a77917 	ldw	r2,-25116(gp)
  80b824:	1009883a 	mov	r4,r2
  80b828:	d1678104 	addi	r5,gp,-25084
  80b82c:	01800044 	movi	r6,1
  80b830:	000f883a 	mov	r7,zero
  80b834:	0802b600 	call	802b60 <alt_up_audio_write_fifo>

			  if (button == 0xe) {//check for forward seek
  80b838:	e0bffc03 	ldbu	r2,-16(fp)
  80b83c:	10800398 	cmpnei	r2,r2,14
  80b840:	1000041e 	bne	r2,zero,80b854 <playSong+0x330>
				  n += 8;
  80b844:	e0bffd17 	ldw	r2,-12(fp)
  80b848:	10800204 	addi	r2,r2,8
  80b84c:	e0bffd15 	stw	r2,-12(fp)
  80b850:	00000306 	br	80b860 <playSong+0x33c>
			  } else {
				  n += 4;
  80b854:	e0bffd17 	ldw	r2,-12(fp)
  80b858:	10800104 	addi	r2,r2,4
  80b85c:	e0bffd15 	stw	r2,-12(fp)
		   out++;
		   currSong = currIndex;
		}

		// Writes 512 bytes of buffer into the device
		while (((n+3) < cnt) && !out) {
  80b860:	e0bffd17 	ldw	r2,-12(fp)
  80b864:	108000c4 	addi	r2,r2,3
  80b868:	1007883a 	mov	r3,r2
  80b86c:	d0a77817 	ldw	r2,-25120(gp)
  80b870:	1880022e 	bgeu	r3,r2,80b87c <playSong+0x358>
  80b874:	e0bff903 	ldbu	r2,-28(fp)
  80b878:	103fbb26 	beq	r2,zero,80b768 <__alt_data_end+0xff80b768>
				  n += 4;
			  }
			}
		}

		if (button == 0x7 && rr_forward){
  80b87c:	e0bffc03 	ldbu	r2,-16(fp)
  80b880:	108001d8 	cmpnei	r2,r2,7
  80b884:	1000081e 	bne	r2,zero,80b8a8 <playSong+0x384>
  80b888:	e0bff943 	ldbu	r2,-27(fp)
  80b88c:	10000626 	beq	r2,zero,80b8a8 <playSong+0x384>
			count--;
  80b890:	e0bffa17 	ldw	r2,-24(fp)
  80b894:	10bfffc4 	addi	r2,r2,-1
  80b898:	e0bffa15 	stw	r2,-24(fp)

			if (count == 0) {
  80b89c:	e0bffa17 	ldw	r2,-24(fp)
  80b8a0:	1000011e 	bne	r2,zero,80b8a8 <playSong+0x384>
				rr_forward = 0;
  80b8a4:	e03ff945 	stb	zero,-27(fp)
		f_open(&File1, filename[currIndex], 1);
		p1 = fileSize[currIndex];
	}

	// Keep reading the song until stop/pause is pressed or the song runs out of data to read
	while (p1>0 && !out) {
  80b8a8:	d0a77c17 	ldw	r2,-25104(gp)
  80b8ac:	0080020e 	bge	zero,r2,80b8b8 <playSong+0x394>
  80b8b0:	e0bff903 	ldbu	r2,-28(fp)
  80b8b4:	103f4726 	beq	r2,zero,80b5d4 <__alt_data_end+0xff80b5d4>
			}
		}

	}

	return out;
  80b8b8:	e0bff903 	ldbu	r2,-28(fp)
}
  80b8bc:	e037883a 	mov	sp,fp
  80b8c0:	dfc00117 	ldw	ra,4(sp)
  80b8c4:	df000017 	ldw	fp,0(sp)
  80b8c8:	dec00204 	addi	sp,sp,8
  80b8cc:	f800283a 	ret

0080b8d0 <isWav>:


int isWav(char *filename){
  80b8d0:	defffc04 	addi	sp,sp,-16
  80b8d4:	dfc00315 	stw	ra,12(sp)
  80b8d8:	df000215 	stw	fp,8(sp)
  80b8dc:	df000204 	addi	fp,sp,8
  80b8e0:	e13fff15 	stw	r4,-4(fp)

	int l = strlen(filename);
  80b8e4:	e13fff17 	ldw	r4,-4(fp)
  80b8e8:	080e8b40 	call	80e8b4 <strlen>
  80b8ec:	e0bffe15 	stw	r2,-8(fp)

	if (l > 4)
  80b8f0:	e0bffe17 	ldw	r2,-8(fp)
  80b8f4:	10800150 	cmplti	r2,r2,5
  80b8f8:	1000051e 	bne	r2,zero,80b910 <isWav+0x40>
		return strcasestr(filename,".WAV");
  80b8fc:	e13fff17 	ldw	r4,-4(fp)
  80b900:	014020b4 	movhi	r5,130
  80b904:	296f7d04 	addi	r5,r5,-16908
  80b908:	080e3980 	call	80e398 <strcasestr>
  80b90c:	00000106 	br	80b914 <isWav+0x44>

	return 0;
  80b910:	0005883a 	mov	r2,zero

}
  80b914:	e037883a 	mov	sp,fp
  80b918:	dfc00117 	ldw	ra,4(sp)
  80b91c:	df000017 	ldw	fp,0(sp)
  80b920:	dec00204 	addi	sp,sp,8
  80b924:	f800283a 	ret

0080b928 <getFileList>:

// Loads data into fileSize and filename from file directory
void getFileList(){
  80b928:	defffc04 	addi	sp,sp,-16
  80b92c:	dfc00315 	stw	ra,12(sp)
  80b930:	df000215 	stw	fp,8(sp)
  80b934:	df000204 	addi	fp,sp,8
	char *ptr = NULL;
  80b938:	e03ffe15 	stw	zero,-8(fp)
	uint8_t res;

	res = f_opendir(&Dir, ptr);
  80b93c:	010020b4 	movhi	r4,130
  80b940:	2109f604 	addi	r4,r4,10200
  80b944:	e17ffe17 	ldw	r5,-8(fp)
  80b948:	08087540 	call	808754 <f_opendir>
  80b94c:	e0bfff05 	stb	r2,-4(fp)
	filenum = 0;
  80b950:	d0277015 	stw	zero,-25152(gp)
	p1 = 0;
  80b954:	d0277c15 	stw	zero,-25104(gp)

	for (;;) {

		res = f_readdir(&Dir, &Finfo);
  80b958:	010020b4 	movhi	r4,130
  80b95c:	2109f604 	addi	r4,r4,10200
  80b960:	014020b4 	movhi	r5,130
  80b964:	29415304 	addi	r5,r5,1356
  80b968:	08088c40 	call	8088c4 <f_readdir>
  80b96c:	e0bfff05 	stb	r2,-4(fp)

		if ((res != FR_OK) || !Finfo.fname[0])
  80b970:	e0bfff03 	ldbu	r2,-4(fp)
  80b974:	1000221e 	bne	r2,zero,80ba00 <getFileList+0xd8>
  80b978:	008020b4 	movhi	r2,130
  80b97c:	10815304 	addi	r2,r2,1356
  80b980:	10800243 	ldbu	r2,9(r2)
  80b984:	10803fcc 	andi	r2,r2,255
  80b988:	1080201c 	xori	r2,r2,128
  80b98c:	10bfe004 	addi	r2,r2,-128
  80b990:	10001b26 	beq	r2,zero,80ba00 <getFileList+0xd8>
			break;

		if (isWav((Finfo.fname))){
  80b994:	010020b4 	movhi	r4,130
  80b998:	21015544 	addi	r4,r4,1365
  80b99c:	080b8d00 	call	80b8d0 <isWav>
  80b9a0:	10001626 	beq	r2,zero,80b9fc <getFileList+0xd4>
			strcpy(filename[filenum], &(Finfo.fname[0]));
  80b9a4:	d0a77017 	ldw	r2,-25152(gp)
  80b9a8:	10c00524 	muli	r3,r2,20
  80b9ac:	008020b4 	movhi	r2,130
  80b9b0:	10bfd004 	addi	r2,r2,-192
  80b9b4:	1885883a 	add	r2,r3,r2
  80b9b8:	1009883a 	mov	r4,r2
  80b9bc:	014020b4 	movhi	r5,130
  80b9c0:	29415544 	addi	r5,r5,1365
  80b9c4:	080e8240 	call	80e824 <strcpy>
			fileSize[filenum] = Finfo.fsize;
  80b9c8:	d0e77017 	ldw	r3,-25152(gp)
  80b9cc:	008020b4 	movhi	r2,130
  80b9d0:	10815304 	addi	r2,r2,1356
  80b9d4:	11000017 	ldw	r4,0(r2)
  80b9d8:	008020b4 	movhi	r2,130
  80b9dc:	10815904 	addi	r2,r2,1380
  80b9e0:	18c7883a 	add	r3,r3,r3
  80b9e4:	18c7883a 	add	r3,r3,r3
  80b9e8:	10c5883a 	add	r2,r2,r3
  80b9ec:	11000015 	stw	r4,0(r2)
			++filenum;
  80b9f0:	d0a77017 	ldw	r2,-25152(gp)
  80b9f4:	10800044 	addi	r2,r2,1
  80b9f8:	d0a77015 	stw	r2,-25152(gp)
		}


	}
  80b9fc:	003fd606 	br	80b958 <__alt_data_end+0xff80b958>
}
  80ba00:	e037883a 	mov	sp,fp
  80ba04:	dfc00117 	ldw	ra,4(sp)
  80ba08:	df000017 	ldw	fp,0(sp)
  80ba0c:	dec00204 	addi	sp,sp,8
  80ba10:	f800283a 	ret

0080ba14 <main>:

/***************************************************************************/
/*  Main                                                                   */
/***************************************************************************/
int main(void)
{
  80ba14:	defff904 	addi	sp,sp,-28
  80ba18:	dfc00615 	stw	ra,24(sp)
  80ba1c:	df000515 	stw	fp,20(sp)
  80ba20:	df000504 	addi	fp,sp,20
	int fifospace;
	uint8_t exit_condition = 0;
  80ba24:	e03ffb05 	stb	zero,-20(fp)
    char *ptr, *ptr2;
    alt_u8 button;

    static const uint8_t ft[] = { 0, 12, 16, 32 };
    uint32_t ofs = 0, sect = 0, blk[2];
  80ba28:	e03ffc15 	stw	zero,-16(fp)
  80ba2c:	e03ffd15 	stw	zero,-12(fp)
    FATFS *fs;

    audio_dev = alt_up_audio_open_dev ("/dev/Audio");
  80ba30:	010020b4 	movhi	r4,130
  80ba34:	212f7f04 	addi	r4,r4,-16900
  80ba38:	08025880 	call	802588 <alt_up_audio_open_dev>
  80ba3c:	d0a77915 	stw	r2,-25116(gp)

    IoInit();
  80ba40:	080b1f00 	call	80b1f0 <IoInit>
    Finfo.lfname = Lfname;
    Finfo.lfsize = sizeof(Lfname);
#endif

    // Mount disk
    f_mount(0, &Fatfs[0]);
  80ba44:	0009883a 	mov	r4,zero
  80ba48:	014020b4 	movhi	r5,130
  80ba4c:	29403e04 	addi	r5,r5,248
  80ba50:	08070200 	call	807020 <f_mount>

    // Opens LCD for writing
    lcd = fopen(LCD_DISPLAY_NAME,"w");
  80ba54:	010020b4 	movhi	r4,130
  80ba58:	212f8204 	addi	r4,r4,-16888
  80ba5c:	014020b4 	movhi	r5,130
  80ba60:	296f8704 	addi	r5,r5,-16868
  80ba64:	080c7300 	call	80c730 <fopen>
  80ba68:	d0a77415 	stw	r2,-25136(gp)

    // Update fileSize and filename from file directory
    getFileList();
  80ba6c:	080b9280 	call	80b928 <getFileList>

    while(1){
    	selectLCD();
  80ba70:	080b3800 	call	80b380 <selectLCD>

    	exit_condition = 0;
  80ba74:	e03ffb05 	stb	zero,-20(fp)

    	while (!exit_condition) {
  80ba78:	00001906 	br	80bae0 <main+0xcc>

    		// exit_condition represents if the stop button has been pressed
    		exit_condition = playSong();
  80ba7c:	080b5240 	call	80b524 <playSong>
  80ba80:	e0bffb05 	stb	r2,-20(fp)

    		if (!exit_condition) {
  80ba84:	e0bffb03 	ldbu	r2,-20(fp)
  80ba88:	1000151e 	bne	r2,zero,80bae0 <main+0xcc>

    			// Increment current index if it doesn't exceed the total number of .wav files
				if (currIndex < filenum - 1){
  80ba8c:	d0a77017 	ldw	r2,-25152(gp)
  80ba90:	10bfffc4 	addi	r2,r2,-1
  80ba94:	d0e77117 	ldw	r3,-25148(gp)
  80ba98:	1880040e 	bge	r3,r2,80baac <main+0x98>
					  currIndex++;
  80ba9c:	d0a77117 	ldw	r2,-25148(gp)
  80baa0:	10800044 	addi	r2,r2,1
  80baa4:	d0a77115 	stw	r2,-25148(gp)
  80baa8:	00000106 	br	80bab0 <main+0x9c>
				} else {
					  currIndex = 0;
  80baac:	d0277115 	stw	zero,-25148(gp)
				}

				fprintf(lcd,"%i. %s\n\n", currIndex+1, filename[currIndex]);
  80bab0:	d1277417 	ldw	r4,-25136(gp)
  80bab4:	d0a77117 	ldw	r2,-25148(gp)
  80bab8:	11800044 	addi	r6,r2,1
  80babc:	d0a77117 	ldw	r2,-25148(gp)
  80bac0:	10c00524 	muli	r3,r2,20
  80bac4:	008020b4 	movhi	r2,130
  80bac8:	10bfd004 	addi	r2,r2,-192
  80bacc:	1885883a 	add	r2,r3,r2
  80bad0:	014020b4 	movhi	r5,130
  80bad4:	296f7a04 	addi	r5,r5,-16920
  80bad8:	100f883a 	mov	r7,r2
  80badc:	080c7740 	call	80c774 <fprintf>
    while(1){
    	selectLCD();

    	exit_condition = 0;

    	while (!exit_condition) {
  80bae0:	e0bffb03 	ldbu	r2,-20(fp)
  80bae4:	103fe526 	beq	r2,zero,80ba7c <__alt_data_end+0xff80ba7c>
				fprintf(lcd,"%i. %s\n\n", currIndex+1, filename[currIndex]);
    		}


    	}
    }
  80bae8:	003fe106 	br	80ba70 <__alt_data_end+0xff80ba70>

0080baec <xatoi>:
#include <stdarg.h>
#include "monitor.h"
#include "uart.h"

int xatoi (char **str, long *res)
{
  80baec:	defffb04 	addi	sp,sp,-20
  80baf0:	df000415 	stw	fp,16(sp)
  80baf4:	df000404 	addi	fp,sp,16
  80baf8:	e13ffe15 	stw	r4,-8(fp)
  80bafc:	e17fff15 	stw	r5,-4(fp)
  unsigned long val;
  unsigned char c, radix, s = 0;
  80bb00:	e03ffd85 	stb	zero,-10(fp)


  while ((c = **str) == ' ') (*str)++;
  80bb04:	00000506 	br	80bb1c <xatoi+0x30>
  80bb08:	e0bffe17 	ldw	r2,-8(fp)
  80bb0c:	10800017 	ldw	r2,0(r2)
  80bb10:	10c00044 	addi	r3,r2,1
  80bb14:	e0bffe17 	ldw	r2,-8(fp)
  80bb18:	10c00015 	stw	r3,0(r2)
  80bb1c:	e0bffe17 	ldw	r2,-8(fp)
  80bb20:	10800017 	ldw	r2,0(r2)
  80bb24:	10800003 	ldbu	r2,0(r2)
  80bb28:	e0bffd05 	stb	r2,-12(fp)
  80bb2c:	e0bffd03 	ldbu	r2,-12(fp)
  80bb30:	10800820 	cmpeqi	r2,r2,32
  80bb34:	103ff41e 	bne	r2,zero,80bb08 <__alt_data_end+0xff80bb08>
  if (c == '-') {
  80bb38:	e0bffd03 	ldbu	r2,-12(fp)
  80bb3c:	10800b58 	cmpnei	r2,r2,45
  80bb40:	10000b1e 	bne	r2,zero,80bb70 <xatoi+0x84>
    s = 1;
  80bb44:	00800044 	movi	r2,1
  80bb48:	e0bffd85 	stb	r2,-10(fp)
    c = *(++(*str));
  80bb4c:	e0bffe17 	ldw	r2,-8(fp)
  80bb50:	10800017 	ldw	r2,0(r2)
  80bb54:	10c00044 	addi	r3,r2,1
  80bb58:	e0bffe17 	ldw	r2,-8(fp)
  80bb5c:	10c00015 	stw	r3,0(r2)
  80bb60:	e0bffe17 	ldw	r2,-8(fp)
  80bb64:	10800017 	ldw	r2,0(r2)
  80bb68:	10800003 	ldbu	r2,0(r2)
  80bb6c:	e0bffd05 	stb	r2,-12(fp)
  }
  if (c == '0') {
  80bb70:	e0bffd03 	ldbu	r2,-12(fp)
  80bb74:	10800c18 	cmpnei	r2,r2,48
  80bb78:	1000391e 	bne	r2,zero,80bc60 <xatoi+0x174>
    c = *(++(*str));
  80bb7c:	e0bffe17 	ldw	r2,-8(fp)
  80bb80:	10800017 	ldw	r2,0(r2)
  80bb84:	10c00044 	addi	r3,r2,1
  80bb88:	e0bffe17 	ldw	r2,-8(fp)
  80bb8c:	10c00015 	stw	r3,0(r2)
  80bb90:	e0bffe17 	ldw	r2,-8(fp)
  80bb94:	10800017 	ldw	r2,0(r2)
  80bb98:	10800003 	ldbu	r2,0(r2)
  80bb9c:	e0bffd05 	stb	r2,-12(fp)
    if (c <= ' ') {
  80bba0:	e0bffd03 	ldbu	r2,-12(fp)
  80bba4:	10800868 	cmpgeui	r2,r2,33
  80bba8:	1000041e 	bne	r2,zero,80bbbc <xatoi+0xd0>
      *res = 0; return 1;
  80bbac:	e0bfff17 	ldw	r2,-4(fp)
  80bbb0:	10000015 	stw	zero,0(r2)
  80bbb4:	00800044 	movi	r2,1
  80bbb8:	00006906 	br	80bd60 <xatoi+0x274>
    }
    if (c == 'x') {
  80bbbc:	e0bffd03 	ldbu	r2,-12(fp)
  80bbc0:	10801e18 	cmpnei	r2,r2,120
  80bbc4:	10000c1e 	bne	r2,zero,80bbf8 <xatoi+0x10c>
      radix = 16;
  80bbc8:	00800404 	movi	r2,16
  80bbcc:	e0bffd45 	stb	r2,-11(fp)
      c = *(++(*str));
  80bbd0:	e0bffe17 	ldw	r2,-8(fp)
  80bbd4:	10800017 	ldw	r2,0(r2)
  80bbd8:	10c00044 	addi	r3,r2,1
  80bbdc:	e0bffe17 	ldw	r2,-8(fp)
  80bbe0:	10c00015 	stw	r3,0(r2)
  80bbe4:	e0bffe17 	ldw	r2,-8(fp)
  80bbe8:	10800017 	ldw	r2,0(r2)
  80bbec:	10800003 	ldbu	r2,0(r2)
  80bbf0:	e0bffd05 	stb	r2,-12(fp)
  80bbf4:	00002406 	br	80bc88 <xatoi+0x19c>
    } else {
      if (c == 'b') {
  80bbf8:	e0bffd03 	ldbu	r2,-12(fp)
  80bbfc:	10801898 	cmpnei	r2,r2,98
  80bc00:	10000c1e 	bne	r2,zero,80bc34 <xatoi+0x148>
        radix = 2;
  80bc04:	00800084 	movi	r2,2
  80bc08:	e0bffd45 	stb	r2,-11(fp)
        c = *(++(*str));
  80bc0c:	e0bffe17 	ldw	r2,-8(fp)
  80bc10:	10800017 	ldw	r2,0(r2)
  80bc14:	10c00044 	addi	r3,r2,1
  80bc18:	e0bffe17 	ldw	r2,-8(fp)
  80bc1c:	10c00015 	stw	r3,0(r2)
  80bc20:	e0bffe17 	ldw	r2,-8(fp)
  80bc24:	10800017 	ldw	r2,0(r2)
  80bc28:	10800003 	ldbu	r2,0(r2)
  80bc2c:	e0bffd05 	stb	r2,-12(fp)
  80bc30:	00001506 	br	80bc88 <xatoi+0x19c>
      } else {
        if ((c >= '0')&&(c <= '9'))
  80bc34:	e0bffd03 	ldbu	r2,-12(fp)
  80bc38:	10800c30 	cmpltui	r2,r2,48
  80bc3c:	1000061e 	bne	r2,zero,80bc58 <xatoi+0x16c>
  80bc40:	e0bffd03 	ldbu	r2,-12(fp)
  80bc44:	10800ea8 	cmpgeui	r2,r2,58
  80bc48:	1000031e 	bne	r2,zero,80bc58 <xatoi+0x16c>
          radix = 8;
  80bc4c:	00800204 	movi	r2,8
  80bc50:	e0bffd45 	stb	r2,-11(fp)
  80bc54:	00000c06 	br	80bc88 <xatoi+0x19c>
        else
          return 0;
  80bc58:	0005883a 	mov	r2,zero
  80bc5c:	00004006 	br	80bd60 <xatoi+0x274>
      }
    }
  } else {
    if ((c < '1')||(c > '9'))
  80bc60:	e0bffd03 	ldbu	r2,-12(fp)
  80bc64:	10800c70 	cmpltui	r2,r2,49
  80bc68:	1000031e 	bne	r2,zero,80bc78 <xatoi+0x18c>
  80bc6c:	e0bffd03 	ldbu	r2,-12(fp)
  80bc70:	10800eb0 	cmpltui	r2,r2,58
  80bc74:	1000021e 	bne	r2,zero,80bc80 <xatoi+0x194>
      return 0;
  80bc78:	0005883a 	mov	r2,zero
  80bc7c:	00003806 	br	80bd60 <xatoi+0x274>
    radix = 10;
  80bc80:	00800284 	movi	r2,10
  80bc84:	e0bffd45 	stb	r2,-11(fp)
  }
  val = 0;
  80bc88:	e03ffc15 	stw	zero,-16(fp)
  while (c > ' ') {
  80bc8c:	00002806 	br	80bd30 <xatoi+0x244>
    if (c >= 'a') c -= 0x20;
  80bc90:	e0bffd03 	ldbu	r2,-12(fp)
  80bc94:	10801870 	cmpltui	r2,r2,97
  80bc98:	1000031e 	bne	r2,zero,80bca8 <xatoi+0x1bc>
  80bc9c:	e0bffd03 	ldbu	r2,-12(fp)
  80bca0:	10bff804 	addi	r2,r2,-32
  80bca4:	e0bffd05 	stb	r2,-12(fp)
    c -= '0';
  80bca8:	e0bffd03 	ldbu	r2,-12(fp)
  80bcac:	10bff404 	addi	r2,r2,-48
  80bcb0:	e0bffd05 	stb	r2,-12(fp)
    if (c >= 17) {
  80bcb4:	e0bffd03 	ldbu	r2,-12(fp)
  80bcb8:	10800470 	cmpltui	r2,r2,17
  80bcbc:	1000081e 	bne	r2,zero,80bce0 <xatoi+0x1f4>
      c -= 7;
  80bcc0:	e0bffd03 	ldbu	r2,-12(fp)
  80bcc4:	10bffe44 	addi	r2,r2,-7
  80bcc8:	e0bffd05 	stb	r2,-12(fp)
      if (c <= 9) return 0;
  80bccc:	e0bffd03 	ldbu	r2,-12(fp)
  80bcd0:	108002a8 	cmpgeui	r2,r2,10
  80bcd4:	1000021e 	bne	r2,zero,80bce0 <xatoi+0x1f4>
  80bcd8:	0005883a 	mov	r2,zero
  80bcdc:	00002006 	br	80bd60 <xatoi+0x274>
    }
    if (c >= radix) return 0;
  80bce0:	e0fffd03 	ldbu	r3,-12(fp)
  80bce4:	e0bffd43 	ldbu	r2,-11(fp)
  80bce8:	18800236 	bltu	r3,r2,80bcf4 <xatoi+0x208>
  80bcec:	0005883a 	mov	r2,zero
  80bcf0:	00001b06 	br	80bd60 <xatoi+0x274>
    val = val * radix + c;
  80bcf4:	e0fffd43 	ldbu	r3,-11(fp)
  80bcf8:	e0bffc17 	ldw	r2,-16(fp)
  80bcfc:	1887383a 	mul	r3,r3,r2
  80bd00:	e0bffd03 	ldbu	r2,-12(fp)
  80bd04:	1885883a 	add	r2,r3,r2
  80bd08:	e0bffc15 	stw	r2,-16(fp)
    c = *(++(*str));
  80bd0c:	e0bffe17 	ldw	r2,-8(fp)
  80bd10:	10800017 	ldw	r2,0(r2)
  80bd14:	10c00044 	addi	r3,r2,1
  80bd18:	e0bffe17 	ldw	r2,-8(fp)
  80bd1c:	10c00015 	stw	r3,0(r2)
  80bd20:	e0bffe17 	ldw	r2,-8(fp)
  80bd24:	10800017 	ldw	r2,0(r2)
  80bd28:	10800003 	ldbu	r2,0(r2)
  80bd2c:	e0bffd05 	stb	r2,-12(fp)
    if ((c < '1')||(c > '9'))
      return 0;
    radix = 10;
  }
  val = 0;
  while (c > ' ') {
  80bd30:	e0bffd03 	ldbu	r2,-12(fp)
  80bd34:	10800868 	cmpgeui	r2,r2,33
  80bd38:	103fd51e 	bne	r2,zero,80bc90 <__alt_data_end+0xff80bc90>
    }
    if (c >= radix) return 0;
    val = val * radix + c;
    c = *(++(*str));
  }
  if (s) val = -val;
  80bd3c:	e0bffd83 	ldbu	r2,-10(fp)
  80bd40:	10000326 	beq	r2,zero,80bd50 <xatoi+0x264>
  80bd44:	e0bffc17 	ldw	r2,-16(fp)
  80bd48:	0085c83a 	sub	r2,zero,r2
  80bd4c:	e0bffc15 	stw	r2,-16(fp)
  *res = val;
  80bd50:	e0fffc17 	ldw	r3,-16(fp)
  80bd54:	e0bfff17 	ldw	r2,-4(fp)
  80bd58:	10c00015 	stw	r3,0(r2)
  return 1;
  80bd5c:	00800044 	movi	r2,1
}
  80bd60:	e037883a 	mov	sp,fp
  80bd64:	df000017 	ldw	fp,0(sp)
  80bd68:	dec00104 	addi	sp,sp,4
  80bd6c:	f800283a 	ret

0080bd70 <xputc>:

void xputc (char c)
{
  80bd70:	defffd04 	addi	sp,sp,-12
  80bd74:	dfc00215 	stw	ra,8(sp)
  80bd78:	df000115 	stw	fp,4(sp)
  80bd7c:	df000104 	addi	fp,sp,4
  80bd80:	2005883a 	mov	r2,r4
  80bd84:	e0bfff05 	stb	r2,-4(fp)
  if (c == '\n') uart0_put('\r');
  80bd88:	e0bfff07 	ldb	r2,-4(fp)
  80bd8c:	10800298 	cmpnei	r2,r2,10
  80bd90:	1000021e 	bne	r2,zero,80bd9c <xputc+0x2c>
  80bd94:	01000344 	movi	r4,13
  80bd98:	080c4840 	call	80c484 <uart0_put>
  uart0_put(c);
  80bd9c:	e0bfff03 	ldbu	r2,-4(fp)
  80bda0:	10803fcc 	andi	r2,r2,255
  80bda4:	1009883a 	mov	r4,r2
  80bda8:	080c4840 	call	80c484 <uart0_put>
}
  80bdac:	e037883a 	mov	sp,fp
  80bdb0:	dfc00117 	ldw	ra,4(sp)
  80bdb4:	df000017 	ldw	fp,0(sp)
  80bdb8:	dec00204 	addi	sp,sp,8
  80bdbc:	f800283a 	ret

0080bdc0 <xputs>:

void xputs (const char* str)
{
  80bdc0:	defffd04 	addi	sp,sp,-12
  80bdc4:	dfc00215 	stw	ra,8(sp)
  80bdc8:	df000115 	stw	fp,4(sp)
  80bdcc:	df000104 	addi	fp,sp,4
  80bdd0:	e13fff15 	stw	r4,-4(fp)
  while (*str)
  80bdd4:	00000906 	br	80bdfc <xputs+0x3c>
    xputc(*str++);
  80bdd8:	e0bfff17 	ldw	r2,-4(fp)
  80bddc:	10c00044 	addi	r3,r2,1
  80bde0:	e0ffff15 	stw	r3,-4(fp)
  80bde4:	10800003 	ldbu	r2,0(r2)
  80bde8:	10803fcc 	andi	r2,r2,255
  80bdec:	1080201c 	xori	r2,r2,128
  80bdf0:	10bfe004 	addi	r2,r2,-128
  80bdf4:	1009883a 	mov	r4,r2
  80bdf8:	080bd700 	call	80bd70 <xputc>
  uart0_put(c);
}

void xputs (const char* str)
{
  while (*str)
  80bdfc:	e0bfff17 	ldw	r2,-4(fp)
  80be00:	10800003 	ldbu	r2,0(r2)
  80be04:	10803fcc 	andi	r2,r2,255
  80be08:	1080201c 	xori	r2,r2,128
  80be0c:	10bfe004 	addi	r2,r2,-128
  80be10:	103ff11e 	bne	r2,zero,80bdd8 <__alt_data_end+0xff80bdd8>
    xputc(*str++);
}
  80be14:	e037883a 	mov	sp,fp
  80be18:	dfc00117 	ldw	ra,4(sp)
  80be1c:	df000017 	ldw	fp,0(sp)
  80be20:	dec00204 	addi	sp,sp,8
  80be24:	f800283a 	ret

0080be28 <xitoa>:




void xitoa (signed long val, signed char radix, signed char len)
{
  80be28:	defff304 	addi	sp,sp,-52
  80be2c:	dfc00c15 	stw	ra,48(sp)
  80be30:	df000b15 	stw	fp,44(sp)
  80be34:	df000b04 	addi	fp,sp,44
  80be38:	e13ffd15 	stw	r4,-12(fp)
  80be3c:	2807883a 	mov	r3,r5
  80be40:	3005883a 	mov	r2,r6
  80be44:	e0fffe05 	stb	r3,-8(fp)
  80be48:	e0bfff05 	stb	r2,-4(fp)
  unsigned char c, r, sgn = 0, pad = ' ';
  80be4c:	e03ff545 	stb	zero,-43(fp)
  80be50:	00800804 	movi	r2,32
  80be54:	e0bff585 	stb	r2,-42(fp)
  unsigned char s[20], i = 0;
  80be58:	e03ff5c5 	stb	zero,-41(fp)
  unsigned long v;


  if (radix < 0) {
  80be5c:	e0bffe07 	ldb	r2,-8(fp)
  80be60:	10000a0e 	bge	r2,zero,80be8c <xitoa+0x64>
    radix = -radix;
  80be64:	e0bffe03 	ldbu	r2,-8(fp)
  80be68:	0085c83a 	sub	r2,zero,r2
  80be6c:	e0bffe05 	stb	r2,-8(fp)
    if (val < 0) {
  80be70:	e0bffd17 	ldw	r2,-12(fp)
  80be74:	1000050e 	bge	r2,zero,80be8c <xitoa+0x64>
      val = -val;
  80be78:	e0bffd17 	ldw	r2,-12(fp)
  80be7c:	0085c83a 	sub	r2,zero,r2
  80be80:	e0bffd15 	stw	r2,-12(fp)
      sgn = '-';
  80be84:	00800b44 	movi	r2,45
  80be88:	e0bff545 	stb	r2,-43(fp)
    }
  }
  v = val;
  80be8c:	e0bffd17 	ldw	r2,-12(fp)
  80be90:	e0bff615 	stw	r2,-40(fp)
  r = radix;
  80be94:	e0bffe03 	ldbu	r2,-8(fp)
  80be98:	e0bff705 	stb	r2,-36(fp)
  if (len < 0) {
  80be9c:	e0bfff07 	ldb	r2,-4(fp)
  80bea0:	1000050e 	bge	r2,zero,80beb8 <xitoa+0x90>
    len = -len;
  80bea4:	e0bfff03 	ldbu	r2,-4(fp)
  80bea8:	0085c83a 	sub	r2,zero,r2
  80beac:	e0bfff05 	stb	r2,-4(fp)
    pad = '0';
  80beb0:	00800c04 	movi	r2,48
  80beb4:	e0bff585 	stb	r2,-42(fp)
  }
  if (len > 20) return;
  80beb8:	e0bfff07 	ldb	r2,-4(fp)
  80bebc:	10800550 	cmplti	r2,r2,21
  80bec0:	10004226 	beq	r2,zero,80bfcc <xitoa+0x1a4>
  do {
    c = (unsigned char)(v % r);
  80bec4:	e0bff703 	ldbu	r2,-36(fp)
  80bec8:	e0fff617 	ldw	r3,-40(fp)
  80becc:	1809883a 	mov	r4,r3
  80bed0:	100b883a 	mov	r5,r2
  80bed4:	080c6380 	call	80c638 <__umodsi3>
  80bed8:	e0bff505 	stb	r2,-44(fp)
    if (c >= 10) c += 7;
  80bedc:	e0bff503 	ldbu	r2,-44(fp)
  80bee0:	108002b0 	cmpltui	r2,r2,10
  80bee4:	1000031e 	bne	r2,zero,80bef4 <xitoa+0xcc>
  80bee8:	e0bff503 	ldbu	r2,-44(fp)
  80beec:	108001c4 	addi	r2,r2,7
  80bef0:	e0bff505 	stb	r2,-44(fp)
    c += '0';
  80bef4:	e0bff503 	ldbu	r2,-44(fp)
  80bef8:	10800c04 	addi	r2,r2,48
  80befc:	e0bff505 	stb	r2,-44(fp)
    s[i++] = c;
  80bf00:	e0bff5c3 	ldbu	r2,-41(fp)
  80bf04:	10c00044 	addi	r3,r2,1
  80bf08:	e0fff5c5 	stb	r3,-41(fp)
  80bf0c:	10803fcc 	andi	r2,r2,255
  80bf10:	e0fff744 	addi	r3,fp,-35
  80bf14:	1885883a 	add	r2,r3,r2
  80bf18:	e0fff503 	ldbu	r3,-44(fp)
  80bf1c:	10c00005 	stb	r3,0(r2)
    v /= r;
  80bf20:	e0bff703 	ldbu	r2,-36(fp)
  80bf24:	e13ff617 	ldw	r4,-40(fp)
  80bf28:	100b883a 	mov	r5,r2
  80bf2c:	080c6300 	call	80c630 <__udivsi3>
  80bf30:	e0bff615 	stw	r2,-40(fp)
  } while (v);
  80bf34:	e0bff617 	ldw	r2,-40(fp)
  80bf38:	103fe21e 	bne	r2,zero,80bec4 <__alt_data_end+0xff80bec4>
  if (sgn) s[i++] = sgn;
  80bf3c:	e0bff543 	ldbu	r2,-43(fp)
  80bf40:	10000826 	beq	r2,zero,80bf64 <xitoa+0x13c>
  80bf44:	e0bff5c3 	ldbu	r2,-41(fp)
  80bf48:	10c00044 	addi	r3,r2,1
  80bf4c:	e0fff5c5 	stb	r3,-41(fp)
  80bf50:	10803fcc 	andi	r2,r2,255
  80bf54:	e0fff744 	addi	r3,fp,-35
  80bf58:	1885883a 	add	r2,r3,r2
  80bf5c:	e0fff543 	ldbu	r3,-43(fp)
  80bf60:	10c00005 	stb	r3,0(r2)
  while (i < len)
  80bf64:	00000806 	br	80bf88 <xitoa+0x160>
    s[i++] = pad;
  80bf68:	e0bff5c3 	ldbu	r2,-41(fp)
  80bf6c:	10c00044 	addi	r3,r2,1
  80bf70:	e0fff5c5 	stb	r3,-41(fp)
  80bf74:	10803fcc 	andi	r2,r2,255
  80bf78:	e0fff744 	addi	r3,fp,-35
  80bf7c:	1885883a 	add	r2,r3,r2
  80bf80:	e0fff583 	ldbu	r3,-42(fp)
  80bf84:	10c00005 	stb	r3,0(r2)
    c += '0';
    s[i++] = c;
    v /= r;
  } while (v);
  if (sgn) s[i++] = sgn;
  while (i < len)
  80bf88:	e0fff5c3 	ldbu	r3,-41(fp)
  80bf8c:	e0bfff07 	ldb	r2,-4(fp)
  80bf90:	18bff516 	blt	r3,r2,80bf68 <__alt_data_end+0xff80bf68>
    s[i++] = pad;
  do
    xputc(s[--i]);
  80bf94:	e0bff5c3 	ldbu	r2,-41(fp)
  80bf98:	10bfffc4 	addi	r2,r2,-1
  80bf9c:	e0bff5c5 	stb	r2,-41(fp)
  80bfa0:	e0bff5c3 	ldbu	r2,-41(fp)
  80bfa4:	e0fff744 	addi	r3,fp,-35
  80bfa8:	1885883a 	add	r2,r3,r2
  80bfac:	10800003 	ldbu	r2,0(r2)
  80bfb0:	10803fcc 	andi	r2,r2,255
  80bfb4:	1080201c 	xori	r2,r2,128
  80bfb8:	10bfe004 	addi	r2,r2,-128
  80bfbc:	1009883a 	mov	r4,r2
  80bfc0:	080bd700 	call	80bd70 <xputc>
  while (i);
  80bfc4:	e0bff5c3 	ldbu	r2,-41(fp)
  80bfc8:	103ff21e 	bne	r2,zero,80bf94 <__alt_data_end+0xff80bf94>
}
  80bfcc:	e037883a 	mov	sp,fp
  80bfd0:	dfc00117 	ldw	ra,4(sp)
  80bfd4:	df000017 	ldw	fp,0(sp)
  80bfd8:	dec00204 	addi	sp,sp,8
  80bfdc:	f800283a 	ret

0080bfe0 <xprintf>:




void xprintf (const char* str, ...)
{
  80bfe0:	defff704 	addi	sp,sp,-36
  80bfe4:	dfc00515 	stw	ra,20(sp)
  80bfe8:	df000415 	stw	fp,16(sp)
  80bfec:	df000404 	addi	fp,sp,16
  80bff0:	e1400215 	stw	r5,8(fp)
  80bff4:	e1800315 	stw	r6,12(fp)
  80bff8:	e1c00415 	stw	r7,16(fp)
  80bffc:	e13fff15 	stw	r4,-4(fp)
  va_list arp;
  char d, r, w, s, l;


  va_start(arp, str);
  80c000:	e0800204 	addi	r2,fp,8
  80c004:	e0bffe15 	stw	r2,-8(fp)

  while ((d = *str++) != 0) {
  80c008:	00009406 	br	80c25c <xprintf+0x27c>
    if (d != '%') {
  80c00c:	e0bffc07 	ldb	r2,-16(fp)
  80c010:	10800960 	cmpeqi	r2,r2,37
  80c014:	1000041e 	bne	r2,zero,80c028 <xprintf+0x48>
      xputc(d); continue;
  80c018:	e0bffc07 	ldb	r2,-16(fp)
  80c01c:	1009883a 	mov	r4,r2
  80c020:	080bd700 	call	80bd70 <xputc>
  80c024:	00008d06 	br	80c25c <xprintf+0x27c>
    }
    d = *str++; w = r = s = l = 0;
  80c028:	e0bfff17 	ldw	r2,-4(fp)
  80c02c:	10c00044 	addi	r3,r2,1
  80c030:	e0ffff15 	stw	r3,-4(fp)
  80c034:	10800003 	ldbu	r2,0(r2)
  80c038:	e0bffc05 	stb	r2,-16(fp)
  80c03c:	e03ffd05 	stb	zero,-12(fp)
  80c040:	e0bffd03 	ldbu	r2,-12(fp)
  80c044:	e0bffcc5 	stb	r2,-13(fp)
  80c048:	e0bffcc3 	ldbu	r2,-13(fp)
  80c04c:	e0bffc45 	stb	r2,-15(fp)
  80c050:	e0bffc43 	ldbu	r2,-15(fp)
  80c054:	e0bffc85 	stb	r2,-14(fp)
    if (d == '0') {
  80c058:	e0bffc07 	ldb	r2,-16(fp)
  80c05c:	10800c18 	cmpnei	r2,r2,48
  80c060:	1000071e 	bne	r2,zero,80c080 <xprintf+0xa0>
      d = *str++; s = 1;
  80c064:	e0bfff17 	ldw	r2,-4(fp)
  80c068:	10c00044 	addi	r3,r2,1
  80c06c:	e0ffff15 	stw	r3,-4(fp)
  80c070:	10800003 	ldbu	r2,0(r2)
  80c074:	e0bffc05 	stb	r2,-16(fp)
  80c078:	00800044 	movi	r2,1
  80c07c:	e0bffcc5 	stb	r2,-13(fp)
    }
    while ((d >= '0')&&(d <= '9')) {
  80c080:	00000f06 	br	80c0c0 <xprintf+0xe0>
      w += w * 10 + (d - '0');
  80c084:	e0bffc83 	ldbu	r2,-14(fp)
  80c088:	108002a4 	muli	r2,r2,10
  80c08c:	1007883a 	mov	r3,r2
  80c090:	e0bffc03 	ldbu	r2,-16(fp)
  80c094:	1885883a 	add	r2,r3,r2
  80c098:	1007883a 	mov	r3,r2
  80c09c:	e0bffc83 	ldbu	r2,-14(fp)
  80c0a0:	1885883a 	add	r2,r3,r2
  80c0a4:	10bff404 	addi	r2,r2,-48
  80c0a8:	e0bffc85 	stb	r2,-14(fp)
      d = *str++;
  80c0ac:	e0bfff17 	ldw	r2,-4(fp)
  80c0b0:	10c00044 	addi	r3,r2,1
  80c0b4:	e0ffff15 	stw	r3,-4(fp)
  80c0b8:	10800003 	ldbu	r2,0(r2)
  80c0bc:	e0bffc05 	stb	r2,-16(fp)
    }
    d = *str++; w = r = s = l = 0;
    if (d == '0') {
      d = *str++; s = 1;
    }
    while ((d >= '0')&&(d <= '9')) {
  80c0c0:	e0bffc07 	ldb	r2,-16(fp)
  80c0c4:	10800c10 	cmplti	r2,r2,48
  80c0c8:	1000031e 	bne	r2,zero,80c0d8 <xprintf+0xf8>
  80c0cc:	e0bffc07 	ldb	r2,-16(fp)
  80c0d0:	10800e90 	cmplti	r2,r2,58
  80c0d4:	103feb1e 	bne	r2,zero,80c084 <__alt_data_end+0xff80c084>
      w += w * 10 + (d - '0');
      d = *str++;
    }
    if (s) w = -w;
  80c0d8:	e0bffcc7 	ldb	r2,-13(fp)
  80c0dc:	10000326 	beq	r2,zero,80c0ec <xprintf+0x10c>
  80c0e0:	e0bffc83 	ldbu	r2,-14(fp)
  80c0e4:	0085c83a 	sub	r2,zero,r2
  80c0e8:	e0bffc85 	stb	r2,-14(fp)
    if (d == 'l') {
  80c0ec:	e0bffc07 	ldb	r2,-16(fp)
  80c0f0:	10801b18 	cmpnei	r2,r2,108
  80c0f4:	1000071e 	bne	r2,zero,80c114 <xprintf+0x134>
      l = 1;
  80c0f8:	00800044 	movi	r2,1
  80c0fc:	e0bffd05 	stb	r2,-12(fp)
      d = *str++;
  80c100:	e0bfff17 	ldw	r2,-4(fp)
  80c104:	10c00044 	addi	r3,r2,1
  80c108:	e0ffff15 	stw	r3,-4(fp)
  80c10c:	10800003 	ldbu	r2,0(r2)
  80c110:	e0bffc05 	stb	r2,-16(fp)
    }
    if (!d) break;
  80c114:	e0bffc07 	ldb	r2,-16(fp)
  80c118:	1000011e 	bne	r2,zero,80c120 <xprintf+0x140>
  80c11c:	00005606 	br	80c278 <xprintf+0x298>
    if (d == 's') {
  80c120:	e0bffc07 	ldb	r2,-16(fp)
  80c124:	10801cd8 	cmpnei	r2,r2,115
  80c128:	1000071e 	bne	r2,zero,80c148 <xprintf+0x168>
      xputs(va_arg(arp, char*));
  80c12c:	e0bffe17 	ldw	r2,-8(fp)
  80c130:	10c00104 	addi	r3,r2,4
  80c134:	e0fffe15 	stw	r3,-8(fp)
  80c138:	10800017 	ldw	r2,0(r2)
  80c13c:	1009883a 	mov	r4,r2
  80c140:	080bdc00 	call	80bdc0 <xputs>
      continue;
  80c144:	00004506 	br	80c25c <xprintf+0x27c>
    }
    if (d == 'c') {
  80c148:	e0bffc07 	ldb	r2,-16(fp)
  80c14c:	108018d8 	cmpnei	r2,r2,99
  80c150:	10000a1e 	bne	r2,zero,80c17c <xprintf+0x19c>
      // xputc(va_arg(arp, char));
      xputc(va_arg(arp, int));
  80c154:	e0bffe17 	ldw	r2,-8(fp)
  80c158:	10c00104 	addi	r3,r2,4
  80c15c:	e0fffe15 	stw	r3,-8(fp)
  80c160:	10800017 	ldw	r2,0(r2)
  80c164:	10803fcc 	andi	r2,r2,255
  80c168:	1080201c 	xori	r2,r2,128
  80c16c:	10bfe004 	addi	r2,r2,-128
  80c170:	1009883a 	mov	r4,r2
  80c174:	080bd700 	call	80bd70 <xputc>
      continue;
  80c178:	00003806 	br	80c25c <xprintf+0x27c>
    }
    if (d == 'u') r = 10;
  80c17c:	e0bffc07 	ldb	r2,-16(fp)
  80c180:	10801d58 	cmpnei	r2,r2,117
  80c184:	1000021e 	bne	r2,zero,80c190 <xprintf+0x1b0>
  80c188:	00800284 	movi	r2,10
  80c18c:	e0bffc45 	stb	r2,-15(fp)
    if (d == 'd') r = -10;
  80c190:	e0bffc07 	ldb	r2,-16(fp)
  80c194:	10801918 	cmpnei	r2,r2,100
  80c198:	1000021e 	bne	r2,zero,80c1a4 <xprintf+0x1c4>
  80c19c:	00bffd84 	movi	r2,-10
  80c1a0:	e0bffc45 	stb	r2,-15(fp)
    if (d == 'X') r = 16;
  80c1a4:	e0bffc07 	ldb	r2,-16(fp)
  80c1a8:	10801618 	cmpnei	r2,r2,88
  80c1ac:	1000021e 	bne	r2,zero,80c1b8 <xprintf+0x1d8>
  80c1b0:	00800404 	movi	r2,16
  80c1b4:	e0bffc45 	stb	r2,-15(fp)
    if (d == 'b') r = 2;
  80c1b8:	e0bffc07 	ldb	r2,-16(fp)
  80c1bc:	10801898 	cmpnei	r2,r2,98
  80c1c0:	1000021e 	bne	r2,zero,80c1cc <xprintf+0x1ec>
  80c1c4:	00800084 	movi	r2,2
  80c1c8:	e0bffc45 	stb	r2,-15(fp)
    if (!r) break;
  80c1cc:	e0bffc47 	ldb	r2,-15(fp)
  80c1d0:	1000011e 	bne	r2,zero,80c1d8 <xprintf+0x1f8>
  80c1d4:	00002806 	br	80c278 <xprintf+0x298>
    if (l) {
  80c1d8:	e0bffd07 	ldb	r2,-12(fp)
  80c1dc:	10000a26 	beq	r2,zero,80c208 <xprintf+0x228>
      xitoa((long)va_arg(arp, long), r, w);
  80c1e0:	e0bffe17 	ldw	r2,-8(fp)
  80c1e4:	10c00104 	addi	r3,r2,4
  80c1e8:	e0fffe15 	stw	r3,-8(fp)
  80c1ec:	11000017 	ldw	r4,0(r2)
  80c1f0:	e0fffc47 	ldb	r3,-15(fp)
  80c1f4:	e0bffc87 	ldb	r2,-14(fp)
  80c1f8:	180b883a 	mov	r5,r3
  80c1fc:	100d883a 	mov	r6,r2
  80c200:	080be280 	call	80be28 <xitoa>
  80c204:	00001506 	br	80c25c <xprintf+0x27c>
    } else {
      if (r > 0)
  80c208:	e0bffc47 	ldb	r2,-15(fp)
  80c20c:	00800a0e 	bge	zero,r2,80c238 <xprintf+0x258>
        xitoa((unsigned long)va_arg(arp, int), r, w);
  80c210:	e0bffe17 	ldw	r2,-8(fp)
  80c214:	10c00104 	addi	r3,r2,4
  80c218:	e0fffe15 	stw	r3,-8(fp)
  80c21c:	11000017 	ldw	r4,0(r2)
  80c220:	e0fffc47 	ldb	r3,-15(fp)
  80c224:	e0bffc87 	ldb	r2,-14(fp)
  80c228:	180b883a 	mov	r5,r3
  80c22c:	100d883a 	mov	r6,r2
  80c230:	080be280 	call	80be28 <xitoa>
  80c234:	00000906 	br	80c25c <xprintf+0x27c>
      else
        xitoa((long)va_arg(arp, int), r, w);
  80c238:	e0bffe17 	ldw	r2,-8(fp)
  80c23c:	10c00104 	addi	r3,r2,4
  80c240:	e0fffe15 	stw	r3,-8(fp)
  80c244:	11000017 	ldw	r4,0(r2)
  80c248:	e0fffc47 	ldb	r3,-15(fp)
  80c24c:	e0bffc87 	ldb	r2,-14(fp)
  80c250:	180b883a 	mov	r5,r3
  80c254:	100d883a 	mov	r6,r2
  80c258:	080be280 	call	80be28 <xitoa>
  char d, r, w, s, l;


  va_start(arp, str);

  while ((d = *str++) != 0) {
  80c25c:	e0bfff17 	ldw	r2,-4(fp)
  80c260:	10c00044 	addi	r3,r2,1
  80c264:	e0ffff15 	stw	r3,-4(fp)
  80c268:	10800003 	ldbu	r2,0(r2)
  80c26c:	e0bffc05 	stb	r2,-16(fp)
  80c270:	e0bffc07 	ldb	r2,-16(fp)
  80c274:	103f651e 	bne	r2,zero,80c00c <__alt_data_end+0xff80c00c>
        xitoa((long)va_arg(arp, int), r, w);
    }
  }

  va_end(arp);
}
  80c278:	e037883a 	mov	sp,fp
  80c27c:	dfc00117 	ldw	ra,4(sp)
  80c280:	df000017 	ldw	fp,0(sp)
  80c284:	dec00504 	addi	sp,sp,20
  80c288:	f800283a 	ret

0080c28c <put_dump>:




void put_dump (const unsigned char *buff, unsigned long ofs, int cnt)
{
  80c28c:	defffa04 	addi	sp,sp,-24
  80c290:	dfc00515 	stw	ra,20(sp)
  80c294:	df000415 	stw	fp,16(sp)
  80c298:	df000404 	addi	fp,sp,16
  80c29c:	e13ffd15 	stw	r4,-12(fp)
  80c2a0:	e17ffe15 	stw	r5,-8(fp)
  80c2a4:	e1bfff15 	stw	r6,-4(fp)
  unsigned char n;


  xprintf("%08lX ", ofs);
  80c2a8:	010020b4 	movhi	r4,130
  80c2ac:	212f8804 	addi	r4,r4,-16864
  80c2b0:	e17ffe17 	ldw	r5,-8(fp)
  80c2b4:	080bfe00 	call	80bfe0 <xprintf>
  for(n = 0; n < cnt; n++)
  80c2b8:	e03ffc05 	stb	zero,-16(fp)
  80c2bc:	00000c06 	br	80c2f0 <put_dump+0x64>
    xprintf(" %02X", buff[n]);
  80c2c0:	e0bffc03 	ldbu	r2,-16(fp)
  80c2c4:	e0fffd17 	ldw	r3,-12(fp)
  80c2c8:	1885883a 	add	r2,r3,r2
  80c2cc:	10800003 	ldbu	r2,0(r2)
  80c2d0:	10803fcc 	andi	r2,r2,255
  80c2d4:	010020b4 	movhi	r4,130
  80c2d8:	212f8a04 	addi	r4,r4,-16856
  80c2dc:	100b883a 	mov	r5,r2
  80c2e0:	080bfe00 	call	80bfe0 <xprintf>
{
  unsigned char n;


  xprintf("%08lX ", ofs);
  for(n = 0; n < cnt; n++)
  80c2e4:	e0bffc03 	ldbu	r2,-16(fp)
  80c2e8:	10800044 	addi	r2,r2,1
  80c2ec:	e0bffc05 	stb	r2,-16(fp)
  80c2f0:	e0fffc03 	ldbu	r3,-16(fp)
  80c2f4:	e0bfff17 	ldw	r2,-4(fp)
  80c2f8:	18bff116 	blt	r3,r2,80c2c0 <__alt_data_end+0xff80c2c0>
    xprintf(" %02X", buff[n]);
  xputc(' ');
  80c2fc:	01000804 	movi	r4,32
  80c300:	080bd700 	call	80bd70 <xputc>
  for(n = 0; n < cnt; n++) {
  80c304:	e03ffc05 	stb	zero,-16(fp)
  80c308:	00001d06 	br	80c380 <put_dump+0xf4>
    if ((buff[n] < 0x20)||(buff[n] >= 0x7F))
  80c30c:	e0bffc03 	ldbu	r2,-16(fp)
  80c310:	e0fffd17 	ldw	r3,-12(fp)
  80c314:	1885883a 	add	r2,r3,r2
  80c318:	10800003 	ldbu	r2,0(r2)
  80c31c:	10803fcc 	andi	r2,r2,255
  80c320:	10800830 	cmpltui	r2,r2,32
  80c324:	1000071e 	bne	r2,zero,80c344 <put_dump+0xb8>
  80c328:	e0bffc03 	ldbu	r2,-16(fp)
  80c32c:	e0fffd17 	ldw	r3,-12(fp)
  80c330:	1885883a 	add	r2,r3,r2
  80c334:	10800003 	ldbu	r2,0(r2)
  80c338:	10803fcc 	andi	r2,r2,255
  80c33c:	10801ff0 	cmpltui	r2,r2,127
  80c340:	1000031e 	bne	r2,zero,80c350 <put_dump+0xc4>
      xputc('.');
  80c344:	01000b84 	movi	r4,46
  80c348:	080bd700 	call	80bd70 <xputc>
  80c34c:	00000906 	br	80c374 <put_dump+0xe8>
    else
      xputc(buff[n]);
  80c350:	e0bffc03 	ldbu	r2,-16(fp)
  80c354:	e0fffd17 	ldw	r3,-12(fp)
  80c358:	1885883a 	add	r2,r3,r2
  80c35c:	10800003 	ldbu	r2,0(r2)
  80c360:	10803fcc 	andi	r2,r2,255
  80c364:	1080201c 	xori	r2,r2,128
  80c368:	10bfe004 	addi	r2,r2,-128
  80c36c:	1009883a 	mov	r4,r2
  80c370:	080bd700 	call	80bd70 <xputc>

  xprintf("%08lX ", ofs);
  for(n = 0; n < cnt; n++)
    xprintf(" %02X", buff[n]);
  xputc(' ');
  for(n = 0; n < cnt; n++) {
  80c374:	e0bffc03 	ldbu	r2,-16(fp)
  80c378:	10800044 	addi	r2,r2,1
  80c37c:	e0bffc05 	stb	r2,-16(fp)
  80c380:	e0fffc03 	ldbu	r3,-16(fp)
  80c384:	e0bfff17 	ldw	r2,-4(fp)
  80c388:	18bfe016 	blt	r3,r2,80c30c <__alt_data_end+0xff80c30c>
    if ((buff[n] < 0x20)||(buff[n] >= 0x7F))
      xputc('.');
    else
      xputc(buff[n]);
  }
  xputc('\n');
  80c38c:	01000284 	movi	r4,10
  80c390:	080bd700 	call	80bd70 <xputc>
}
  80c394:	e037883a 	mov	sp,fp
  80c398:	dfc00117 	ldw	ra,4(sp)
  80c39c:	df000017 	ldw	fp,0(sp)
  80c3a0:	dec00204 	addi	sp,sp,8
  80c3a4:	f800283a 	ret

0080c3a8 <get_line>:




void get_line (char *buff, int len)
{
  80c3a8:	defffa04 	addi	sp,sp,-24
  80c3ac:	dfc00515 	stw	ra,20(sp)
  80c3b0:	df000415 	stw	fp,16(sp)
  80c3b4:	df000404 	addi	fp,sp,16
  80c3b8:	e13ffe15 	stw	r4,-8(fp)
  80c3bc:	e17fff15 	stw	r5,-4(fp)
  char c;
  int idx = 0;
  80c3c0:	e03ffc15 	stw	zero,-16(fp)
//while(1);

  for (;;) {
    c = xgetc();
  80c3c4:	080c4bc0 	call	80c4bc <uart0_get>
  80c3c8:	e0bffd05 	stb	r2,-12(fp)
    //printf("%c",c);
    if (c == '\r')
  80c3cc:	e0bffd07 	ldb	r2,-12(fp)
  80c3d0:	10800358 	cmpnei	r2,r2,13
  80c3d4:	1000011e 	bne	r2,zero,80c3dc <get_line+0x34>
    	break;
  80c3d8:	00001906 	br	80c440 <get_line+0x98>
    if ((c == '\b') && idx) {
  80c3dc:	e0bffd07 	ldb	r2,-12(fp)
  80c3e0:	10800218 	cmpnei	r2,r2,8
  80c3e4:	1000051e 	bne	r2,zero,80c3fc <get_line+0x54>
  80c3e8:	e0bffc17 	ldw	r2,-16(fp)
  80c3ec:	10000326 	beq	r2,zero,80c3fc <get_line+0x54>
      idx--;
  80c3f0:	e0bffc17 	ldw	r2,-16(fp)
  80c3f4:	10bfffc4 	addi	r2,r2,-1
  80c3f8:	e0bffc15 	stw	r2,-16(fp)
    }
    if (((unsigned char)c >= ' ') && (idx < len - 1)) {
  80c3fc:	e0bffd03 	ldbu	r2,-12(fp)
  80c400:	10803fcc 	andi	r2,r2,255
  80c404:	10800830 	cmpltui	r2,r2,32
  80c408:	10000c1e 	bne	r2,zero,80c43c <get_line+0x94>
  80c40c:	e0bfff17 	ldw	r2,-4(fp)
  80c410:	10bfffc4 	addi	r2,r2,-1
  80c414:	e0fffc17 	ldw	r3,-16(fp)
  80c418:	1880080e 	bge	r3,r2,80c43c <get_line+0x94>
    	//printf(" space ");
        buff[idx++] = c;
  80c41c:	e0bffc17 	ldw	r2,-16(fp)
  80c420:	10c00044 	addi	r3,r2,1
  80c424:	e0fffc15 	stw	r3,-16(fp)
  80c428:	1007883a 	mov	r3,r2
  80c42c:	e0bffe17 	ldw	r2,-8(fp)
  80c430:	10c5883a 	add	r2,r2,r3
  80c434:	e0fffd03 	ldbu	r3,-12(fp)
  80c438:	10c00005 	stb	r3,0(r2)
    }

  }
  80c43c:	003fe106 	br	80c3c4 <__alt_data_end+0xff80c3c4>
  buff[idx] = 0;
  80c440:	e0bffc17 	ldw	r2,-16(fp)
  80c444:	e0fffe17 	ldw	r3,-8(fp)
  80c448:	1885883a 	add	r2,r3,r2
  80c44c:	10000005 	stb	zero,0(r2)
  //xputc('\n');
}
  80c450:	e037883a 	mov	sp,fp
  80c454:	dfc00117 	ldw	ra,4(sp)
  80c458:	df000017 	ldw	fp,0(sp)
  80c45c:	dec00204 	addi	sp,sp,8
  80c460:	f800283a 	ret

0080c464 <uart0_init>:
/*  In    : Baudrate                                                       */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void uart0_init (unsigned long Baudrate)
{
  80c464:	defffe04 	addi	sp,sp,-8
  80c468:	df000115 	stw	fp,4(sp)
  80c46c:	df000104 	addi	fp,sp,4
  80c470:	e13fff15 	stw	r4,-4(fp)
//   /*
//    * Set baudrate
//    */
//   Divisor = (((UART_FREQ*10) / Baudrate) + 5) / 10;
//   IOWR_ALTERA_AVALON_UART_DIVISOR(UART_BASE, Divisor);
} /* uart0_init */
  80c474:	e037883a 	mov	sp,fp
  80c478:	df000017 	ldw	fp,0(sp)
  80c47c:	dec00104 	addi	sp,sp,4
  80c480:	f800283a 	ret

0080c484 <uart0_put>:
/*  In    : Data                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void uart0_put (unsigned char ch)
{
  80c484:	defffd04 	addi	sp,sp,-12
  80c488:	dfc00215 	stw	ra,8(sp)
  80c48c:	df000115 	stw	fp,4(sp)
  80c490:	df000104 	addi	fp,sp,4
  80c494:	2005883a 	mov	r2,r4
  80c498:	e0bfff05 	stb	r2,-4(fp)
//   {
//      status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
//   }
//   IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, ch);

		printf("%c",ch);
  80c49c:	e0bfff03 	ldbu	r2,-4(fp)
  80c4a0:	1009883a 	mov	r4,r2
  80c4a4:	080d9980 	call	80d998 <putchar>



} /* uart0_put */
  80c4a8:	e037883a 	mov	sp,fp
  80c4ac:	dfc00117 	ldw	ra,4(sp)
  80c4b0:	df000017 	ldw	fp,0(sp)
  80c4b4:	dec00204 	addi	sp,sp,8
  80c4b8:	f800283a 	ret

0080c4bc <uart0_get>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
unsigned char uart0_get (void)
{
  80c4bc:	defffd04 	addi	sp,sp,-12
  80c4c0:	dfc00215 	stw	ra,8(sp)
  80c4c4:	df000115 	stw	fp,4(sp)
  80c4c8:	df000104 	addi	fp,sp,4
//   //printf("%d",(char) data & 0xFF);
//
//      return ((char) data & 0xFF);


   ch = getc(stdin);
  80c4cc:	008020b4 	movhi	r2,130
  80c4d0:	10b83f04 	addi	r2,r2,-7940
  80c4d4:	10800017 	ldw	r2,0(r2)
  80c4d8:	10800117 	ldw	r2,4(r2)
  80c4dc:	1009883a 	mov	r4,r2
  80c4e0:	080ccf00 	call	80ccf0 <getc>
  80c4e4:	e0bfff05 	stb	r2,-4(fp)
   if (ch == 10) ch = 13;
  80c4e8:	e0bfff07 	ldb	r2,-4(fp)
  80c4ec:	10800298 	cmpnei	r2,r2,10
  80c4f0:	1000021e 	bne	r2,zero,80c4fc <uart0_get+0x40>
  80c4f4:	00800344 	movi	r2,13
  80c4f8:	e0bfff05 	stb	r2,-4(fp)

   return(ch);
  80c4fc:	e0bfff03 	ldbu	r2,-4(fp)

} /* uart0_get */
  80c500:	e037883a 	mov	sp,fp
  80c504:	dfc00117 	ldw	ra,4(sp)
  80c508:	df000017 	ldw	fp,0(sp)
  80c50c:	dec00204 	addi	sp,sp,8
  80c510:	f800283a 	ret

0080c514 <udivmodsi4>:
  80c514:	2900182e 	bgeu	r5,r4,80c578 <udivmodsi4+0x64>
  80c518:	28001716 	blt	r5,zero,80c578 <udivmodsi4+0x64>
  80c51c:	00800804 	movi	r2,32
  80c520:	00c00044 	movi	r3,1
  80c524:	00000206 	br	80c530 <udivmodsi4+0x1c>
  80c528:	10001126 	beq	r2,zero,80c570 <udivmodsi4+0x5c>
  80c52c:	28000516 	blt	r5,zero,80c544 <udivmodsi4+0x30>
  80c530:	294b883a 	add	r5,r5,r5
  80c534:	10bfffc4 	addi	r2,r2,-1
  80c538:	18c7883a 	add	r3,r3,r3
  80c53c:	293ffa36 	bltu	r5,r4,80c528 <__alt_data_end+0xff80c528>
  80c540:	18000b26 	beq	r3,zero,80c570 <udivmodsi4+0x5c>
  80c544:	0005883a 	mov	r2,zero
  80c548:	21400236 	bltu	r4,r5,80c554 <udivmodsi4+0x40>
  80c54c:	2149c83a 	sub	r4,r4,r5
  80c550:	10c4b03a 	or	r2,r2,r3
  80c554:	1806d07a 	srli	r3,r3,1
  80c558:	280ad07a 	srli	r5,r5,1
  80c55c:	183ffa1e 	bne	r3,zero,80c548 <__alt_data_end+0xff80c548>
  80c560:	3000011e 	bne	r6,zero,80c568 <udivmodsi4+0x54>
  80c564:	f800283a 	ret
  80c568:	2005883a 	mov	r2,r4
  80c56c:	f800283a 	ret
  80c570:	0005883a 	mov	r2,zero
  80c574:	003ffa06 	br	80c560 <__alt_data_end+0xff80c560>
  80c578:	00c00044 	movi	r3,1
  80c57c:	003ff106 	br	80c544 <__alt_data_end+0xff80c544>

0080c580 <__divsi3>:
  80c580:	defffe04 	addi	sp,sp,-8
  80c584:	dfc00115 	stw	ra,4(sp)
  80c588:	dc000015 	stw	r16,0(sp)
  80c58c:	20000b16 	blt	r4,zero,80c5bc <__divsi3+0x3c>
  80c590:	0021883a 	mov	r16,zero
  80c594:	28000c16 	blt	r5,zero,80c5c8 <__divsi3+0x48>
  80c598:	000d883a 	mov	r6,zero
  80c59c:	080c5140 	call	80c514 <udivmodsi4>
  80c5a0:	0407c83a 	sub	r3,zero,r16
  80c5a4:	1884f03a 	xor	r2,r3,r2
  80c5a8:	1405883a 	add	r2,r2,r16
  80c5ac:	dfc00117 	ldw	ra,4(sp)
  80c5b0:	dc000017 	ldw	r16,0(sp)
  80c5b4:	dec00204 	addi	sp,sp,8
  80c5b8:	f800283a 	ret
  80c5bc:	0109c83a 	sub	r4,zero,r4
  80c5c0:	04000044 	movi	r16,1
  80c5c4:	283ff40e 	bge	r5,zero,80c598 <__alt_data_end+0xff80c598>
  80c5c8:	014bc83a 	sub	r5,zero,r5
  80c5cc:	8400005c 	xori	r16,r16,1
  80c5d0:	003ff106 	br	80c598 <__alt_data_end+0xff80c598>

0080c5d4 <__modsi3>:
  80c5d4:	defffd04 	addi	sp,sp,-12
  80c5d8:	dfc00215 	stw	ra,8(sp)
  80c5dc:	dc400115 	stw	r17,4(sp)
  80c5e0:	dc000015 	stw	r16,0(sp)
  80c5e4:	20000c16 	blt	r4,zero,80c618 <__modsi3+0x44>
  80c5e8:	0023883a 	mov	r17,zero
  80c5ec:	0021883a 	mov	r16,zero
  80c5f0:	28000d16 	blt	r5,zero,80c628 <__modsi3+0x54>
  80c5f4:	01800044 	movi	r6,1
  80c5f8:	080c5140 	call	80c514 <udivmodsi4>
  80c5fc:	1404f03a 	xor	r2,r2,r16
  80c600:	8885883a 	add	r2,r17,r2
  80c604:	dfc00217 	ldw	ra,8(sp)
  80c608:	dc400117 	ldw	r17,4(sp)
  80c60c:	dc000017 	ldw	r16,0(sp)
  80c610:	dec00304 	addi	sp,sp,12
  80c614:	f800283a 	ret
  80c618:	0109c83a 	sub	r4,zero,r4
  80c61c:	04400044 	movi	r17,1
  80c620:	043fffc4 	movi	r16,-1
  80c624:	283ff30e 	bge	r5,zero,80c5f4 <__alt_data_end+0xff80c5f4>
  80c628:	014bc83a 	sub	r5,zero,r5
  80c62c:	003ff106 	br	80c5f4 <__alt_data_end+0xff80c5f4>

0080c630 <__udivsi3>:
  80c630:	000d883a 	mov	r6,zero
  80c634:	080c5141 	jmpi	80c514 <udivmodsi4>

0080c638 <__umodsi3>:
  80c638:	01800044 	movi	r6,1
  80c63c:	080c5141 	jmpi	80c514 <udivmodsi4>

0080c640 <_fopen_r>:
  80c640:	defffa04 	addi	sp,sp,-24
  80c644:	dcc00415 	stw	r19,16(sp)
  80c648:	2827883a 	mov	r19,r5
  80c64c:	300b883a 	mov	r5,r6
  80c650:	d80d883a 	mov	r6,sp
  80c654:	dc800315 	stw	r18,12(sp)
  80c658:	dc400215 	stw	r17,8(sp)
  80c65c:	dfc00515 	stw	ra,20(sp)
  80c660:	dc000115 	stw	r16,4(sp)
  80c664:	2025883a 	mov	r18,r4
  80c668:	0812b580 	call	812b58 <__sflags>
  80c66c:	1023883a 	mov	r17,r2
  80c670:	10002626 	beq	r2,zero,80c70c <_fopen_r+0xcc>
  80c674:	9009883a 	mov	r4,r18
  80c678:	08129d80 	call	8129d8 <__sfp>
  80c67c:	1021883a 	mov	r16,r2
  80c680:	10002226 	beq	r2,zero,80c70c <_fopen_r+0xcc>
  80c684:	d9800017 	ldw	r6,0(sp)
  80c688:	9009883a 	mov	r4,r18
  80c68c:	980b883a 	mov	r5,r19
  80c690:	01c06d84 	movi	r7,438
  80c694:	080d9340 	call	80d934 <_open_r>
  80c698:	10001916 	blt	r2,zero,80c700 <_fopen_r+0xc0>
  80c69c:	8080038d 	sth	r2,14(r16)
  80c6a0:	00802074 	movhi	r2,129
  80c6a4:	10b71f04 	addi	r2,r2,-9092
  80c6a8:	80800815 	stw	r2,32(r16)
  80c6ac:	00802074 	movhi	r2,129
  80c6b0:	10b73604 	addi	r2,r2,-9000
  80c6b4:	80800915 	stw	r2,36(r16)
  80c6b8:	00802074 	movhi	r2,129
  80c6bc:	10b75504 	addi	r2,r2,-8876
  80c6c0:	80800a15 	stw	r2,40(r16)
  80c6c4:	00802074 	movhi	r2,129
  80c6c8:	10b76c04 	addi	r2,r2,-8784
  80c6cc:	8440030d 	sth	r17,12(r16)
  80c6d0:	84000715 	stw	r16,28(r16)
  80c6d4:	80800b15 	stw	r2,44(r16)
  80c6d8:	8c40400c 	andi	r17,r17,256
  80c6dc:	88000d1e 	bne	r17,zero,80c714 <_fopen_r+0xd4>
  80c6e0:	8005883a 	mov	r2,r16
  80c6e4:	dfc00517 	ldw	ra,20(sp)
  80c6e8:	dcc00417 	ldw	r19,16(sp)
  80c6ec:	dc800317 	ldw	r18,12(sp)
  80c6f0:	dc400217 	ldw	r17,8(sp)
  80c6f4:	dc000117 	ldw	r16,4(sp)
  80c6f8:	dec00604 	addi	sp,sp,24
  80c6fc:	f800283a 	ret
  80c700:	0812b180 	call	812b18 <__sfp_lock_acquire>
  80c704:	8000030d 	sth	zero,12(r16)
  80c708:	0812b1c0 	call	812b1c <__sfp_lock_release>
  80c70c:	0005883a 	mov	r2,zero
  80c710:	003ff406 	br	80c6e4 <__alt_data_end+0xff80c6e4>
  80c714:	9009883a 	mov	r4,r18
  80c718:	800b883a 	mov	r5,r16
  80c71c:	000d883a 	mov	r6,zero
  80c720:	01c00084 	movi	r7,2
  80c724:	080c7980 	call	80c798 <_fseek_r>
  80c728:	8005883a 	mov	r2,r16
  80c72c:	003fed06 	br	80c6e4 <__alt_data_end+0xff80c6e4>

0080c730 <fopen>:
  80c730:	00c020b4 	movhi	r3,130
  80c734:	18f83f04 	addi	r3,r3,-7940
  80c738:	2005883a 	mov	r2,r4
  80c73c:	19000017 	ldw	r4,0(r3)
  80c740:	280d883a 	mov	r6,r5
  80c744:	100b883a 	mov	r5,r2
  80c748:	080c6401 	jmpi	80c640 <_fopen_r>

0080c74c <_fprintf_r>:
  80c74c:	defffe04 	addi	sp,sp,-8
  80c750:	2809883a 	mov	r4,r5
  80c754:	dfc00015 	stw	ra,0(sp)
  80c758:	d9c00115 	stw	r7,4(sp)
  80c75c:	300b883a 	mov	r5,r6
  80c760:	d9800104 	addi	r6,sp,4
  80c764:	08109180 	call	810918 <__vfprintf_internal>
  80c768:	dfc00017 	ldw	ra,0(sp)
  80c76c:	dec00204 	addi	sp,sp,8
  80c770:	f800283a 	ret

0080c774 <fprintf>:
  80c774:	defffd04 	addi	sp,sp,-12
  80c778:	dfc00015 	stw	ra,0(sp)
  80c77c:	d9800115 	stw	r6,4(sp)
  80c780:	d9c00215 	stw	r7,8(sp)
  80c784:	d9800104 	addi	r6,sp,4
  80c788:	08109180 	call	810918 <__vfprintf_internal>
  80c78c:	dfc00017 	ldw	ra,0(sp)
  80c790:	dec00304 	addi	sp,sp,12
  80c794:	f800283a 	ret

0080c798 <_fseek_r>:
  80c798:	080c7c01 	jmpi	80c7c0 <_fseeko_r>

0080c79c <fseek>:
  80c79c:	2007883a 	mov	r3,r4
  80c7a0:	010020b4 	movhi	r4,130
  80c7a4:	21383f04 	addi	r4,r4,-7940
  80c7a8:	21000017 	ldw	r4,0(r4)
  80c7ac:	2805883a 	mov	r2,r5
  80c7b0:	300f883a 	mov	r7,r6
  80c7b4:	180b883a 	mov	r5,r3
  80c7b8:	100d883a 	mov	r6,r2
  80c7bc:	080c7c01 	jmpi	80c7c0 <_fseeko_r>

0080c7c0 <_fseeko_r>:
  80c7c0:	deffe804 	addi	sp,sp,-96
  80c7c4:	dd401415 	stw	r21,80(sp)
  80c7c8:	dc801115 	stw	r18,68(sp)
  80c7cc:	dc401015 	stw	r17,64(sp)
  80c7d0:	dc000f15 	stw	r16,60(sp)
  80c7d4:	dfc01715 	stw	ra,92(sp)
  80c7d8:	ddc01615 	stw	r23,88(sp)
  80c7dc:	dd801515 	stw	r22,84(sp)
  80c7e0:	dd001315 	stw	r20,76(sp)
  80c7e4:	dcc01215 	stw	r19,72(sp)
  80c7e8:	2023883a 	mov	r17,r4
  80c7ec:	2821883a 	mov	r16,r5
  80c7f0:	302b883a 	mov	r21,r6
  80c7f4:	3825883a 	mov	r18,r7
  80c7f8:	20000226 	beq	r4,zero,80c804 <_fseeko_r+0x44>
  80c7fc:	20800e17 	ldw	r2,56(r4)
  80c800:	10005a26 	beq	r2,zero,80c96c <_fseeko_r+0x1ac>
  80c804:	8080030b 	ldhu	r2,12(r16)
  80c808:	00c04204 	movi	r3,264
  80c80c:	1080420c 	andi	r2,r2,264
  80c810:	10c05b26 	beq	r2,r3,80c980 <_fseeko_r+0x1c0>
  80c814:	85000a17 	ldw	r20,40(r16)
  80c818:	a000f626 	beq	r20,zero,80cbf4 <_fseeko_r+0x434>
  80c81c:	00800044 	movi	r2,1
  80c820:	90803e26 	beq	r18,r2,80c91c <_fseeko_r+0x15c>
  80c824:	00800084 	movi	r2,2
  80c828:	90801026 	beq	r18,r2,80c86c <_fseeko_r+0xac>
  80c82c:	90000f26 	beq	r18,zero,80c86c <_fseeko_r+0xac>
  80c830:	00800584 	movi	r2,22
  80c834:	88800015 	stw	r2,0(r17)
  80c838:	04ffffc4 	movi	r19,-1
  80c83c:	9805883a 	mov	r2,r19
  80c840:	dfc01717 	ldw	ra,92(sp)
  80c844:	ddc01617 	ldw	r23,88(sp)
  80c848:	dd801517 	ldw	r22,84(sp)
  80c84c:	dd401417 	ldw	r21,80(sp)
  80c850:	dd001317 	ldw	r20,76(sp)
  80c854:	dcc01217 	ldw	r19,72(sp)
  80c858:	dc801117 	ldw	r18,68(sp)
  80c85c:	dc401017 	ldw	r17,64(sp)
  80c860:	dc000f17 	ldw	r16,60(sp)
  80c864:	dec01804 	addi	sp,sp,96
  80c868:	f800283a 	ret
  80c86c:	80800417 	ldw	r2,16(r16)
  80c870:	002f883a 	mov	r23,zero
  80c874:	0027883a 	mov	r19,zero
  80c878:	1000cb26 	beq	r2,zero,80cba8 <_fseeko_r+0x3e8>
  80c87c:	8080030b 	ldhu	r2,12(r16)
  80c880:	10c2068c 	andi	r3,r2,2074
  80c884:	1800071e 	bne	r3,zero,80c8a4 <_fseeko_r+0xe4>
  80c888:	10c1000c 	andi	r3,r2,1024
  80c88c:	1800451e 	bne	r3,zero,80c9a4 <_fseeko_r+0x1e4>
  80c890:	00c02074 	movhi	r3,129
  80c894:	18f75504 	addi	r3,r3,-8876
  80c898:	a0c0b726 	beq	r20,r3,80cb78 <_fseeko_r+0x3b8>
  80c89c:	10820014 	ori	r2,r2,2048
  80c8a0:	8080030d 	sth	r2,12(r16)
  80c8a4:	8809883a 	mov	r4,r17
  80c8a8:	800b883a 	mov	r5,r16
  80c8ac:	081272c0 	call	81272c <_fflush_r>
  80c8b0:	1027883a 	mov	r19,r2
  80c8b4:	103fe01e 	bne	r2,zero,80c838 <__alt_data_end+0xff80c838>
  80c8b8:	81400717 	ldw	r5,28(r16)
  80c8bc:	8809883a 	mov	r4,r17
  80c8c0:	a80d883a 	mov	r6,r21
  80c8c4:	900f883a 	mov	r7,r18
  80c8c8:	a03ee83a 	callr	r20
  80c8cc:	00ffffc4 	movi	r3,-1
  80c8d0:	10ffd926 	beq	r2,r3,80c838 <__alt_data_end+0xff80c838>
  80c8d4:	81400c17 	ldw	r5,48(r16)
  80c8d8:	28000526 	beq	r5,zero,80c8f0 <_fseeko_r+0x130>
  80c8dc:	80801004 	addi	r2,r16,64
  80c8e0:	28800226 	beq	r5,r2,80c8ec <_fseeko_r+0x12c>
  80c8e4:	8809883a 	mov	r4,r17
  80c8e8:	0812d280 	call	812d28 <_free_r>
  80c8ec:	80000c15 	stw	zero,48(r16)
  80c8f0:	8080030b 	ldhu	r2,12(r16)
  80c8f4:	80c00417 	ldw	r3,16(r16)
  80c8f8:	80000115 	stw	zero,4(r16)
  80c8fc:	10bdf7cc 	andi	r2,r2,63455
  80c900:	80c00015 	stw	r3,0(r16)
  80c904:	8080030d 	sth	r2,12(r16)
  80c908:	81001704 	addi	r4,r16,92
  80c90c:	000b883a 	mov	r5,zero
  80c910:	01800204 	movi	r6,8
  80c914:	080d8100 	call	80d810 <memset>
  80c918:	003fc806 	br	80c83c <__alt_data_end+0xff80c83c>
  80c91c:	8809883a 	mov	r4,r17
  80c920:	800b883a 	mov	r5,r16
  80c924:	081272c0 	call	81272c <_fflush_r>
  80c928:	8080030b 	ldhu	r2,12(r16)
  80c92c:	10c4000c 	andi	r3,r2,4096
  80c930:	18008726 	beq	r3,zero,80cb50 <_fseeko_r+0x390>
  80c934:	84c01417 	ldw	r19,80(r16)
  80c938:	10c0010c 	andi	r3,r2,4
  80c93c:	1800431e 	bne	r3,zero,80ca4c <_fseeko_r+0x28c>
  80c940:	1080020c 	andi	r2,r2,8
  80c944:	10008026 	beq	r2,zero,80cb48 <_fseeko_r+0x388>
  80c948:	80c00017 	ldw	r3,0(r16)
  80c94c:	80800417 	ldw	r2,16(r16)
  80c950:	18000226 	beq	r3,zero,80c95c <_fseeko_r+0x19c>
  80c954:	1887c83a 	sub	r3,r3,r2
  80c958:	98e7883a 	add	r19,r19,r3
  80c95c:	aceb883a 	add	r21,r21,r19
  80c960:	05c00044 	movi	r23,1
  80c964:	0025883a 	mov	r18,zero
  80c968:	003fc306 	br	80c878 <__alt_data_end+0xff80c878>
  80c96c:	0812b080 	call	812b08 <__sinit>
  80c970:	8080030b 	ldhu	r2,12(r16)
  80c974:	00c04204 	movi	r3,264
  80c978:	1080420c 	andi	r2,r2,264
  80c97c:	10ffa51e 	bne	r2,r3,80c814 <__alt_data_end+0xff80c814>
  80c980:	8809883a 	mov	r4,r17
  80c984:	800b883a 	mov	r5,r16
  80c988:	081272c0 	call	81272c <_fflush_r>
  80c98c:	003fa106 	br	80c814 <__alt_data_end+0xff80c814>
  80c990:	8080030b 	ldhu	r2,12(r16)
  80c994:	00c10004 	movi	r3,1024
  80c998:	80c01315 	stw	r3,76(r16)
  80c99c:	10c4b03a 	or	r2,r2,r3
  80c9a0:	8080030d 	sth	r2,12(r16)
  80c9a4:	9000311e 	bne	r18,zero,80ca6c <_fseeko_r+0x2ac>
  80c9a8:	a82d883a 	mov	r22,r21
  80c9ac:	b800371e 	bne	r23,zero,80ca8c <_fseeko_r+0x2cc>
  80c9b0:	8080030b 	ldhu	r2,12(r16)
  80c9b4:	1084000c 	andi	r2,r2,4096
  80c9b8:	10007f26 	beq	r2,zero,80cbb8 <_fseeko_r+0x3f8>
  80c9bc:	80801417 	ldw	r2,80(r16)
  80c9c0:	81800117 	ldw	r6,4(r16)
  80c9c4:	81400c17 	ldw	r5,48(r16)
  80c9c8:	11a7c83a 	sub	r19,r2,r6
  80c9cc:	28008226 	beq	r5,zero,80cbd8 <_fseeko_r+0x418>
  80c9d0:	81c00f17 	ldw	r7,60(r16)
  80c9d4:	99e7c83a 	sub	r19,r19,r7
  80c9d8:	81000e17 	ldw	r4,56(r16)
  80c9dc:	80800417 	ldw	r2,16(r16)
  80c9e0:	99a7883a 	add	r19,r19,r6
  80c9e4:	2087c83a 	sub	r3,r4,r2
  80c9e8:	98e7c83a 	sub	r19,r19,r3
  80c9ec:	38c7883a 	add	r3,r7,r3
  80c9f0:	b4c02b16 	blt	r22,r19,80caa0 <_fseeko_r+0x2e0>
  80c9f4:	98c9883a 	add	r4,r19,r3
  80c9f8:	b100292e 	bgeu	r22,r4,80caa0 <_fseeko_r+0x2e0>
  80c9fc:	b4e7c83a 	sub	r19,r22,r19
  80ca00:	14c5883a 	add	r2,r2,r19
  80ca04:	1ce7c83a 	sub	r19,r3,r19
  80ca08:	80800015 	stw	r2,0(r16)
  80ca0c:	84c00115 	stw	r19,4(r16)
  80ca10:	28000526 	beq	r5,zero,80ca28 <_fseeko_r+0x268>
  80ca14:	80801004 	addi	r2,r16,64
  80ca18:	28800226 	beq	r5,r2,80ca24 <_fseeko_r+0x264>
  80ca1c:	8809883a 	mov	r4,r17
  80ca20:	0812d280 	call	812d28 <_free_r>
  80ca24:	80000c15 	stw	zero,48(r16)
  80ca28:	8080030b 	ldhu	r2,12(r16)
  80ca2c:	81001704 	addi	r4,r16,92
  80ca30:	000b883a 	mov	r5,zero
  80ca34:	10bff7cc 	andi	r2,r2,65503
  80ca38:	8080030d 	sth	r2,12(r16)
  80ca3c:	01800204 	movi	r6,8
  80ca40:	080d8100 	call	80d810 <memset>
  80ca44:	0027883a 	mov	r19,zero
  80ca48:	003f7c06 	br	80c83c <__alt_data_end+0xff80c83c>
  80ca4c:	80c00117 	ldw	r3,4(r16)
  80ca50:	80800c17 	ldw	r2,48(r16)
  80ca54:	98e7c83a 	sub	r19,r19,r3
  80ca58:	10003b26 	beq	r2,zero,80cb48 <_fseeko_r+0x388>
  80ca5c:	80c00f17 	ldw	r3,60(r16)
  80ca60:	80800417 	ldw	r2,16(r16)
  80ca64:	98e7c83a 	sub	r19,r19,r3
  80ca68:	003fbc06 	br	80c95c <__alt_data_end+0xff80c95c>
  80ca6c:	8140038f 	ldh	r5,14(r16)
  80ca70:	8809883a 	mov	r4,r17
  80ca74:	d80d883a 	mov	r6,sp
  80ca78:	080cc280 	call	80cc28 <_fstat_r>
  80ca7c:	103f891e 	bne	r2,zero,80c8a4 <__alt_data_end+0xff80c8a4>
  80ca80:	dd800417 	ldw	r22,16(sp)
  80ca84:	adad883a 	add	r22,r21,r22
  80ca88:	b83fc926 	beq	r23,zero,80c9b0 <__alt_data_end+0xff80c9b0>
  80ca8c:	81400c17 	ldw	r5,48(r16)
  80ca90:	81800117 	ldw	r6,4(r16)
  80ca94:	28005026 	beq	r5,zero,80cbd8 <_fseeko_r+0x418>
  80ca98:	81c00f17 	ldw	r7,60(r16)
  80ca9c:	003fce06 	br	80c9d8 <__alt_data_end+0xff80c9d8>
  80caa0:	84c01317 	ldw	r19,76(r16)
  80caa4:	81400717 	ldw	r5,28(r16)
  80caa8:	8809883a 	mov	r4,r17
  80caac:	04e7c83a 	sub	r19,zero,r19
  80cab0:	b4e6703a 	and	r19,r22,r19
  80cab4:	980d883a 	mov	r6,r19
  80cab8:	000f883a 	mov	r7,zero
  80cabc:	a03ee83a 	callr	r20
  80cac0:	00ffffc4 	movi	r3,-1
  80cac4:	10ff7726 	beq	r2,r3,80c8a4 <__alt_data_end+0xff80c8a4>
  80cac8:	80800417 	ldw	r2,16(r16)
  80cacc:	81400c17 	ldw	r5,48(r16)
  80cad0:	80000115 	stw	zero,4(r16)
  80cad4:	80800015 	stw	r2,0(r16)
  80cad8:	28000526 	beq	r5,zero,80caf0 <_fseeko_r+0x330>
  80cadc:	80801004 	addi	r2,r16,64
  80cae0:	28800226 	beq	r5,r2,80caec <_fseeko_r+0x32c>
  80cae4:	8809883a 	mov	r4,r17
  80cae8:	0812d280 	call	812d28 <_free_r>
  80caec:	80000c15 	stw	zero,48(r16)
  80caf0:	8080030b 	ldhu	r2,12(r16)
  80caf4:	b4e7c83a 	sub	r19,r22,r19
  80caf8:	10bff7cc 	andi	r2,r2,65503
  80cafc:	8080030d 	sth	r2,12(r16)
  80cb00:	98000b26 	beq	r19,zero,80cb30 <_fseeko_r+0x370>
  80cb04:	8809883a 	mov	r4,r17
  80cb08:	800b883a 	mov	r5,r16
  80cb0c:	080d9cc0 	call	80d9cc <__srefill_r>
  80cb10:	103f641e 	bne	r2,zero,80c8a4 <__alt_data_end+0xff80c8a4>
  80cb14:	80800117 	ldw	r2,4(r16)
  80cb18:	14ff6236 	bltu	r2,r19,80c8a4 <__alt_data_end+0xff80c8a4>
  80cb1c:	80c00017 	ldw	r3,0(r16)
  80cb20:	14c5c83a 	sub	r2,r2,r19
  80cb24:	80800115 	stw	r2,4(r16)
  80cb28:	1ce7883a 	add	r19,r3,r19
  80cb2c:	84c00015 	stw	r19,0(r16)
  80cb30:	81001704 	addi	r4,r16,92
  80cb34:	000b883a 	mov	r5,zero
  80cb38:	01800204 	movi	r6,8
  80cb3c:	080d8100 	call	80d810 <memset>
  80cb40:	0027883a 	mov	r19,zero
  80cb44:	003f3d06 	br	80c83c <__alt_data_end+0xff80c83c>
  80cb48:	80800417 	ldw	r2,16(r16)
  80cb4c:	003f8306 	br	80c95c <__alt_data_end+0xff80c95c>
  80cb50:	81400717 	ldw	r5,28(r16)
  80cb54:	8809883a 	mov	r4,r17
  80cb58:	000d883a 	mov	r6,zero
  80cb5c:	900f883a 	mov	r7,r18
  80cb60:	a03ee83a 	callr	r20
  80cb64:	1027883a 	mov	r19,r2
  80cb68:	00bfffc4 	movi	r2,-1
  80cb6c:	98bf3226 	beq	r19,r2,80c838 <__alt_data_end+0xff80c838>
  80cb70:	8080030b 	ldhu	r2,12(r16)
  80cb74:	003f7006 	br	80c938 <__alt_data_end+0xff80c938>
  80cb78:	8140038f 	ldh	r5,14(r16)
  80cb7c:	283f4716 	blt	r5,zero,80c89c <__alt_data_end+0xff80c89c>
  80cb80:	8809883a 	mov	r4,r17
  80cb84:	d80d883a 	mov	r6,sp
  80cb88:	080cc280 	call	80cc28 <_fstat_r>
  80cb8c:	1000041e 	bne	r2,zero,80cba0 <_fseeko_r+0x3e0>
  80cb90:	d8800117 	ldw	r2,4(sp)
  80cb94:	00e00014 	movui	r3,32768
  80cb98:	10bc000c 	andi	r2,r2,61440
  80cb9c:	10ff7c26 	beq	r2,r3,80c990 <__alt_data_end+0xff80c990>
  80cba0:	8080030b 	ldhu	r2,12(r16)
  80cba4:	003f3d06 	br	80c89c <__alt_data_end+0xff80c89c>
  80cba8:	8809883a 	mov	r4,r17
  80cbac:	800b883a 	mov	r5,r16
  80cbb0:	080cd780 	call	80cd78 <__smakebuf_r>
  80cbb4:	003f3106 	br	80c87c <__alt_data_end+0xff80c87c>
  80cbb8:	81400717 	ldw	r5,28(r16)
  80cbbc:	8809883a 	mov	r4,r17
  80cbc0:	000d883a 	mov	r6,zero
  80cbc4:	01c00044 	movi	r7,1
  80cbc8:	a03ee83a 	callr	r20
  80cbcc:	00ffffc4 	movi	r3,-1
  80cbd0:	10ff7b1e 	bne	r2,r3,80c9c0 <__alt_data_end+0xff80c9c0>
  80cbd4:	003f3306 	br	80c8a4 <__alt_data_end+0xff80c8a4>
  80cbd8:	80c00017 	ldw	r3,0(r16)
  80cbdc:	80800417 	ldw	r2,16(r16)
  80cbe0:	000b883a 	mov	r5,zero
  80cbe4:	1887c83a 	sub	r3,r3,r2
  80cbe8:	98e7c83a 	sub	r19,r19,r3
  80cbec:	30c7883a 	add	r3,r6,r3
  80cbf0:	003f7f06 	br	80c9f0 <__alt_data_end+0xff80c9f0>
  80cbf4:	00800744 	movi	r2,29
  80cbf8:	88800015 	stw	r2,0(r17)
  80cbfc:	04ffffc4 	movi	r19,-1
  80cc00:	003f0e06 	br	80c83c <__alt_data_end+0xff80c83c>

0080cc04 <fseeko>:
  80cc04:	2007883a 	mov	r3,r4
  80cc08:	010020b4 	movhi	r4,130
  80cc0c:	21383f04 	addi	r4,r4,-7940
  80cc10:	21000017 	ldw	r4,0(r4)
  80cc14:	2805883a 	mov	r2,r5
  80cc18:	300f883a 	mov	r7,r6
  80cc1c:	180b883a 	mov	r5,r3
  80cc20:	100d883a 	mov	r6,r2
  80cc24:	080c7c01 	jmpi	80c7c0 <_fseeko_r>

0080cc28 <_fstat_r>:
  80cc28:	defffd04 	addi	sp,sp,-12
  80cc2c:	dc000015 	stw	r16,0(sp)
  80cc30:	040020b4 	movhi	r16,130
  80cc34:	dc400115 	stw	r17,4(sp)
  80cc38:	843fbc04 	addi	r16,r16,-272
  80cc3c:	2023883a 	mov	r17,r4
  80cc40:	2809883a 	mov	r4,r5
  80cc44:	300b883a 	mov	r5,r6
  80cc48:	dfc00215 	stw	ra,8(sp)
  80cc4c:	80000015 	stw	zero,0(r16)
  80cc50:	081a2800 	call	81a280 <fstat>
  80cc54:	00ffffc4 	movi	r3,-1
  80cc58:	10c00526 	beq	r2,r3,80cc70 <_fstat_r+0x48>
  80cc5c:	dfc00217 	ldw	ra,8(sp)
  80cc60:	dc400117 	ldw	r17,4(sp)
  80cc64:	dc000017 	ldw	r16,0(sp)
  80cc68:	dec00304 	addi	sp,sp,12
  80cc6c:	f800283a 	ret
  80cc70:	80c00017 	ldw	r3,0(r16)
  80cc74:	183ff926 	beq	r3,zero,80cc5c <__alt_data_end+0xff80cc5c>
  80cc78:	88c00015 	stw	r3,0(r17)
  80cc7c:	003ff706 	br	80cc5c <__alt_data_end+0xff80cc5c>

0080cc80 <_getc_r>:
  80cc80:	defffd04 	addi	sp,sp,-12
  80cc84:	dc000115 	stw	r16,4(sp)
  80cc88:	dfc00215 	stw	ra,8(sp)
  80cc8c:	2021883a 	mov	r16,r4
  80cc90:	20000226 	beq	r4,zero,80cc9c <_getc_r+0x1c>
  80cc94:	20800e17 	ldw	r2,56(r4)
  80cc98:	10000c26 	beq	r2,zero,80cccc <_getc_r+0x4c>
  80cc9c:	28800117 	ldw	r2,4(r5)
  80cca0:	10bfffc4 	addi	r2,r2,-1
  80cca4:	28800115 	stw	r2,4(r5)
  80cca8:	10000c16 	blt	r2,zero,80ccdc <_getc_r+0x5c>
  80ccac:	28800017 	ldw	r2,0(r5)
  80ccb0:	10c00044 	addi	r3,r2,1
  80ccb4:	28c00015 	stw	r3,0(r5)
  80ccb8:	10800003 	ldbu	r2,0(r2)
  80ccbc:	dfc00217 	ldw	ra,8(sp)
  80ccc0:	dc000117 	ldw	r16,4(sp)
  80ccc4:	dec00304 	addi	sp,sp,12
  80ccc8:	f800283a 	ret
  80cccc:	d9400015 	stw	r5,0(sp)
  80ccd0:	0812b080 	call	812b08 <__sinit>
  80ccd4:	d9400017 	ldw	r5,0(sp)
  80ccd8:	003ff006 	br	80cc9c <__alt_data_end+0xff80cc9c>
  80ccdc:	8009883a 	mov	r4,r16
  80cce0:	dfc00217 	ldw	ra,8(sp)
  80cce4:	dc000117 	ldw	r16,4(sp)
  80cce8:	dec00304 	addi	sp,sp,12
  80ccec:	080dba01 	jmpi	80dba0 <__srget_r>

0080ccf0 <getc>:
  80ccf0:	008020b4 	movhi	r2,130
  80ccf4:	defffd04 	addi	sp,sp,-12
  80ccf8:	10b83f04 	addi	r2,r2,-7940
  80ccfc:	dc400115 	stw	r17,4(sp)
  80cd00:	14400017 	ldw	r17,0(r2)
  80cd04:	dc000015 	stw	r16,0(sp)
  80cd08:	dfc00215 	stw	ra,8(sp)
  80cd0c:	2021883a 	mov	r16,r4
  80cd10:	88000226 	beq	r17,zero,80cd1c <getc+0x2c>
  80cd14:	88800e17 	ldw	r2,56(r17)
  80cd18:	10000d26 	beq	r2,zero,80cd50 <getc+0x60>
  80cd1c:	80800117 	ldw	r2,4(r16)
  80cd20:	10bfffc4 	addi	r2,r2,-1
  80cd24:	80800115 	stw	r2,4(r16)
  80cd28:	10000c16 	blt	r2,zero,80cd5c <getc+0x6c>
  80cd2c:	80800017 	ldw	r2,0(r16)
  80cd30:	10c00044 	addi	r3,r2,1
  80cd34:	80c00015 	stw	r3,0(r16)
  80cd38:	10800003 	ldbu	r2,0(r2)
  80cd3c:	dfc00217 	ldw	ra,8(sp)
  80cd40:	dc400117 	ldw	r17,4(sp)
  80cd44:	dc000017 	ldw	r16,0(sp)
  80cd48:	dec00304 	addi	sp,sp,12
  80cd4c:	f800283a 	ret
  80cd50:	8809883a 	mov	r4,r17
  80cd54:	0812b080 	call	812b08 <__sinit>
  80cd58:	003ff006 	br	80cd1c <__alt_data_end+0xff80cd1c>
  80cd5c:	8809883a 	mov	r4,r17
  80cd60:	800b883a 	mov	r5,r16
  80cd64:	dfc00217 	ldw	ra,8(sp)
  80cd68:	dc400117 	ldw	r17,4(sp)
  80cd6c:	dc000017 	ldw	r16,0(sp)
  80cd70:	dec00304 	addi	sp,sp,12
  80cd74:	080dba01 	jmpi	80dba0 <__srget_r>

0080cd78 <__smakebuf_r>:
  80cd78:	2880030b 	ldhu	r2,12(r5)
  80cd7c:	10c0008c 	andi	r3,r2,2
  80cd80:	1800401e 	bne	r3,zero,80ce84 <__smakebuf_r+0x10c>
  80cd84:	deffec04 	addi	sp,sp,-80
  80cd88:	dc000f15 	stw	r16,60(sp)
  80cd8c:	2821883a 	mov	r16,r5
  80cd90:	2940038f 	ldh	r5,14(r5)
  80cd94:	dc401015 	stw	r17,64(sp)
  80cd98:	dfc01315 	stw	ra,76(sp)
  80cd9c:	dcc01215 	stw	r19,72(sp)
  80cda0:	dc801115 	stw	r18,68(sp)
  80cda4:	2023883a 	mov	r17,r4
  80cda8:	28001b16 	blt	r5,zero,80ce18 <__smakebuf_r+0xa0>
  80cdac:	d80d883a 	mov	r6,sp
  80cdb0:	080cc280 	call	80cc28 <_fstat_r>
  80cdb4:	10001716 	blt	r2,zero,80ce14 <__smakebuf_r+0x9c>
  80cdb8:	d8800117 	ldw	r2,4(sp)
  80cdbc:	00e00014 	movui	r3,32768
  80cdc0:	10bc000c 	andi	r2,r2,61440
  80cdc4:	10c03726 	beq	r2,r3,80cea4 <__smakebuf_r+0x12c>
  80cdc8:	80c0030b 	ldhu	r3,12(r16)
  80cdcc:	18c20014 	ori	r3,r3,2048
  80cdd0:	80c0030d 	sth	r3,12(r16)
  80cdd4:	00c80004 	movi	r3,8192
  80cdd8:	10c03c1e 	bne	r2,r3,80cecc <__smakebuf_r+0x154>
  80cddc:	8140038f 	ldh	r5,14(r16)
  80cde0:	8809883a 	mov	r4,r17
  80cde4:	08131a00 	call	8131a0 <_isatty_r>
  80cde8:	10004e26 	beq	r2,zero,80cf24 <__smakebuf_r+0x1ac>
  80cdec:	8080030b 	ldhu	r2,12(r16)
  80cdf0:	04c00044 	movi	r19,1
  80cdf4:	80c010c4 	addi	r3,r16,67
  80cdf8:	14c4b03a 	or	r2,r2,r19
  80cdfc:	8080030d 	sth	r2,12(r16)
  80ce00:	80c00015 	stw	r3,0(r16)
  80ce04:	80c00415 	stw	r3,16(r16)
  80ce08:	84c00515 	stw	r19,20(r16)
  80ce0c:	04810004 	movi	r18,1024
  80ce10:	00000706 	br	80ce30 <__smakebuf_r+0xb8>
  80ce14:	8080030b 	ldhu	r2,12(r16)
  80ce18:	10c0200c 	andi	r3,r2,128
  80ce1c:	18001f1e 	bne	r3,zero,80ce9c <__smakebuf_r+0x124>
  80ce20:	04810004 	movi	r18,1024
  80ce24:	10820014 	ori	r2,r2,2048
  80ce28:	8080030d 	sth	r2,12(r16)
  80ce2c:	0027883a 	mov	r19,zero
  80ce30:	8809883a 	mov	r4,r17
  80ce34:	900b883a 	mov	r5,r18
  80ce38:	080cf300 	call	80cf30 <_malloc_r>
  80ce3c:	10002e26 	beq	r2,zero,80cef8 <__smakebuf_r+0x180>
  80ce40:	80c0030b 	ldhu	r3,12(r16)
  80ce44:	01002074 	movhi	r4,129
  80ce48:	2109f204 	addi	r4,r4,10184
  80ce4c:	89000f15 	stw	r4,60(r17)
  80ce50:	18c02014 	ori	r3,r3,128
  80ce54:	80c0030d 	sth	r3,12(r16)
  80ce58:	80800015 	stw	r2,0(r16)
  80ce5c:	80800415 	stw	r2,16(r16)
  80ce60:	84800515 	stw	r18,20(r16)
  80ce64:	98001c1e 	bne	r19,zero,80ced8 <__smakebuf_r+0x160>
  80ce68:	dfc01317 	ldw	ra,76(sp)
  80ce6c:	dcc01217 	ldw	r19,72(sp)
  80ce70:	dc801117 	ldw	r18,68(sp)
  80ce74:	dc401017 	ldw	r17,64(sp)
  80ce78:	dc000f17 	ldw	r16,60(sp)
  80ce7c:	dec01404 	addi	sp,sp,80
  80ce80:	f800283a 	ret
  80ce84:	288010c4 	addi	r2,r5,67
  80ce88:	28800015 	stw	r2,0(r5)
  80ce8c:	28800415 	stw	r2,16(r5)
  80ce90:	00800044 	movi	r2,1
  80ce94:	28800515 	stw	r2,20(r5)
  80ce98:	f800283a 	ret
  80ce9c:	04801004 	movi	r18,64
  80cea0:	003fe006 	br	80ce24 <__alt_data_end+0xff80ce24>
  80cea4:	81000a17 	ldw	r4,40(r16)
  80cea8:	00c02074 	movhi	r3,129
  80ceac:	18f75504 	addi	r3,r3,-8876
  80ceb0:	20ffc51e 	bne	r4,r3,80cdc8 <__alt_data_end+0xff80cdc8>
  80ceb4:	80c0030b 	ldhu	r3,12(r16)
  80ceb8:	01010004 	movi	r4,1024
  80cebc:	81001315 	stw	r4,76(r16)
  80cec0:	1906b03a 	or	r3,r3,r4
  80cec4:	80c0030d 	sth	r3,12(r16)
  80cec8:	003fc206 	br	80cdd4 <__alt_data_end+0xff80cdd4>
  80cecc:	0027883a 	mov	r19,zero
  80ced0:	04810004 	movi	r18,1024
  80ced4:	003fd606 	br	80ce30 <__alt_data_end+0xff80ce30>
  80ced8:	8140038f 	ldh	r5,14(r16)
  80cedc:	8809883a 	mov	r4,r17
  80cee0:	08131a00 	call	8131a0 <_isatty_r>
  80cee4:	103fe026 	beq	r2,zero,80ce68 <__alt_data_end+0xff80ce68>
  80cee8:	8080030b 	ldhu	r2,12(r16)
  80ceec:	10800054 	ori	r2,r2,1
  80cef0:	8080030d 	sth	r2,12(r16)
  80cef4:	003fdc06 	br	80ce68 <__alt_data_end+0xff80ce68>
  80cef8:	8080030b 	ldhu	r2,12(r16)
  80cefc:	10c0800c 	andi	r3,r2,512
  80cf00:	183fd91e 	bne	r3,zero,80ce68 <__alt_data_end+0xff80ce68>
  80cf04:	10800094 	ori	r2,r2,2
  80cf08:	80c010c4 	addi	r3,r16,67
  80cf0c:	8080030d 	sth	r2,12(r16)
  80cf10:	00800044 	movi	r2,1
  80cf14:	80c00015 	stw	r3,0(r16)
  80cf18:	80c00415 	stw	r3,16(r16)
  80cf1c:	80800515 	stw	r2,20(r16)
  80cf20:	003fd106 	br	80ce68 <__alt_data_end+0xff80ce68>
  80cf24:	04c00044 	movi	r19,1
  80cf28:	04810004 	movi	r18,1024
  80cf2c:	003fc006 	br	80ce30 <__alt_data_end+0xff80ce30>

0080cf30 <_malloc_r>:
  80cf30:	defff504 	addi	sp,sp,-44
  80cf34:	dc800315 	stw	r18,12(sp)
  80cf38:	dfc00a15 	stw	ra,40(sp)
  80cf3c:	df000915 	stw	fp,36(sp)
  80cf40:	ddc00815 	stw	r23,32(sp)
  80cf44:	dd800715 	stw	r22,28(sp)
  80cf48:	dd400615 	stw	r21,24(sp)
  80cf4c:	dd000515 	stw	r20,20(sp)
  80cf50:	dcc00415 	stw	r19,16(sp)
  80cf54:	dc400215 	stw	r17,8(sp)
  80cf58:	dc000115 	stw	r16,4(sp)
  80cf5c:	288002c4 	addi	r2,r5,11
  80cf60:	00c00584 	movi	r3,22
  80cf64:	2025883a 	mov	r18,r4
  80cf68:	18802a2e 	bgeu	r3,r2,80d014 <_malloc_r+0xe4>
  80cf6c:	047ffe04 	movi	r17,-8
  80cf70:	1462703a 	and	r17,r2,r17
  80cf74:	88009e16 	blt	r17,zero,80d1f0 <_malloc_r+0x2c0>
  80cf78:	89409d36 	bltu	r17,r5,80d1f0 <_malloc_r+0x2c0>
  80cf7c:	081a8540 	call	81a854 <__malloc_lock>
  80cf80:	00807dc4 	movi	r2,503
  80cf84:	14402736 	bltu	r2,r17,80d024 <_malloc_r+0xf4>
  80cf88:	8806d0fa 	srli	r3,r17,3
  80cf8c:	04c020b4 	movhi	r19,130
  80cf90:	9cf20604 	addi	r19,r19,-14312
  80cf94:	18c5883a 	add	r2,r3,r3
  80cf98:	1085883a 	add	r2,r2,r2
  80cf9c:	1085883a 	add	r2,r2,r2
  80cfa0:	9885883a 	add	r2,r19,r2
  80cfa4:	14000317 	ldw	r16,12(r2)
  80cfa8:	80814a26 	beq	r16,r2,80d4d4 <_malloc_r+0x5a4>
  80cfac:	80c00117 	ldw	r3,4(r16)
  80cfb0:	81000317 	ldw	r4,12(r16)
  80cfb4:	00bfff04 	movi	r2,-4
  80cfb8:	1884703a 	and	r2,r3,r2
  80cfbc:	81400217 	ldw	r5,8(r16)
  80cfc0:	8085883a 	add	r2,r16,r2
  80cfc4:	10c00117 	ldw	r3,4(r2)
  80cfc8:	29000315 	stw	r4,12(r5)
  80cfcc:	21400215 	stw	r5,8(r4)
  80cfd0:	18c00054 	ori	r3,r3,1
  80cfd4:	10c00115 	stw	r3,4(r2)
  80cfd8:	9009883a 	mov	r4,r18
  80cfdc:	081a8740 	call	81a874 <__malloc_unlock>
  80cfe0:	80800204 	addi	r2,r16,8
  80cfe4:	dfc00a17 	ldw	ra,40(sp)
  80cfe8:	df000917 	ldw	fp,36(sp)
  80cfec:	ddc00817 	ldw	r23,32(sp)
  80cff0:	dd800717 	ldw	r22,28(sp)
  80cff4:	dd400617 	ldw	r21,24(sp)
  80cff8:	dd000517 	ldw	r20,20(sp)
  80cffc:	dcc00417 	ldw	r19,16(sp)
  80d000:	dc800317 	ldw	r18,12(sp)
  80d004:	dc400217 	ldw	r17,8(sp)
  80d008:	dc000117 	ldw	r16,4(sp)
  80d00c:	dec00b04 	addi	sp,sp,44
  80d010:	f800283a 	ret
  80d014:	04400404 	movi	r17,16
  80d018:	89407536 	bltu	r17,r5,80d1f0 <_malloc_r+0x2c0>
  80d01c:	081a8540 	call	81a854 <__malloc_lock>
  80d020:	003fd906 	br	80cf88 <__alt_data_end+0xff80cf88>
  80d024:	8806d27a 	srli	r3,r17,9
  80d028:	18007526 	beq	r3,zero,80d200 <_malloc_r+0x2d0>
  80d02c:	00800104 	movi	r2,4
  80d030:	10c0ef36 	bltu	r2,r3,80d3f0 <_malloc_r+0x4c0>
  80d034:	8806d1ba 	srli	r3,r17,6
  80d038:	19c00e04 	addi	r7,r3,56
  80d03c:	39cb883a 	add	r5,r7,r7
  80d040:	04c020b4 	movhi	r19,130
  80d044:	294b883a 	add	r5,r5,r5
  80d048:	9cf20604 	addi	r19,r19,-14312
  80d04c:	294b883a 	add	r5,r5,r5
  80d050:	994b883a 	add	r5,r19,r5
  80d054:	2c000317 	ldw	r16,12(r5)
  80d058:	2c000e26 	beq	r5,r16,80d094 <_malloc_r+0x164>
  80d05c:	80800117 	ldw	r2,4(r16)
  80d060:	01bfff04 	movi	r6,-4
  80d064:	010003c4 	movi	r4,15
  80d068:	1184703a 	and	r2,r2,r6
  80d06c:	1447c83a 	sub	r3,r2,r17
  80d070:	20c00716 	blt	r4,r3,80d090 <_malloc_r+0x160>
  80d074:	1800650e 	bge	r3,zero,80d20c <_malloc_r+0x2dc>
  80d078:	84000317 	ldw	r16,12(r16)
  80d07c:	2c000526 	beq	r5,r16,80d094 <_malloc_r+0x164>
  80d080:	80800117 	ldw	r2,4(r16)
  80d084:	1184703a 	and	r2,r2,r6
  80d088:	1447c83a 	sub	r3,r2,r17
  80d08c:	20fff90e 	bge	r4,r3,80d074 <__alt_data_end+0xff80d074>
  80d090:	39ffffc4 	addi	r7,r7,-1
  80d094:	38c00044 	addi	r3,r7,1
  80d098:	018020b4 	movhi	r6,130
  80d09c:	9c000417 	ldw	r16,16(r19)
  80d0a0:	31b20604 	addi	r6,r6,-14312
  80d0a4:	32400204 	addi	r9,r6,8
  80d0a8:	82410326 	beq	r16,r9,80d4b8 <_malloc_r+0x588>
  80d0ac:	81000117 	ldw	r4,4(r16)
  80d0b0:	00bfff04 	movi	r2,-4
  80d0b4:	208e703a 	and	r7,r4,r2
  80d0b8:	3c45c83a 	sub	r2,r7,r17
  80d0bc:	010003c4 	movi	r4,15
  80d0c0:	2080ee16 	blt	r4,r2,80d47c <_malloc_r+0x54c>
  80d0c4:	32400515 	stw	r9,20(r6)
  80d0c8:	32400415 	stw	r9,16(r6)
  80d0cc:	1000510e 	bge	r2,zero,80d214 <_malloc_r+0x2e4>
  80d0d0:	00807fc4 	movi	r2,511
  80d0d4:	11c0ce36 	bltu	r2,r7,80d410 <_malloc_r+0x4e0>
  80d0d8:	3808d0fa 	srli	r4,r7,3
  80d0dc:	01c00044 	movi	r7,1
  80d0e0:	30800117 	ldw	r2,4(r6)
  80d0e4:	210b883a 	add	r5,r4,r4
  80d0e8:	294b883a 	add	r5,r5,r5
  80d0ec:	2009d0ba 	srai	r4,r4,2
  80d0f0:	294b883a 	add	r5,r5,r5
  80d0f4:	298b883a 	add	r5,r5,r6
  80d0f8:	2a000217 	ldw	r8,8(r5)
  80d0fc:	3908983a 	sll	r4,r7,r4
  80d100:	81400315 	stw	r5,12(r16)
  80d104:	82000215 	stw	r8,8(r16)
  80d108:	2088b03a 	or	r4,r4,r2
  80d10c:	2c000215 	stw	r16,8(r5)
  80d110:	31000115 	stw	r4,4(r6)
  80d114:	44000315 	stw	r16,12(r8)
  80d118:	1805d0ba 	srai	r2,r3,2
  80d11c:	01400044 	movi	r5,1
  80d120:	288a983a 	sll	r5,r5,r2
  80d124:	21404336 	bltu	r4,r5,80d234 <_malloc_r+0x304>
  80d128:	2144703a 	and	r2,r4,r5
  80d12c:	10000a1e 	bne	r2,zero,80d158 <_malloc_r+0x228>
  80d130:	00bfff04 	movi	r2,-4
  80d134:	294b883a 	add	r5,r5,r5
  80d138:	1886703a 	and	r3,r3,r2
  80d13c:	2144703a 	and	r2,r4,r5
  80d140:	18c00104 	addi	r3,r3,4
  80d144:	1000041e 	bne	r2,zero,80d158 <_malloc_r+0x228>
  80d148:	294b883a 	add	r5,r5,r5
  80d14c:	2144703a 	and	r2,r4,r5
  80d150:	18c00104 	addi	r3,r3,4
  80d154:	103ffc26 	beq	r2,zero,80d148 <__alt_data_end+0xff80d148>
  80d158:	023fff04 	movi	r8,-4
  80d15c:	01c003c4 	movi	r7,15
  80d160:	18c5883a 	add	r2,r3,r3
  80d164:	1085883a 	add	r2,r2,r2
  80d168:	1085883a 	add	r2,r2,r2
  80d16c:	9895883a 	add	r10,r19,r2
  80d170:	52c00304 	addi	r11,r10,12
  80d174:	1819883a 	mov	r12,r3
  80d178:	5c000017 	ldw	r16,0(r11)
  80d17c:	59bffd04 	addi	r6,r11,-12
  80d180:	8180041e 	bne	r16,r6,80d194 <_malloc_r+0x264>
  80d184:	0000ce06 	br	80d4c0 <_malloc_r+0x590>
  80d188:	2000d70e 	bge	r4,zero,80d4e8 <_malloc_r+0x5b8>
  80d18c:	84000317 	ldw	r16,12(r16)
  80d190:	8180cb26 	beq	r16,r6,80d4c0 <_malloc_r+0x590>
  80d194:	80800117 	ldw	r2,4(r16)
  80d198:	1204703a 	and	r2,r2,r8
  80d19c:	1449c83a 	sub	r4,r2,r17
  80d1a0:	393ff90e 	bge	r7,r4,80d188 <__alt_data_end+0xff80d188>
  80d1a4:	80800317 	ldw	r2,12(r16)
  80d1a8:	80c00217 	ldw	r3,8(r16)
  80d1ac:	89400054 	ori	r5,r17,1
  80d1b0:	81400115 	stw	r5,4(r16)
  80d1b4:	18800315 	stw	r2,12(r3)
  80d1b8:	10c00215 	stw	r3,8(r2)
  80d1bc:	8463883a 	add	r17,r16,r17
  80d1c0:	9c400515 	stw	r17,20(r19)
  80d1c4:	9c400415 	stw	r17,16(r19)
  80d1c8:	20800054 	ori	r2,r4,1
  80d1cc:	88800115 	stw	r2,4(r17)
  80d1d0:	8a400315 	stw	r9,12(r17)
  80d1d4:	8a400215 	stw	r9,8(r17)
  80d1d8:	8923883a 	add	r17,r17,r4
  80d1dc:	89000015 	stw	r4,0(r17)
  80d1e0:	9009883a 	mov	r4,r18
  80d1e4:	081a8740 	call	81a874 <__malloc_unlock>
  80d1e8:	80800204 	addi	r2,r16,8
  80d1ec:	003f7d06 	br	80cfe4 <__alt_data_end+0xff80cfe4>
  80d1f0:	00800304 	movi	r2,12
  80d1f4:	90800015 	stw	r2,0(r18)
  80d1f8:	0005883a 	mov	r2,zero
  80d1fc:	003f7906 	br	80cfe4 <__alt_data_end+0xff80cfe4>
  80d200:	01401f84 	movi	r5,126
  80d204:	01c00fc4 	movi	r7,63
  80d208:	003f8d06 	br	80d040 <__alt_data_end+0xff80d040>
  80d20c:	81000317 	ldw	r4,12(r16)
  80d210:	003f6a06 	br	80cfbc <__alt_data_end+0xff80cfbc>
  80d214:	81c5883a 	add	r2,r16,r7
  80d218:	10c00117 	ldw	r3,4(r2)
  80d21c:	9009883a 	mov	r4,r18
  80d220:	18c00054 	ori	r3,r3,1
  80d224:	10c00115 	stw	r3,4(r2)
  80d228:	081a8740 	call	81a874 <__malloc_unlock>
  80d22c:	80800204 	addi	r2,r16,8
  80d230:	003f6c06 	br	80cfe4 <__alt_data_end+0xff80cfe4>
  80d234:	9c000217 	ldw	r16,8(r19)
  80d238:	00bfff04 	movi	r2,-4
  80d23c:	85800117 	ldw	r22,4(r16)
  80d240:	b0ac703a 	and	r22,r22,r2
  80d244:	b4400336 	bltu	r22,r17,80d254 <_malloc_r+0x324>
  80d248:	b445c83a 	sub	r2,r22,r17
  80d24c:	00c003c4 	movi	r3,15
  80d250:	18805d16 	blt	r3,r2,80d3c8 <_malloc_r+0x498>
  80d254:	05c020b4 	movhi	r23,130
  80d258:	008020b4 	movhi	r2,130
  80d25c:	bdf84004 	addi	r23,r23,-7936
  80d260:	10bfbf04 	addi	r2,r2,-260
  80d264:	15400017 	ldw	r21,0(r2)
  80d268:	b9000017 	ldw	r4,0(r23)
  80d26c:	00ffffc4 	movi	r3,-1
  80d270:	858d883a 	add	r6,r16,r22
  80d274:	8d6b883a 	add	r21,r17,r21
  80d278:	20c0e426 	beq	r4,r3,80d60c <_malloc_r+0x6dc>
  80d27c:	ad4403c4 	addi	r21,r21,4111
  80d280:	00fc0004 	movi	r3,-4096
  80d284:	a8ea703a 	and	r21,r21,r3
  80d288:	9009883a 	mov	r4,r18
  80d28c:	a80b883a 	mov	r5,r21
  80d290:	d9800015 	stw	r6,0(sp)
  80d294:	080dc280 	call	80dc28 <_sbrk_r>
  80d298:	00ffffc4 	movi	r3,-1
  80d29c:	1029883a 	mov	r20,r2
  80d2a0:	d9800017 	ldw	r6,0(sp)
  80d2a4:	10c0a426 	beq	r2,r3,80d538 <_malloc_r+0x608>
  80d2a8:	1180a236 	bltu	r2,r6,80d534 <_malloc_r+0x604>
  80d2ac:	070020b4 	movhi	fp,130
  80d2b0:	e7003404 	addi	fp,fp,208
  80d2b4:	e0c00017 	ldw	r3,0(fp)
  80d2b8:	a8c7883a 	add	r3,r21,r3
  80d2bc:	e0c00015 	stw	r3,0(fp)
  80d2c0:	3500da26 	beq	r6,r20,80d62c <_malloc_r+0x6fc>
  80d2c4:	b9000017 	ldw	r4,0(r23)
  80d2c8:	00bfffc4 	movi	r2,-1
  80d2cc:	2080e426 	beq	r4,r2,80d660 <_malloc_r+0x730>
  80d2d0:	a185c83a 	sub	r2,r20,r6
  80d2d4:	1885883a 	add	r2,r3,r2
  80d2d8:	e0800015 	stw	r2,0(fp)
  80d2dc:	a0c001cc 	andi	r3,r20,7
  80d2e0:	1800b526 	beq	r3,zero,80d5b8 <_malloc_r+0x688>
  80d2e4:	a0e9c83a 	sub	r20,r20,r3
  80d2e8:	00840204 	movi	r2,4104
  80d2ec:	a5000204 	addi	r20,r20,8
  80d2f0:	10c7c83a 	sub	r3,r2,r3
  80d2f4:	a545883a 	add	r2,r20,r21
  80d2f8:	1083ffcc 	andi	r2,r2,4095
  80d2fc:	18abc83a 	sub	r21,r3,r2
  80d300:	9009883a 	mov	r4,r18
  80d304:	a80b883a 	mov	r5,r21
  80d308:	080dc280 	call	80dc28 <_sbrk_r>
  80d30c:	00ffffc4 	movi	r3,-1
  80d310:	10c0d026 	beq	r2,r3,80d654 <_malloc_r+0x724>
  80d314:	1507c83a 	sub	r3,r2,r20
  80d318:	a8c7883a 	add	r3,r21,r3
  80d31c:	18c00054 	ori	r3,r3,1
  80d320:	e0800017 	ldw	r2,0(fp)
  80d324:	9d000215 	stw	r20,8(r19)
  80d328:	a0c00115 	stw	r3,4(r20)
  80d32c:	a887883a 	add	r3,r21,r2
  80d330:	e0c00015 	stw	r3,0(fp)
  80d334:	84c00e26 	beq	r16,r19,80d370 <_malloc_r+0x440>
  80d338:	018003c4 	movi	r6,15
  80d33c:	3580a02e 	bgeu	r6,r22,80d5c0 <_malloc_r+0x690>
  80d340:	81400117 	ldw	r5,4(r16)
  80d344:	013ffe04 	movi	r4,-8
  80d348:	b0bffd04 	addi	r2,r22,-12
  80d34c:	1104703a 	and	r2,r2,r4
  80d350:	2900004c 	andi	r4,r5,1
  80d354:	1108b03a 	or	r4,r2,r4
  80d358:	81000115 	stw	r4,4(r16)
  80d35c:	01400144 	movi	r5,5
  80d360:	8089883a 	add	r4,r16,r2
  80d364:	21400115 	stw	r5,4(r4)
  80d368:	21400215 	stw	r5,8(r4)
  80d36c:	3080c036 	bltu	r6,r2,80d670 <_malloc_r+0x740>
  80d370:	008020b4 	movhi	r2,130
  80d374:	10bfbe04 	addi	r2,r2,-264
  80d378:	11000017 	ldw	r4,0(r2)
  80d37c:	20c0012e 	bgeu	r4,r3,80d384 <_malloc_r+0x454>
  80d380:	10c00015 	stw	r3,0(r2)
  80d384:	008020b4 	movhi	r2,130
  80d388:	10bfbd04 	addi	r2,r2,-268
  80d38c:	11000017 	ldw	r4,0(r2)
  80d390:	9c000217 	ldw	r16,8(r19)
  80d394:	20c0012e 	bgeu	r4,r3,80d39c <_malloc_r+0x46c>
  80d398:	10c00015 	stw	r3,0(r2)
  80d39c:	80c00117 	ldw	r3,4(r16)
  80d3a0:	00bfff04 	movi	r2,-4
  80d3a4:	1886703a 	and	r3,r3,r2
  80d3a8:	1c45c83a 	sub	r2,r3,r17
  80d3ac:	1c400236 	bltu	r3,r17,80d3b8 <_malloc_r+0x488>
  80d3b0:	00c003c4 	movi	r3,15
  80d3b4:	18800416 	blt	r3,r2,80d3c8 <_malloc_r+0x498>
  80d3b8:	9009883a 	mov	r4,r18
  80d3bc:	081a8740 	call	81a874 <__malloc_unlock>
  80d3c0:	0005883a 	mov	r2,zero
  80d3c4:	003f0706 	br	80cfe4 <__alt_data_end+0xff80cfe4>
  80d3c8:	88c00054 	ori	r3,r17,1
  80d3cc:	80c00115 	stw	r3,4(r16)
  80d3d0:	8463883a 	add	r17,r16,r17
  80d3d4:	10800054 	ori	r2,r2,1
  80d3d8:	9c400215 	stw	r17,8(r19)
  80d3dc:	88800115 	stw	r2,4(r17)
  80d3e0:	9009883a 	mov	r4,r18
  80d3e4:	081a8740 	call	81a874 <__malloc_unlock>
  80d3e8:	80800204 	addi	r2,r16,8
  80d3ec:	003efd06 	br	80cfe4 <__alt_data_end+0xff80cfe4>
  80d3f0:	00800504 	movi	r2,20
  80d3f4:	10c0482e 	bgeu	r2,r3,80d518 <_malloc_r+0x5e8>
  80d3f8:	00801504 	movi	r2,84
  80d3fc:	10c06836 	bltu	r2,r3,80d5a0 <_malloc_r+0x670>
  80d400:	8806d33a 	srli	r3,r17,12
  80d404:	19c01b84 	addi	r7,r3,110
  80d408:	39cb883a 	add	r5,r7,r7
  80d40c:	003f0c06 	br	80d040 <__alt_data_end+0xff80d040>
  80d410:	3804d27a 	srli	r2,r7,9
  80d414:	01000104 	movi	r4,4
  80d418:	2080422e 	bgeu	r4,r2,80d524 <_malloc_r+0x5f4>
  80d41c:	01000504 	movi	r4,20
  80d420:	20807c36 	bltu	r4,r2,80d614 <_malloc_r+0x6e4>
  80d424:	110016c4 	addi	r4,r2,91
  80d428:	210b883a 	add	r5,r4,r4
  80d42c:	294b883a 	add	r5,r5,r5
  80d430:	294b883a 	add	r5,r5,r5
  80d434:	994b883a 	add	r5,r19,r5
  80d438:	28800217 	ldw	r2,8(r5)
  80d43c:	020020b4 	movhi	r8,130
  80d440:	42320604 	addi	r8,r8,-14312
  80d444:	11406326 	beq	r2,r5,80d5d4 <_malloc_r+0x6a4>
  80d448:	01bfff04 	movi	r6,-4
  80d44c:	11000117 	ldw	r4,4(r2)
  80d450:	2188703a 	and	r4,r4,r6
  80d454:	3900022e 	bgeu	r7,r4,80d460 <_malloc_r+0x530>
  80d458:	10800217 	ldw	r2,8(r2)
  80d45c:	28bffb1e 	bne	r5,r2,80d44c <__alt_data_end+0xff80d44c>
  80d460:	11800317 	ldw	r6,12(r2)
  80d464:	99000117 	ldw	r4,4(r19)
  80d468:	81800315 	stw	r6,12(r16)
  80d46c:	80800215 	stw	r2,8(r16)
  80d470:	34000215 	stw	r16,8(r6)
  80d474:	14000315 	stw	r16,12(r2)
  80d478:	003f2706 	br	80d118 <__alt_data_end+0xff80d118>
  80d47c:	88c00054 	ori	r3,r17,1
  80d480:	80c00115 	stw	r3,4(r16)
  80d484:	8463883a 	add	r17,r16,r17
  80d488:	34400515 	stw	r17,20(r6)
  80d48c:	34400415 	stw	r17,16(r6)
  80d490:	10c00054 	ori	r3,r2,1
  80d494:	8a400315 	stw	r9,12(r17)
  80d498:	8a400215 	stw	r9,8(r17)
  80d49c:	88c00115 	stw	r3,4(r17)
  80d4a0:	88a3883a 	add	r17,r17,r2
  80d4a4:	88800015 	stw	r2,0(r17)
  80d4a8:	9009883a 	mov	r4,r18
  80d4ac:	081a8740 	call	81a874 <__malloc_unlock>
  80d4b0:	80800204 	addi	r2,r16,8
  80d4b4:	003ecb06 	br	80cfe4 <__alt_data_end+0xff80cfe4>
  80d4b8:	31000117 	ldw	r4,4(r6)
  80d4bc:	003f1606 	br	80d118 <__alt_data_end+0xff80d118>
  80d4c0:	63000044 	addi	r12,r12,1
  80d4c4:	608000cc 	andi	r2,r12,3
  80d4c8:	5ac00204 	addi	r11,r11,8
  80d4cc:	103f2a1e 	bne	r2,zero,80d178 <__alt_data_end+0xff80d178>
  80d4d0:	00002106 	br	80d558 <_malloc_r+0x628>
  80d4d4:	80800204 	addi	r2,r16,8
  80d4d8:	84000517 	ldw	r16,20(r16)
  80d4dc:	143eb31e 	bne	r2,r16,80cfac <__alt_data_end+0xff80cfac>
  80d4e0:	18c00084 	addi	r3,r3,2
  80d4e4:	003eec06 	br	80d098 <__alt_data_end+0xff80d098>
  80d4e8:	8085883a 	add	r2,r16,r2
  80d4ec:	10c00117 	ldw	r3,4(r2)
  80d4f0:	81000317 	ldw	r4,12(r16)
  80d4f4:	81400217 	ldw	r5,8(r16)
  80d4f8:	18c00054 	ori	r3,r3,1
  80d4fc:	10c00115 	stw	r3,4(r2)
  80d500:	29000315 	stw	r4,12(r5)
  80d504:	21400215 	stw	r5,8(r4)
  80d508:	9009883a 	mov	r4,r18
  80d50c:	081a8740 	call	81a874 <__malloc_unlock>
  80d510:	80800204 	addi	r2,r16,8
  80d514:	003eb306 	br	80cfe4 <__alt_data_end+0xff80cfe4>
  80d518:	19c016c4 	addi	r7,r3,91
  80d51c:	39cb883a 	add	r5,r7,r7
  80d520:	003ec706 	br	80d040 <__alt_data_end+0xff80d040>
  80d524:	3804d1ba 	srli	r2,r7,6
  80d528:	11000e04 	addi	r4,r2,56
  80d52c:	210b883a 	add	r5,r4,r4
  80d530:	003fbe06 	br	80d42c <__alt_data_end+0xff80d42c>
  80d534:	84ff5d26 	beq	r16,r19,80d2ac <__alt_data_end+0xff80d2ac>
  80d538:	9c000217 	ldw	r16,8(r19)
  80d53c:	00bfff04 	movi	r2,-4
  80d540:	80c00117 	ldw	r3,4(r16)
  80d544:	1886703a 	and	r3,r3,r2
  80d548:	003f9706 	br	80d3a8 <__alt_data_end+0xff80d3a8>
  80d54c:	52800017 	ldw	r10,0(r10)
  80d550:	18ffffc4 	addi	r3,r3,-1
  80d554:	50805c1e 	bne	r10,r2,80d6c8 <_malloc_r+0x798>
  80d558:	190000cc 	andi	r4,r3,3
  80d55c:	50bffe04 	addi	r2,r10,-8
  80d560:	203ffa1e 	bne	r4,zero,80d54c <__alt_data_end+0xff80d54c>
  80d564:	98800117 	ldw	r2,4(r19)
  80d568:	0146303a 	nor	r3,zero,r5
  80d56c:	1884703a 	and	r2,r3,r2
  80d570:	98800115 	stw	r2,4(r19)
  80d574:	294b883a 	add	r5,r5,r5
  80d578:	117f2e36 	bltu	r2,r5,80d234 <__alt_data_end+0xff80d234>
  80d57c:	283f2d26 	beq	r5,zero,80d234 <__alt_data_end+0xff80d234>
  80d580:	1146703a 	and	r3,r2,r5
  80d584:	1800521e 	bne	r3,zero,80d6d0 <_malloc_r+0x7a0>
  80d588:	6007883a 	mov	r3,r12
  80d58c:	294b883a 	add	r5,r5,r5
  80d590:	1148703a 	and	r4,r2,r5
  80d594:	18c00104 	addi	r3,r3,4
  80d598:	203ffc26 	beq	r4,zero,80d58c <__alt_data_end+0xff80d58c>
  80d59c:	003ef006 	br	80d160 <__alt_data_end+0xff80d160>
  80d5a0:	00805504 	movi	r2,340
  80d5a4:	10c01336 	bltu	r2,r3,80d5f4 <_malloc_r+0x6c4>
  80d5a8:	8806d3fa 	srli	r3,r17,15
  80d5ac:	19c01dc4 	addi	r7,r3,119
  80d5b0:	39cb883a 	add	r5,r7,r7
  80d5b4:	003ea206 	br	80d040 <__alt_data_end+0xff80d040>
  80d5b8:	00c40004 	movi	r3,4096
  80d5bc:	003f4d06 	br	80d2f4 <__alt_data_end+0xff80d2f4>
  80d5c0:	00800044 	movi	r2,1
  80d5c4:	a0800115 	stw	r2,4(r20)
  80d5c8:	a021883a 	mov	r16,r20
  80d5cc:	0007883a 	mov	r3,zero
  80d5d0:	003f7506 	br	80d3a8 <__alt_data_end+0xff80d3a8>
  80d5d4:	200bd0ba 	srai	r5,r4,2
  80d5d8:	01800044 	movi	r6,1
  80d5dc:	41000117 	ldw	r4,4(r8)
  80d5e0:	314a983a 	sll	r5,r6,r5
  80d5e4:	100d883a 	mov	r6,r2
  80d5e8:	2908b03a 	or	r4,r5,r4
  80d5ec:	41000115 	stw	r4,4(r8)
  80d5f0:	003f9d06 	br	80d468 <__alt_data_end+0xff80d468>
  80d5f4:	00815504 	movi	r2,1364
  80d5f8:	10c01336 	bltu	r2,r3,80d648 <_malloc_r+0x718>
  80d5fc:	8806d4ba 	srli	r3,r17,18
  80d600:	19c01f04 	addi	r7,r3,124
  80d604:	39cb883a 	add	r5,r7,r7
  80d608:	003e8d06 	br	80d040 <__alt_data_end+0xff80d040>
  80d60c:	ad400404 	addi	r21,r21,16
  80d610:	003f1d06 	br	80d288 <__alt_data_end+0xff80d288>
  80d614:	01001504 	movi	r4,84
  80d618:	20801c36 	bltu	r4,r2,80d68c <_malloc_r+0x75c>
  80d61c:	3804d33a 	srli	r2,r7,12
  80d620:	11001b84 	addi	r4,r2,110
  80d624:	210b883a 	add	r5,r4,r4
  80d628:	003f8006 	br	80d42c <__alt_data_end+0xff80d42c>
  80d62c:	3083ffcc 	andi	r2,r6,4095
  80d630:	103f241e 	bne	r2,zero,80d2c4 <__alt_data_end+0xff80d2c4>
  80d634:	99000217 	ldw	r4,8(r19)
  80d638:	ad85883a 	add	r2,r21,r22
  80d63c:	10800054 	ori	r2,r2,1
  80d640:	20800115 	stw	r2,4(r4)
  80d644:	003f4a06 	br	80d370 <__alt_data_end+0xff80d370>
  80d648:	01403f04 	movi	r5,252
  80d64c:	01c01f84 	movi	r7,126
  80d650:	003e7b06 	br	80d040 <__alt_data_end+0xff80d040>
  80d654:	00c00044 	movi	r3,1
  80d658:	002b883a 	mov	r21,zero
  80d65c:	003f3006 	br	80d320 <__alt_data_end+0xff80d320>
  80d660:	008020b4 	movhi	r2,130
  80d664:	10b84004 	addi	r2,r2,-7936
  80d668:	15000015 	stw	r20,0(r2)
  80d66c:	003f1b06 	br	80d2dc <__alt_data_end+0xff80d2dc>
  80d670:	9009883a 	mov	r4,r18
  80d674:	81400204 	addi	r5,r16,8
  80d678:	0812d280 	call	812d28 <_free_r>
  80d67c:	008020b4 	movhi	r2,130
  80d680:	10803404 	addi	r2,r2,208
  80d684:	10c00017 	ldw	r3,0(r2)
  80d688:	003f3906 	br	80d370 <__alt_data_end+0xff80d370>
  80d68c:	01005504 	movi	r4,340
  80d690:	20800436 	bltu	r4,r2,80d6a4 <_malloc_r+0x774>
  80d694:	3804d3fa 	srli	r2,r7,15
  80d698:	11001dc4 	addi	r4,r2,119
  80d69c:	210b883a 	add	r5,r4,r4
  80d6a0:	003f6206 	br	80d42c <__alt_data_end+0xff80d42c>
  80d6a4:	01015504 	movi	r4,1364
  80d6a8:	20800436 	bltu	r4,r2,80d6bc <_malloc_r+0x78c>
  80d6ac:	3804d4ba 	srli	r2,r7,18
  80d6b0:	11001f04 	addi	r4,r2,124
  80d6b4:	210b883a 	add	r5,r4,r4
  80d6b8:	003f5c06 	br	80d42c <__alt_data_end+0xff80d42c>
  80d6bc:	01403f04 	movi	r5,252
  80d6c0:	01001f84 	movi	r4,126
  80d6c4:	003f5906 	br	80d42c <__alt_data_end+0xff80d42c>
  80d6c8:	98800117 	ldw	r2,4(r19)
  80d6cc:	003fa906 	br	80d574 <__alt_data_end+0xff80d574>
  80d6d0:	6007883a 	mov	r3,r12
  80d6d4:	003ea206 	br	80d160 <__alt_data_end+0xff80d160>

0080d6d8 <memcpy>:
  80d6d8:	deffff04 	addi	sp,sp,-4
  80d6dc:	dc000015 	stw	r16,0(sp)
  80d6e0:	00c003c4 	movi	r3,15
  80d6e4:	2005883a 	mov	r2,r4
  80d6e8:	1980432e 	bgeu	r3,r6,80d7f8 <memcpy+0x120>
  80d6ec:	2146b03a 	or	r3,r4,r5
  80d6f0:	18c000cc 	andi	r3,r3,3
  80d6f4:	1800421e 	bne	r3,zero,80d800 <memcpy+0x128>
  80d6f8:	343ffc04 	addi	r16,r6,-16
  80d6fc:	8020d13a 	srli	r16,r16,4
  80d700:	28c00104 	addi	r3,r5,4
  80d704:	23400104 	addi	r13,r4,4
  80d708:	801e913a 	slli	r15,r16,4
  80d70c:	2b000204 	addi	r12,r5,8
  80d710:	22c00204 	addi	r11,r4,8
  80d714:	7bc00504 	addi	r15,r15,20
  80d718:	2a800304 	addi	r10,r5,12
  80d71c:	22400304 	addi	r9,r4,12
  80d720:	2bdf883a 	add	r15,r5,r15
  80d724:	2811883a 	mov	r8,r5
  80d728:	200f883a 	mov	r7,r4
  80d72c:	41000017 	ldw	r4,0(r8)
  80d730:	39c00404 	addi	r7,r7,16
  80d734:	18c00404 	addi	r3,r3,16
  80d738:	393ffc15 	stw	r4,-16(r7)
  80d73c:	1bbffc17 	ldw	r14,-16(r3)
  80d740:	6b400404 	addi	r13,r13,16
  80d744:	5ac00404 	addi	r11,r11,16
  80d748:	6bbffc15 	stw	r14,-16(r13)
  80d74c:	63800017 	ldw	r14,0(r12)
  80d750:	4a400404 	addi	r9,r9,16
  80d754:	42000404 	addi	r8,r8,16
  80d758:	5bbffc15 	stw	r14,-16(r11)
  80d75c:	53800017 	ldw	r14,0(r10)
  80d760:	63000404 	addi	r12,r12,16
  80d764:	52800404 	addi	r10,r10,16
  80d768:	4bbffc15 	stw	r14,-16(r9)
  80d76c:	1bffef1e 	bne	r3,r15,80d72c <__alt_data_end+0xff80d72c>
  80d770:	81c00044 	addi	r7,r16,1
  80d774:	380e913a 	slli	r7,r7,4
  80d778:	310003cc 	andi	r4,r6,15
  80d77c:	02c000c4 	movi	r11,3
  80d780:	11c7883a 	add	r3,r2,r7
  80d784:	29cb883a 	add	r5,r5,r7
  80d788:	59001f2e 	bgeu	r11,r4,80d808 <memcpy+0x130>
  80d78c:	1813883a 	mov	r9,r3
  80d790:	2811883a 	mov	r8,r5
  80d794:	200f883a 	mov	r7,r4
  80d798:	42800017 	ldw	r10,0(r8)
  80d79c:	4a400104 	addi	r9,r9,4
  80d7a0:	39ffff04 	addi	r7,r7,-4
  80d7a4:	4abfff15 	stw	r10,-4(r9)
  80d7a8:	42000104 	addi	r8,r8,4
  80d7ac:	59fffa36 	bltu	r11,r7,80d798 <__alt_data_end+0xff80d798>
  80d7b0:	213fff04 	addi	r4,r4,-4
  80d7b4:	2008d0ba 	srli	r4,r4,2
  80d7b8:	318000cc 	andi	r6,r6,3
  80d7bc:	21000044 	addi	r4,r4,1
  80d7c0:	2109883a 	add	r4,r4,r4
  80d7c4:	2109883a 	add	r4,r4,r4
  80d7c8:	1907883a 	add	r3,r3,r4
  80d7cc:	290b883a 	add	r5,r5,r4
  80d7d0:	30000626 	beq	r6,zero,80d7ec <memcpy+0x114>
  80d7d4:	198d883a 	add	r6,r3,r6
  80d7d8:	29c00003 	ldbu	r7,0(r5)
  80d7dc:	18c00044 	addi	r3,r3,1
  80d7e0:	29400044 	addi	r5,r5,1
  80d7e4:	19ffffc5 	stb	r7,-1(r3)
  80d7e8:	19bffb1e 	bne	r3,r6,80d7d8 <__alt_data_end+0xff80d7d8>
  80d7ec:	dc000017 	ldw	r16,0(sp)
  80d7f0:	dec00104 	addi	sp,sp,4
  80d7f4:	f800283a 	ret
  80d7f8:	2007883a 	mov	r3,r4
  80d7fc:	003ff406 	br	80d7d0 <__alt_data_end+0xff80d7d0>
  80d800:	2007883a 	mov	r3,r4
  80d804:	003ff306 	br	80d7d4 <__alt_data_end+0xff80d7d4>
  80d808:	200d883a 	mov	r6,r4
  80d80c:	003ff006 	br	80d7d0 <__alt_data_end+0xff80d7d0>

0080d810 <memset>:
  80d810:	20c000cc 	andi	r3,r4,3
  80d814:	2005883a 	mov	r2,r4
  80d818:	18004326 	beq	r3,zero,80d928 <memset+0x118>
  80d81c:	31ffffc4 	addi	r7,r6,-1
  80d820:	30004026 	beq	r6,zero,80d924 <memset+0x114>
  80d824:	2813883a 	mov	r9,r5
  80d828:	200d883a 	mov	r6,r4
  80d82c:	2007883a 	mov	r3,r4
  80d830:	00000406 	br	80d844 <memset+0x34>
  80d834:	3a3fffc4 	addi	r8,r7,-1
  80d838:	31800044 	addi	r6,r6,1
  80d83c:	38003926 	beq	r7,zero,80d924 <memset+0x114>
  80d840:	400f883a 	mov	r7,r8
  80d844:	18c00044 	addi	r3,r3,1
  80d848:	32400005 	stb	r9,0(r6)
  80d84c:	1a0000cc 	andi	r8,r3,3
  80d850:	403ff81e 	bne	r8,zero,80d834 <__alt_data_end+0xff80d834>
  80d854:	010000c4 	movi	r4,3
  80d858:	21c02d2e 	bgeu	r4,r7,80d910 <memset+0x100>
  80d85c:	29803fcc 	andi	r6,r5,255
  80d860:	3008923a 	slli	r4,r6,8
  80d864:	218cb03a 	or	r6,r4,r6
  80d868:	3008943a 	slli	r4,r6,16
  80d86c:	218cb03a 	or	r6,r4,r6
  80d870:	010003c4 	movi	r4,15
  80d874:	21c0182e 	bgeu	r4,r7,80d8d8 <memset+0xc8>
  80d878:	3b3ffc04 	addi	r12,r7,-16
  80d87c:	6018d13a 	srli	r12,r12,4
  80d880:	1a000104 	addi	r8,r3,4
  80d884:	1ac00204 	addi	r11,r3,8
  80d888:	6008913a 	slli	r4,r12,4
  80d88c:	1a800304 	addi	r10,r3,12
  80d890:	1813883a 	mov	r9,r3
  80d894:	21000504 	addi	r4,r4,20
  80d898:	1909883a 	add	r4,r3,r4
  80d89c:	49800015 	stw	r6,0(r9)
  80d8a0:	41800015 	stw	r6,0(r8)
  80d8a4:	59800015 	stw	r6,0(r11)
  80d8a8:	51800015 	stw	r6,0(r10)
  80d8ac:	42000404 	addi	r8,r8,16
  80d8b0:	4a400404 	addi	r9,r9,16
  80d8b4:	5ac00404 	addi	r11,r11,16
  80d8b8:	52800404 	addi	r10,r10,16
  80d8bc:	413ff71e 	bne	r8,r4,80d89c <__alt_data_end+0xff80d89c>
  80d8c0:	63000044 	addi	r12,r12,1
  80d8c4:	6018913a 	slli	r12,r12,4
  80d8c8:	39c003cc 	andi	r7,r7,15
  80d8cc:	010000c4 	movi	r4,3
  80d8d0:	1b07883a 	add	r3,r3,r12
  80d8d4:	21c00e2e 	bgeu	r4,r7,80d910 <memset+0x100>
  80d8d8:	1813883a 	mov	r9,r3
  80d8dc:	3811883a 	mov	r8,r7
  80d8e0:	010000c4 	movi	r4,3
  80d8e4:	49800015 	stw	r6,0(r9)
  80d8e8:	423fff04 	addi	r8,r8,-4
  80d8ec:	4a400104 	addi	r9,r9,4
  80d8f0:	223ffc36 	bltu	r4,r8,80d8e4 <__alt_data_end+0xff80d8e4>
  80d8f4:	393fff04 	addi	r4,r7,-4
  80d8f8:	2008d0ba 	srli	r4,r4,2
  80d8fc:	39c000cc 	andi	r7,r7,3
  80d900:	21000044 	addi	r4,r4,1
  80d904:	2109883a 	add	r4,r4,r4
  80d908:	2109883a 	add	r4,r4,r4
  80d90c:	1907883a 	add	r3,r3,r4
  80d910:	38000426 	beq	r7,zero,80d924 <memset+0x114>
  80d914:	19cf883a 	add	r7,r3,r7
  80d918:	19400005 	stb	r5,0(r3)
  80d91c:	18c00044 	addi	r3,r3,1
  80d920:	19fffd1e 	bne	r3,r7,80d918 <__alt_data_end+0xff80d918>
  80d924:	f800283a 	ret
  80d928:	2007883a 	mov	r3,r4
  80d92c:	300f883a 	mov	r7,r6
  80d930:	003fc806 	br	80d854 <__alt_data_end+0xff80d854>

0080d934 <_open_r>:
  80d934:	defffd04 	addi	sp,sp,-12
  80d938:	dc000015 	stw	r16,0(sp)
  80d93c:	040020b4 	movhi	r16,130
  80d940:	dc400115 	stw	r17,4(sp)
  80d944:	843fbc04 	addi	r16,r16,-272
  80d948:	2023883a 	mov	r17,r4
  80d94c:	2809883a 	mov	r4,r5
  80d950:	300b883a 	mov	r5,r6
  80d954:	380d883a 	mov	r6,r7
  80d958:	dfc00215 	stw	ra,8(sp)
  80d95c:	80000015 	stw	zero,0(r16)
  80d960:	081a9b00 	call	81a9b0 <open>
  80d964:	00ffffc4 	movi	r3,-1
  80d968:	10c00526 	beq	r2,r3,80d980 <_open_r+0x4c>
  80d96c:	dfc00217 	ldw	ra,8(sp)
  80d970:	dc400117 	ldw	r17,4(sp)
  80d974:	dc000017 	ldw	r16,0(sp)
  80d978:	dec00304 	addi	sp,sp,12
  80d97c:	f800283a 	ret
  80d980:	80c00017 	ldw	r3,0(r16)
  80d984:	183ff926 	beq	r3,zero,80d96c <__alt_data_end+0xff80d96c>
  80d988:	88c00015 	stw	r3,0(r17)
  80d98c:	003ff706 	br	80d96c <__alt_data_end+0xff80d96c>

0080d990 <_putchar_r>:
  80d990:	21800217 	ldw	r6,8(r4)
  80d994:	08143b81 	jmpi	8143b8 <_putc_r>

0080d998 <putchar>:
  80d998:	008020b4 	movhi	r2,130
  80d99c:	10b83f04 	addi	r2,r2,-7940
  80d9a0:	200b883a 	mov	r5,r4
  80d9a4:	11000017 	ldw	r4,0(r2)
  80d9a8:	21800217 	ldw	r6,8(r4)
  80d9ac:	08143b81 	jmpi	8143b8 <_putc_r>

0080d9b0 <lflush>:
  80d9b0:	2080030b 	ldhu	r2,12(r4)
  80d9b4:	00c00244 	movi	r3,9
  80d9b8:	1080024c 	andi	r2,r2,9
  80d9bc:	10c00226 	beq	r2,r3,80d9c8 <lflush+0x18>
  80d9c0:	0005883a 	mov	r2,zero
  80d9c4:	f800283a 	ret
  80d9c8:	08127881 	jmpi	812788 <fflush>

0080d9cc <__srefill_r>:
  80d9cc:	defffc04 	addi	sp,sp,-16
  80d9d0:	dc400115 	stw	r17,4(sp)
  80d9d4:	dc000015 	stw	r16,0(sp)
  80d9d8:	dfc00315 	stw	ra,12(sp)
  80d9dc:	dc800215 	stw	r18,8(sp)
  80d9e0:	2023883a 	mov	r17,r4
  80d9e4:	2821883a 	mov	r16,r5
  80d9e8:	20000226 	beq	r4,zero,80d9f4 <__srefill_r+0x28>
  80d9ec:	20800e17 	ldw	r2,56(r4)
  80d9f0:	10003c26 	beq	r2,zero,80dae4 <__srefill_r+0x118>
  80d9f4:	80c0030b 	ldhu	r3,12(r16)
  80d9f8:	1908000c 	andi	r4,r3,8192
  80d9fc:	1805883a 	mov	r2,r3
  80da00:	2000071e 	bne	r4,zero,80da20 <__srefill_r+0x54>
  80da04:	81001917 	ldw	r4,100(r16)
  80da08:	18880014 	ori	r2,r3,8192
  80da0c:	00f7ffc4 	movi	r3,-8193
  80da10:	20c8703a 	and	r4,r4,r3
  80da14:	8080030d 	sth	r2,12(r16)
  80da18:	1007883a 	mov	r3,r2
  80da1c:	81001915 	stw	r4,100(r16)
  80da20:	80000115 	stw	zero,4(r16)
  80da24:	1100080c 	andi	r4,r2,32
  80da28:	2000571e 	bne	r4,zero,80db88 <__srefill_r+0x1bc>
  80da2c:	1100010c 	andi	r4,r2,4
  80da30:	20001f26 	beq	r4,zero,80dab0 <__srefill_r+0xe4>
  80da34:	81400c17 	ldw	r5,48(r16)
  80da38:	28000826 	beq	r5,zero,80da5c <__srefill_r+0x90>
  80da3c:	80801004 	addi	r2,r16,64
  80da40:	28800226 	beq	r5,r2,80da4c <__srefill_r+0x80>
  80da44:	8809883a 	mov	r4,r17
  80da48:	0812d280 	call	812d28 <_free_r>
  80da4c:	80800f17 	ldw	r2,60(r16)
  80da50:	80000c15 	stw	zero,48(r16)
  80da54:	80800115 	stw	r2,4(r16)
  80da58:	1000391e 	bne	r2,zero,80db40 <__srefill_r+0x174>
  80da5c:	80800417 	ldw	r2,16(r16)
  80da60:	10004b26 	beq	r2,zero,80db90 <__srefill_r+0x1c4>
  80da64:	8480030b 	ldhu	r18,12(r16)
  80da68:	908000cc 	andi	r2,r18,3
  80da6c:	10001f1e 	bne	r2,zero,80daec <__srefill_r+0x120>
  80da70:	81800417 	ldw	r6,16(r16)
  80da74:	80800817 	ldw	r2,32(r16)
  80da78:	81400717 	ldw	r5,28(r16)
  80da7c:	81c00517 	ldw	r7,20(r16)
  80da80:	81800015 	stw	r6,0(r16)
  80da84:	8809883a 	mov	r4,r17
  80da88:	103ee83a 	callr	r2
  80da8c:	80800115 	stw	r2,4(r16)
  80da90:	00800e0e 	bge	zero,r2,80dacc <__srefill_r+0x100>
  80da94:	0005883a 	mov	r2,zero
  80da98:	dfc00317 	ldw	ra,12(sp)
  80da9c:	dc800217 	ldw	r18,8(sp)
  80daa0:	dc400117 	ldw	r17,4(sp)
  80daa4:	dc000017 	ldw	r16,0(sp)
  80daa8:	dec00404 	addi	sp,sp,16
  80daac:	f800283a 	ret
  80dab0:	1100040c 	andi	r4,r2,16
  80dab4:	20003026 	beq	r4,zero,80db78 <__srefill_r+0x1ac>
  80dab8:	1080020c 	andi	r2,r2,8
  80dabc:	1000241e 	bne	r2,zero,80db50 <__srefill_r+0x184>
  80dac0:	18c00114 	ori	r3,r3,4
  80dac4:	80c0030d 	sth	r3,12(r16)
  80dac8:	003fe406 	br	80da5c <__alt_data_end+0xff80da5c>
  80dacc:	80c0030b 	ldhu	r3,12(r16)
  80dad0:	1000161e 	bne	r2,zero,80db2c <__srefill_r+0x160>
  80dad4:	18c00814 	ori	r3,r3,32
  80dad8:	00bfffc4 	movi	r2,-1
  80dadc:	80c0030d 	sth	r3,12(r16)
  80dae0:	003fed06 	br	80da98 <__alt_data_end+0xff80da98>
  80dae4:	0812b080 	call	812b08 <__sinit>
  80dae8:	003fc206 	br	80d9f4 <__alt_data_end+0xff80d9f4>
  80daec:	008020b4 	movhi	r2,130
  80daf0:	10b83e04 	addi	r2,r2,-7944
  80daf4:	11000017 	ldw	r4,0(r2)
  80daf8:	01402074 	movhi	r5,129
  80dafc:	00800044 	movi	r2,1
  80db00:	29766c04 	addi	r5,r5,-9808
  80db04:	8080030d 	sth	r2,12(r16)
  80db08:	08130180 	call	813018 <_fwalk>
  80db0c:	00800244 	movi	r2,9
  80db10:	8480030d 	sth	r18,12(r16)
  80db14:	9480024c 	andi	r18,r18,9
  80db18:	90bfd51e 	bne	r18,r2,80da70 <__alt_data_end+0xff80da70>
  80db1c:	8809883a 	mov	r4,r17
  80db20:	800b883a 	mov	r5,r16
  80db24:	08125240 	call	812524 <__sflush_r>
  80db28:	003fd106 	br	80da70 <__alt_data_end+0xff80da70>
  80db2c:	18c01014 	ori	r3,r3,64
  80db30:	80000115 	stw	zero,4(r16)
  80db34:	00bfffc4 	movi	r2,-1
  80db38:	80c0030d 	sth	r3,12(r16)
  80db3c:	003fd606 	br	80da98 <__alt_data_end+0xff80da98>
  80db40:	80c00e17 	ldw	r3,56(r16)
  80db44:	0005883a 	mov	r2,zero
  80db48:	80c00015 	stw	r3,0(r16)
  80db4c:	003fd206 	br	80da98 <__alt_data_end+0xff80da98>
  80db50:	8809883a 	mov	r4,r17
  80db54:	800b883a 	mov	r5,r16
  80db58:	081272c0 	call	81272c <_fflush_r>
  80db5c:	10000a1e 	bne	r2,zero,80db88 <__srefill_r+0x1bc>
  80db60:	8080030b 	ldhu	r2,12(r16)
  80db64:	00fffdc4 	movi	r3,-9
  80db68:	80000215 	stw	zero,8(r16)
  80db6c:	1886703a 	and	r3,r3,r2
  80db70:	80000615 	stw	zero,24(r16)
  80db74:	003fd206 	br	80dac0 <__alt_data_end+0xff80dac0>
  80db78:	00800244 	movi	r2,9
  80db7c:	88800015 	stw	r2,0(r17)
  80db80:	18c01014 	ori	r3,r3,64
  80db84:	80c0030d 	sth	r3,12(r16)
  80db88:	00bfffc4 	movi	r2,-1
  80db8c:	003fc206 	br	80da98 <__alt_data_end+0xff80da98>
  80db90:	8809883a 	mov	r4,r17
  80db94:	800b883a 	mov	r5,r16
  80db98:	080cd780 	call	80cd78 <__smakebuf_r>
  80db9c:	003fb106 	br	80da64 <__alt_data_end+0xff80da64>

0080dba0 <__srget_r>:
  80dba0:	defffd04 	addi	sp,sp,-12
  80dba4:	dc400115 	stw	r17,4(sp)
  80dba8:	dc000015 	stw	r16,0(sp)
  80dbac:	dfc00215 	stw	ra,8(sp)
  80dbb0:	2023883a 	mov	r17,r4
  80dbb4:	2821883a 	mov	r16,r5
  80dbb8:	20000226 	beq	r4,zero,80dbc4 <__srget_r+0x24>
  80dbbc:	20800e17 	ldw	r2,56(r4)
  80dbc0:	10001026 	beq	r2,zero,80dc04 <__srget_r+0x64>
  80dbc4:	8809883a 	mov	r4,r17
  80dbc8:	800b883a 	mov	r5,r16
  80dbcc:	080d9cc0 	call	80d9cc <__srefill_r>
  80dbd0:	10000e1e 	bne	r2,zero,80dc0c <__srget_r+0x6c>
  80dbd4:	80c00017 	ldw	r3,0(r16)
  80dbd8:	80800117 	ldw	r2,4(r16)
  80dbdc:	19000044 	addi	r4,r3,1
  80dbe0:	10bfffc4 	addi	r2,r2,-1
  80dbe4:	80800115 	stw	r2,4(r16)
  80dbe8:	81000015 	stw	r4,0(r16)
  80dbec:	18800003 	ldbu	r2,0(r3)
  80dbf0:	dfc00217 	ldw	ra,8(sp)
  80dbf4:	dc400117 	ldw	r17,4(sp)
  80dbf8:	dc000017 	ldw	r16,0(sp)
  80dbfc:	dec00304 	addi	sp,sp,12
  80dc00:	f800283a 	ret
  80dc04:	0812b080 	call	812b08 <__sinit>
  80dc08:	003fee06 	br	80dbc4 <__alt_data_end+0xff80dbc4>
  80dc0c:	00bfffc4 	movi	r2,-1
  80dc10:	003ff706 	br	80dbf0 <__alt_data_end+0xff80dbf0>

0080dc14 <__srget>:
  80dc14:	008020b4 	movhi	r2,130
  80dc18:	10b83f04 	addi	r2,r2,-7940
  80dc1c:	200b883a 	mov	r5,r4
  80dc20:	11000017 	ldw	r4,0(r2)
  80dc24:	080dba01 	jmpi	80dba0 <__srget_r>

0080dc28 <_sbrk_r>:
  80dc28:	defffd04 	addi	sp,sp,-12
  80dc2c:	dc000015 	stw	r16,0(sp)
  80dc30:	040020b4 	movhi	r16,130
  80dc34:	dc400115 	stw	r17,4(sp)
  80dc38:	843fbc04 	addi	r16,r16,-272
  80dc3c:	2023883a 	mov	r17,r4
  80dc40:	2809883a 	mov	r4,r5
  80dc44:	dfc00215 	stw	ra,8(sp)
  80dc48:	80000015 	stw	zero,0(r16)
  80dc4c:	081acb40 	call	81acb4 <sbrk>
  80dc50:	00ffffc4 	movi	r3,-1
  80dc54:	10c00526 	beq	r2,r3,80dc6c <_sbrk_r+0x44>
  80dc58:	dfc00217 	ldw	ra,8(sp)
  80dc5c:	dc400117 	ldw	r17,4(sp)
  80dc60:	dc000017 	ldw	r16,0(sp)
  80dc64:	dec00304 	addi	sp,sp,12
  80dc68:	f800283a 	ret
  80dc6c:	80c00017 	ldw	r3,0(r16)
  80dc70:	183ff926 	beq	r3,zero,80dc58 <__alt_data_end+0xff80dc58>
  80dc74:	88c00015 	stw	r3,0(r17)
  80dc78:	003ff706 	br	80dc58 <__alt_data_end+0xff80dc58>

0080dc7c <__sread>:
  80dc7c:	defffe04 	addi	sp,sp,-8
  80dc80:	dc000015 	stw	r16,0(sp)
  80dc84:	2821883a 	mov	r16,r5
  80dc88:	2940038f 	ldh	r5,14(r5)
  80dc8c:	dfc00115 	stw	ra,4(sp)
  80dc90:	08145240 	call	814524 <_read_r>
  80dc94:	10000716 	blt	r2,zero,80dcb4 <__sread+0x38>
  80dc98:	80c01417 	ldw	r3,80(r16)
  80dc9c:	1887883a 	add	r3,r3,r2
  80dca0:	80c01415 	stw	r3,80(r16)
  80dca4:	dfc00117 	ldw	ra,4(sp)
  80dca8:	dc000017 	ldw	r16,0(sp)
  80dcac:	dec00204 	addi	sp,sp,8
  80dcb0:	f800283a 	ret
  80dcb4:	80c0030b 	ldhu	r3,12(r16)
  80dcb8:	18fbffcc 	andi	r3,r3,61439
  80dcbc:	80c0030d 	sth	r3,12(r16)
  80dcc0:	dfc00117 	ldw	ra,4(sp)
  80dcc4:	dc000017 	ldw	r16,0(sp)
  80dcc8:	dec00204 	addi	sp,sp,8
  80dccc:	f800283a 	ret

0080dcd0 <__seofread>:
  80dcd0:	0005883a 	mov	r2,zero
  80dcd4:	f800283a 	ret

0080dcd8 <__swrite>:
  80dcd8:	2880030b 	ldhu	r2,12(r5)
  80dcdc:	defffb04 	addi	sp,sp,-20
  80dce0:	dcc00315 	stw	r19,12(sp)
  80dce4:	dc800215 	stw	r18,8(sp)
  80dce8:	dc400115 	stw	r17,4(sp)
  80dcec:	dc000015 	stw	r16,0(sp)
  80dcf0:	dfc00415 	stw	ra,16(sp)
  80dcf4:	10c0400c 	andi	r3,r2,256
  80dcf8:	2821883a 	mov	r16,r5
  80dcfc:	2027883a 	mov	r19,r4
  80dd00:	3025883a 	mov	r18,r6
  80dd04:	3823883a 	mov	r17,r7
  80dd08:	18000526 	beq	r3,zero,80dd20 <__swrite+0x48>
  80dd0c:	2940038f 	ldh	r5,14(r5)
  80dd10:	000d883a 	mov	r6,zero
  80dd14:	01c00084 	movi	r7,2
  80dd18:	08132d40 	call	8132d4 <_lseek_r>
  80dd1c:	8080030b 	ldhu	r2,12(r16)
  80dd20:	8140038f 	ldh	r5,14(r16)
  80dd24:	10bbffcc 	andi	r2,r2,61439
  80dd28:	9809883a 	mov	r4,r19
  80dd2c:	900d883a 	mov	r6,r18
  80dd30:	880f883a 	mov	r7,r17
  80dd34:	8080030d 	sth	r2,12(r16)
  80dd38:	dfc00417 	ldw	ra,16(sp)
  80dd3c:	dcc00317 	ldw	r19,12(sp)
  80dd40:	dc800217 	ldw	r18,8(sp)
  80dd44:	dc400117 	ldw	r17,4(sp)
  80dd48:	dc000017 	ldw	r16,0(sp)
  80dd4c:	dec00504 	addi	sp,sp,20
  80dd50:	08109f81 	jmpi	8109f8 <_write_r>

0080dd54 <__sseek>:
  80dd54:	defffe04 	addi	sp,sp,-8
  80dd58:	dc000015 	stw	r16,0(sp)
  80dd5c:	2821883a 	mov	r16,r5
  80dd60:	2940038f 	ldh	r5,14(r5)
  80dd64:	dfc00115 	stw	ra,4(sp)
  80dd68:	08132d40 	call	8132d4 <_lseek_r>
  80dd6c:	00ffffc4 	movi	r3,-1
  80dd70:	10c00826 	beq	r2,r3,80dd94 <__sseek+0x40>
  80dd74:	80c0030b 	ldhu	r3,12(r16)
  80dd78:	80801415 	stw	r2,80(r16)
  80dd7c:	18c40014 	ori	r3,r3,4096
  80dd80:	80c0030d 	sth	r3,12(r16)
  80dd84:	dfc00117 	ldw	ra,4(sp)
  80dd88:	dc000017 	ldw	r16,0(sp)
  80dd8c:	dec00204 	addi	sp,sp,8
  80dd90:	f800283a 	ret
  80dd94:	80c0030b 	ldhu	r3,12(r16)
  80dd98:	18fbffcc 	andi	r3,r3,61439
  80dd9c:	80c0030d 	sth	r3,12(r16)
  80dda0:	dfc00117 	ldw	ra,4(sp)
  80dda4:	dc000017 	ldw	r16,0(sp)
  80dda8:	dec00204 	addi	sp,sp,8
  80ddac:	f800283a 	ret

0080ddb0 <__sclose>:
  80ddb0:	2940038f 	ldh	r5,14(r5)
  80ddb4:	0810ba81 	jmpi	810ba8 <_close_r>

0080ddb8 <critical_factorization>:
  80ddb8:	030020b4 	movhi	r12,130
  80ddbc:	63383d04 	addi	r12,r12,-7948
  80ddc0:	63c00017 	ldw	r15,0(r12)
  80ddc4:	02c00044 	movi	r11,1
  80ddc8:	5815883a 	mov	r10,r11
  80ddcc:	001b883a 	mov	r13,zero
  80ddd0:	00bfffc4 	movi	r2,-1
  80ddd4:	581d883a 	mov	r14,r11
  80ddd8:	5351883a 	add	r8,r10,r13
  80dddc:	4140152e 	bgeu	r8,r5,80de34 <critical_factorization+0x7c>
  80dde0:	2207883a 	add	r3,r4,r8
  80dde4:	18c00003 	ldbu	r3,0(r3)
  80dde8:	78cf883a 	add	r7,r15,r3
  80ddec:	39c00043 	ldbu	r7,1(r7)
  80ddf0:	39c000cc 	andi	r7,r7,3
  80ddf4:	3b804526 	beq	r7,r14,80df0c <critical_factorization+0x154>
  80ddf8:	208f883a 	add	r7,r4,r2
  80ddfc:	3a8f883a 	add	r7,r7,r10
  80de00:	39c00003 	ldbu	r7,0(r7)
  80de04:	79d3883a 	add	r9,r15,r7
  80de08:	4a400043 	ldbu	r9,1(r9)
  80de0c:	4a4000cc 	andi	r9,r9,3
  80de10:	4b803826 	beq	r9,r14,80def4 <critical_factorization+0x13c>
  80de14:	18c03fcc 	andi	r3,r3,255
  80de18:	39c03fcc 	andi	r7,r7,255
  80de1c:	19c0292e 	bgeu	r3,r7,80dec4 <critical_factorization+0x10c>
  80de20:	401b883a 	mov	r13,r8
  80de24:	02800044 	movi	r10,1
  80de28:	4097c83a 	sub	r11,r8,r2
  80de2c:	5351883a 	add	r8,r10,r13
  80de30:	417feb36 	bltu	r8,r5,80dde0 <__alt_data_end+0xff80dde0>
  80de34:	03400044 	movi	r13,1
  80de38:	32c00015 	stw	r11,0(r6)
  80de3c:	63c00017 	ldw	r15,0(r12)
  80de40:	6815883a 	mov	r10,r13
  80de44:	0017883a 	mov	r11,zero
  80de48:	033fffc4 	movi	r12,-1
  80de4c:	681d883a 	mov	r14,r13
  80de50:	52d1883a 	add	r8,r10,r11
  80de54:	4140152e 	bgeu	r8,r5,80deac <critical_factorization+0xf4>
  80de58:	2207883a 	add	r3,r4,r8
  80de5c:	18c00003 	ldbu	r3,0(r3)
  80de60:	78cf883a 	add	r7,r15,r3
  80de64:	39c00043 	ldbu	r7,1(r7)
  80de68:	39c000cc 	andi	r7,r7,3
  80de6c:	3b802526 	beq	r7,r14,80df04 <critical_factorization+0x14c>
  80de70:	230f883a 	add	r7,r4,r12
  80de74:	3a8f883a 	add	r7,r7,r10
  80de78:	39c00003 	ldbu	r7,0(r7)
  80de7c:	79d3883a 	add	r9,r15,r7
  80de80:	4a400043 	ldbu	r9,1(r9)
  80de84:	4a4000cc 	andi	r9,r9,3
  80de88:	4b801c26 	beq	r9,r14,80defc <critical_factorization+0x144>
  80de8c:	18c03fcc 	andi	r3,r3,255
  80de90:	39c03fcc 	andi	r7,r7,255
  80de94:	38c0112e 	bgeu	r7,r3,80dedc <critical_factorization+0x124>
  80de98:	4017883a 	mov	r11,r8
  80de9c:	02800044 	movi	r10,1
  80dea0:	431bc83a 	sub	r13,r8,r12
  80dea4:	52d1883a 	add	r8,r10,r11
  80dea8:	417feb36 	bltu	r8,r5,80de58 <__alt_data_end+0xff80de58>
  80deac:	63000044 	addi	r12,r12,1
  80deb0:	10800044 	addi	r2,r2,1
  80deb4:	60800236 	bltu	r12,r2,80dec0 <critical_factorization+0x108>
  80deb8:	33400015 	stw	r13,0(r6)
  80debc:	6005883a 	mov	r2,r12
  80dec0:	f800283a 	ret
  80dec4:	19c01326 	beq	r3,r7,80df14 <critical_factorization+0x15c>
  80dec8:	02c00044 	movi	r11,1
  80decc:	6805883a 	mov	r2,r13
  80ded0:	5815883a 	mov	r10,r11
  80ded4:	6adb883a 	add	r13,r13,r11
  80ded8:	003fbf06 	br	80ddd8 <__alt_data_end+0xff80ddd8>
  80dedc:	19c01026 	beq	r3,r7,80df20 <critical_factorization+0x168>
  80dee0:	03400044 	movi	r13,1
  80dee4:	5819883a 	mov	r12,r11
  80dee8:	6815883a 	mov	r10,r13
  80deec:	5b57883a 	add	r11,r11,r13
  80def0:	003fd706 	br	80de50 <__alt_data_end+0xff80de50>
  80def4:	39c00804 	addi	r7,r7,32
  80def8:	003fc606 	br	80de14 <__alt_data_end+0xff80de14>
  80defc:	39c00804 	addi	r7,r7,32
  80df00:	003fe206 	br	80de8c <__alt_data_end+0xff80de8c>
  80df04:	18c00804 	addi	r3,r3,32
  80df08:	003fd906 	br	80de70 <__alt_data_end+0xff80de70>
  80df0c:	18c00804 	addi	r3,r3,32
  80df10:	003fb906 	br	80ddf8 <__alt_data_end+0xff80ddf8>
  80df14:	52c00526 	beq	r10,r11,80df2c <critical_factorization+0x174>
  80df18:	52800044 	addi	r10,r10,1
  80df1c:	003fae06 	br	80ddd8 <__alt_data_end+0xff80ddd8>
  80df20:	53400526 	beq	r10,r13,80df38 <critical_factorization+0x180>
  80df24:	52800044 	addi	r10,r10,1
  80df28:	003fc906 	br	80de50 <__alt_data_end+0xff80de50>
  80df2c:	401b883a 	mov	r13,r8
  80df30:	02800044 	movi	r10,1
  80df34:	003fa806 	br	80ddd8 <__alt_data_end+0xff80ddd8>
  80df38:	4017883a 	mov	r11,r8
  80df3c:	02800044 	movi	r10,1
  80df40:	003fc306 	br	80de50 <__alt_data_end+0xff80de50>

0080df44 <two_way_long_needle>:
  80df44:	defef204 	addi	sp,sp,-1080
  80df48:	dc410515 	stw	r17,1044(sp)
  80df4c:	dc410004 	addi	r17,sp,1024
  80df50:	2811883a 	mov	r8,r5
  80df54:	dd810a15 	stw	r22,1064(sp)
  80df58:	dd010815 	stw	r20,1056(sp)
  80df5c:	302d883a 	mov	r22,r6
  80df60:	2029883a 	mov	r20,r4
  80df64:	380b883a 	mov	r5,r7
  80df68:	3009883a 	mov	r4,r6
  80df6c:	880d883a 	mov	r6,r17
  80df70:	dd410915 	stw	r21,1060(sp)
  80df74:	dc010415 	stw	r16,1040(sp)
  80df78:	da010315 	stw	r8,1036(sp)
  80df7c:	dfc10d15 	stw	ra,1076(sp)
  80df80:	df010c15 	stw	fp,1072(sp)
  80df84:	ddc10b15 	stw	r23,1068(sp)
  80df88:	dcc10715 	stw	r19,1052(sp)
  80df8c:	dc810615 	stw	r18,1048(sp)
  80df90:	382b883a 	mov	r21,r7
  80df94:	080ddb80 	call	80ddb8 <critical_factorization>
  80df98:	da010317 	ldw	r8,1036(sp)
  80df9c:	1021883a 	mov	r16,r2
  80dfa0:	d807883a 	mov	r3,sp
  80dfa4:	1d400015 	stw	r21,0(r3)
  80dfa8:	18c00104 	addi	r3,r3,4
  80dfac:	88fffd1e 	bne	r17,r3,80dfa4 <__alt_data_end+0xff80dfa4>
  80dfb0:	a8001726 	beq	r21,zero,80e010 <two_way_long_needle+0xcc>
  80dfb4:	008020b4 	movhi	r2,130
  80dfb8:	10b83d04 	addi	r2,r2,-7948
  80dfbc:	a9bfffc4 	addi	r6,r21,-1
  80dfc0:	b007883a 	mov	r3,r22
  80dfc4:	12800017 	ldw	r10,0(r2)
  80dfc8:	b553883a 	add	r9,r22,r21
  80dfcc:	01c00044 	movi	r7,1
  80dfd0:	00000706 	br	80dff0 <two_way_long_needle+0xac>
  80dfd4:	1085883a 	add	r2,r2,r2
  80dfd8:	1085883a 	add	r2,r2,r2
  80dfdc:	d885883a 	add	r2,sp,r2
  80dfe0:	11800015 	stw	r6,0(r2)
  80dfe4:	18c00044 	addi	r3,r3,1
  80dfe8:	31bfffc4 	addi	r6,r6,-1
  80dfec:	1a400826 	beq	r3,r9,80e010 <two_way_long_needle+0xcc>
  80dff0:	19400003 	ldbu	r5,0(r3)
  80dff4:	5145883a 	add	r2,r10,r5
  80dff8:	11000043 	ldbu	r4,1(r2)
  80dffc:	2805883a 	mov	r2,r5
  80e000:	210000cc 	andi	r4,r4,3
  80e004:	21fff31e 	bne	r4,r7,80dfd4 <__alt_data_end+0xff80dfd4>
  80e008:	28800804 	addi	r2,r5,32
  80e00c:	003ff106 	br	80dfd4 <__alt_data_end+0xff80dfd4>
  80e010:	d9410017 	ldw	r5,1024(sp)
  80e014:	b009883a 	mov	r4,r22
  80e018:	800d883a 	mov	r6,r16
  80e01c:	b14b883a 	add	r5,r22,r5
  80e020:	da010315 	stw	r8,1036(sp)
  80e024:	080e94c0 	call	80e94c <strncasecmp>
  80e028:	da010317 	ldw	r8,1036(sp)
  80e02c:	10007a1e 	bne	r2,zero,80e218 <two_way_long_needle+0x2d4>
  80e030:	05c00044 	movi	r23,1
  80e034:	bc07c83a 	sub	r3,r23,r16
  80e038:	d8c10115 	stw	r3,1028(sp)
  80e03c:	80ffffc4 	addi	r3,r16,-1
  80e040:	0027883a 	mov	r19,zero
  80e044:	0039883a 	mov	fp,zero
  80e048:	acbfffc4 	addi	r18,r21,-1
  80e04c:	d8c10215 	stw	r3,1032(sp)
  80e050:	00000706 	br	80e070 <two_way_long_needle+0x12c>
  80e054:	98000326 	beq	r19,zero,80e064 <two_way_long_needle+0x120>
  80e058:	d8c10017 	ldw	r3,1024(sp)
  80e05c:	10c0012e 	bgeu	r2,r3,80e064 <two_way_long_needle+0x120>
  80e060:	a8c5c83a 	sub	r2,r21,r3
  80e064:	e0b9883a 	add	fp,fp,r2
  80e068:	0027883a 	mov	r19,zero
  80e06c:	8811883a 	mov	r8,r17
  80e070:	e563883a 	add	r17,fp,r21
  80e074:	a209883a 	add	r4,r20,r8
  80e078:	000b883a 	mov	r5,zero
  80e07c:	8a0dc83a 	sub	r6,r17,r8
  80e080:	08133300 	call	813330 <memchr>
  80e084:	1000601e 	bne	r2,zero,80e208 <two_way_long_needle+0x2c4>
  80e088:	88005f26 	beq	r17,zero,80e208 <two_way_long_needle+0x2c4>
  80e08c:	00c020b4 	movhi	r3,130
  80e090:	18f83d04 	addi	r3,r3,-7948
  80e094:	a445883a 	add	r2,r20,r17
  80e098:	19000017 	ldw	r4,0(r3)
  80e09c:	10bfffc3 	ldbu	r2,-1(r2)
  80e0a0:	2087883a 	add	r3,r4,r2
  80e0a4:	18c00043 	ldbu	r3,1(r3)
  80e0a8:	18c000cc 	andi	r3,r3,3
  80e0ac:	1dc03d26 	beq	r3,r23,80e1a4 <two_way_long_needle+0x260>
  80e0b0:	1085883a 	add	r2,r2,r2
  80e0b4:	1085883a 	add	r2,r2,r2
  80e0b8:	d885883a 	add	r2,sp,r2
  80e0bc:	10800017 	ldw	r2,0(r2)
  80e0c0:	103fe41e 	bne	r2,zero,80e054 <__alt_data_end+0xff80e054>
  80e0c4:	9807883a 	mov	r3,r19
  80e0c8:	9c00012e 	bgeu	r19,r16,80e0d0 <two_way_long_needle+0x18c>
  80e0cc:	8007883a 	mov	r3,r16
  80e0d0:	1c80122e 	bgeu	r3,r18,80e11c <two_way_long_needle+0x1d8>
  80e0d4:	b0c5883a 	add	r2,r22,r3
  80e0d8:	11400003 	ldbu	r5,0(r2)
  80e0dc:	2145883a 	add	r2,r4,r5
  80e0e0:	10800043 	ldbu	r2,1(r2)
  80e0e4:	280d883a 	mov	r6,r5
  80e0e8:	108000cc 	andi	r2,r2,3
  80e0ec:	15c02b26 	beq	r2,r23,80e19c <two_way_long_needle+0x258>
  80e0f0:	1f05883a 	add	r2,r3,fp
  80e0f4:	a085883a 	add	r2,r20,r2
  80e0f8:	10800003 	ldbu	r2,0(r2)
  80e0fc:	208b883a 	add	r5,r4,r2
  80e100:	2a000043 	ldbu	r8,1(r5)
  80e104:	100b883a 	mov	r5,r2
  80e108:	420000cc 	andi	r8,r8,3
  80e10c:	45c01b26 	beq	r8,r23,80e17c <two_way_long_needle+0x238>
  80e110:	31401c1e 	bne	r6,r5,80e184 <two_way_long_needle+0x240>
  80e114:	18c00044 	addi	r3,r3,1
  80e118:	1cbfee36 	bltu	r3,r18,80e0d4 <__alt_data_end+0xff80e0d4>
  80e11c:	d8c10217 	ldw	r3,1032(sp)
  80e120:	800d883a 	mov	r6,r16
  80e124:	9c00232e 	bgeu	r19,r16,80e1b4 <two_way_long_needle+0x270>
  80e128:	b0c5883a 	add	r2,r22,r3
  80e12c:	11400003 	ldbu	r5,0(r2)
  80e130:	2145883a 	add	r2,r4,r5
  80e134:	10800043 	ldbu	r2,1(r2)
  80e138:	2811883a 	mov	r8,r5
  80e13c:	108000cc 	andi	r2,r2,3
  80e140:	15c02226 	beq	r2,r23,80e1cc <two_way_long_needle+0x288>
  80e144:	1f05883a 	add	r2,r3,fp
  80e148:	a085883a 	add	r2,r20,r2
  80e14c:	11400003 	ldbu	r5,0(r2)
  80e150:	2145883a 	add	r2,r4,r5
  80e154:	10800043 	ldbu	r2,1(r2)
  80e158:	2817883a 	mov	r11,r5
  80e15c:	108000cc 	andi	r2,r2,3
  80e160:	15c01226 	beq	r2,r23,80e1ac <two_way_long_needle+0x268>
  80e164:	42c0131e 	bne	r8,r11,80e1b4 <two_way_long_needle+0x270>
  80e168:	31bfffc4 	addi	r6,r6,-1
  80e16c:	18bfffc4 	addi	r2,r3,-1
  80e170:	9980272e 	bgeu	r19,r6,80e210 <two_way_long_needle+0x2cc>
  80e174:	1007883a 	mov	r3,r2
  80e178:	003feb06 	br	80e128 <__alt_data_end+0xff80e128>
  80e17c:	11400804 	addi	r5,r2,32
  80e180:	317fe426 	beq	r6,r5,80e114 <__alt_data_end+0xff80e114>
  80e184:	1cbfe52e 	bgeu	r3,r18,80e11c <__alt_data_end+0xff80e11c>
  80e188:	d9010117 	ldw	r4,1028(sp)
  80e18c:	0027883a 	mov	r19,zero
  80e190:	2739883a 	add	fp,r4,fp
  80e194:	e0f9883a 	add	fp,fp,r3
  80e198:	003fb406 	br	80e06c <__alt_data_end+0xff80e06c>
  80e19c:	29800804 	addi	r6,r5,32
  80e1a0:	003fd306 	br	80e0f0 <__alt_data_end+0xff80e0f0>
  80e1a4:	10800804 	addi	r2,r2,32
  80e1a8:	003fc106 	br	80e0b0 <__alt_data_end+0xff80e0b0>
  80e1ac:	2ac00804 	addi	r11,r5,32
  80e1b0:	42ffed26 	beq	r8,r11,80e168 <__alt_data_end+0xff80e168>
  80e1b4:	99c00044 	addi	r7,r19,1
  80e1b8:	31c00636 	bltu	r6,r7,80e1d4 <two_way_long_needle+0x290>
  80e1bc:	d9c10017 	ldw	r7,1024(sp)
  80e1c0:	e1f9883a 	add	fp,fp,r7
  80e1c4:	a9e7c83a 	sub	r19,r21,r7
  80e1c8:	003fa806 	br	80e06c <__alt_data_end+0xff80e06c>
  80e1cc:	2a000804 	addi	r8,r5,32
  80e1d0:	003fdc06 	br	80e144 <__alt_data_end+0xff80e144>
  80e1d4:	a705883a 	add	r2,r20,fp
  80e1d8:	dfc10d17 	ldw	ra,1076(sp)
  80e1dc:	df010c17 	ldw	fp,1072(sp)
  80e1e0:	ddc10b17 	ldw	r23,1068(sp)
  80e1e4:	dd810a17 	ldw	r22,1064(sp)
  80e1e8:	dd410917 	ldw	r21,1060(sp)
  80e1ec:	dd010817 	ldw	r20,1056(sp)
  80e1f0:	dcc10717 	ldw	r19,1052(sp)
  80e1f4:	dc810617 	ldw	r18,1048(sp)
  80e1f8:	dc410517 	ldw	r17,1044(sp)
  80e1fc:	dc010417 	ldw	r16,1040(sp)
  80e200:	dec10e04 	addi	sp,sp,1080
  80e204:	f800283a 	ret
  80e208:	0005883a 	mov	r2,zero
  80e20c:	003ff206 	br	80e1d8 <__alt_data_end+0xff80e1d8>
  80e210:	180d883a 	mov	r6,r3
  80e214:	003fe706 	br	80e1b4 <__alt_data_end+0xff80e1b4>
  80e218:	ac05c83a 	sub	r2,r21,r16
  80e21c:	14005c36 	bltu	r2,r16,80e390 <two_way_long_needle+0x44c>
  80e220:	05c00044 	movi	r23,1
  80e224:	bc07c83a 	sub	r3,r23,r16
  80e228:	10800044 	addi	r2,r2,1
  80e22c:	d8c10115 	stw	r3,1028(sp)
  80e230:	80ffffc4 	addi	r3,r16,-1
  80e234:	d8810015 	stw	r2,1024(sp)
  80e238:	0039883a 	mov	fp,zero
  80e23c:	acffffc4 	addi	r19,r21,-1
  80e240:	d8c10215 	stw	r3,1032(sp)
  80e244:	04bfffc4 	movi	r18,-1
  80e248:	e563883a 	add	r17,fp,r21
  80e24c:	a209883a 	add	r4,r20,r8
  80e250:	000b883a 	mov	r5,zero
  80e254:	8a0dc83a 	sub	r6,r17,r8
  80e258:	08133300 	call	813330 <memchr>
  80e25c:	103fea1e 	bne	r2,zero,80e208 <__alt_data_end+0xff80e208>
  80e260:	883fe926 	beq	r17,zero,80e208 <__alt_data_end+0xff80e208>
  80e264:	010020b4 	movhi	r4,130
  80e268:	21383d04 	addi	r4,r4,-7948
  80e26c:	a447883a 	add	r3,r20,r17
  80e270:	20800017 	ldw	r2,0(r4)
  80e274:	18ffffc3 	ldbu	r3,-1(r3)
  80e278:	10c9883a 	add	r4,r2,r3
  80e27c:	21000043 	ldbu	r4,1(r4)
  80e280:	210000cc 	andi	r4,r4,3
  80e284:	25c04026 	beq	r4,r23,80e388 <two_way_long_needle+0x444>
  80e288:	18c7883a 	add	r3,r3,r3
  80e28c:	18c7883a 	add	r3,r3,r3
  80e290:	d8c7883a 	add	r3,sp,r3
  80e294:	18c00017 	ldw	r3,0(r3)
  80e298:	1800301e 	bne	r3,zero,80e35c <two_way_long_needle+0x418>
  80e29c:	8007883a 	mov	r3,r16
  80e2a0:	84c0122e 	bgeu	r16,r19,80e2ec <two_way_long_needle+0x3a8>
  80e2a4:	b0c9883a 	add	r4,r22,r3
  80e2a8:	21000003 	ldbu	r4,0(r4)
  80e2ac:	110b883a 	add	r5,r2,r4
  80e2b0:	2a000043 	ldbu	r8,1(r5)
  80e2b4:	200d883a 	mov	r6,r4
  80e2b8:	420000cc 	andi	r8,r8,3
  80e2bc:	45c02a26 	beq	r8,r23,80e368 <two_way_long_needle+0x424>
  80e2c0:	1f11883a 	add	r8,r3,fp
  80e2c4:	a211883a 	add	r8,r20,r8
  80e2c8:	41000003 	ldbu	r4,0(r8)
  80e2cc:	110b883a 	add	r5,r2,r4
  80e2d0:	2a000043 	ldbu	r8,1(r5)
  80e2d4:	200b883a 	mov	r5,r4
  80e2d8:	420000cc 	andi	r8,r8,3
  80e2dc:	45c01a26 	beq	r8,r23,80e348 <two_way_long_needle+0x404>
  80e2e0:	31401b1e 	bne	r6,r5,80e350 <two_way_long_needle+0x40c>
  80e2e4:	18c00044 	addi	r3,r3,1
  80e2e8:	1cffee36 	bltu	r3,r19,80e2a4 <__alt_data_end+0xff80e2a4>
  80e2ec:	d8c10217 	ldw	r3,1032(sp)
  80e2f0:	80000c1e 	bne	r16,zero,80e324 <two_way_long_needle+0x3e0>
  80e2f4:	003fb706 	br	80e1d4 <__alt_data_end+0xff80e1d4>
  80e2f8:	1f09883a 	add	r4,r3,fp
  80e2fc:	a109883a 	add	r4,r20,r4
  80e300:	21400003 	ldbu	r5,0(r4)
  80e304:	1149883a 	add	r4,r2,r5
  80e308:	21000043 	ldbu	r4,1(r4)
  80e30c:	280d883a 	mov	r6,r5
  80e310:	210000cc 	andi	r4,r4,3
  80e314:	25c01626 	beq	r4,r23,80e370 <two_way_long_needle+0x42c>
  80e318:	18ffffc4 	addi	r3,r3,-1
  80e31c:	4180171e 	bne	r8,r6,80e37c <two_way_long_needle+0x438>
  80e320:	1cbfac26 	beq	r3,r18,80e1d4 <__alt_data_end+0xff80e1d4>
  80e324:	b0c9883a 	add	r4,r22,r3
  80e328:	21400003 	ldbu	r5,0(r4)
  80e32c:	1149883a 	add	r4,r2,r5
  80e330:	21000043 	ldbu	r4,1(r4)
  80e334:	2811883a 	mov	r8,r5
  80e338:	210000cc 	andi	r4,r4,3
  80e33c:	25ffee1e 	bne	r4,r23,80e2f8 <__alt_data_end+0xff80e2f8>
  80e340:	2a000804 	addi	r8,r5,32
  80e344:	003fec06 	br	80e2f8 <__alt_data_end+0xff80e2f8>
  80e348:	21400804 	addi	r5,r4,32
  80e34c:	317fe526 	beq	r6,r5,80e2e4 <__alt_data_end+0xff80e2e4>
  80e350:	1cffe62e 	bgeu	r3,r19,80e2ec <__alt_data_end+0xff80e2ec>
  80e354:	d8810117 	ldw	r2,1028(sp)
  80e358:	1739883a 	add	fp,r2,fp
  80e35c:	e0f9883a 	add	fp,fp,r3
  80e360:	8811883a 	mov	r8,r17
  80e364:	003fb806 	br	80e248 <__alt_data_end+0xff80e248>
  80e368:	21800804 	addi	r6,r4,32
  80e36c:	003fd406 	br	80e2c0 <__alt_data_end+0xff80e2c0>
  80e370:	29800804 	addi	r6,r5,32
  80e374:	18ffffc4 	addi	r3,r3,-1
  80e378:	41bfe926 	beq	r8,r6,80e320 <__alt_data_end+0xff80e320>
  80e37c:	d8810017 	ldw	r2,1024(sp)
  80e380:	e0b9883a 	add	fp,fp,r2
  80e384:	003ff606 	br	80e360 <__alt_data_end+0xff80e360>
  80e388:	18c00804 	addi	r3,r3,32
  80e38c:	003fbe06 	br	80e288 <__alt_data_end+0xff80e288>
  80e390:	8005883a 	mov	r2,r16
  80e394:	003fa206 	br	80e220 <__alt_data_end+0xff80e220>

0080e398 <strcasestr>:
  80e398:	defff104 	addi	sp,sp,-60
  80e39c:	dfc00e15 	stw	ra,56(sp)
  80e3a0:	df000d15 	stw	fp,52(sp)
  80e3a4:	ddc00c15 	stw	r23,48(sp)
  80e3a8:	dd800b15 	stw	r22,44(sp)
  80e3ac:	dd400a15 	stw	r21,40(sp)
  80e3b0:	dd000915 	stw	r20,36(sp)
  80e3b4:	dcc00815 	stw	r19,32(sp)
  80e3b8:	dc800715 	stw	r18,28(sp)
  80e3bc:	dc400615 	stw	r17,24(sp)
  80e3c0:	dc000515 	stw	r16,20(sp)
  80e3c4:	20c00003 	ldbu	r3,0(r4)
  80e3c8:	18803fcc 	andi	r2,r3,255
  80e3cc:	1080201c 	xori	r2,r2,128
  80e3d0:	10bfe004 	addi	r2,r2,-128
  80e3d4:	10002b26 	beq	r2,zero,80e484 <strcasestr+0xec>
  80e3d8:	29800003 	ldbu	r6,0(r5)
  80e3dc:	30803fcc 	andi	r2,r6,255
  80e3e0:	1080201c 	xori	r2,r2,128
  80e3e4:	10bfe004 	addi	r2,r2,-128
  80e3e8:	10009b26 	beq	r2,zero,80e658 <strcasestr+0x2c0>
  80e3ec:	008020b4 	movhi	r2,130
  80e3f0:	02c00044 	movi	r11,1
  80e3f4:	10b83d04 	addi	r2,r2,-7948
  80e3f8:	2821883a 	mov	r16,r5
  80e3fc:	13400017 	ldw	r13,0(r2)
  80e400:	200f883a 	mov	r7,r4
  80e404:	5819883a 	mov	r12,r11
  80e408:	00001306 	br	80e458 <strcasestr+0xc0>
  80e40c:	30c03fcc 	andi	r3,r6,255
  80e410:	68cd883a 	add	r6,r13,r3
  80e414:	32000043 	ldbu	r8,1(r6)
  80e418:	84000044 	addi	r16,r16,1
  80e41c:	180d883a 	mov	r6,r3
  80e420:	420000cc 	andi	r8,r8,3
  80e424:	43001526 	beq	r8,r12,80e47c <strcasestr+0xe4>
  80e428:	38c00003 	ldbu	r3,0(r7)
  80e42c:	518d003a 	cmpeq	r6,r10,r6
  80e430:	5996703a 	and	r11,r11,r6
  80e434:	19803fcc 	andi	r6,r3,255
  80e438:	3180201c 	xori	r6,r6,128
  80e43c:	31bfe004 	addi	r6,r6,-128
  80e440:	30001226 	beq	r6,zero,80e48c <strcasestr+0xf4>
  80e444:	81800003 	ldbu	r6,0(r16)
  80e448:	32003fcc 	andi	r8,r6,255
  80e44c:	4200201c 	xori	r8,r8,128
  80e450:	423fe004 	addi	r8,r8,-128
  80e454:	40000f26 	beq	r8,zero,80e494 <strcasestr+0xfc>
  80e458:	18c03fcc 	andi	r3,r3,255
  80e45c:	68d1883a 	add	r8,r13,r3
  80e460:	42000043 	ldbu	r8,1(r8)
  80e464:	39c00044 	addi	r7,r7,1
  80e468:	1815883a 	mov	r10,r3
  80e46c:	420000cc 	andi	r8,r8,3
  80e470:	433fe61e 	bne	r8,r12,80e40c <__alt_data_end+0xff80e40c>
  80e474:	1a800804 	addi	r10,r3,32
  80e478:	003fe406 	br	80e40c <__alt_data_end+0xff80e40c>
  80e47c:	19800804 	addi	r6,r3,32
  80e480:	003fe906 	br	80e428 <__alt_data_end+0xff80e428>
  80e484:	2821883a 	mov	r16,r5
  80e488:	02c00044 	movi	r11,1
  80e48c:	80800007 	ldb	r2,0(r16)
  80e490:	10006f1e 	bne	r2,zero,80e650 <strcasestr+0x2b8>
  80e494:	5800701e 	bne	r11,zero,80e658 <strcasestr+0x2c0>
  80e498:	8161c83a 	sub	r16,r16,r5
  80e49c:	008007c4 	movi	r2,31
  80e4a0:	282d883a 	mov	r22,r5
  80e4a4:	202f883a 	mov	r23,r4
  80e4a8:	24400044 	addi	r17,r4,1
  80e4ac:	80ffffc4 	addi	r3,r16,-1
  80e4b0:	1400112e 	bgeu	r2,r16,80e4f8 <strcasestr+0x160>
  80e4b4:	8809883a 	mov	r4,r17
  80e4b8:	180b883a 	mov	r5,r3
  80e4bc:	b00d883a 	mov	r6,r22
  80e4c0:	800f883a 	mov	r7,r16
  80e4c4:	080df440 	call	80df44 <two_way_long_needle>
  80e4c8:	dfc00e17 	ldw	ra,56(sp)
  80e4cc:	df000d17 	ldw	fp,52(sp)
  80e4d0:	ddc00c17 	ldw	r23,48(sp)
  80e4d4:	dd800b17 	ldw	r22,44(sp)
  80e4d8:	dd400a17 	ldw	r21,40(sp)
  80e4dc:	dd000917 	ldw	r20,36(sp)
  80e4e0:	dcc00817 	ldw	r19,32(sp)
  80e4e4:	dc800717 	ldw	r18,28(sp)
  80e4e8:	dc400617 	ldw	r17,24(sp)
  80e4ec:	dc000517 	ldw	r16,20(sp)
  80e4f0:	dec00f04 	addi	sp,sp,60
  80e4f4:	f800283a 	ret
  80e4f8:	2809883a 	mov	r4,r5
  80e4fc:	d80d883a 	mov	r6,sp
  80e500:	800b883a 	mov	r5,r16
  80e504:	d8c00415 	stw	r3,16(sp)
  80e508:	080ddb80 	call	80ddb8 <critical_factorization>
  80e50c:	d9400017 	ldw	r5,0(sp)
  80e510:	b009883a 	mov	r4,r22
  80e514:	100d883a 	mov	r6,r2
  80e518:	b14b883a 	add	r5,r22,r5
  80e51c:	1039883a 	mov	fp,r2
  80e520:	080e94c0 	call	80e94c <strncasecmp>
  80e524:	d8c00417 	ldw	r3,16(sp)
  80e528:	10004d26 	beq	r2,zero,80e660 <strcasestr+0x2c8>
  80e52c:	8705c83a 	sub	r2,r16,fp
  80e530:	1700012e 	bgeu	r2,fp,80e538 <strcasestr+0x1a0>
  80e534:	e005883a 	mov	r2,fp
  80e538:	10800044 	addi	r2,r2,1
  80e53c:	04c00044 	movi	r19,1
  80e540:	d8800015 	stw	r2,0(sp)
  80e544:	e4c5883a 	add	r2,fp,r19
  80e548:	d8800115 	stw	r2,4(sp)
  80e54c:	9f05c83a 	sub	r2,r19,fp
  80e550:	d8800215 	stw	r2,8(sp)
  80e554:	e0bfffc4 	addi	r2,fp,-1
  80e558:	0029883a 	mov	r20,zero
  80e55c:	d8800315 	stw	r2,12(sp)
  80e560:	057fffc4 	movi	r21,-1
  80e564:	a425883a 	add	r18,r20,r16
  80e568:	88c9883a 	add	r4,r17,r3
  80e56c:	000b883a 	mov	r5,zero
  80e570:	90cdc83a 	sub	r6,r18,r3
  80e574:	08133300 	call	813330 <memchr>
  80e578:	1000351e 	bne	r2,zero,80e650 <strcasestr+0x2b8>
  80e57c:	90003426 	beq	r18,zero,80e650 <strcasestr+0x2b8>
  80e580:	e400182e 	bgeu	fp,r16,80e5e4 <strcasestr+0x24c>
  80e584:	d8c00117 	ldw	r3,4(sp)
  80e588:	008020b4 	movhi	r2,130
  80e58c:	10b83d04 	addi	r2,r2,-7948
  80e590:	13000017 	ldw	r12,0(r2)
  80e594:	1d0b883a 	add	r5,r3,r20
  80e598:	b94b883a 	add	r5,r23,r5
  80e59c:	e007883a 	mov	r3,fp
  80e5a0:	b0c5883a 	add	r2,r22,r3
  80e5a4:	10800003 	ldbu	r2,0(r2)
  80e5a8:	6089883a 	add	r4,r12,r2
  80e5ac:	21c00043 	ldbu	r7,1(r4)
  80e5b0:	100d883a 	mov	r6,r2
  80e5b4:	39c000cc 	andi	r7,r7,3
  80e5b8:	3cc08626 	beq	r7,r19,80e7d4 <strcasestr+0x43c>
  80e5bc:	28800003 	ldbu	r2,0(r5)
  80e5c0:	6089883a 	add	r4,r12,r2
  80e5c4:	21c00043 	ldbu	r7,1(r4)
  80e5c8:	1009883a 	mov	r4,r2
  80e5cc:	39c000cc 	andi	r7,r7,3
  80e5d0:	3cc07826 	beq	r7,r19,80e7b4 <strcasestr+0x41c>
  80e5d4:	3100791e 	bne	r6,r4,80e7bc <strcasestr+0x424>
  80e5d8:	18c00044 	addi	r3,r3,1
  80e5dc:	29400044 	addi	r5,r5,1
  80e5e0:	1c3fef36 	bltu	r3,r16,80e5a0 <__alt_data_end+0xff80e5a0>
  80e5e4:	d8800317 	ldw	r2,12(sp)
  80e5e8:	e0008626 	beq	fp,zero,80e804 <strcasestr+0x46c>
  80e5ec:	00c020b4 	movhi	r3,130
  80e5f0:	a709883a 	add	r4,r20,fp
  80e5f4:	18f83d04 	addi	r3,r3,-7948
  80e5f8:	1b000017 	ldw	r12,0(r3)
  80e5fc:	b909883a 	add	r4,r23,r4
  80e600:	00000a06 	br	80e62c <strcasestr+0x294>
  80e604:	21400003 	ldbu	r5,0(r4)
  80e608:	6147883a 	add	r3,r12,r5
  80e60c:	18c00043 	ldbu	r3,1(r3)
  80e610:	280d883a 	mov	r6,r5
  80e614:	18c000cc 	andi	r3,r3,3
  80e618:	1cc07226 	beq	r3,r19,80e7e4 <strcasestr+0x44c>
  80e61c:	10bfffc4 	addi	r2,r2,-1
  80e620:	3980731e 	bne	r7,r6,80e7f0 <strcasestr+0x458>
  80e624:	213fffc4 	addi	r4,r4,-1
  80e628:	15407626 	beq	r2,r21,80e804 <strcasestr+0x46c>
  80e62c:	b087883a 	add	r3,r22,r2
  80e630:	19400003 	ldbu	r5,0(r3)
  80e634:	6147883a 	add	r3,r12,r5
  80e638:	18c00043 	ldbu	r3,1(r3)
  80e63c:	280f883a 	mov	r7,r5
  80e640:	18c000cc 	andi	r3,r3,3
  80e644:	1cffef1e 	bne	r3,r19,80e604 <__alt_data_end+0xff80e604>
  80e648:	29c00804 	addi	r7,r5,32
  80e64c:	003fed06 	br	80e604 <__alt_data_end+0xff80e604>
  80e650:	0005883a 	mov	r2,zero
  80e654:	003f9c06 	br	80e4c8 <__alt_data_end+0xff80e4c8>
  80e658:	2005883a 	mov	r2,r4
  80e65c:	003f9a06 	br	80e4c8 <__alt_data_end+0xff80e4c8>
  80e660:	e0bfffc4 	addi	r2,fp,-1
  80e664:	05400044 	movi	r21,1
  80e668:	d8800115 	stw	r2,4(sp)
  80e66c:	af05c83a 	sub	r2,r21,fp
  80e670:	0029883a 	mov	r20,zero
  80e674:	0027883a 	mov	r19,zero
  80e678:	d8800215 	stw	r2,8(sp)
  80e67c:	9c25883a 	add	r18,r19,r16
  80e680:	88c9883a 	add	r4,r17,r3
  80e684:	000b883a 	mov	r5,zero
  80e688:	90cdc83a 	sub	r6,r18,r3
  80e68c:	08133300 	call	813330 <memchr>
  80e690:	103fef1e 	bne	r2,zero,80e650 <__alt_data_end+0xff80e650>
  80e694:	903fee26 	beq	r18,zero,80e650 <__alt_data_end+0xff80e650>
  80e698:	a007883a 	mov	r3,r20
  80e69c:	a700012e 	bgeu	r20,fp,80e6a4 <strcasestr+0x30c>
  80e6a0:	e007883a 	mov	r3,fp
  80e6a4:	1c00172e 	bgeu	r3,r16,80e704 <strcasestr+0x36c>
  80e6a8:	008020b4 	movhi	r2,130
  80e6ac:	10b83d04 	addi	r2,r2,-7948
  80e6b0:	99000044 	addi	r4,r19,1
  80e6b4:	12c00017 	ldw	r11,0(r2)
  80e6b8:	20c9883a 	add	r4,r4,r3
  80e6bc:	b909883a 	add	r4,r23,r4
  80e6c0:	b0c5883a 	add	r2,r22,r3
  80e6c4:	11400003 	ldbu	r5,0(r2)
  80e6c8:	5945883a 	add	r2,r11,r5
  80e6cc:	10800043 	ldbu	r2,1(r2)
  80e6d0:	280d883a 	mov	r6,r5
  80e6d4:	108000cc 	andi	r2,r2,3
  80e6d8:	15404026 	beq	r2,r21,80e7dc <strcasestr+0x444>
  80e6dc:	20800003 	ldbu	r2,0(r4)
  80e6e0:	588b883a 	add	r5,r11,r2
  80e6e4:	29c00043 	ldbu	r7,1(r5)
  80e6e8:	100b883a 	mov	r5,r2
  80e6ec:	39c000cc 	andi	r7,r7,3
  80e6f0:	3d401f26 	beq	r7,r21,80e770 <strcasestr+0x3d8>
  80e6f4:	3140201e 	bne	r6,r5,80e778 <strcasestr+0x3e0>
  80e6f8:	18c00044 	addi	r3,r3,1
  80e6fc:	21000044 	addi	r4,r4,1
  80e700:	1c3fef36 	bltu	r3,r16,80e6c0 <__alt_data_end+0xff80e6c0>
  80e704:	d9400117 	ldw	r5,4(sp)
  80e708:	a700422e 	bgeu	r20,fp,80e814 <strcasestr+0x47c>
  80e70c:	00c020b4 	movhi	r3,130
  80e710:	18f83d04 	addi	r3,r3,-7948
  80e714:	19c00017 	ldw	r7,0(r3)
  80e718:	e005883a 	mov	r2,fp
  80e71c:	b147883a 	add	r3,r22,r5
  80e720:	19000003 	ldbu	r4,0(r3)
  80e724:	3907883a 	add	r3,r7,r4
  80e728:	18c00043 	ldbu	r3,1(r3)
  80e72c:	200d883a 	mov	r6,r4
  80e730:	18c000cc 	andi	r3,r3,3
  80e734:	1d403126 	beq	r3,r21,80e7fc <strcasestr+0x464>
  80e738:	14c7883a 	add	r3,r2,r19
  80e73c:	b8c7883a 	add	r3,r23,r3
  80e740:	19000003 	ldbu	r4,0(r3)
  80e744:	3907883a 	add	r3,r7,r4
  80e748:	18c00043 	ldbu	r3,1(r3)
  80e74c:	2017883a 	mov	r11,r4
  80e750:	18c000cc 	andi	r3,r3,3
  80e754:	1d400e26 	beq	r3,r21,80e790 <strcasestr+0x3f8>
  80e758:	32c00f1e 	bne	r6,r11,80e798 <strcasestr+0x400>
  80e75c:	10bfffc4 	addi	r2,r2,-1
  80e760:	28ffffc4 	addi	r3,r5,-1
  80e764:	a080292e 	bgeu	r20,r2,80e80c <strcasestr+0x474>
  80e768:	180b883a 	mov	r5,r3
  80e76c:	003feb06 	br	80e71c <__alt_data_end+0xff80e71c>
  80e770:	11400804 	addi	r5,r2,32
  80e774:	317fe026 	beq	r6,r5,80e6f8 <__alt_data_end+0xff80e6f8>
  80e778:	1c3fe22e 	bgeu	r3,r16,80e704 <__alt_data_end+0xff80e704>
  80e77c:	d8800217 	ldw	r2,8(sp)
  80e780:	0029883a 	mov	r20,zero
  80e784:	14d3883a 	add	r9,r2,r19
  80e788:	48e7883a 	add	r19,r9,r3
  80e78c:	00000706 	br	80e7ac <strcasestr+0x414>
  80e790:	22c00804 	addi	r11,r4,32
  80e794:	32fff126 	beq	r6,r11,80e75c <__alt_data_end+0xff80e75c>
  80e798:	a2000044 	addi	r8,r20,1
  80e79c:	12001f36 	bltu	r2,r8,80e81c <strcasestr+0x484>
  80e7a0:	da000017 	ldw	r8,0(sp)
  80e7a4:	9a27883a 	add	r19,r19,r8
  80e7a8:	8229c83a 	sub	r20,r16,r8
  80e7ac:	9007883a 	mov	r3,r18
  80e7b0:	003fb206 	br	80e67c <__alt_data_end+0xff80e67c>
  80e7b4:	11000804 	addi	r4,r2,32
  80e7b8:	313f8726 	beq	r6,r4,80e5d8 <__alt_data_end+0xff80e5d8>
  80e7bc:	1c3f892e 	bgeu	r3,r16,80e5e4 <__alt_data_end+0xff80e5e4>
  80e7c0:	d8800217 	ldw	r2,8(sp)
  80e7c4:	1513883a 	add	r9,r2,r20
  80e7c8:	48e9883a 	add	r20,r9,r3
  80e7cc:	9007883a 	mov	r3,r18
  80e7d0:	003f6406 	br	80e564 <__alt_data_end+0xff80e564>
  80e7d4:	11800804 	addi	r6,r2,32
  80e7d8:	003f7806 	br	80e5bc <__alt_data_end+0xff80e5bc>
  80e7dc:	29800804 	addi	r6,r5,32
  80e7e0:	003fbe06 	br	80e6dc <__alt_data_end+0xff80e6dc>
  80e7e4:	29800804 	addi	r6,r5,32
  80e7e8:	10bfffc4 	addi	r2,r2,-1
  80e7ec:	39bf8d26 	beq	r7,r6,80e624 <__alt_data_end+0xff80e624>
  80e7f0:	d8800017 	ldw	r2,0(sp)
  80e7f4:	a0a9883a 	add	r20,r20,r2
  80e7f8:	003ff406 	br	80e7cc <__alt_data_end+0xff80e7cc>
  80e7fc:	21800804 	addi	r6,r4,32
  80e800:	003fcd06 	br	80e738 <__alt_data_end+0xff80e738>
  80e804:	8d05883a 	add	r2,r17,r20
  80e808:	003f2f06 	br	80e4c8 <__alt_data_end+0xff80e4c8>
  80e80c:	2805883a 	mov	r2,r5
  80e810:	003fe106 	br	80e798 <__alt_data_end+0xff80e798>
  80e814:	e005883a 	mov	r2,fp
  80e818:	003fdf06 	br	80e798 <__alt_data_end+0xff80e798>
  80e81c:	8cc5883a 	add	r2,r17,r19
  80e820:	003f2906 	br	80e4c8 <__alt_data_end+0xff80e4c8>

0080e824 <strcpy>:
  80e824:	2906b03a 	or	r3,r5,r4
  80e828:	18c000cc 	andi	r3,r3,3
  80e82c:	2005883a 	mov	r2,r4
  80e830:	1800161e 	bne	r3,zero,80e88c <strcpy+0x68>
  80e834:	29c00017 	ldw	r7,0(r5)
  80e838:	02ffbff4 	movhi	r11,65279
  80e83c:	5affbfc4 	addi	r11,r11,-257
  80e840:	02a02074 	movhi	r10,32897
  80e844:	01c8303a 	nor	r4,zero,r7
  80e848:	3ac7883a 	add	r3,r7,r11
  80e84c:	52a02004 	addi	r10,r10,-32640
  80e850:	20c6703a 	and	r3,r4,r3
  80e854:	1a86703a 	and	r3,r3,r10
  80e858:	18000c1e 	bne	r3,zero,80e88c <strcpy+0x68>
  80e85c:	1011883a 	mov	r8,r2
  80e860:	41c00015 	stw	r7,0(r8)
  80e864:	29400104 	addi	r5,r5,4
  80e868:	29c00017 	ldw	r7,0(r5)
  80e86c:	41800104 	addi	r6,r8,4
  80e870:	3011883a 	mov	r8,r6
  80e874:	01d2303a 	nor	r9,zero,r7
  80e878:	3ac7883a 	add	r3,r7,r11
  80e87c:	48c6703a 	and	r3,r9,r3
  80e880:	1a86703a 	and	r3,r3,r10
  80e884:	183ff626 	beq	r3,zero,80e860 <__alt_data_end+0xff80e860>
  80e888:	00000106 	br	80e890 <strcpy+0x6c>
  80e88c:	100d883a 	mov	r6,r2
  80e890:	28c00003 	ldbu	r3,0(r5)
  80e894:	31800044 	addi	r6,r6,1
  80e898:	29400044 	addi	r5,r5,1
  80e89c:	30ffffc5 	stb	r3,-1(r6)
  80e8a0:	18c03fcc 	andi	r3,r3,255
  80e8a4:	18c0201c 	xori	r3,r3,128
  80e8a8:	18ffe004 	addi	r3,r3,-128
  80e8ac:	183ff81e 	bne	r3,zero,80e890 <__alt_data_end+0xff80e890>
  80e8b0:	f800283a 	ret

0080e8b4 <strlen>:
  80e8b4:	208000cc 	andi	r2,r4,3
  80e8b8:	10002026 	beq	r2,zero,80e93c <strlen+0x88>
  80e8bc:	20800007 	ldb	r2,0(r4)
  80e8c0:	10002026 	beq	r2,zero,80e944 <strlen+0x90>
  80e8c4:	2005883a 	mov	r2,r4
  80e8c8:	00000206 	br	80e8d4 <strlen+0x20>
  80e8cc:	10c00007 	ldb	r3,0(r2)
  80e8d0:	18001826 	beq	r3,zero,80e934 <strlen+0x80>
  80e8d4:	10800044 	addi	r2,r2,1
  80e8d8:	10c000cc 	andi	r3,r2,3
  80e8dc:	183ffb1e 	bne	r3,zero,80e8cc <__alt_data_end+0xff80e8cc>
  80e8e0:	10c00017 	ldw	r3,0(r2)
  80e8e4:	01ffbff4 	movhi	r7,65279
  80e8e8:	39ffbfc4 	addi	r7,r7,-257
  80e8ec:	00ca303a 	nor	r5,zero,r3
  80e8f0:	01a02074 	movhi	r6,32897
  80e8f4:	19c7883a 	add	r3,r3,r7
  80e8f8:	31a02004 	addi	r6,r6,-32640
  80e8fc:	1946703a 	and	r3,r3,r5
  80e900:	1986703a 	and	r3,r3,r6
  80e904:	1800091e 	bne	r3,zero,80e92c <strlen+0x78>
  80e908:	10800104 	addi	r2,r2,4
  80e90c:	10c00017 	ldw	r3,0(r2)
  80e910:	19cb883a 	add	r5,r3,r7
  80e914:	00c6303a 	nor	r3,zero,r3
  80e918:	28c6703a 	and	r3,r5,r3
  80e91c:	1986703a 	and	r3,r3,r6
  80e920:	183ff926 	beq	r3,zero,80e908 <__alt_data_end+0xff80e908>
  80e924:	00000106 	br	80e92c <strlen+0x78>
  80e928:	10800044 	addi	r2,r2,1
  80e92c:	10c00007 	ldb	r3,0(r2)
  80e930:	183ffd1e 	bne	r3,zero,80e928 <__alt_data_end+0xff80e928>
  80e934:	1105c83a 	sub	r2,r2,r4
  80e938:	f800283a 	ret
  80e93c:	2005883a 	mov	r2,r4
  80e940:	003fe706 	br	80e8e0 <__alt_data_end+0xff80e8e0>
  80e944:	0005883a 	mov	r2,zero
  80e948:	f800283a 	ret

0080e94c <strncasecmp>:
  80e94c:	30001626 	beq	r6,zero,80e9a8 <strncasecmp+0x5c>
  80e950:	008020b4 	movhi	r2,130
  80e954:	10b83d04 	addi	r2,r2,-7948
  80e958:	12800017 	ldw	r10,0(r2)
  80e95c:	02400044 	movi	r9,1
  80e960:	20c00003 	ldbu	r3,0(r4)
  80e964:	50c5883a 	add	r2,r10,r3
  80e968:	10800043 	ldbu	r2,1(r2)
  80e96c:	1811883a 	mov	r8,r3
  80e970:	108000cc 	andi	r2,r2,3
  80e974:	12401226 	beq	r2,r9,80e9c0 <strncasecmp+0x74>
  80e978:	28c00003 	ldbu	r3,0(r5)
  80e97c:	31bfffc4 	addi	r6,r6,-1
  80e980:	21000044 	addi	r4,r4,1
  80e984:	50c5883a 	add	r2,r10,r3
  80e988:	11c00043 	ldbu	r7,1(r2)
  80e98c:	29400044 	addi	r5,r5,1
  80e990:	40c5c83a 	sub	r2,r8,r3
  80e994:	39c000cc 	andi	r7,r7,3
  80e998:	3a400526 	beq	r7,r9,80e9b0 <strncasecmp+0x64>
  80e99c:	1000031e 	bne	r2,zero,80e9ac <strncasecmp+0x60>
  80e9a0:	18000226 	beq	r3,zero,80e9ac <strncasecmp+0x60>
  80e9a4:	303fee1e 	bne	r6,zero,80e960 <__alt_data_end+0xff80e960>
  80e9a8:	0005883a 	mov	r2,zero
  80e9ac:	f800283a 	ret
  80e9b0:	18c00804 	addi	r3,r3,32
  80e9b4:	40c5c83a 	sub	r2,r8,r3
  80e9b8:	103ffa26 	beq	r2,zero,80e9a4 <__alt_data_end+0xff80e9a4>
  80e9bc:	f800283a 	ret
  80e9c0:	1a000804 	addi	r8,r3,32
  80e9c4:	003fec06 	br	80e978 <__alt_data_end+0xff80e978>

0080e9c8 <___vfprintf_internal_r>:
  80e9c8:	deffb604 	addi	sp,sp,-296
  80e9cc:	dfc04915 	stw	ra,292(sp)
  80e9d0:	ddc04715 	stw	r23,284(sp)
  80e9d4:	dd804615 	stw	r22,280(sp)
  80e9d8:	282f883a 	mov	r23,r5
  80e9dc:	202d883a 	mov	r22,r4
  80e9e0:	d9802a15 	stw	r6,168(sp)
  80e9e4:	d9c02d15 	stw	r7,180(sp)
  80e9e8:	df004815 	stw	fp,288(sp)
  80e9ec:	dd404515 	stw	r21,276(sp)
  80e9f0:	dd004415 	stw	r20,272(sp)
  80e9f4:	dcc04315 	stw	r19,268(sp)
  80e9f8:	dc804215 	stw	r18,264(sp)
  80e9fc:	dc404115 	stw	r17,260(sp)
  80ea00:	dc004015 	stw	r16,256(sp)
  80ea04:	08132a00 	call	8132a0 <_localeconv_r>
  80ea08:	10800017 	ldw	r2,0(r2)
  80ea0c:	1009883a 	mov	r4,r2
  80ea10:	d8803515 	stw	r2,212(sp)
  80ea14:	080e8b40 	call	80e8b4 <strlen>
  80ea18:	d8803815 	stw	r2,224(sp)
  80ea1c:	b0000226 	beq	r22,zero,80ea28 <___vfprintf_internal_r+0x60>
  80ea20:	b0800e17 	ldw	r2,56(r22)
  80ea24:	1000e126 	beq	r2,zero,80edac <___vfprintf_internal_r+0x3e4>
  80ea28:	b880030b 	ldhu	r2,12(r23)
  80ea2c:	10c8000c 	andi	r3,r2,8192
  80ea30:	1800061e 	bne	r3,zero,80ea4c <___vfprintf_internal_r+0x84>
  80ea34:	b9001917 	ldw	r4,100(r23)
  80ea38:	00f7ffc4 	movi	r3,-8193
  80ea3c:	10880014 	ori	r2,r2,8192
  80ea40:	20c6703a 	and	r3,r4,r3
  80ea44:	b880030d 	sth	r2,12(r23)
  80ea48:	b8c01915 	stw	r3,100(r23)
  80ea4c:	10c0020c 	andi	r3,r2,8
  80ea50:	1800a726 	beq	r3,zero,80ecf0 <___vfprintf_internal_r+0x328>
  80ea54:	b8c00417 	ldw	r3,16(r23)
  80ea58:	1800a526 	beq	r3,zero,80ecf0 <___vfprintf_internal_r+0x328>
  80ea5c:	1080068c 	andi	r2,r2,26
  80ea60:	00c00284 	movi	r3,10
  80ea64:	10c0aa26 	beq	r2,r3,80ed10 <___vfprintf_internal_r+0x348>
  80ea68:	dac01e04 	addi	r11,sp,120
  80ea6c:	db001dc4 	addi	r12,sp,119
  80ea70:	d8800404 	addi	r2,sp,16
  80ea74:	050020b4 	movhi	r20,130
  80ea78:	dac02815 	stw	r11,160(sp)
  80ea7c:	5b17c83a 	sub	r11,r11,r12
  80ea80:	a5303e84 	addi	r20,r20,-16134
  80ea84:	db002915 	stw	r12,164(sp)
  80ea88:	d8801e15 	stw	r2,120(sp)
  80ea8c:	d8002015 	stw	zero,128(sp)
  80ea90:	d8001f15 	stw	zero,124(sp)
  80ea94:	d8003315 	stw	zero,204(sp)
  80ea98:	d8003715 	stw	zero,220(sp)
  80ea9c:	d8003915 	stw	zero,228(sp)
  80eaa0:	1011883a 	mov	r8,r2
  80eaa4:	d8003b15 	stw	zero,236(sp)
  80eaa8:	d8003a15 	stw	zero,232(sp)
  80eaac:	d8002f15 	stw	zero,188(sp)
  80eab0:	dac03c15 	stw	r11,240(sp)
  80eab4:	db002a17 	ldw	r12,168(sp)
  80eab8:	60800007 	ldb	r2,0(r12)
  80eabc:	1000be26 	beq	r2,zero,80edb8 <___vfprintf_internal_r+0x3f0>
  80eac0:	00c00944 	movi	r3,37
  80eac4:	10c0bc26 	beq	r2,r3,80edb8 <___vfprintf_internal_r+0x3f0>
  80eac8:	6021883a 	mov	r16,r12
  80eacc:	00000106 	br	80ead4 <___vfprintf_internal_r+0x10c>
  80ead0:	10c08426 	beq	r2,r3,80ece4 <___vfprintf_internal_r+0x31c>
  80ead4:	84000044 	addi	r16,r16,1
  80ead8:	80800007 	ldb	r2,0(r16)
  80eadc:	103ffc1e 	bne	r2,zero,80ead0 <__alt_data_end+0xff80ead0>
  80eae0:	dac02a17 	ldw	r11,168(sp)
  80eae4:	82e3c83a 	sub	r17,r16,r11
  80eae8:	88000f26 	beq	r17,zero,80eb28 <___vfprintf_internal_r+0x160>
  80eaec:	d8c02017 	ldw	r3,128(sp)
  80eaf0:	d8801f17 	ldw	r2,124(sp)
  80eaf4:	dac02a17 	ldw	r11,168(sp)
  80eaf8:	1c47883a 	add	r3,r3,r17
  80eafc:	10800044 	addi	r2,r2,1
  80eb00:	d8c02015 	stw	r3,128(sp)
  80eb04:	42c00015 	stw	r11,0(r8)
  80eb08:	44400115 	stw	r17,4(r8)
  80eb0c:	d8801f15 	stw	r2,124(sp)
  80eb10:	00c001c4 	movi	r3,7
  80eb14:	18809316 	blt	r3,r2,80ed64 <___vfprintf_internal_r+0x39c>
  80eb18:	42000204 	addi	r8,r8,8
  80eb1c:	db002f17 	ldw	r12,188(sp)
  80eb20:	6459883a 	add	r12,r12,r17
  80eb24:	db002f15 	stw	r12,188(sp)
  80eb28:	80800007 	ldb	r2,0(r16)
  80eb2c:	10009426 	beq	r2,zero,80ed80 <___vfprintf_internal_r+0x3b8>
  80eb30:	80800044 	addi	r2,r16,1
  80eb34:	84000047 	ldb	r16,1(r16)
  80eb38:	d8002785 	stb	zero,158(sp)
  80eb3c:	000d883a 	mov	r6,zero
  80eb40:	027fffc4 	movi	r9,-1
  80eb44:	d8002e15 	stw	zero,184(sp)
  80eb48:	0023883a 	mov	r17,zero
  80eb4c:	01001604 	movi	r4,88
  80eb50:	01400244 	movi	r5,9
  80eb54:	02800a84 	movi	r10,42
  80eb58:	01c01b04 	movi	r7,108
  80eb5c:	10c00044 	addi	r3,r2,1
  80eb60:	80bff804 	addi	r2,r16,-32
  80eb64:	2082cd36 	bltu	r4,r2,80f69c <___vfprintf_internal_r+0xcd4>
  80eb68:	100490ba 	slli	r2,r2,2
  80eb6c:	02c02074 	movhi	r11,129
  80eb70:	5afae004 	addi	r11,r11,-5248
  80eb74:	12c5883a 	add	r2,r2,r11
  80eb78:	10800017 	ldw	r2,0(r2)
  80eb7c:	1000683a 	jmp	r2
  80eb80:	0080f4b4 	movhi	r2,978
  80eb84:	0080f69c 	xori	r2,zero,986
  80eb88:	0080f69c 	xori	r2,zero,986
  80eb8c:	0080f604 	movi	r2,984
  80eb90:	0080f69c 	xori	r2,zero,986
  80eb94:	0080f69c 	xori	r2,zero,986
  80eb98:	0080f69c 	xori	r2,zero,986
  80eb9c:	0080f69c 	xori	r2,zero,986
  80eba0:	0080f69c 	xori	r2,zero,986
  80eba4:	0080f69c 	xori	r2,zero,986
  80eba8:	0080f4d4 	movui	r2,979
  80ebac:	0080f500 	call	80f50 <__alt_mem_sdram_0-0x77f0b0>
  80ebb0:	0080f69c 	xori	r2,zero,986
  80ebb4:	0080edc0 	call	80edc <__alt_mem_sdram_0-0x77f124>
  80ebb8:	0080edd0 	cmplti	r2,zero,951
  80ebbc:	0080f69c 	xori	r2,zero,986
  80ebc0:	0080ee10 	cmplti	r2,zero,952
  80ebc4:	0080ee20 	cmpeqi	r2,zero,952
  80ebc8:	0080ee20 	cmpeqi	r2,zero,952
  80ebcc:	0080ee20 	cmpeqi	r2,zero,952
  80ebd0:	0080ee20 	cmpeqi	r2,zero,952
  80ebd4:	0080ee20 	cmpeqi	r2,zero,952
  80ebd8:	0080ee20 	cmpeqi	r2,zero,952
  80ebdc:	0080ee20 	cmpeqi	r2,zero,952
  80ebe0:	0080ee20 	cmpeqi	r2,zero,952
  80ebe4:	0080ee20 	cmpeqi	r2,zero,952
  80ebe8:	0080f69c 	xori	r2,zero,986
  80ebec:	0080f69c 	xori	r2,zero,986
  80ebf0:	0080f69c 	xori	r2,zero,986
  80ebf4:	0080f69c 	xori	r2,zero,986
  80ebf8:	0080f69c 	xori	r2,zero,986
  80ebfc:	0080f69c 	xori	r2,zero,986
  80ec00:	0080f69c 	xori	r2,zero,986
  80ec04:	0080f69c 	xori	r2,zero,986
  80ec08:	0080f69c 	xori	r2,zero,986
  80ec0c:	0080f69c 	xori	r2,zero,986
  80ec10:	0080ee54 	movui	r2,953
  80ec14:	0080f2c4 	movi	r2,971
  80ec18:	0080f69c 	xori	r2,zero,986
  80ec1c:	0080f2c4 	movi	r2,971
  80ec20:	0080f69c 	xori	r2,zero,986
  80ec24:	0080f69c 	xori	r2,zero,986
  80ec28:	0080f69c 	xori	r2,zero,986
  80ec2c:	0080f69c 	xori	r2,zero,986
  80ec30:	0080f3b0 	cmpltui	r2,zero,974
  80ec34:	0080f69c 	xori	r2,zero,986
  80ec38:	0080f69c 	xori	r2,zero,986
  80ec3c:	0080f258 	cmpnei	r2,zero,969
  80ec40:	0080f69c 	xori	r2,zero,986
  80ec44:	0080f69c 	xori	r2,zero,986
  80ec48:	0080f69c 	xori	r2,zero,986
  80ec4c:	0080f69c 	xori	r2,zero,986
  80ec50:	0080f69c 	xori	r2,zero,986
  80ec54:	0080f294 	movui	r2,970
  80ec58:	0080f69c 	xori	r2,zero,986
  80ec5c:	0080f69c 	xori	r2,zero,986
  80ec60:	0080f458 	cmpnei	r2,zero,977
  80ec64:	0080f69c 	xori	r2,zero,986
  80ec68:	0080f69c 	xori	r2,zero,986
  80ec6c:	0080f69c 	xori	r2,zero,986
  80ec70:	0080f69c 	xori	r2,zero,986
  80ec74:	0080f69c 	xori	r2,zero,986
  80ec78:	0080f69c 	xori	r2,zero,986
  80ec7c:	0080f69c 	xori	r2,zero,986
  80ec80:	0080f69c 	xori	r2,zero,986
  80ec84:	0080f69c 	xori	r2,zero,986
  80ec88:	0080f69c 	xori	r2,zero,986
  80ec8c:	0080f510 	cmplti	r2,zero,980
  80ec90:	0080f3c0 	call	80f3c <__alt_mem_sdram_0-0x77f0c4>
  80ec94:	0080f2c4 	movi	r2,971
  80ec98:	0080f2c4 	movi	r2,971
  80ec9c:	0080f2c4 	movi	r2,971
  80eca0:	0080f400 	call	80f40 <__alt_mem_sdram_0-0x77f0c0>
  80eca4:	0080f3c0 	call	80f3c <__alt_mem_sdram_0-0x77f0c4>
  80eca8:	0080f69c 	xori	r2,zero,986
  80ecac:	0080f69c 	xori	r2,zero,986
  80ecb0:	0080f410 	cmplti	r2,zero,976
  80ecb4:	0080f69c 	xori	r2,zero,986
  80ecb8:	0080f424 	muli	r2,zero,976
  80ecbc:	0080f660 	cmpeqi	r2,zero,985
  80ecc0:	0080f368 	cmpgeui	r2,zero,973
  80ecc4:	0080f614 	movui	r2,984
  80ecc8:	0080f69c 	xori	r2,zero,986
  80eccc:	0080f550 	cmplti	r2,zero,981
  80ecd0:	0080f69c 	xori	r2,zero,986
  80ecd4:	0080f624 	muli	r2,zero,984
  80ecd8:	0080f69c 	xori	r2,zero,986
  80ecdc:	0080f69c 	xori	r2,zero,986
  80ece0:	0080f5c4 	movi	r2,983
  80ece4:	db002a17 	ldw	r12,168(sp)
  80ece8:	8323c83a 	sub	r17,r16,r12
  80ecec:	003f7e06 	br	80eae8 <__alt_data_end+0xff80eae8>
  80ecf0:	b009883a 	mov	r4,r22
  80ecf4:	b80b883a 	mov	r5,r23
  80ecf8:	0810a540 	call	810a54 <__swsetup_r>
  80ecfc:	10000c1e 	bne	r2,zero,80ed30 <___vfprintf_internal_r+0x368>
  80ed00:	b880030b 	ldhu	r2,12(r23)
  80ed04:	00c00284 	movi	r3,10
  80ed08:	1080068c 	andi	r2,r2,26
  80ed0c:	10ff561e 	bne	r2,r3,80ea68 <__alt_data_end+0xff80ea68>
  80ed10:	b880038f 	ldh	r2,14(r23)
  80ed14:	103f5416 	blt	r2,zero,80ea68 <__alt_data_end+0xff80ea68>
  80ed18:	d9802a17 	ldw	r6,168(sp)
  80ed1c:	d9c02d17 	ldw	r7,180(sp)
  80ed20:	b009883a 	mov	r4,r22
  80ed24:	b80b883a 	mov	r5,r23
  80ed28:	081093c0 	call	81093c <__sbprintf>
  80ed2c:	00000106 	br	80ed34 <___vfprintf_internal_r+0x36c>
  80ed30:	00bfffc4 	movi	r2,-1
  80ed34:	dfc04917 	ldw	ra,292(sp)
  80ed38:	df004817 	ldw	fp,288(sp)
  80ed3c:	ddc04717 	ldw	r23,284(sp)
  80ed40:	dd804617 	ldw	r22,280(sp)
  80ed44:	dd404517 	ldw	r21,276(sp)
  80ed48:	dd004417 	ldw	r20,272(sp)
  80ed4c:	dcc04317 	ldw	r19,268(sp)
  80ed50:	dc804217 	ldw	r18,264(sp)
  80ed54:	dc404117 	ldw	r17,260(sp)
  80ed58:	dc004017 	ldw	r16,256(sp)
  80ed5c:	dec04a04 	addi	sp,sp,296
  80ed60:	f800283a 	ret
  80ed64:	b009883a 	mov	r4,r22
  80ed68:	b80b883a 	mov	r5,r23
  80ed6c:	d9801e04 	addi	r6,sp,120
  80ed70:	08147940 	call	814794 <__sprint_r>
  80ed74:	1000081e 	bne	r2,zero,80ed98 <___vfprintf_internal_r+0x3d0>
  80ed78:	da000404 	addi	r8,sp,16
  80ed7c:	003f6706 	br	80eb1c <__alt_data_end+0xff80eb1c>
  80ed80:	d8802017 	ldw	r2,128(sp)
  80ed84:	10000426 	beq	r2,zero,80ed98 <___vfprintf_internal_r+0x3d0>
  80ed88:	b009883a 	mov	r4,r22
  80ed8c:	b80b883a 	mov	r5,r23
  80ed90:	d9801e04 	addi	r6,sp,120
  80ed94:	08147940 	call	814794 <__sprint_r>
  80ed98:	b880030b 	ldhu	r2,12(r23)
  80ed9c:	1080100c 	andi	r2,r2,64
  80eda0:	103fe31e 	bne	r2,zero,80ed30 <__alt_data_end+0xff80ed30>
  80eda4:	d8802f17 	ldw	r2,188(sp)
  80eda8:	003fe206 	br	80ed34 <__alt_data_end+0xff80ed34>
  80edac:	b009883a 	mov	r4,r22
  80edb0:	0812b080 	call	812b08 <__sinit>
  80edb4:	003f1c06 	br	80ea28 <__alt_data_end+0xff80ea28>
  80edb8:	dc002a17 	ldw	r16,168(sp)
  80edbc:	003f5a06 	br	80eb28 <__alt_data_end+0xff80eb28>
  80edc0:	1805883a 	mov	r2,r3
  80edc4:	8c400114 	ori	r17,r17,4
  80edc8:	1c000007 	ldb	r16,0(r3)
  80edcc:	003f6306 	br	80eb5c <__alt_data_end+0xff80eb5c>
  80edd0:	1c000007 	ldb	r16,0(r3)
  80edd4:	18800044 	addi	r2,r3,1
  80edd8:	8286ad26 	beq	r16,r10,810890 <___vfprintf_internal_r+0x1ec8>
  80eddc:	82fff404 	addi	r11,r16,-48
  80ede0:	1007883a 	mov	r3,r2
  80ede4:	0013883a 	mov	r9,zero
  80ede8:	2aff5d36 	bltu	r5,r11,80eb60 <__alt_data_end+0xff80eb60>
  80edec:	1c000007 	ldb	r16,0(r3)
  80edf0:	4a4002a4 	muli	r9,r9,10
  80edf4:	18c00044 	addi	r3,r3,1
  80edf8:	5a53883a 	add	r9,r11,r9
  80edfc:	82fff404 	addi	r11,r16,-48
  80ee00:	2afffa2e 	bgeu	r5,r11,80edec <__alt_data_end+0xff80edec>
  80ee04:	483f560e 	bge	r9,zero,80eb60 <__alt_data_end+0xff80eb60>
  80ee08:	027fffc4 	movi	r9,-1
  80ee0c:	003f5406 	br	80eb60 <__alt_data_end+0xff80eb60>
  80ee10:	8c402014 	ori	r17,r17,128
  80ee14:	1805883a 	mov	r2,r3
  80ee18:	1c000007 	ldb	r16,0(r3)
  80ee1c:	003f4f06 	br	80eb5c <__alt_data_end+0xff80eb5c>
  80ee20:	1805883a 	mov	r2,r3
  80ee24:	d8002e15 	stw	zero,184(sp)
  80ee28:	82fff404 	addi	r11,r16,-48
  80ee2c:	0019883a 	mov	r12,zero
  80ee30:	14000007 	ldb	r16,0(r2)
  80ee34:	630002a4 	muli	r12,r12,10
  80ee38:	18c00044 	addi	r3,r3,1
  80ee3c:	1805883a 	mov	r2,r3
  80ee40:	62d9883a 	add	r12,r12,r11
  80ee44:	82fff404 	addi	r11,r16,-48
  80ee48:	2afff92e 	bgeu	r5,r11,80ee30 <__alt_data_end+0xff80ee30>
  80ee4c:	db002e15 	stw	r12,184(sp)
  80ee50:	003f4306 	br	80eb60 <__alt_data_end+0xff80eb60>
  80ee54:	8c400414 	ori	r17,r17,16
  80ee58:	d8c02a15 	stw	r3,168(sp)
  80ee5c:	d9802785 	stb	r6,158(sp)
  80ee60:	8880080c 	andi	r2,r17,32
  80ee64:	d8c02d17 	ldw	r3,180(sp)
  80ee68:	10015a26 	beq	r2,zero,80f3d4 <___vfprintf_internal_r+0xa0c>
  80ee6c:	db002d17 	ldw	r12,180(sp)
  80ee70:	18800117 	ldw	r2,4(r3)
  80ee74:	1cc00017 	ldw	r19,0(r3)
  80ee78:	63000204 	addi	r12,r12,8
  80ee7c:	db002d15 	stw	r12,180(sp)
  80ee80:	1039883a 	mov	fp,r2
  80ee84:	10044516 	blt	r2,zero,80ff9c <___vfprintf_internal_r+0x15d4>
  80ee88:	dd402783 	ldbu	r21,158(sp)
  80ee8c:	da403215 	stw	r9,200(sp)
  80ee90:	00800044 	movi	r2,1
  80ee94:	9f06b03a 	or	r3,r19,fp
  80ee98:	48000216 	blt	r9,zero,80eea4 <___vfprintf_internal_r+0x4dc>
  80ee9c:	013fdfc4 	movi	r4,-129
  80eea0:	8922703a 	and	r17,r17,r4
  80eea4:	1802071e 	bne	r3,zero,80f6c4 <___vfprintf_internal_r+0xcfc>
  80eea8:	4802fa26 	beq	r9,zero,80fa94 <___vfprintf_internal_r+0x10cc>
  80eeac:	10803fcc 	andi	r2,r2,255
  80eeb0:	00c00044 	movi	r3,1
  80eeb4:	10c22926 	beq	r2,r3,80f75c <___vfprintf_internal_r+0xd94>
  80eeb8:	00c00084 	movi	r3,2
  80eebc:	10c31726 	beq	r2,r3,80fb1c <___vfprintf_internal_r+0x1154>
  80eec0:	d8c01e04 	addi	r3,sp,120
  80eec4:	9808d0fa 	srli	r4,r19,3
  80eec8:	e00a977a 	slli	r5,fp,29
  80eecc:	e038d0fa 	srli	fp,fp,3
  80eed0:	9cc001cc 	andi	r19,r19,7
  80eed4:	98800c04 	addi	r2,r19,48
  80eed8:	18ffffc4 	addi	r3,r3,-1
  80eedc:	2926b03a 	or	r19,r5,r4
  80eee0:	18800005 	stb	r2,0(r3)
  80eee4:	9f08b03a 	or	r4,r19,fp
  80eee8:	203ff61e 	bne	r4,zero,80eec4 <__alt_data_end+0xff80eec4>
  80eeec:	8900004c 	andi	r4,r17,1
  80eef0:	d8c03115 	stw	r3,196(sp)
  80eef4:	2003931e 	bne	r4,zero,80fd44 <___vfprintf_internal_r+0x137c>
  80eef8:	dac02817 	ldw	r11,160(sp)
  80eefc:	58e5c83a 	sub	r18,r11,r3
  80ef00:	9005883a 	mov	r2,r18
  80ef04:	9240010e 	bge	r18,r9,80ef0c <___vfprintf_internal_r+0x544>
  80ef08:	4805883a 	mov	r2,r9
  80ef0c:	d8802b15 	stw	r2,172(sp)
  80ef10:	d8003415 	stw	zero,208(sp)
  80ef14:	a8803fcc 	andi	r2,r21,255
  80ef18:	1080201c 	xori	r2,r2,128
  80ef1c:	10bfe004 	addi	r2,r2,-128
  80ef20:	10000326 	beq	r2,zero,80ef30 <___vfprintf_internal_r+0x568>
  80ef24:	db002b17 	ldw	r12,172(sp)
  80ef28:	63000044 	addi	r12,r12,1
  80ef2c:	db002b15 	stw	r12,172(sp)
  80ef30:	88c0008c 	andi	r3,r17,2
  80ef34:	d8c02c15 	stw	r3,176(sp)
  80ef38:	18000326 	beq	r3,zero,80ef48 <___vfprintf_internal_r+0x580>
  80ef3c:	dac02b17 	ldw	r11,172(sp)
  80ef40:	5ac00084 	addi	r11,r11,2
  80ef44:	dac02b15 	stw	r11,172(sp)
  80ef48:	8b00210c 	andi	r12,r17,132
  80ef4c:	db003015 	stw	r12,192(sp)
  80ef50:	6001da1e 	bne	r12,zero,80f6bc <___vfprintf_internal_r+0xcf4>
  80ef54:	dac02e17 	ldw	r11,184(sp)
  80ef58:	db002b17 	ldw	r12,172(sp)
  80ef5c:	5b39c83a 	sub	fp,r11,r12
  80ef60:	0701d60e 	bge	zero,fp,80f6bc <___vfprintf_internal_r+0xcf4>
  80ef64:	02400404 	movi	r9,16
  80ef68:	d8c02017 	ldw	r3,128(sp)
  80ef6c:	d8801f17 	ldw	r2,124(sp)
  80ef70:	4f053c0e 	bge	r9,fp,810464 <___vfprintf_internal_r+0x1a9c>
  80ef74:	014020b4 	movhi	r5,130
  80ef78:	29704284 	addi	r5,r5,-16118
  80ef7c:	d9403615 	stw	r5,216(sp)
  80ef80:	482b883a 	mov	r21,r9
  80ef84:	04c001c4 	movi	r19,7
  80ef88:	00000306 	br	80ef98 <___vfprintf_internal_r+0x5d0>
  80ef8c:	e73ffc04 	addi	fp,fp,-16
  80ef90:	42000204 	addi	r8,r8,8
  80ef94:	af00130e 	bge	r21,fp,80efe4 <___vfprintf_internal_r+0x61c>
  80ef98:	02c020b4 	movhi	r11,130
  80ef9c:	18c00404 	addi	r3,r3,16
  80efa0:	10800044 	addi	r2,r2,1
  80efa4:	5af04284 	addi	r11,r11,-16118
  80efa8:	42c00015 	stw	r11,0(r8)
  80efac:	45400115 	stw	r21,4(r8)
  80efb0:	d8c02015 	stw	r3,128(sp)
  80efb4:	d8801f15 	stw	r2,124(sp)
  80efb8:	98bff40e 	bge	r19,r2,80ef8c <__alt_data_end+0xff80ef8c>
  80efbc:	b009883a 	mov	r4,r22
  80efc0:	b80b883a 	mov	r5,r23
  80efc4:	d9801e04 	addi	r6,sp,120
  80efc8:	08147940 	call	814794 <__sprint_r>
  80efcc:	103f721e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80efd0:	e73ffc04 	addi	fp,fp,-16
  80efd4:	d8c02017 	ldw	r3,128(sp)
  80efd8:	d8801f17 	ldw	r2,124(sp)
  80efdc:	da000404 	addi	r8,sp,16
  80efe0:	af3fed16 	blt	r21,fp,80ef98 <__alt_data_end+0xff80ef98>
  80efe4:	db003617 	ldw	r12,216(sp)
  80efe8:	e0c7883a 	add	r3,fp,r3
  80efec:	10800044 	addi	r2,r2,1
  80eff0:	43000015 	stw	r12,0(r8)
  80eff4:	47000115 	stw	fp,4(r8)
  80eff8:	d8c02015 	stw	r3,128(sp)
  80effc:	d8801f15 	stw	r2,124(sp)
  80f000:	010001c4 	movi	r4,7
  80f004:	20830e16 	blt	r4,r2,80fc40 <___vfprintf_internal_r+0x1278>
  80f008:	d8802787 	ldb	r2,158(sp)
  80f00c:	42000204 	addi	r8,r8,8
  80f010:	10000c26 	beq	r2,zero,80f044 <___vfprintf_internal_r+0x67c>
  80f014:	d8801f17 	ldw	r2,124(sp)
  80f018:	d9002784 	addi	r4,sp,158
  80f01c:	18c00044 	addi	r3,r3,1
  80f020:	10800044 	addi	r2,r2,1
  80f024:	41000015 	stw	r4,0(r8)
  80f028:	01000044 	movi	r4,1
  80f02c:	41000115 	stw	r4,4(r8)
  80f030:	d8c02015 	stw	r3,128(sp)
  80f034:	d8801f15 	stw	r2,124(sp)
  80f038:	010001c4 	movi	r4,7
  80f03c:	2082a716 	blt	r4,r2,80fadc <___vfprintf_internal_r+0x1114>
  80f040:	42000204 	addi	r8,r8,8
  80f044:	dac02c17 	ldw	r11,176(sp)
  80f048:	58000c26 	beq	r11,zero,80f07c <___vfprintf_internal_r+0x6b4>
  80f04c:	d8801f17 	ldw	r2,124(sp)
  80f050:	d9002704 	addi	r4,sp,156
  80f054:	18c00084 	addi	r3,r3,2
  80f058:	10800044 	addi	r2,r2,1
  80f05c:	41000015 	stw	r4,0(r8)
  80f060:	01000084 	movi	r4,2
  80f064:	41000115 	stw	r4,4(r8)
  80f068:	d8c02015 	stw	r3,128(sp)
  80f06c:	d8801f15 	stw	r2,124(sp)
  80f070:	010001c4 	movi	r4,7
  80f074:	2082a116 	blt	r4,r2,80fafc <___vfprintf_internal_r+0x1134>
  80f078:	42000204 	addi	r8,r8,8
  80f07c:	db003017 	ldw	r12,192(sp)
  80f080:	00802004 	movi	r2,128
  80f084:	60820326 	beq	r12,r2,80f894 <___vfprintf_internal_r+0xecc>
  80f088:	db003217 	ldw	r12,200(sp)
  80f08c:	64abc83a 	sub	r21,r12,r18
  80f090:	0540260e 	bge	zero,r21,80f12c <___vfprintf_internal_r+0x764>
  80f094:	07000404 	movi	fp,16
  80f098:	d8801f17 	ldw	r2,124(sp)
  80f09c:	e544570e 	bge	fp,r21,8101fc <___vfprintf_internal_r+0x1834>
  80f0a0:	014020b4 	movhi	r5,130
  80f0a4:	29703e84 	addi	r5,r5,-16134
  80f0a8:	d9402c15 	stw	r5,176(sp)
  80f0ac:	04c001c4 	movi	r19,7
  80f0b0:	00000306 	br	80f0c0 <___vfprintf_internal_r+0x6f8>
  80f0b4:	ad7ffc04 	addi	r21,r21,-16
  80f0b8:	42000204 	addi	r8,r8,8
  80f0bc:	e540110e 	bge	fp,r21,80f104 <___vfprintf_internal_r+0x73c>
  80f0c0:	18c00404 	addi	r3,r3,16
  80f0c4:	10800044 	addi	r2,r2,1
  80f0c8:	45000015 	stw	r20,0(r8)
  80f0cc:	47000115 	stw	fp,4(r8)
  80f0d0:	d8c02015 	stw	r3,128(sp)
  80f0d4:	d8801f15 	stw	r2,124(sp)
  80f0d8:	98bff60e 	bge	r19,r2,80f0b4 <__alt_data_end+0xff80f0b4>
  80f0dc:	b009883a 	mov	r4,r22
  80f0e0:	b80b883a 	mov	r5,r23
  80f0e4:	d9801e04 	addi	r6,sp,120
  80f0e8:	08147940 	call	814794 <__sprint_r>
  80f0ec:	103f2a1e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80f0f0:	ad7ffc04 	addi	r21,r21,-16
  80f0f4:	d8c02017 	ldw	r3,128(sp)
  80f0f8:	d8801f17 	ldw	r2,124(sp)
  80f0fc:	da000404 	addi	r8,sp,16
  80f100:	e57fef16 	blt	fp,r21,80f0c0 <__alt_data_end+0xff80f0c0>
  80f104:	dac02c17 	ldw	r11,176(sp)
  80f108:	1d47883a 	add	r3,r3,r21
  80f10c:	10800044 	addi	r2,r2,1
  80f110:	42c00015 	stw	r11,0(r8)
  80f114:	45400115 	stw	r21,4(r8)
  80f118:	d8c02015 	stw	r3,128(sp)
  80f11c:	d8801f15 	stw	r2,124(sp)
  80f120:	010001c4 	movi	r4,7
  80f124:	20826516 	blt	r4,r2,80fabc <___vfprintf_internal_r+0x10f4>
  80f128:	42000204 	addi	r8,r8,8
  80f12c:	8880400c 	andi	r2,r17,256
  80f130:	1001901e 	bne	r2,zero,80f774 <___vfprintf_internal_r+0xdac>
  80f134:	d8801f17 	ldw	r2,124(sp)
  80f138:	db003117 	ldw	r12,196(sp)
  80f13c:	1c87883a 	add	r3,r3,r18
  80f140:	10800044 	addi	r2,r2,1
  80f144:	43000015 	stw	r12,0(r8)
  80f148:	44800115 	stw	r18,4(r8)
  80f14c:	d8c02015 	stw	r3,128(sp)
  80f150:	d8801f15 	stw	r2,124(sp)
  80f154:	010001c4 	movi	r4,7
  80f158:	20824016 	blt	r4,r2,80fa5c <___vfprintf_internal_r+0x1094>
  80f15c:	42000204 	addi	r8,r8,8
  80f160:	8c40010c 	andi	r17,r17,4
  80f164:	88003126 	beq	r17,zero,80f22c <___vfprintf_internal_r+0x864>
  80f168:	db002e17 	ldw	r12,184(sp)
  80f16c:	dac02b17 	ldw	r11,172(sp)
  80f170:	62e1c83a 	sub	r16,r12,r11
  80f174:	04002d0e 	bge	zero,r16,80f22c <___vfprintf_internal_r+0x864>
  80f178:	04400404 	movi	r17,16
  80f17c:	d8801f17 	ldw	r2,124(sp)
  80f180:	8c05150e 	bge	r17,r16,8105d8 <___vfprintf_internal_r+0x1c10>
  80f184:	010020b4 	movhi	r4,130
  80f188:	21304284 	addi	r4,r4,-16118
  80f18c:	d9003615 	stw	r4,216(sp)
  80f190:	048001c4 	movi	r18,7
  80f194:	00000306 	br	80f1a4 <___vfprintf_internal_r+0x7dc>
  80f198:	843ffc04 	addi	r16,r16,-16
  80f19c:	42000204 	addi	r8,r8,8
  80f1a0:	8c00130e 	bge	r17,r16,80f1f0 <___vfprintf_internal_r+0x828>
  80f1a4:	014020b4 	movhi	r5,130
  80f1a8:	18c00404 	addi	r3,r3,16
  80f1ac:	10800044 	addi	r2,r2,1
  80f1b0:	29704284 	addi	r5,r5,-16118
  80f1b4:	41400015 	stw	r5,0(r8)
  80f1b8:	44400115 	stw	r17,4(r8)
  80f1bc:	d8c02015 	stw	r3,128(sp)
  80f1c0:	d8801f15 	stw	r2,124(sp)
  80f1c4:	90bff40e 	bge	r18,r2,80f198 <__alt_data_end+0xff80f198>
  80f1c8:	b009883a 	mov	r4,r22
  80f1cc:	b80b883a 	mov	r5,r23
  80f1d0:	d9801e04 	addi	r6,sp,120
  80f1d4:	08147940 	call	814794 <__sprint_r>
  80f1d8:	103eef1e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80f1dc:	843ffc04 	addi	r16,r16,-16
  80f1e0:	d8c02017 	ldw	r3,128(sp)
  80f1e4:	d8801f17 	ldw	r2,124(sp)
  80f1e8:	da000404 	addi	r8,sp,16
  80f1ec:	8c3fed16 	blt	r17,r16,80f1a4 <__alt_data_end+0xff80f1a4>
  80f1f0:	dac03617 	ldw	r11,216(sp)
  80f1f4:	1c07883a 	add	r3,r3,r16
  80f1f8:	10800044 	addi	r2,r2,1
  80f1fc:	42c00015 	stw	r11,0(r8)
  80f200:	44000115 	stw	r16,4(r8)
  80f204:	d8c02015 	stw	r3,128(sp)
  80f208:	d8801f15 	stw	r2,124(sp)
  80f20c:	010001c4 	movi	r4,7
  80f210:	2080060e 	bge	r4,r2,80f22c <___vfprintf_internal_r+0x864>
  80f214:	b009883a 	mov	r4,r22
  80f218:	b80b883a 	mov	r5,r23
  80f21c:	d9801e04 	addi	r6,sp,120
  80f220:	08147940 	call	814794 <__sprint_r>
  80f224:	103edc1e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80f228:	d8c02017 	ldw	r3,128(sp)
  80f22c:	d8802b17 	ldw	r2,172(sp)
  80f230:	db002e17 	ldw	r12,184(sp)
  80f234:	1300010e 	bge	r2,r12,80f23c <___vfprintf_internal_r+0x874>
  80f238:	6005883a 	mov	r2,r12
  80f23c:	dac02f17 	ldw	r11,188(sp)
  80f240:	5897883a 	add	r11,r11,r2
  80f244:	dac02f15 	stw	r11,188(sp)
  80f248:	18020c1e 	bne	r3,zero,80fa7c <___vfprintf_internal_r+0x10b4>
  80f24c:	d8001f15 	stw	zero,124(sp)
  80f250:	da000404 	addi	r8,sp,16
  80f254:	003e1706 	br	80eab4 <__alt_data_end+0xff80eab4>
  80f258:	8c400414 	ori	r17,r17,16
  80f25c:	d8c02a15 	stw	r3,168(sp)
  80f260:	8880080c 	andi	r2,r17,32
  80f264:	10010126 	beq	r2,zero,80f66c <___vfprintf_internal_r+0xca4>
  80f268:	db002d17 	ldw	r12,180(sp)
  80f26c:	0005883a 	mov	r2,zero
  80f270:	64c00017 	ldw	r19,0(r12)
  80f274:	67000117 	ldw	fp,4(r12)
  80f278:	63000204 	addi	r12,r12,8
  80f27c:	db002d15 	stw	r12,180(sp)
  80f280:	9f06b03a 	or	r3,r19,fp
  80f284:	d8002785 	stb	zero,158(sp)
  80f288:	da403215 	stw	r9,200(sp)
  80f28c:	002b883a 	mov	r21,zero
  80f290:	003f0106 	br	80ee98 <__alt_data_end+0xff80ee98>
  80f294:	8c400414 	ori	r17,r17,16
  80f298:	d8c02a15 	stw	r3,168(sp)
  80f29c:	8880080c 	andi	r2,r17,32
  80f2a0:	1000e326 	beq	r2,zero,80f630 <___vfprintf_internal_r+0xc68>
  80f2a4:	dac02d17 	ldw	r11,180(sp)
  80f2a8:	00800044 	movi	r2,1
  80f2ac:	5cc00017 	ldw	r19,0(r11)
  80f2b0:	5f000117 	ldw	fp,4(r11)
  80f2b4:	5ac00204 	addi	r11,r11,8
  80f2b8:	dac02d15 	stw	r11,180(sp)
  80f2bc:	9f06b03a 	or	r3,r19,fp
  80f2c0:	003ff006 	br	80f284 <__alt_data_end+0xff80f284>
  80f2c4:	db002d17 	ldw	r12,180(sp)
  80f2c8:	dac02d17 	ldw	r11,180(sp)
  80f2cc:	d8c02a15 	stw	r3,168(sp)
  80f2d0:	63000017 	ldw	r12,0(r12)
  80f2d4:	5ac00117 	ldw	r11,4(r11)
  80f2d8:	d9802785 	stb	r6,158(sp)
  80f2dc:	6009883a 	mov	r4,r12
  80f2e0:	580b883a 	mov	r5,r11
  80f2e4:	db003715 	stw	r12,220(sp)
  80f2e8:	da003f15 	stw	r8,252(sp)
  80f2ec:	da403e15 	stw	r9,248(sp)
  80f2f0:	dac03915 	stw	r11,228(sp)
  80f2f4:	08145800 	call	814580 <__fpclassifyd>
  80f2f8:	db002d17 	ldw	r12,180(sp)
  80f2fc:	04800044 	movi	r18,1
  80f300:	da003f17 	ldw	r8,252(sp)
  80f304:	64c00204 	addi	r19,r12,8
  80f308:	da403e17 	ldw	r9,248(sp)
  80f30c:	d9003717 	ldw	r4,220(sp)
  80f310:	d9403917 	ldw	r5,228(sp)
  80f314:	14832b1e 	bne	r2,r18,80ffc4 <___vfprintf_internal_r+0x15fc>
  80f318:	000d883a 	mov	r6,zero
  80f31c:	000f883a 	mov	r7,zero
  80f320:	0818be00 	call	818be0 <__ledf2>
  80f324:	da003f17 	ldw	r8,252(sp)
  80f328:	1004b716 	blt	r2,zero,810608 <___vfprintf_internal_r+0x1c40>
  80f32c:	dd402783 	ldbu	r21,158(sp)
  80f330:	008011c4 	movi	r2,71
  80f334:	14040e0e 	bge	r2,r16,810370 <___vfprintf_internal_r+0x19a8>
  80f338:	00c020b4 	movhi	r3,130
  80f33c:	18f02f04 	addi	r3,r3,-16196
  80f340:	d8c03115 	stw	r3,196(sp)
  80f344:	02c000c4 	movi	r11,3
  80f348:	00bfdfc4 	movi	r2,-129
  80f34c:	dac02b15 	stw	r11,172(sp)
  80f350:	88a2703a 	and	r17,r17,r2
  80f354:	dcc02d15 	stw	r19,180(sp)
  80f358:	5825883a 	mov	r18,r11
  80f35c:	d8003215 	stw	zero,200(sp)
  80f360:	d8003415 	stw	zero,208(sp)
  80f364:	003eeb06 	br	80ef14 <__alt_data_end+0xff80ef14>
  80f368:	db002d17 	ldw	r12,180(sp)
  80f36c:	00800c04 	movi	r2,48
  80f370:	d8802705 	stb	r2,156(sp)
  80f374:	64c00017 	ldw	r19,0(r12)
  80f378:	00801e04 	movi	r2,120
  80f37c:	d8802745 	stb	r2,157(sp)
  80f380:	008020b4 	movhi	r2,130
  80f384:	10b03704 	addi	r2,r2,-16164
  80f388:	63000104 	addi	r12,r12,4
  80f38c:	d8c02a15 	stw	r3,168(sp)
  80f390:	d8803b15 	stw	r2,236(sp)
  80f394:	0039883a 	mov	fp,zero
  80f398:	8c400094 	ori	r17,r17,2
  80f39c:	db002d15 	stw	r12,180(sp)
  80f3a0:	00800084 	movi	r2,2
  80f3a4:	04001e04 	movi	r16,120
  80f3a8:	9807883a 	mov	r3,r19
  80f3ac:	003fb506 	br	80f284 <__alt_data_end+0xff80f284>
  80f3b0:	8c400214 	ori	r17,r17,8
  80f3b4:	1805883a 	mov	r2,r3
  80f3b8:	1c000007 	ldb	r16,0(r3)
  80f3bc:	003de706 	br	80eb5c <__alt_data_end+0xff80eb5c>
  80f3c0:	d8c02a15 	stw	r3,168(sp)
  80f3c4:	d9802785 	stb	r6,158(sp)
  80f3c8:	8880080c 	andi	r2,r17,32
  80f3cc:	d8c02d17 	ldw	r3,180(sp)
  80f3d0:	103ea61e 	bne	r2,zero,80ee6c <__alt_data_end+0xff80ee6c>
  80f3d4:	8880040c 	andi	r2,r17,16
  80f3d8:	1002221e 	bne	r2,zero,80fc64 <___vfprintf_internal_r+0x129c>
  80f3dc:	8880100c 	andi	r2,r17,64
  80f3e0:	10022026 	beq	r2,zero,80fc64 <___vfprintf_internal_r+0x129c>
  80f3e4:	1cc0000f 	ldh	r19,0(r3)
  80f3e8:	db002d17 	ldw	r12,180(sp)
  80f3ec:	9839d7fa 	srai	fp,r19,31
  80f3f0:	63000104 	addi	r12,r12,4
  80f3f4:	db002d15 	stw	r12,180(sp)
  80f3f8:	e005883a 	mov	r2,fp
  80f3fc:	003ea106 	br	80ee84 <__alt_data_end+0xff80ee84>
  80f400:	8c401014 	ori	r17,r17,64
  80f404:	1805883a 	mov	r2,r3
  80f408:	1c000007 	ldb	r16,0(r3)
  80f40c:	003dd306 	br	80eb5c <__alt_data_end+0xff80eb5c>
  80f410:	1c000007 	ldb	r16,0(r3)
  80f414:	81c3e926 	beq	r16,r7,8103bc <___vfprintf_internal_r+0x19f4>
  80f418:	8c400414 	ori	r17,r17,16
  80f41c:	1805883a 	mov	r2,r3
  80f420:	003dce06 	br	80eb5c <__alt_data_end+0xff80eb5c>
  80f424:	d8c02a15 	stw	r3,168(sp)
  80f428:	d9802785 	stb	r6,158(sp)
  80f42c:	8880080c 	andi	r2,r17,32
  80f430:	10034726 	beq	r2,zero,810150 <___vfprintf_internal_r+0x1788>
  80f434:	db002d17 	ldw	r12,180(sp)
  80f438:	dac02f17 	ldw	r11,188(sp)
  80f43c:	60800017 	ldw	r2,0(r12)
  80f440:	5807d7fa 	srai	r3,r11,31
  80f444:	63000104 	addi	r12,r12,4
  80f448:	db002d15 	stw	r12,180(sp)
  80f44c:	12c00015 	stw	r11,0(r2)
  80f450:	10c00115 	stw	r3,4(r2)
  80f454:	003d9706 	br	80eab4 <__alt_data_end+0xff80eab4>
  80f458:	030020b4 	movhi	r12,130
  80f45c:	63303204 	addi	r12,r12,-16184
  80f460:	d8c02a15 	stw	r3,168(sp)
  80f464:	d9802785 	stb	r6,158(sp)
  80f468:	db003b15 	stw	r12,236(sp)
  80f46c:	88c0080c 	andi	r3,r17,32
  80f470:	d8802d17 	ldw	r2,180(sp)
  80f474:	18005b26 	beq	r3,zero,80f5e4 <___vfprintf_internal_r+0xc1c>
  80f478:	dac02d17 	ldw	r11,180(sp)
  80f47c:	14c00017 	ldw	r19,0(r2)
  80f480:	17000117 	ldw	fp,4(r2)
  80f484:	5ac00204 	addi	r11,r11,8
  80f488:	dac02d15 	stw	r11,180(sp)
  80f48c:	8880004c 	andi	r2,r17,1
  80f490:	10022926 	beq	r2,zero,80fd38 <___vfprintf_internal_r+0x1370>
  80f494:	9f06b03a 	or	r3,r19,fp
  80f498:	18032b26 	beq	r3,zero,810148 <___vfprintf_internal_r+0x1780>
  80f49c:	00800c04 	movi	r2,48
  80f4a0:	d8802705 	stb	r2,156(sp)
  80f4a4:	dc002745 	stb	r16,157(sp)
  80f4a8:	8c400094 	ori	r17,r17,2
  80f4ac:	00800084 	movi	r2,2
  80f4b0:	003f7406 	br	80f284 <__alt_data_end+0xff80f284>
  80f4b4:	30803fcc 	andi	r2,r6,255
  80f4b8:	1080201c 	xori	r2,r2,128
  80f4bc:	10bfe004 	addi	r2,r2,-128
  80f4c0:	1003351e 	bne	r2,zero,810198 <___vfprintf_internal_r+0x17d0>
  80f4c4:	1805883a 	mov	r2,r3
  80f4c8:	01800804 	movi	r6,32
  80f4cc:	1c000007 	ldb	r16,0(r3)
  80f4d0:	003da206 	br	80eb5c <__alt_data_end+0xff80eb5c>
  80f4d4:	dac02d17 	ldw	r11,180(sp)
  80f4d8:	db002d17 	ldw	r12,180(sp)
  80f4dc:	5ac00017 	ldw	r11,0(r11)
  80f4e0:	dac02e15 	stw	r11,184(sp)
  80f4e4:	62c00104 	addi	r11,r12,4
  80f4e8:	db002e17 	ldw	r12,184(sp)
  80f4ec:	6003ad16 	blt	r12,zero,8103a4 <___vfprintf_internal_r+0x19dc>
  80f4f0:	dac02d15 	stw	r11,180(sp)
  80f4f4:	1805883a 	mov	r2,r3
  80f4f8:	1c000007 	ldb	r16,0(r3)
  80f4fc:	003d9706 	br	80eb5c <__alt_data_end+0xff80eb5c>
  80f500:	1805883a 	mov	r2,r3
  80f504:	01800ac4 	movi	r6,43
  80f508:	1c000007 	ldb	r16,0(r3)
  80f50c:	003d9306 	br	80eb5c <__alt_data_end+0xff80eb5c>
  80f510:	db002d17 	ldw	r12,180(sp)
  80f514:	d8c02a15 	stw	r3,168(sp)
  80f518:	00c00044 	movi	r3,1
  80f51c:	60800017 	ldw	r2,0(r12)
  80f520:	63000104 	addi	r12,r12,4
  80f524:	d8c02b15 	stw	r3,172(sp)
  80f528:	d8002785 	stb	zero,158(sp)
  80f52c:	d8801405 	stb	r2,80(sp)
  80f530:	db002d15 	stw	r12,180(sp)
  80f534:	dac01404 	addi	r11,sp,80
  80f538:	1825883a 	mov	r18,r3
  80f53c:	d8003215 	stw	zero,200(sp)
  80f540:	d8003415 	stw	zero,208(sp)
  80f544:	dac03115 	stw	r11,196(sp)
  80f548:	0005883a 	mov	r2,zero
  80f54c:	003e7806 	br	80ef30 <__alt_data_end+0xff80ef30>
  80f550:	dac02d17 	ldw	r11,180(sp)
  80f554:	db002d17 	ldw	r12,180(sp)
  80f558:	d8c02a15 	stw	r3,168(sp)
  80f55c:	5ac00017 	ldw	r11,0(r11)
  80f560:	d8002785 	stb	zero,158(sp)
  80f564:	64c00104 	addi	r19,r12,4
  80f568:	dac03115 	stw	r11,196(sp)
  80f56c:	5803fe26 	beq	r11,zero,810568 <___vfprintf_internal_r+0x1ba0>
  80f570:	d9003117 	ldw	r4,196(sp)
  80f574:	4803b416 	blt	r9,zero,810448 <___vfprintf_internal_r+0x1a80>
  80f578:	480d883a 	mov	r6,r9
  80f57c:	000b883a 	mov	r5,zero
  80f580:	da003f15 	stw	r8,252(sp)
  80f584:	da403e15 	stw	r9,248(sp)
  80f588:	08133300 	call	813330 <memchr>
  80f58c:	da003f17 	ldw	r8,252(sp)
  80f590:	da403e17 	ldw	r9,248(sp)
  80f594:	10043026 	beq	r2,zero,810658 <___vfprintf_internal_r+0x1c90>
  80f598:	d8c03117 	ldw	r3,196(sp)
  80f59c:	10e5c83a 	sub	r18,r2,r3
  80f5a0:	4c836b16 	blt	r9,r18,810350 <___vfprintf_internal_r+0x1988>
  80f5a4:	9005883a 	mov	r2,r18
  80f5a8:	9003ac16 	blt	r18,zero,81045c <___vfprintf_internal_r+0x1a94>
  80f5ac:	dd402783 	ldbu	r21,158(sp)
  80f5b0:	d8802b15 	stw	r2,172(sp)
  80f5b4:	dcc02d15 	stw	r19,180(sp)
  80f5b8:	d8003215 	stw	zero,200(sp)
  80f5bc:	d8003415 	stw	zero,208(sp)
  80f5c0:	003e5406 	br	80ef14 <__alt_data_end+0xff80ef14>
  80f5c4:	008020b4 	movhi	r2,130
  80f5c8:	10b03704 	addi	r2,r2,-16164
  80f5cc:	d8c02a15 	stw	r3,168(sp)
  80f5d0:	d8803b15 	stw	r2,236(sp)
  80f5d4:	d9802785 	stb	r6,158(sp)
  80f5d8:	88c0080c 	andi	r3,r17,32
  80f5dc:	d8802d17 	ldw	r2,180(sp)
  80f5e0:	183fa51e 	bne	r3,zero,80f478 <__alt_data_end+0xff80f478>
  80f5e4:	88c0040c 	andi	r3,r17,16
  80f5e8:	1802ee26 	beq	r3,zero,8101a4 <___vfprintf_internal_r+0x17dc>
  80f5ec:	db002d17 	ldw	r12,180(sp)
  80f5f0:	14c00017 	ldw	r19,0(r2)
  80f5f4:	0039883a 	mov	fp,zero
  80f5f8:	63000104 	addi	r12,r12,4
  80f5fc:	db002d15 	stw	r12,180(sp)
  80f600:	003fa206 	br	80f48c <__alt_data_end+0xff80f48c>
  80f604:	8c400054 	ori	r17,r17,1
  80f608:	1805883a 	mov	r2,r3
  80f60c:	1c000007 	ldb	r16,0(r3)
  80f610:	003d5206 	br	80eb5c <__alt_data_end+0xff80eb5c>
  80f614:	8c400814 	ori	r17,r17,32
  80f618:	1805883a 	mov	r2,r3
  80f61c:	1c000007 	ldb	r16,0(r3)
  80f620:	003d4e06 	br	80eb5c <__alt_data_end+0xff80eb5c>
  80f624:	d8c02a15 	stw	r3,168(sp)
  80f628:	8880080c 	andi	r2,r17,32
  80f62c:	103f1d1e 	bne	r2,zero,80f2a4 <__alt_data_end+0xff80f2a4>
  80f630:	8880040c 	andi	r2,r17,16
  80f634:	1001b81e 	bne	r2,zero,80fd18 <___vfprintf_internal_r+0x1350>
  80f638:	8880100c 	andi	r2,r17,64
  80f63c:	1001b626 	beq	r2,zero,80fd18 <___vfprintf_internal_r+0x1350>
  80f640:	dac02d17 	ldw	r11,180(sp)
  80f644:	0039883a 	mov	fp,zero
  80f648:	00800044 	movi	r2,1
  80f64c:	5cc0000b 	ldhu	r19,0(r11)
  80f650:	5ac00104 	addi	r11,r11,4
  80f654:	dac02d15 	stw	r11,180(sp)
  80f658:	9807883a 	mov	r3,r19
  80f65c:	003f0906 	br	80f284 <__alt_data_end+0xff80f284>
  80f660:	d8c02a15 	stw	r3,168(sp)
  80f664:	8880080c 	andi	r2,r17,32
  80f668:	103eff1e 	bne	r2,zero,80f268 <__alt_data_end+0xff80f268>
  80f66c:	8880040c 	andi	r2,r17,16
  80f670:	1001a11e 	bne	r2,zero,80fcf8 <___vfprintf_internal_r+0x1330>
  80f674:	8880100c 	andi	r2,r17,64
  80f678:	10019f26 	beq	r2,zero,80fcf8 <___vfprintf_internal_r+0x1330>
  80f67c:	db002d17 	ldw	r12,180(sp)
  80f680:	0039883a 	mov	fp,zero
  80f684:	0005883a 	mov	r2,zero
  80f688:	64c0000b 	ldhu	r19,0(r12)
  80f68c:	63000104 	addi	r12,r12,4
  80f690:	db002d15 	stw	r12,180(sp)
  80f694:	9807883a 	mov	r3,r19
  80f698:	003efa06 	br	80f284 <__alt_data_end+0xff80f284>
  80f69c:	d8c02a15 	stw	r3,168(sp)
  80f6a0:	d9802785 	stb	r6,158(sp)
  80f6a4:	803db626 	beq	r16,zero,80ed80 <__alt_data_end+0xff80ed80>
  80f6a8:	00c00044 	movi	r3,1
  80f6ac:	d8c02b15 	stw	r3,172(sp)
  80f6b0:	dc001405 	stb	r16,80(sp)
  80f6b4:	d8002785 	stb	zero,158(sp)
  80f6b8:	003f9e06 	br	80f534 <__alt_data_end+0xff80f534>
  80f6bc:	d8c02017 	ldw	r3,128(sp)
  80f6c0:	003e5306 	br	80f010 <__alt_data_end+0xff80f010>
  80f6c4:	10803fcc 	andi	r2,r2,255
  80f6c8:	00c00044 	movi	r3,1
  80f6cc:	10fdfa1e 	bne	r2,r3,80eeb8 <__alt_data_end+0xff80eeb8>
  80f6d0:	e000021e 	bne	fp,zero,80f6dc <___vfprintf_internal_r+0xd14>
  80f6d4:	00800244 	movi	r2,9
  80f6d8:	14c0202e 	bgeu	r2,r19,80f75c <___vfprintf_internal_r+0xd94>
  80f6dc:	dc002b15 	stw	r16,172(sp)
  80f6e0:	dc402c15 	stw	r17,176(sp)
  80f6e4:	9821883a 	mov	r16,r19
  80f6e8:	e023883a 	mov	r17,fp
  80f6ec:	dc801e04 	addi	r18,sp,120
  80f6f0:	4827883a 	mov	r19,r9
  80f6f4:	4039883a 	mov	fp,r8
  80f6f8:	8009883a 	mov	r4,r16
  80f6fc:	880b883a 	mov	r5,r17
  80f700:	01800284 	movi	r6,10
  80f704:	000f883a 	mov	r7,zero
  80f708:	08173840 	call	817384 <__umoddi3>
  80f70c:	10800c04 	addi	r2,r2,48
  80f710:	94bfffc4 	addi	r18,r18,-1
  80f714:	8009883a 	mov	r4,r16
  80f718:	880b883a 	mov	r5,r17
  80f71c:	01800284 	movi	r6,10
  80f720:	000f883a 	mov	r7,zero
  80f724:	90800005 	stb	r2,0(r18)
  80f728:	0816dc40 	call	816dc4 <__udivdi3>
  80f72c:	1021883a 	mov	r16,r2
  80f730:	10c4b03a 	or	r2,r2,r3
  80f734:	1823883a 	mov	r17,r3
  80f738:	103fef1e 	bne	r2,zero,80f6f8 <__alt_data_end+0xff80f6f8>
  80f73c:	dac02817 	ldw	r11,160(sp)
  80f740:	dc803115 	stw	r18,196(sp)
  80f744:	dc002b17 	ldw	r16,172(sp)
  80f748:	dc402c17 	ldw	r17,176(sp)
  80f74c:	9813883a 	mov	r9,r19
  80f750:	e011883a 	mov	r8,fp
  80f754:	5ca5c83a 	sub	r18,r11,r18
  80f758:	003de906 	br	80ef00 <__alt_data_end+0xff80ef00>
  80f75c:	9cc00c04 	addi	r19,r19,48
  80f760:	d8c01dc4 	addi	r3,sp,119
  80f764:	dcc01dc5 	stb	r19,119(sp)
  80f768:	dc803c17 	ldw	r18,240(sp)
  80f76c:	d8c03115 	stw	r3,196(sp)
  80f770:	003de306 	br	80ef00 <__alt_data_end+0xff80ef00>
  80f774:	00801944 	movi	r2,101
  80f778:	1400710e 	bge	r2,r16,80f940 <___vfprintf_internal_r+0xf78>
  80f77c:	d9003717 	ldw	r4,220(sp)
  80f780:	d9403917 	ldw	r5,228(sp)
  80f784:	000d883a 	mov	r6,zero
  80f788:	000f883a 	mov	r7,zero
  80f78c:	d8c03d15 	stw	r3,244(sp)
  80f790:	da003f15 	stw	r8,252(sp)
  80f794:	0818a7c0 	call	818a7c <__eqdf2>
  80f798:	d8c03d17 	ldw	r3,244(sp)
  80f79c:	da003f17 	ldw	r8,252(sp)
  80f7a0:	1000ef1e 	bne	r2,zero,80fb60 <___vfprintf_internal_r+0x1198>
  80f7a4:	d8801f17 	ldw	r2,124(sp)
  80f7a8:	010020b4 	movhi	r4,130
  80f7ac:	21303e04 	addi	r4,r4,-16136
  80f7b0:	18c00044 	addi	r3,r3,1
  80f7b4:	10800044 	addi	r2,r2,1
  80f7b8:	41000015 	stw	r4,0(r8)
  80f7bc:	01000044 	movi	r4,1
  80f7c0:	41000115 	stw	r4,4(r8)
  80f7c4:	d8c02015 	stw	r3,128(sp)
  80f7c8:	d8801f15 	stw	r2,124(sp)
  80f7cc:	010001c4 	movi	r4,7
  80f7d0:	20828e16 	blt	r4,r2,81020c <___vfprintf_internal_r+0x1844>
  80f7d4:	42000204 	addi	r8,r8,8
  80f7d8:	d8802617 	ldw	r2,152(sp)
  80f7dc:	dac03317 	ldw	r11,204(sp)
  80f7e0:	12c00216 	blt	r2,r11,80f7ec <___vfprintf_internal_r+0xe24>
  80f7e4:	8880004c 	andi	r2,r17,1
  80f7e8:	103e5d26 	beq	r2,zero,80f160 <__alt_data_end+0xff80f160>
  80f7ec:	db003817 	ldw	r12,224(sp)
  80f7f0:	d8801f17 	ldw	r2,124(sp)
  80f7f4:	dac03517 	ldw	r11,212(sp)
  80f7f8:	1b07883a 	add	r3,r3,r12
  80f7fc:	10800044 	addi	r2,r2,1
  80f800:	42c00015 	stw	r11,0(r8)
  80f804:	43000115 	stw	r12,4(r8)
  80f808:	d8c02015 	stw	r3,128(sp)
  80f80c:	d8801f15 	stw	r2,124(sp)
  80f810:	010001c4 	movi	r4,7
  80f814:	2082ed16 	blt	r4,r2,8103cc <___vfprintf_internal_r+0x1a04>
  80f818:	42000204 	addi	r8,r8,8
  80f81c:	db003317 	ldw	r12,204(sp)
  80f820:	643fffc4 	addi	r16,r12,-1
  80f824:	043e4e0e 	bge	zero,r16,80f160 <__alt_data_end+0xff80f160>
  80f828:	04800404 	movi	r18,16
  80f82c:	d8801f17 	ldw	r2,124(sp)
  80f830:	94007e0e 	bge	r18,r16,80fa2c <___vfprintf_internal_r+0x1064>
  80f834:	014020b4 	movhi	r5,130
  80f838:	29703e84 	addi	r5,r5,-16134
  80f83c:	d9402c15 	stw	r5,176(sp)
  80f840:	054001c4 	movi	r21,7
  80f844:	00000306 	br	80f854 <___vfprintf_internal_r+0xe8c>
  80f848:	42000204 	addi	r8,r8,8
  80f84c:	843ffc04 	addi	r16,r16,-16
  80f850:	9400790e 	bge	r18,r16,80fa38 <___vfprintf_internal_r+0x1070>
  80f854:	18c00404 	addi	r3,r3,16
  80f858:	10800044 	addi	r2,r2,1
  80f85c:	45000015 	stw	r20,0(r8)
  80f860:	44800115 	stw	r18,4(r8)
  80f864:	d8c02015 	stw	r3,128(sp)
  80f868:	d8801f15 	stw	r2,124(sp)
  80f86c:	a8bff60e 	bge	r21,r2,80f848 <__alt_data_end+0xff80f848>
  80f870:	b009883a 	mov	r4,r22
  80f874:	b80b883a 	mov	r5,r23
  80f878:	d9801e04 	addi	r6,sp,120
  80f87c:	08147940 	call	814794 <__sprint_r>
  80f880:	103d451e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80f884:	d8c02017 	ldw	r3,128(sp)
  80f888:	d8801f17 	ldw	r2,124(sp)
  80f88c:	da000404 	addi	r8,sp,16
  80f890:	003fee06 	br	80f84c <__alt_data_end+0xff80f84c>
  80f894:	dac02e17 	ldw	r11,184(sp)
  80f898:	db002b17 	ldw	r12,172(sp)
  80f89c:	5b2bc83a 	sub	r21,r11,r12
  80f8a0:	057df90e 	bge	zero,r21,80f088 <__alt_data_end+0xff80f088>
  80f8a4:	07000404 	movi	fp,16
  80f8a8:	d8801f17 	ldw	r2,124(sp)
  80f8ac:	e543640e 	bge	fp,r21,810640 <___vfprintf_internal_r+0x1c78>
  80f8b0:	014020b4 	movhi	r5,130
  80f8b4:	29703e84 	addi	r5,r5,-16134
  80f8b8:	d9402c15 	stw	r5,176(sp)
  80f8bc:	04c001c4 	movi	r19,7
  80f8c0:	00000306 	br	80f8d0 <___vfprintf_internal_r+0xf08>
  80f8c4:	ad7ffc04 	addi	r21,r21,-16
  80f8c8:	42000204 	addi	r8,r8,8
  80f8cc:	e540110e 	bge	fp,r21,80f914 <___vfprintf_internal_r+0xf4c>
  80f8d0:	18c00404 	addi	r3,r3,16
  80f8d4:	10800044 	addi	r2,r2,1
  80f8d8:	45000015 	stw	r20,0(r8)
  80f8dc:	47000115 	stw	fp,4(r8)
  80f8e0:	d8c02015 	stw	r3,128(sp)
  80f8e4:	d8801f15 	stw	r2,124(sp)
  80f8e8:	98bff60e 	bge	r19,r2,80f8c4 <__alt_data_end+0xff80f8c4>
  80f8ec:	b009883a 	mov	r4,r22
  80f8f0:	b80b883a 	mov	r5,r23
  80f8f4:	d9801e04 	addi	r6,sp,120
  80f8f8:	08147940 	call	814794 <__sprint_r>
  80f8fc:	103d261e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80f900:	ad7ffc04 	addi	r21,r21,-16
  80f904:	d8c02017 	ldw	r3,128(sp)
  80f908:	d8801f17 	ldw	r2,124(sp)
  80f90c:	da000404 	addi	r8,sp,16
  80f910:	e57fef16 	blt	fp,r21,80f8d0 <__alt_data_end+0xff80f8d0>
  80f914:	dac02c17 	ldw	r11,176(sp)
  80f918:	1d47883a 	add	r3,r3,r21
  80f91c:	10800044 	addi	r2,r2,1
  80f920:	42c00015 	stw	r11,0(r8)
  80f924:	45400115 	stw	r21,4(r8)
  80f928:	d8c02015 	stw	r3,128(sp)
  80f92c:	d8801f15 	stw	r2,124(sp)
  80f930:	010001c4 	movi	r4,7
  80f934:	20819116 	blt	r4,r2,80ff7c <___vfprintf_internal_r+0x15b4>
  80f938:	42000204 	addi	r8,r8,8
  80f93c:	003dd206 	br	80f088 <__alt_data_end+0xff80f088>
  80f940:	db003317 	ldw	r12,204(sp)
  80f944:	00800044 	movi	r2,1
  80f948:	18c00044 	addi	r3,r3,1
  80f94c:	1301530e 	bge	r2,r12,80fe9c <___vfprintf_internal_r+0x14d4>
  80f950:	dc001f17 	ldw	r16,124(sp)
  80f954:	dac03117 	ldw	r11,196(sp)
  80f958:	00800044 	movi	r2,1
  80f95c:	84000044 	addi	r16,r16,1
  80f960:	40800115 	stw	r2,4(r8)
  80f964:	42c00015 	stw	r11,0(r8)
  80f968:	d8c02015 	stw	r3,128(sp)
  80f96c:	dc001f15 	stw	r16,124(sp)
  80f970:	008001c4 	movi	r2,7
  80f974:	14016b16 	blt	r2,r16,80ff24 <___vfprintf_internal_r+0x155c>
  80f978:	42000204 	addi	r8,r8,8
  80f97c:	db003817 	ldw	r12,224(sp)
  80f980:	dac03517 	ldw	r11,212(sp)
  80f984:	84000044 	addi	r16,r16,1
  80f988:	1b07883a 	add	r3,r3,r12
  80f98c:	42c00015 	stw	r11,0(r8)
  80f990:	43000115 	stw	r12,4(r8)
  80f994:	d8c02015 	stw	r3,128(sp)
  80f998:	dc001f15 	stw	r16,124(sp)
  80f99c:	008001c4 	movi	r2,7
  80f9a0:	14016916 	blt	r2,r16,80ff48 <___vfprintf_internal_r+0x1580>
  80f9a4:	44800204 	addi	r18,r8,8
  80f9a8:	d9003717 	ldw	r4,220(sp)
  80f9ac:	d9403917 	ldw	r5,228(sp)
  80f9b0:	000d883a 	mov	r6,zero
  80f9b4:	000f883a 	mov	r7,zero
  80f9b8:	d8c03d15 	stw	r3,244(sp)
  80f9bc:	0818a7c0 	call	818a7c <__eqdf2>
  80f9c0:	d8c03d17 	ldw	r3,244(sp)
  80f9c4:	db003317 	ldw	r12,204(sp)
  80f9c8:	1000ad26 	beq	r2,zero,80fc80 <___vfprintf_internal_r+0x12b8>
  80f9cc:	dac03117 	ldw	r11,196(sp)
  80f9d0:	60bfffc4 	addi	r2,r12,-1
  80f9d4:	1887883a 	add	r3,r3,r2
  80f9d8:	59000044 	addi	r4,r11,1
  80f9dc:	84000044 	addi	r16,r16,1
  80f9e0:	90800115 	stw	r2,4(r18)
  80f9e4:	91000015 	stw	r4,0(r18)
  80f9e8:	d8c02015 	stw	r3,128(sp)
  80f9ec:	dc001f15 	stw	r16,124(sp)
  80f9f0:	008001c4 	movi	r2,7
  80f9f4:	14014216 	blt	r2,r16,80ff00 <___vfprintf_internal_r+0x1538>
  80f9f8:	94800204 	addi	r18,r18,8
  80f9fc:	dac03a17 	ldw	r11,232(sp)
  80fa00:	dd4022c4 	addi	r21,sp,139
  80fa04:	84000044 	addi	r16,r16,1
  80fa08:	1ac7883a 	add	r3,r3,r11
  80fa0c:	95400015 	stw	r21,0(r18)
  80fa10:	92c00115 	stw	r11,4(r18)
  80fa14:	d8c02015 	stw	r3,128(sp)
  80fa18:	dc001f15 	stw	r16,124(sp)
  80fa1c:	008001c4 	movi	r2,7
  80fa20:	14000e16 	blt	r2,r16,80fa5c <___vfprintf_internal_r+0x1094>
  80fa24:	92000204 	addi	r8,r18,8
  80fa28:	003dcd06 	br	80f160 <__alt_data_end+0xff80f160>
  80fa2c:	010020b4 	movhi	r4,130
  80fa30:	21303e84 	addi	r4,r4,-16134
  80fa34:	d9002c15 	stw	r4,176(sp)
  80fa38:	dac02c17 	ldw	r11,176(sp)
  80fa3c:	1c07883a 	add	r3,r3,r16
  80fa40:	44000115 	stw	r16,4(r8)
  80fa44:	42c00015 	stw	r11,0(r8)
  80fa48:	10800044 	addi	r2,r2,1
  80fa4c:	d8c02015 	stw	r3,128(sp)
  80fa50:	d8801f15 	stw	r2,124(sp)
  80fa54:	010001c4 	movi	r4,7
  80fa58:	20bdc00e 	bge	r4,r2,80f15c <__alt_data_end+0xff80f15c>
  80fa5c:	b009883a 	mov	r4,r22
  80fa60:	b80b883a 	mov	r5,r23
  80fa64:	d9801e04 	addi	r6,sp,120
  80fa68:	08147940 	call	814794 <__sprint_r>
  80fa6c:	103cca1e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80fa70:	d8c02017 	ldw	r3,128(sp)
  80fa74:	da000404 	addi	r8,sp,16
  80fa78:	003db906 	br	80f160 <__alt_data_end+0xff80f160>
  80fa7c:	b009883a 	mov	r4,r22
  80fa80:	b80b883a 	mov	r5,r23
  80fa84:	d9801e04 	addi	r6,sp,120
  80fa88:	08147940 	call	814794 <__sprint_r>
  80fa8c:	103def26 	beq	r2,zero,80f24c <__alt_data_end+0xff80f24c>
  80fa90:	003cc106 	br	80ed98 <__alt_data_end+0xff80ed98>
  80fa94:	10803fcc 	andi	r2,r2,255
  80fa98:	1000651e 	bne	r2,zero,80fc30 <___vfprintf_internal_r+0x1268>
  80fa9c:	8880004c 	andi	r2,r17,1
  80faa0:	10013226 	beq	r2,zero,80ff6c <___vfprintf_internal_r+0x15a4>
  80faa4:	00800c04 	movi	r2,48
  80faa8:	d8c01dc4 	addi	r3,sp,119
  80faac:	d8801dc5 	stb	r2,119(sp)
  80fab0:	dc803c17 	ldw	r18,240(sp)
  80fab4:	d8c03115 	stw	r3,196(sp)
  80fab8:	003d1106 	br	80ef00 <__alt_data_end+0xff80ef00>
  80fabc:	b009883a 	mov	r4,r22
  80fac0:	b80b883a 	mov	r5,r23
  80fac4:	d9801e04 	addi	r6,sp,120
  80fac8:	08147940 	call	814794 <__sprint_r>
  80facc:	103cb21e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80fad0:	d8c02017 	ldw	r3,128(sp)
  80fad4:	da000404 	addi	r8,sp,16
  80fad8:	003d9406 	br	80f12c <__alt_data_end+0xff80f12c>
  80fadc:	b009883a 	mov	r4,r22
  80fae0:	b80b883a 	mov	r5,r23
  80fae4:	d9801e04 	addi	r6,sp,120
  80fae8:	08147940 	call	814794 <__sprint_r>
  80faec:	103caa1e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80faf0:	d8c02017 	ldw	r3,128(sp)
  80faf4:	da000404 	addi	r8,sp,16
  80faf8:	003d5206 	br	80f044 <__alt_data_end+0xff80f044>
  80fafc:	b009883a 	mov	r4,r22
  80fb00:	b80b883a 	mov	r5,r23
  80fb04:	d9801e04 	addi	r6,sp,120
  80fb08:	08147940 	call	814794 <__sprint_r>
  80fb0c:	103ca21e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80fb10:	d8c02017 	ldw	r3,128(sp)
  80fb14:	da000404 	addi	r8,sp,16
  80fb18:	003d5806 	br	80f07c <__alt_data_end+0xff80f07c>
  80fb1c:	d9403b17 	ldw	r5,236(sp)
  80fb20:	d8c01e04 	addi	r3,sp,120
  80fb24:	988003cc 	andi	r2,r19,15
  80fb28:	e008973a 	slli	r4,fp,28
  80fb2c:	2885883a 	add	r2,r5,r2
  80fb30:	9826d13a 	srli	r19,r19,4
  80fb34:	10800003 	ldbu	r2,0(r2)
  80fb38:	e038d13a 	srli	fp,fp,4
  80fb3c:	18ffffc4 	addi	r3,r3,-1
  80fb40:	24e6b03a 	or	r19,r4,r19
  80fb44:	18800005 	stb	r2,0(r3)
  80fb48:	9f04b03a 	or	r2,r19,fp
  80fb4c:	103ff51e 	bne	r2,zero,80fb24 <__alt_data_end+0xff80fb24>
  80fb50:	db002817 	ldw	r12,160(sp)
  80fb54:	d8c03115 	stw	r3,196(sp)
  80fb58:	60e5c83a 	sub	r18,r12,r3
  80fb5c:	003ce806 	br	80ef00 <__alt_data_end+0xff80ef00>
  80fb60:	dc002617 	ldw	r16,152(sp)
  80fb64:	0401b10e 	bge	zero,r16,81022c <___vfprintf_internal_r+0x1864>
  80fb68:	db003117 	ldw	r12,196(sp)
  80fb6c:	dac03317 	ldw	r11,204(sp)
  80fb70:	62e1883a 	add	r16,r12,r11
  80fb74:	db003417 	ldw	r12,208(sp)
  80fb78:	5825883a 	mov	r18,r11
  80fb7c:	62c0010e 	bge	r12,r11,80fb84 <___vfprintf_internal_r+0x11bc>
  80fb80:	6025883a 	mov	r18,r12
  80fb84:	04800b0e 	bge	zero,r18,80fbb4 <___vfprintf_internal_r+0x11ec>
  80fb88:	d8801f17 	ldw	r2,124(sp)
  80fb8c:	dac03117 	ldw	r11,196(sp)
  80fb90:	1c87883a 	add	r3,r3,r18
  80fb94:	10800044 	addi	r2,r2,1
  80fb98:	42c00015 	stw	r11,0(r8)
  80fb9c:	44800115 	stw	r18,4(r8)
  80fba0:	d8c02015 	stw	r3,128(sp)
  80fba4:	d8801f15 	stw	r2,124(sp)
  80fba8:	010001c4 	movi	r4,7
  80fbac:	20824f16 	blt	r4,r2,8104ec <___vfprintf_internal_r+0x1b24>
  80fbb0:	42000204 	addi	r8,r8,8
  80fbb4:	90024b16 	blt	r18,zero,8104e4 <___vfprintf_internal_r+0x1b1c>
  80fbb8:	db003417 	ldw	r12,208(sp)
  80fbbc:	64a5c83a 	sub	r18,r12,r18
  80fbc0:	0480730e 	bge	zero,r18,80fd90 <___vfprintf_internal_r+0x13c8>
  80fbc4:	05400404 	movi	r21,16
  80fbc8:	d8801f17 	ldw	r2,124(sp)
  80fbcc:	ac817d0e 	bge	r21,r18,8101c4 <___vfprintf_internal_r+0x17fc>
  80fbd0:	014020b4 	movhi	r5,130
  80fbd4:	29703e84 	addi	r5,r5,-16134
  80fbd8:	d9402c15 	stw	r5,176(sp)
  80fbdc:	070001c4 	movi	fp,7
  80fbe0:	00000306 	br	80fbf0 <___vfprintf_internal_r+0x1228>
  80fbe4:	42000204 	addi	r8,r8,8
  80fbe8:	94bffc04 	addi	r18,r18,-16
  80fbec:	ac81780e 	bge	r21,r18,8101d0 <___vfprintf_internal_r+0x1808>
  80fbf0:	18c00404 	addi	r3,r3,16
  80fbf4:	10800044 	addi	r2,r2,1
  80fbf8:	45000015 	stw	r20,0(r8)
  80fbfc:	45400115 	stw	r21,4(r8)
  80fc00:	d8c02015 	stw	r3,128(sp)
  80fc04:	d8801f15 	stw	r2,124(sp)
  80fc08:	e0bff60e 	bge	fp,r2,80fbe4 <__alt_data_end+0xff80fbe4>
  80fc0c:	b009883a 	mov	r4,r22
  80fc10:	b80b883a 	mov	r5,r23
  80fc14:	d9801e04 	addi	r6,sp,120
  80fc18:	08147940 	call	814794 <__sprint_r>
  80fc1c:	103c5e1e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80fc20:	d8c02017 	ldw	r3,128(sp)
  80fc24:	d8801f17 	ldw	r2,124(sp)
  80fc28:	da000404 	addi	r8,sp,16
  80fc2c:	003fee06 	br	80fbe8 <__alt_data_end+0xff80fbe8>
  80fc30:	dac01e04 	addi	r11,sp,120
  80fc34:	0025883a 	mov	r18,zero
  80fc38:	dac03115 	stw	r11,196(sp)
  80fc3c:	003cb006 	br	80ef00 <__alt_data_end+0xff80ef00>
  80fc40:	b009883a 	mov	r4,r22
  80fc44:	b80b883a 	mov	r5,r23
  80fc48:	d9801e04 	addi	r6,sp,120
  80fc4c:	08147940 	call	814794 <__sprint_r>
  80fc50:	103c511e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80fc54:	d8c02017 	ldw	r3,128(sp)
  80fc58:	d8802787 	ldb	r2,158(sp)
  80fc5c:	da000404 	addi	r8,sp,16
  80fc60:	003ceb06 	br	80f010 <__alt_data_end+0xff80f010>
  80fc64:	1cc00017 	ldw	r19,0(r3)
  80fc68:	dac02d17 	ldw	r11,180(sp)
  80fc6c:	9839d7fa 	srai	fp,r19,31
  80fc70:	5ac00104 	addi	r11,r11,4
  80fc74:	dac02d15 	stw	r11,180(sp)
  80fc78:	e005883a 	mov	r2,fp
  80fc7c:	003c8106 	br	80ee84 <__alt_data_end+0xff80ee84>
  80fc80:	657fffc4 	addi	r21,r12,-1
  80fc84:	057f5d0e 	bge	zero,r21,80f9fc <__alt_data_end+0xff80f9fc>
  80fc88:	07000404 	movi	fp,16
  80fc8c:	e540900e 	bge	fp,r21,80fed0 <___vfprintf_internal_r+0x1508>
  80fc90:	010020b4 	movhi	r4,130
  80fc94:	21303e84 	addi	r4,r4,-16134
  80fc98:	d9002c15 	stw	r4,176(sp)
  80fc9c:	01c001c4 	movi	r7,7
  80fca0:	00000306 	br	80fcb0 <___vfprintf_internal_r+0x12e8>
  80fca4:	94800204 	addi	r18,r18,8
  80fca8:	ad7ffc04 	addi	r21,r21,-16
  80fcac:	e5408b0e 	bge	fp,r21,80fedc <___vfprintf_internal_r+0x1514>
  80fcb0:	18c00404 	addi	r3,r3,16
  80fcb4:	84000044 	addi	r16,r16,1
  80fcb8:	95000015 	stw	r20,0(r18)
  80fcbc:	97000115 	stw	fp,4(r18)
  80fcc0:	d8c02015 	stw	r3,128(sp)
  80fcc4:	dc001f15 	stw	r16,124(sp)
  80fcc8:	3c3ff60e 	bge	r7,r16,80fca4 <__alt_data_end+0xff80fca4>
  80fccc:	b009883a 	mov	r4,r22
  80fcd0:	b80b883a 	mov	r5,r23
  80fcd4:	d9801e04 	addi	r6,sp,120
  80fcd8:	d9c03d15 	stw	r7,244(sp)
  80fcdc:	08147940 	call	814794 <__sprint_r>
  80fce0:	d9c03d17 	ldw	r7,244(sp)
  80fce4:	103c2c1e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80fce8:	d8c02017 	ldw	r3,128(sp)
  80fcec:	dc001f17 	ldw	r16,124(sp)
  80fcf0:	dc800404 	addi	r18,sp,16
  80fcf4:	003fec06 	br	80fca8 <__alt_data_end+0xff80fca8>
  80fcf8:	dac02d17 	ldw	r11,180(sp)
  80fcfc:	0039883a 	mov	fp,zero
  80fd00:	0005883a 	mov	r2,zero
  80fd04:	5cc00017 	ldw	r19,0(r11)
  80fd08:	5ac00104 	addi	r11,r11,4
  80fd0c:	dac02d15 	stw	r11,180(sp)
  80fd10:	9807883a 	mov	r3,r19
  80fd14:	003d5b06 	br	80f284 <__alt_data_end+0xff80f284>
  80fd18:	db002d17 	ldw	r12,180(sp)
  80fd1c:	0039883a 	mov	fp,zero
  80fd20:	00800044 	movi	r2,1
  80fd24:	64c00017 	ldw	r19,0(r12)
  80fd28:	63000104 	addi	r12,r12,4
  80fd2c:	db002d15 	stw	r12,180(sp)
  80fd30:	9807883a 	mov	r3,r19
  80fd34:	003d5306 	br	80f284 <__alt_data_end+0xff80f284>
  80fd38:	00800084 	movi	r2,2
  80fd3c:	9f06b03a 	or	r3,r19,fp
  80fd40:	003d5006 	br	80f284 <__alt_data_end+0xff80f284>
  80fd44:	10803fcc 	andi	r2,r2,255
  80fd48:	1080201c 	xori	r2,r2,128
  80fd4c:	10bfe004 	addi	r2,r2,-128
  80fd50:	01000c04 	movi	r4,48
  80fd54:	1101a526 	beq	r2,r4,8103ec <___vfprintf_internal_r+0x1a24>
  80fd58:	dac03117 	ldw	r11,196(sp)
  80fd5c:	db002817 	ldw	r12,160(sp)
  80fd60:	193fffc5 	stb	r4,-1(r3)
  80fd64:	5affffc4 	addi	r11,r11,-1
  80fd68:	dac03115 	stw	r11,196(sp)
  80fd6c:	62e5c83a 	sub	r18,r12,r11
  80fd70:	003c6306 	br	80ef00 <__alt_data_end+0xff80ef00>
  80fd74:	b009883a 	mov	r4,r22
  80fd78:	b80b883a 	mov	r5,r23
  80fd7c:	d9801e04 	addi	r6,sp,120
  80fd80:	08147940 	call	814794 <__sprint_r>
  80fd84:	103c041e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80fd88:	d8c02017 	ldw	r3,128(sp)
  80fd8c:	da000404 	addi	r8,sp,16
  80fd90:	db003117 	ldw	r12,196(sp)
  80fd94:	dac03417 	ldw	r11,208(sp)
  80fd98:	d8802617 	ldw	r2,152(sp)
  80fd9c:	62e5883a 	add	r18,r12,r11
  80fda0:	db003317 	ldw	r12,204(sp)
  80fda4:	13000216 	blt	r2,r12,80fdb0 <___vfprintf_internal_r+0x13e8>
  80fda8:	8900004c 	andi	r4,r17,1
  80fdac:	20000c26 	beq	r4,zero,80fde0 <___vfprintf_internal_r+0x1418>
  80fdb0:	dac03817 	ldw	r11,224(sp)
  80fdb4:	d9001f17 	ldw	r4,124(sp)
  80fdb8:	db003517 	ldw	r12,212(sp)
  80fdbc:	1ac7883a 	add	r3,r3,r11
  80fdc0:	21000044 	addi	r4,r4,1
  80fdc4:	43000015 	stw	r12,0(r8)
  80fdc8:	42c00115 	stw	r11,4(r8)
  80fdcc:	d8c02015 	stw	r3,128(sp)
  80fdd0:	d9001f15 	stw	r4,124(sp)
  80fdd4:	014001c4 	movi	r5,7
  80fdd8:	2901cc16 	blt	r5,r4,81050c <___vfprintf_internal_r+0x1b44>
  80fddc:	42000204 	addi	r8,r8,8
  80fde0:	dac03317 	ldw	r11,204(sp)
  80fde4:	8489c83a 	sub	r4,r16,r18
  80fde8:	5885c83a 	sub	r2,r11,r2
  80fdec:	1021883a 	mov	r16,r2
  80fdf0:	2080010e 	bge	r4,r2,80fdf8 <___vfprintf_internal_r+0x1430>
  80fdf4:	2021883a 	mov	r16,r4
  80fdf8:	04000a0e 	bge	zero,r16,80fe24 <___vfprintf_internal_r+0x145c>
  80fdfc:	d9001f17 	ldw	r4,124(sp)
  80fe00:	1c07883a 	add	r3,r3,r16
  80fe04:	44800015 	stw	r18,0(r8)
  80fe08:	21000044 	addi	r4,r4,1
  80fe0c:	44000115 	stw	r16,4(r8)
  80fe10:	d8c02015 	stw	r3,128(sp)
  80fe14:	d9001f15 	stw	r4,124(sp)
  80fe18:	014001c4 	movi	r5,7
  80fe1c:	2901e316 	blt	r5,r4,8105ac <___vfprintf_internal_r+0x1be4>
  80fe20:	42000204 	addi	r8,r8,8
  80fe24:	8001df16 	blt	r16,zero,8105a4 <___vfprintf_internal_r+0x1bdc>
  80fe28:	1421c83a 	sub	r16,r2,r16
  80fe2c:	043ccc0e 	bge	zero,r16,80f160 <__alt_data_end+0xff80f160>
  80fe30:	04800404 	movi	r18,16
  80fe34:	d8801f17 	ldw	r2,124(sp)
  80fe38:	943efc0e 	bge	r18,r16,80fa2c <__alt_data_end+0xff80fa2c>
  80fe3c:	014020b4 	movhi	r5,130
  80fe40:	29703e84 	addi	r5,r5,-16134
  80fe44:	d9402c15 	stw	r5,176(sp)
  80fe48:	054001c4 	movi	r21,7
  80fe4c:	00000306 	br	80fe5c <___vfprintf_internal_r+0x1494>
  80fe50:	42000204 	addi	r8,r8,8
  80fe54:	843ffc04 	addi	r16,r16,-16
  80fe58:	943ef70e 	bge	r18,r16,80fa38 <__alt_data_end+0xff80fa38>
  80fe5c:	18c00404 	addi	r3,r3,16
  80fe60:	10800044 	addi	r2,r2,1
  80fe64:	45000015 	stw	r20,0(r8)
  80fe68:	44800115 	stw	r18,4(r8)
  80fe6c:	d8c02015 	stw	r3,128(sp)
  80fe70:	d8801f15 	stw	r2,124(sp)
  80fe74:	a8bff60e 	bge	r21,r2,80fe50 <__alt_data_end+0xff80fe50>
  80fe78:	b009883a 	mov	r4,r22
  80fe7c:	b80b883a 	mov	r5,r23
  80fe80:	d9801e04 	addi	r6,sp,120
  80fe84:	08147940 	call	814794 <__sprint_r>
  80fe88:	103bc31e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80fe8c:	d8c02017 	ldw	r3,128(sp)
  80fe90:	d8801f17 	ldw	r2,124(sp)
  80fe94:	da000404 	addi	r8,sp,16
  80fe98:	003fee06 	br	80fe54 <__alt_data_end+0xff80fe54>
  80fe9c:	8888703a 	and	r4,r17,r2
  80fea0:	203eab1e 	bne	r4,zero,80f950 <__alt_data_end+0xff80f950>
  80fea4:	dc001f17 	ldw	r16,124(sp)
  80fea8:	db003117 	ldw	r12,196(sp)
  80feac:	40800115 	stw	r2,4(r8)
  80feb0:	84000044 	addi	r16,r16,1
  80feb4:	43000015 	stw	r12,0(r8)
  80feb8:	d8c02015 	stw	r3,128(sp)
  80febc:	dc001f15 	stw	r16,124(sp)
  80fec0:	008001c4 	movi	r2,7
  80fec4:	14000e16 	blt	r2,r16,80ff00 <___vfprintf_internal_r+0x1538>
  80fec8:	44800204 	addi	r18,r8,8
  80fecc:	003ecb06 	br	80f9fc <__alt_data_end+0xff80f9fc>
  80fed0:	008020b4 	movhi	r2,130
  80fed4:	10b03e84 	addi	r2,r2,-16134
  80fed8:	d8802c15 	stw	r2,176(sp)
  80fedc:	dac02c17 	ldw	r11,176(sp)
  80fee0:	1d47883a 	add	r3,r3,r21
  80fee4:	84000044 	addi	r16,r16,1
  80fee8:	92c00015 	stw	r11,0(r18)
  80feec:	95400115 	stw	r21,4(r18)
  80fef0:	d8c02015 	stw	r3,128(sp)
  80fef4:	dc001f15 	stw	r16,124(sp)
  80fef8:	008001c4 	movi	r2,7
  80fefc:	143ebe0e 	bge	r2,r16,80f9f8 <__alt_data_end+0xff80f9f8>
  80ff00:	b009883a 	mov	r4,r22
  80ff04:	b80b883a 	mov	r5,r23
  80ff08:	d9801e04 	addi	r6,sp,120
  80ff0c:	08147940 	call	814794 <__sprint_r>
  80ff10:	103ba11e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80ff14:	d8c02017 	ldw	r3,128(sp)
  80ff18:	dc001f17 	ldw	r16,124(sp)
  80ff1c:	dc800404 	addi	r18,sp,16
  80ff20:	003eb606 	br	80f9fc <__alt_data_end+0xff80f9fc>
  80ff24:	b009883a 	mov	r4,r22
  80ff28:	b80b883a 	mov	r5,r23
  80ff2c:	d9801e04 	addi	r6,sp,120
  80ff30:	08147940 	call	814794 <__sprint_r>
  80ff34:	103b981e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80ff38:	d8c02017 	ldw	r3,128(sp)
  80ff3c:	dc001f17 	ldw	r16,124(sp)
  80ff40:	da000404 	addi	r8,sp,16
  80ff44:	003e8d06 	br	80f97c <__alt_data_end+0xff80f97c>
  80ff48:	b009883a 	mov	r4,r22
  80ff4c:	b80b883a 	mov	r5,r23
  80ff50:	d9801e04 	addi	r6,sp,120
  80ff54:	08147940 	call	814794 <__sprint_r>
  80ff58:	103b8f1e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80ff5c:	d8c02017 	ldw	r3,128(sp)
  80ff60:	dc001f17 	ldw	r16,124(sp)
  80ff64:	dc800404 	addi	r18,sp,16
  80ff68:	003e8f06 	br	80f9a8 <__alt_data_end+0xff80f9a8>
  80ff6c:	db001e04 	addi	r12,sp,120
  80ff70:	0025883a 	mov	r18,zero
  80ff74:	db003115 	stw	r12,196(sp)
  80ff78:	003be106 	br	80ef00 <__alt_data_end+0xff80ef00>
  80ff7c:	b009883a 	mov	r4,r22
  80ff80:	b80b883a 	mov	r5,r23
  80ff84:	d9801e04 	addi	r6,sp,120
  80ff88:	08147940 	call	814794 <__sprint_r>
  80ff8c:	103b821e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  80ff90:	d8c02017 	ldw	r3,128(sp)
  80ff94:	da000404 	addi	r8,sp,16
  80ff98:	003c3b06 	br	80f088 <__alt_data_end+0xff80f088>
  80ff9c:	04e7c83a 	sub	r19,zero,r19
  80ffa0:	9804c03a 	cmpne	r2,r19,zero
  80ffa4:	0739c83a 	sub	fp,zero,fp
  80ffa8:	e0b9c83a 	sub	fp,fp,r2
  80ffac:	05400b44 	movi	r21,45
  80ffb0:	dd402785 	stb	r21,158(sp)
  80ffb4:	da403215 	stw	r9,200(sp)
  80ffb8:	00800044 	movi	r2,1
  80ffbc:	9f06b03a 	or	r3,r19,fp
  80ffc0:	003bb506 	br	80ee98 <__alt_data_end+0xff80ee98>
  80ffc4:	da003f15 	stw	r8,252(sp)
  80ffc8:	da403e15 	stw	r9,248(sp)
  80ffcc:	08145800 	call	814580 <__fpclassifyd>
  80ffd0:	da003f17 	ldw	r8,252(sp)
  80ffd4:	da403e17 	ldw	r9,248(sp)
  80ffd8:	1000ce26 	beq	r2,zero,810314 <___vfprintf_internal_r+0x194c>
  80ffdc:	057ff7c4 	movi	r21,-33
  80ffe0:	00bfffc4 	movi	r2,-1
  80ffe4:	856a703a 	and	r21,r16,r21
  80ffe8:	4881e826 	beq	r9,r2,81078c <___vfprintf_internal_r+0x1dc4>
  80ffec:	008011c4 	movi	r2,71
  80fff0:	a881e326 	beq	r21,r2,810780 <___vfprintf_internal_r+0x1db8>
  80fff4:	db003917 	ldw	r12,228(sp)
  80fff8:	8ac04014 	ori	r11,r17,256
  80fffc:	dac02d15 	stw	r11,180(sp)
  810000:	6001ed16 	blt	r12,zero,8107b8 <___vfprintf_internal_r+0x1df0>
  810004:	dc803917 	ldw	r18,228(sp)
  810008:	d8002b05 	stb	zero,172(sp)
  81000c:	00801984 	movi	r2,102
  810010:	80811826 	beq	r16,r2,810474 <___vfprintf_internal_r+0x1aac>
  810014:	00801184 	movi	r2,70
  810018:	80811626 	beq	r16,r2,810474 <___vfprintf_internal_r+0x1aac>
  81001c:	00801144 	movi	r2,69
  810020:	a881e926 	beq	r21,r2,8107c8 <___vfprintf_internal_r+0x1e00>
  810024:	4839883a 	mov	fp,r9
  810028:	d8802604 	addi	r2,sp,152
  81002c:	d8800115 	stw	r2,4(sp)
  810030:	d9403717 	ldw	r5,220(sp)
  810034:	d8802504 	addi	r2,sp,148
  810038:	d8800215 	stw	r2,8(sp)
  81003c:	d8802104 	addi	r2,sp,132
  810040:	df000015 	stw	fp,0(sp)
  810044:	d8800315 	stw	r2,12(sp)
  810048:	b009883a 	mov	r4,r22
  81004c:	900d883a 	mov	r6,r18
  810050:	01c00084 	movi	r7,2
  810054:	da003f15 	stw	r8,252(sp)
  810058:	da403e15 	stw	r9,248(sp)
  81005c:	0810dfc0 	call	810dfc <_dtoa_r>
  810060:	d8803115 	stw	r2,196(sp)
  810064:	008019c4 	movi	r2,103
  810068:	da003f17 	ldw	r8,252(sp)
  81006c:	da403e17 	ldw	r9,248(sp)
  810070:	80800226 	beq	r16,r2,81007c <___vfprintf_internal_r+0x16b4>
  810074:	008011c4 	movi	r2,71
  810078:	8081101e 	bne	r16,r2,8104bc <___vfprintf_internal_r+0x1af4>
  81007c:	8880004c 	andi	r2,r17,1
  810080:	1001dd26 	beq	r2,zero,8107f8 <___vfprintf_internal_r+0x1e30>
  810084:	db003117 	ldw	r12,196(sp)
  810088:	6715883a 	add	r10,r12,fp
  81008c:	d9003717 	ldw	r4,220(sp)
  810090:	900b883a 	mov	r5,r18
  810094:	000d883a 	mov	r6,zero
  810098:	000f883a 	mov	r7,zero
  81009c:	da003f15 	stw	r8,252(sp)
  8100a0:	da403e15 	stw	r9,248(sp)
  8100a4:	da803d15 	stw	r10,244(sp)
  8100a8:	0818a7c0 	call	818a7c <__eqdf2>
  8100ac:	da003f17 	ldw	r8,252(sp)
  8100b0:	da403e17 	ldw	r9,248(sp)
  8100b4:	da803d17 	ldw	r10,244(sp)
  8100b8:	10016526 	beq	r2,zero,810650 <___vfprintf_internal_r+0x1c88>
  8100bc:	d8802117 	ldw	r2,132(sp)
  8100c0:	1280062e 	bgeu	r2,r10,8100dc <___vfprintf_internal_r+0x1714>
  8100c4:	01000c04 	movi	r4,48
  8100c8:	10c00044 	addi	r3,r2,1
  8100cc:	d8c02115 	stw	r3,132(sp)
  8100d0:	11000005 	stb	r4,0(r2)
  8100d4:	d8802117 	ldw	r2,132(sp)
  8100d8:	12bffb36 	bltu	r2,r10,8100c8 <__alt_data_end+0xff8100c8>
  8100dc:	db003117 	ldw	r12,196(sp)
  8100e0:	1305c83a 	sub	r2,r2,r12
  8100e4:	d8803315 	stw	r2,204(sp)
  8100e8:	008011c4 	movi	r2,71
  8100ec:	a8814d26 	beq	r21,r2,810624 <___vfprintf_internal_r+0x1c5c>
  8100f0:	00801944 	movi	r2,101
  8100f4:	1402060e 	bge	r2,r16,810910 <___vfprintf_internal_r+0x1f48>
  8100f8:	00801984 	movi	r2,102
  8100fc:	8081b426 	beq	r16,r2,8107d0 <___vfprintf_internal_r+0x1e08>
  810100:	db002617 	ldw	r12,152(sp)
  810104:	db003415 	stw	r12,208(sp)
  810108:	db003417 	ldw	r12,208(sp)
  81010c:	dac03317 	ldw	r11,204(sp)
  810110:	62c1a016 	blt	r12,r11,810794 <___vfprintf_internal_r+0x1dcc>
  810114:	8c40004c 	andi	r17,r17,1
  810118:	8801bf1e 	bne	r17,zero,810818 <___vfprintf_internal_r+0x1e50>
  81011c:	6005883a 	mov	r2,r12
  810120:	6001b316 	blt	r12,zero,8107f0 <___vfprintf_internal_r+0x1e28>
  810124:	dc803417 	ldw	r18,208(sp)
  810128:	df002b07 	ldb	fp,172(sp)
  81012c:	e0012e1e 	bne	fp,zero,8105e8 <___vfprintf_internal_r+0x1c20>
  810130:	dc402d17 	ldw	r17,180(sp)
  810134:	dd402783 	ldbu	r21,158(sp)
  810138:	d8802b15 	stw	r2,172(sp)
  81013c:	dcc02d15 	stw	r19,180(sp)
  810140:	d8003215 	stw	zero,200(sp)
  810144:	003b7306 	br	80ef14 <__alt_data_end+0xff80ef14>
  810148:	00800084 	movi	r2,2
  81014c:	003c4d06 	br	80f284 <__alt_data_end+0xff80f284>
  810150:	8880040c 	andi	r2,r17,16
  810154:	1000091e 	bne	r2,zero,81017c <___vfprintf_internal_r+0x17b4>
  810158:	8c40100c 	andi	r17,r17,64
  81015c:	88000726 	beq	r17,zero,81017c <___vfprintf_internal_r+0x17b4>
  810160:	db002d17 	ldw	r12,180(sp)
  810164:	dac02f17 	ldw	r11,188(sp)
  810168:	60800017 	ldw	r2,0(r12)
  81016c:	63000104 	addi	r12,r12,4
  810170:	db002d15 	stw	r12,180(sp)
  810174:	12c0000d 	sth	r11,0(r2)
  810178:	003a4e06 	br	80eab4 <__alt_data_end+0xff80eab4>
  81017c:	db002d17 	ldw	r12,180(sp)
  810180:	dac02f17 	ldw	r11,188(sp)
  810184:	60800017 	ldw	r2,0(r12)
  810188:	63000104 	addi	r12,r12,4
  81018c:	db002d15 	stw	r12,180(sp)
  810190:	12c00015 	stw	r11,0(r2)
  810194:	003a4706 	br	80eab4 <__alt_data_end+0xff80eab4>
  810198:	1c000007 	ldb	r16,0(r3)
  81019c:	1805883a 	mov	r2,r3
  8101a0:	003a6e06 	br	80eb5c <__alt_data_end+0xff80eb5c>
  8101a4:	88c0100c 	andi	r3,r17,64
  8101a8:	18006b26 	beq	r3,zero,810358 <___vfprintf_internal_r+0x1990>
  8101ac:	dac02d17 	ldw	r11,180(sp)
  8101b0:	14c0000b 	ldhu	r19,0(r2)
  8101b4:	0039883a 	mov	fp,zero
  8101b8:	5ac00104 	addi	r11,r11,4
  8101bc:	dac02d15 	stw	r11,180(sp)
  8101c0:	003cb206 	br	80f48c <__alt_data_end+0xff80f48c>
  8101c4:	010020b4 	movhi	r4,130
  8101c8:	21303e84 	addi	r4,r4,-16134
  8101cc:	d9002c15 	stw	r4,176(sp)
  8101d0:	dac02c17 	ldw	r11,176(sp)
  8101d4:	1c87883a 	add	r3,r3,r18
  8101d8:	10800044 	addi	r2,r2,1
  8101dc:	42c00015 	stw	r11,0(r8)
  8101e0:	44800115 	stw	r18,4(r8)
  8101e4:	d8c02015 	stw	r3,128(sp)
  8101e8:	d8801f15 	stw	r2,124(sp)
  8101ec:	010001c4 	movi	r4,7
  8101f0:	20bee016 	blt	r4,r2,80fd74 <__alt_data_end+0xff80fd74>
  8101f4:	42000204 	addi	r8,r8,8
  8101f8:	003ee506 	br	80fd90 <__alt_data_end+0xff80fd90>
  8101fc:	010020b4 	movhi	r4,130
  810200:	21303e84 	addi	r4,r4,-16134
  810204:	d9002c15 	stw	r4,176(sp)
  810208:	003bbe06 	br	80f104 <__alt_data_end+0xff80f104>
  81020c:	b009883a 	mov	r4,r22
  810210:	b80b883a 	mov	r5,r23
  810214:	d9801e04 	addi	r6,sp,120
  810218:	08147940 	call	814794 <__sprint_r>
  81021c:	103ade1e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  810220:	d8c02017 	ldw	r3,128(sp)
  810224:	da000404 	addi	r8,sp,16
  810228:	003d6b06 	br	80f7d8 <__alt_data_end+0xff80f7d8>
  81022c:	d8801f17 	ldw	r2,124(sp)
  810230:	030020b4 	movhi	r12,130
  810234:	01000044 	movi	r4,1
  810238:	18c00044 	addi	r3,r3,1
  81023c:	10800044 	addi	r2,r2,1
  810240:	63303e04 	addi	r12,r12,-16136
  810244:	41000115 	stw	r4,4(r8)
  810248:	43000015 	stw	r12,0(r8)
  81024c:	d8c02015 	stw	r3,128(sp)
  810250:	d8801f15 	stw	r2,124(sp)
  810254:	010001c4 	movi	r4,7
  810258:	20804916 	blt	r4,r2,810380 <___vfprintf_internal_r+0x19b8>
  81025c:	42000204 	addi	r8,r8,8
  810260:	8000041e 	bne	r16,zero,810274 <___vfprintf_internal_r+0x18ac>
  810264:	dac03317 	ldw	r11,204(sp)
  810268:	5800021e 	bne	r11,zero,810274 <___vfprintf_internal_r+0x18ac>
  81026c:	8880004c 	andi	r2,r17,1
  810270:	103bbb26 	beq	r2,zero,80f160 <__alt_data_end+0xff80f160>
  810274:	db003817 	ldw	r12,224(sp)
  810278:	d8801f17 	ldw	r2,124(sp)
  81027c:	dac03517 	ldw	r11,212(sp)
  810280:	1b07883a 	add	r3,r3,r12
  810284:	10800044 	addi	r2,r2,1
  810288:	42c00015 	stw	r11,0(r8)
  81028c:	43000115 	stw	r12,4(r8)
  810290:	d8c02015 	stw	r3,128(sp)
  810294:	d8801f15 	stw	r2,124(sp)
  810298:	010001c4 	movi	r4,7
  81029c:	20812e16 	blt	r4,r2,810758 <___vfprintf_internal_r+0x1d90>
  8102a0:	42000204 	addi	r8,r8,8
  8102a4:	0421c83a 	sub	r16,zero,r16
  8102a8:	04005c0e 	bge	zero,r16,81041c <___vfprintf_internal_r+0x1a54>
  8102ac:	04800404 	movi	r18,16
  8102b0:	94009f0e 	bge	r18,r16,810530 <___vfprintf_internal_r+0x1b68>
  8102b4:	010020b4 	movhi	r4,130
  8102b8:	21303e84 	addi	r4,r4,-16134
  8102bc:	d9002c15 	stw	r4,176(sp)
  8102c0:	054001c4 	movi	r21,7
  8102c4:	00000306 	br	8102d4 <___vfprintf_internal_r+0x190c>
  8102c8:	42000204 	addi	r8,r8,8
  8102cc:	843ffc04 	addi	r16,r16,-16
  8102d0:	94009a0e 	bge	r18,r16,81053c <___vfprintf_internal_r+0x1b74>
  8102d4:	18c00404 	addi	r3,r3,16
  8102d8:	10800044 	addi	r2,r2,1
  8102dc:	45000015 	stw	r20,0(r8)
  8102e0:	44800115 	stw	r18,4(r8)
  8102e4:	d8c02015 	stw	r3,128(sp)
  8102e8:	d8801f15 	stw	r2,124(sp)
  8102ec:	a8bff60e 	bge	r21,r2,8102c8 <__alt_data_end+0xff8102c8>
  8102f0:	b009883a 	mov	r4,r22
  8102f4:	b80b883a 	mov	r5,r23
  8102f8:	d9801e04 	addi	r6,sp,120
  8102fc:	08147940 	call	814794 <__sprint_r>
  810300:	103aa51e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  810304:	d8c02017 	ldw	r3,128(sp)
  810308:	d8801f17 	ldw	r2,124(sp)
  81030c:	da000404 	addi	r8,sp,16
  810310:	003fee06 	br	8102cc <__alt_data_end+0xff8102cc>
  810314:	008011c4 	movi	r2,71
  810318:	1400be16 	blt	r2,r16,810614 <___vfprintf_internal_r+0x1c4c>
  81031c:	030020b4 	movhi	r12,130
  810320:	63303004 	addi	r12,r12,-16192
  810324:	db003115 	stw	r12,196(sp)
  810328:	00c000c4 	movi	r3,3
  81032c:	00bfdfc4 	movi	r2,-129
  810330:	d8c02b15 	stw	r3,172(sp)
  810334:	88a2703a 	and	r17,r17,r2
  810338:	dd402783 	ldbu	r21,158(sp)
  81033c:	dcc02d15 	stw	r19,180(sp)
  810340:	1825883a 	mov	r18,r3
  810344:	d8003215 	stw	zero,200(sp)
  810348:	d8003415 	stw	zero,208(sp)
  81034c:	003af106 	br	80ef14 <__alt_data_end+0xff80ef14>
  810350:	4825883a 	mov	r18,r9
  810354:	003c9306 	br	80f5a4 <__alt_data_end+0xff80f5a4>
  810358:	db002d17 	ldw	r12,180(sp)
  81035c:	14c00017 	ldw	r19,0(r2)
  810360:	0039883a 	mov	fp,zero
  810364:	63000104 	addi	r12,r12,4
  810368:	db002d15 	stw	r12,180(sp)
  81036c:	003c4706 	br	80f48c <__alt_data_end+0xff80f48c>
  810370:	008020b4 	movhi	r2,130
  810374:	10b02e04 	addi	r2,r2,-16200
  810378:	d8803115 	stw	r2,196(sp)
  81037c:	003bf106 	br	80f344 <__alt_data_end+0xff80f344>
  810380:	b009883a 	mov	r4,r22
  810384:	b80b883a 	mov	r5,r23
  810388:	d9801e04 	addi	r6,sp,120
  81038c:	08147940 	call	814794 <__sprint_r>
  810390:	103a811e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  810394:	dc002617 	ldw	r16,152(sp)
  810398:	d8c02017 	ldw	r3,128(sp)
  81039c:	da000404 	addi	r8,sp,16
  8103a0:	003faf06 	br	810260 <__alt_data_end+0xff810260>
  8103a4:	db002e17 	ldw	r12,184(sp)
  8103a8:	1805883a 	mov	r2,r3
  8103ac:	dac02d15 	stw	r11,180(sp)
  8103b0:	0319c83a 	sub	r12,zero,r12
  8103b4:	db002e15 	stw	r12,184(sp)
  8103b8:	003a8206 	br	80edc4 <__alt_data_end+0xff80edc4>
  8103bc:	18800044 	addi	r2,r3,1
  8103c0:	8c400814 	ori	r17,r17,32
  8103c4:	1c000047 	ldb	r16,1(r3)
  8103c8:	0039e406 	br	80eb5c <__alt_data_end+0xff80eb5c>
  8103cc:	b009883a 	mov	r4,r22
  8103d0:	b80b883a 	mov	r5,r23
  8103d4:	d9801e04 	addi	r6,sp,120
  8103d8:	08147940 	call	814794 <__sprint_r>
  8103dc:	103a6e1e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  8103e0:	d8c02017 	ldw	r3,128(sp)
  8103e4:	da000404 	addi	r8,sp,16
  8103e8:	003d0c06 	br	80f81c <__alt_data_end+0xff80f81c>
  8103ec:	db002817 	ldw	r12,160(sp)
  8103f0:	d8c03117 	ldw	r3,196(sp)
  8103f4:	60e5c83a 	sub	r18,r12,r3
  8103f8:	003ac106 	br	80ef00 <__alt_data_end+0xff80ef00>
  8103fc:	b009883a 	mov	r4,r22
  810400:	b80b883a 	mov	r5,r23
  810404:	d9801e04 	addi	r6,sp,120
  810408:	08147940 	call	814794 <__sprint_r>
  81040c:	103a621e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  810410:	d8c02017 	ldw	r3,128(sp)
  810414:	d8801f17 	ldw	r2,124(sp)
  810418:	da000404 	addi	r8,sp,16
  81041c:	db003317 	ldw	r12,204(sp)
  810420:	dac03117 	ldw	r11,196(sp)
  810424:	10800044 	addi	r2,r2,1
  810428:	1b07883a 	add	r3,r3,r12
  81042c:	42c00015 	stw	r11,0(r8)
  810430:	43000115 	stw	r12,4(r8)
  810434:	d8c02015 	stw	r3,128(sp)
  810438:	d8801f15 	stw	r2,124(sp)
  81043c:	010001c4 	movi	r4,7
  810440:	20bb460e 	bge	r4,r2,80f15c <__alt_data_end+0xff80f15c>
  810444:	003d8506 	br	80fa5c <__alt_data_end+0xff80fa5c>
  810448:	da003f15 	stw	r8,252(sp)
  81044c:	080e8b40 	call	80e8b4 <strlen>
  810450:	1025883a 	mov	r18,r2
  810454:	da003f17 	ldw	r8,252(sp)
  810458:	903c540e 	bge	r18,zero,80f5ac <__alt_data_end+0xff80f5ac>
  81045c:	0005883a 	mov	r2,zero
  810460:	003c5206 	br	80f5ac <__alt_data_end+0xff80f5ac>
  810464:	010020b4 	movhi	r4,130
  810468:	21304284 	addi	r4,r4,-16118
  81046c:	d9003615 	stw	r4,216(sp)
  810470:	003adc06 	br	80efe4 <__alt_data_end+0xff80efe4>
  810474:	d8802604 	addi	r2,sp,152
  810478:	d8800115 	stw	r2,4(sp)
  81047c:	d9403717 	ldw	r5,220(sp)
  810480:	d8802504 	addi	r2,sp,148
  810484:	d8800215 	stw	r2,8(sp)
  810488:	d8802104 	addi	r2,sp,132
  81048c:	da400015 	stw	r9,0(sp)
  810490:	d8800315 	stw	r2,12(sp)
  810494:	b009883a 	mov	r4,r22
  810498:	900d883a 	mov	r6,r18
  81049c:	01c000c4 	movi	r7,3
  8104a0:	da003f15 	stw	r8,252(sp)
  8104a4:	da403e15 	stw	r9,248(sp)
  8104a8:	0810dfc0 	call	810dfc <_dtoa_r>
  8104ac:	da403e17 	ldw	r9,248(sp)
  8104b0:	da003f17 	ldw	r8,252(sp)
  8104b4:	d8803115 	stw	r2,196(sp)
  8104b8:	4839883a 	mov	fp,r9
  8104bc:	dac03117 	ldw	r11,196(sp)
  8104c0:	00801184 	movi	r2,70
  8104c4:	5f15883a 	add	r10,r11,fp
  8104c8:	a8bef01e 	bne	r21,r2,81008c <__alt_data_end+0xff81008c>
  8104cc:	59000007 	ldb	r4,0(r11)
  8104d0:	00800c04 	movi	r2,48
  8104d4:	2080d526 	beq	r4,r2,81082c <___vfprintf_internal_r+0x1e64>
  8104d8:	d8c02617 	ldw	r3,152(sp)
  8104dc:	50d5883a 	add	r10,r10,r3
  8104e0:	003eea06 	br	81008c <__alt_data_end+0xff81008c>
  8104e4:	0025883a 	mov	r18,zero
  8104e8:	003db306 	br	80fbb8 <__alt_data_end+0xff80fbb8>
  8104ec:	b009883a 	mov	r4,r22
  8104f0:	b80b883a 	mov	r5,r23
  8104f4:	d9801e04 	addi	r6,sp,120
  8104f8:	08147940 	call	814794 <__sprint_r>
  8104fc:	103a261e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  810500:	d8c02017 	ldw	r3,128(sp)
  810504:	da000404 	addi	r8,sp,16
  810508:	003daa06 	br	80fbb4 <__alt_data_end+0xff80fbb4>
  81050c:	b009883a 	mov	r4,r22
  810510:	b80b883a 	mov	r5,r23
  810514:	d9801e04 	addi	r6,sp,120
  810518:	08147940 	call	814794 <__sprint_r>
  81051c:	103a1e1e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  810520:	d8802617 	ldw	r2,152(sp)
  810524:	d8c02017 	ldw	r3,128(sp)
  810528:	da000404 	addi	r8,sp,16
  81052c:	003e2c06 	br	80fde0 <__alt_data_end+0xff80fde0>
  810530:	030020b4 	movhi	r12,130
  810534:	63303e84 	addi	r12,r12,-16134
  810538:	db002c15 	stw	r12,176(sp)
  81053c:	dac02c17 	ldw	r11,176(sp)
  810540:	1c07883a 	add	r3,r3,r16
  810544:	10800044 	addi	r2,r2,1
  810548:	42c00015 	stw	r11,0(r8)
  81054c:	44000115 	stw	r16,4(r8)
  810550:	d8c02015 	stw	r3,128(sp)
  810554:	d8801f15 	stw	r2,124(sp)
  810558:	010001c4 	movi	r4,7
  81055c:	20bfa716 	blt	r4,r2,8103fc <__alt_data_end+0xff8103fc>
  810560:	42000204 	addi	r8,r8,8
  810564:	003fad06 	br	81041c <__alt_data_end+0xff81041c>
  810568:	00800184 	movi	r2,6
  81056c:	1240012e 	bgeu	r2,r9,810574 <___vfprintf_internal_r+0x1bac>
  810570:	1013883a 	mov	r9,r2
  810574:	4825883a 	mov	r18,r9
  810578:	4805883a 	mov	r2,r9
  81057c:	4800c216 	blt	r9,zero,810888 <___vfprintf_internal_r+0x1ec0>
  810580:	d8802b15 	stw	r2,172(sp)
  810584:	008020b4 	movhi	r2,130
  810588:	10b03c04 	addi	r2,r2,-16144
  81058c:	d8803115 	stw	r2,196(sp)
  810590:	dcc02d15 	stw	r19,180(sp)
  810594:	d8003215 	stw	zero,200(sp)
  810598:	d8003415 	stw	zero,208(sp)
  81059c:	0005883a 	mov	r2,zero
  8105a0:	003a6306 	br	80ef30 <__alt_data_end+0xff80ef30>
  8105a4:	0021883a 	mov	r16,zero
  8105a8:	003e1f06 	br	80fe28 <__alt_data_end+0xff80fe28>
  8105ac:	b009883a 	mov	r4,r22
  8105b0:	b80b883a 	mov	r5,r23
  8105b4:	d9801e04 	addi	r6,sp,120
  8105b8:	08147940 	call	814794 <__sprint_r>
  8105bc:	1039f61e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  8105c0:	d8802617 	ldw	r2,152(sp)
  8105c4:	db003317 	ldw	r12,204(sp)
  8105c8:	d8c02017 	ldw	r3,128(sp)
  8105cc:	da000404 	addi	r8,sp,16
  8105d0:	6085c83a 	sub	r2,r12,r2
  8105d4:	003e1306 	br	80fe24 <__alt_data_end+0xff80fe24>
  8105d8:	030020b4 	movhi	r12,130
  8105dc:	63304284 	addi	r12,r12,-16118
  8105e0:	db003615 	stw	r12,216(sp)
  8105e4:	003b0206 	br	80f1f0 <__alt_data_end+0xff80f1f0>
  8105e8:	00c00b44 	movi	r3,45
  8105ec:	d8802b15 	stw	r2,172(sp)
  8105f0:	dc402d17 	ldw	r17,180(sp)
  8105f4:	d8c02785 	stb	r3,158(sp)
  8105f8:	dcc02d15 	stw	r19,180(sp)
  8105fc:	d8003215 	stw	zero,200(sp)
  810600:	00800b44 	movi	r2,45
  810604:	003a4706 	br	80ef24 <__alt_data_end+0xff80ef24>
  810608:	05400b44 	movi	r21,45
  81060c:	dd402785 	stb	r21,158(sp)
  810610:	003b4706 	br	80f330 <__alt_data_end+0xff80f330>
  810614:	008020b4 	movhi	r2,130
  810618:	10b03104 	addi	r2,r2,-16188
  81061c:	d8803115 	stw	r2,196(sp)
  810620:	003f4106 	br	810328 <__alt_data_end+0xff810328>
  810624:	d8c02617 	ldw	r3,152(sp)
  810628:	00bfff44 	movi	r2,-3
  81062c:	18801116 	blt	r3,r2,810674 <___vfprintf_internal_r+0x1cac>
  810630:	48c01016 	blt	r9,r3,810674 <___vfprintf_internal_r+0x1cac>
  810634:	d8c03415 	stw	r3,208(sp)
  810638:	040019c4 	movi	r16,103
  81063c:	003eb206 	br	810108 <__alt_data_end+0xff810108>
  810640:	010020b4 	movhi	r4,130
  810644:	21303e84 	addi	r4,r4,-16134
  810648:	d9002c15 	stw	r4,176(sp)
  81064c:	003cb106 	br	80f914 <__alt_data_end+0xff80f914>
  810650:	5005883a 	mov	r2,r10
  810654:	003ea106 	br	8100dc <__alt_data_end+0xff8100dc>
  810658:	da402b15 	stw	r9,172(sp)
  81065c:	dd402783 	ldbu	r21,158(sp)
  810660:	4825883a 	mov	r18,r9
  810664:	dcc02d15 	stw	r19,180(sp)
  810668:	d8003215 	stw	zero,200(sp)
  81066c:	d8003415 	stw	zero,208(sp)
  810670:	003a2806 	br	80ef14 <__alt_data_end+0xff80ef14>
  810674:	843fff84 	addi	r16,r16,-2
  810678:	1f3fffc4 	addi	fp,r3,-1
  81067c:	df002615 	stw	fp,152(sp)
  810680:	dc0022c5 	stb	r16,139(sp)
  810684:	e0009816 	blt	fp,zero,8108e8 <___vfprintf_internal_r+0x1f20>
  810688:	00800ac4 	movi	r2,43
  81068c:	d8802305 	stb	r2,140(sp)
  810690:	00800244 	movi	r2,9
  810694:	1700750e 	bge	r2,fp,81086c <___vfprintf_internal_r+0x1ea4>
  810698:	dd4022c4 	addi	r21,sp,139
  81069c:	dc002c15 	stw	r16,176(sp)
  8106a0:	4025883a 	mov	r18,r8
  8106a4:	a821883a 	mov	r16,r21
  8106a8:	e009883a 	mov	r4,fp
  8106ac:	01400284 	movi	r5,10
  8106b0:	080c5d40 	call	80c5d4 <__modsi3>
  8106b4:	10800c04 	addi	r2,r2,48
  8106b8:	843fffc4 	addi	r16,r16,-1
  8106bc:	e009883a 	mov	r4,fp
  8106c0:	01400284 	movi	r5,10
  8106c4:	80800005 	stb	r2,0(r16)
  8106c8:	080c5800 	call	80c580 <__divsi3>
  8106cc:	1039883a 	mov	fp,r2
  8106d0:	00800244 	movi	r2,9
  8106d4:	173ff416 	blt	r2,fp,8106a8 <__alt_data_end+0xff8106a8>
  8106d8:	9011883a 	mov	r8,r18
  8106dc:	e0800c04 	addi	r2,fp,48
  8106e0:	8025883a 	mov	r18,r16
  8106e4:	913fffc4 	addi	r4,r18,-1
  8106e8:	90bfffc5 	stb	r2,-1(r18)
  8106ec:	dc002c17 	ldw	r16,176(sp)
  8106f0:	2540852e 	bgeu	r4,r21,810908 <___vfprintf_internal_r+0x1f40>
  8106f4:	d9402384 	addi	r5,sp,142
  8106f8:	2c8bc83a 	sub	r5,r5,r18
  8106fc:	d8c02344 	addi	r3,sp,141
  810700:	a94b883a 	add	r5,r21,r5
  810704:	00000106 	br	81070c <___vfprintf_internal_r+0x1d44>
  810708:	20800003 	ldbu	r2,0(r4)
  81070c:	18800005 	stb	r2,0(r3)
  810710:	18c00044 	addi	r3,r3,1
  810714:	21000044 	addi	r4,r4,1
  810718:	197ffb1e 	bne	r3,r5,810708 <__alt_data_end+0xff810708>
  81071c:	d8802304 	addi	r2,sp,140
  810720:	1485c83a 	sub	r2,r2,r18
  810724:	d8c02344 	addi	r3,sp,141
  810728:	1885883a 	add	r2,r3,r2
  81072c:	dac03317 	ldw	r11,204(sp)
  810730:	156bc83a 	sub	r21,r2,r21
  810734:	dd403a15 	stw	r21,232(sp)
  810738:	00800044 	movi	r2,1
  81073c:	5d65883a 	add	r18,r11,r21
  810740:	12c0660e 	bge	r2,r11,8108dc <___vfprintf_internal_r+0x1f14>
  810744:	94800044 	addi	r18,r18,1
  810748:	9005883a 	mov	r2,r18
  81074c:	90006116 	blt	r18,zero,8108d4 <___vfprintf_internal_r+0x1f0c>
  810750:	d8003415 	stw	zero,208(sp)
  810754:	003e7406 	br	810128 <__alt_data_end+0xff810128>
  810758:	b009883a 	mov	r4,r22
  81075c:	b80b883a 	mov	r5,r23
  810760:	d9801e04 	addi	r6,sp,120
  810764:	08147940 	call	814794 <__sprint_r>
  810768:	10398b1e 	bne	r2,zero,80ed98 <__alt_data_end+0xff80ed98>
  81076c:	dc002617 	ldw	r16,152(sp)
  810770:	d8c02017 	ldw	r3,128(sp)
  810774:	d8801f17 	ldw	r2,124(sp)
  810778:	da000404 	addi	r8,sp,16
  81077c:	003ec906 	br	8102a4 <__alt_data_end+0xff8102a4>
  810780:	483e1c1e 	bne	r9,zero,80fff4 <__alt_data_end+0xff80fff4>
  810784:	9013883a 	mov	r9,r18
  810788:	003e1a06 	br	80fff4 <__alt_data_end+0xff80fff4>
  81078c:	02400184 	movi	r9,6
  810790:	003e1806 	br	80fff4 <__alt_data_end+0xff80fff4>
  810794:	d8c03417 	ldw	r3,208(sp)
  810798:	00c04b0e 	bge	zero,r3,8108c8 <___vfprintf_internal_r+0x1f00>
  81079c:	04800044 	movi	r18,1
  8107a0:	dac03317 	ldw	r11,204(sp)
  8107a4:	92e5883a 	add	r18,r18,r11
  8107a8:	9005883a 	mov	r2,r18
  8107ac:	903e5e0e 	bge	r18,zero,810128 <__alt_data_end+0xff810128>
  8107b0:	0005883a 	mov	r2,zero
  8107b4:	003e5c06 	br	810128 <__alt_data_end+0xff810128>
  8107b8:	00c00b44 	movi	r3,45
  8107bc:	64a0003c 	xorhi	r18,r12,32768
  8107c0:	d8c02b05 	stb	r3,172(sp)
  8107c4:	003e1106 	br	81000c <__alt_data_end+0xff81000c>
  8107c8:	4f000044 	addi	fp,r9,1
  8107cc:	003e1606 	br	810028 <__alt_data_end+0xff810028>
  8107d0:	d8c02617 	ldw	r3,152(sp)
  8107d4:	d8c03415 	stw	r3,208(sp)
  8107d8:	00c0350e 	bge	zero,r3,8108b0 <___vfprintf_internal_r+0x1ee8>
  8107dc:	4800081e 	bne	r9,zero,810800 <___vfprintf_internal_r+0x1e38>
  8107e0:	8c40004c 	andi	r17,r17,1
  8107e4:	8800061e 	bne	r17,zero,810800 <___vfprintf_internal_r+0x1e38>
  8107e8:	1805883a 	mov	r2,r3
  8107ec:	183e4d0e 	bge	r3,zero,810124 <__alt_data_end+0xff810124>
  8107f0:	0005883a 	mov	r2,zero
  8107f4:	003e4b06 	br	810124 <__alt_data_end+0xff810124>
  8107f8:	d8802117 	ldw	r2,132(sp)
  8107fc:	003e3706 	br	8100dc <__alt_data_end+0xff8100dc>
  810800:	dac03417 	ldw	r11,208(sp)
  810804:	4a400044 	addi	r9,r9,1
  810808:	5a65883a 	add	r18,r11,r9
  81080c:	9005883a 	mov	r2,r18
  810810:	903e450e 	bge	r18,zero,810128 <__alt_data_end+0xff810128>
  810814:	003fe606 	br	8107b0 <__alt_data_end+0xff8107b0>
  810818:	db003417 	ldw	r12,208(sp)
  81081c:	64800044 	addi	r18,r12,1
  810820:	9005883a 	mov	r2,r18
  810824:	903e400e 	bge	r18,zero,810128 <__alt_data_end+0xff810128>
  810828:	003fe106 	br	8107b0 <__alt_data_end+0xff8107b0>
  81082c:	d9003717 	ldw	r4,220(sp)
  810830:	900b883a 	mov	r5,r18
  810834:	000d883a 	mov	r6,zero
  810838:	000f883a 	mov	r7,zero
  81083c:	da003f15 	stw	r8,252(sp)
  810840:	da403e15 	stw	r9,248(sp)
  810844:	da803d15 	stw	r10,244(sp)
  810848:	0818a7c0 	call	818a7c <__eqdf2>
  81084c:	da003f17 	ldw	r8,252(sp)
  810850:	da403e17 	ldw	r9,248(sp)
  810854:	da803d17 	ldw	r10,244(sp)
  810858:	103f1f26 	beq	r2,zero,8104d8 <__alt_data_end+0xff8104d8>
  81085c:	00800044 	movi	r2,1
  810860:	1707c83a 	sub	r3,r2,fp
  810864:	d8c02615 	stw	r3,152(sp)
  810868:	003f1c06 	br	8104dc <__alt_data_end+0xff8104dc>
  81086c:	00800c04 	movi	r2,48
  810870:	e0c00c04 	addi	r3,fp,48
  810874:	d8802345 	stb	r2,141(sp)
  810878:	d8c02385 	stb	r3,142(sp)
  81087c:	d88023c4 	addi	r2,sp,143
  810880:	dd4022c4 	addi	r21,sp,139
  810884:	003fa906 	br	81072c <__alt_data_end+0xff81072c>
  810888:	0005883a 	mov	r2,zero
  81088c:	003f3c06 	br	810580 <__alt_data_end+0xff810580>
  810890:	dac02d17 	ldw	r11,180(sp)
  810894:	5a400017 	ldw	r9,0(r11)
  810898:	5ac00104 	addi	r11,r11,4
  81089c:	dac02d15 	stw	r11,180(sp)
  8108a0:	483ec80e 	bge	r9,zero,8103c4 <__alt_data_end+0xff8103c4>
  8108a4:	027fffc4 	movi	r9,-1
  8108a8:	1c000047 	ldb	r16,1(r3)
  8108ac:	0038ab06 	br	80eb5c <__alt_data_end+0xff80eb5c>
  8108b0:	4800111e 	bne	r9,zero,8108f8 <___vfprintf_internal_r+0x1f30>
  8108b4:	8c40004c 	andi	r17,r17,1
  8108b8:	88000f1e 	bne	r17,zero,8108f8 <___vfprintf_internal_r+0x1f30>
  8108bc:	00800044 	movi	r2,1
  8108c0:	1025883a 	mov	r18,r2
  8108c4:	003e1806 	br	810128 <__alt_data_end+0xff810128>
  8108c8:	04800084 	movi	r18,2
  8108cc:	90e5c83a 	sub	r18,r18,r3
  8108d0:	003fb306 	br	8107a0 <__alt_data_end+0xff8107a0>
  8108d4:	0005883a 	mov	r2,zero
  8108d8:	003f9d06 	br	810750 <__alt_data_end+0xff810750>
  8108dc:	88a2703a 	and	r17,r17,r2
  8108e0:	883f9926 	beq	r17,zero,810748 <__alt_data_end+0xff810748>
  8108e4:	003f9706 	br	810744 <__alt_data_end+0xff810744>
  8108e8:	00800b44 	movi	r2,45
  8108ec:	0739c83a 	sub	fp,zero,fp
  8108f0:	d8802305 	stb	r2,140(sp)
  8108f4:	003f6606 	br	810690 <__alt_data_end+0xff810690>
  8108f8:	4c800084 	addi	r18,r9,2
  8108fc:	9005883a 	mov	r2,r18
  810900:	903e090e 	bge	r18,zero,810128 <__alt_data_end+0xff810128>
  810904:	003faa06 	br	8107b0 <__alt_data_end+0xff8107b0>
  810908:	d8802344 	addi	r2,sp,141
  81090c:	003f8706 	br	81072c <__alt_data_end+0xff81072c>
  810910:	d8c02617 	ldw	r3,152(sp)
  810914:	003f5806 	br	810678 <__alt_data_end+0xff810678>

00810918 <__vfprintf_internal>:
  810918:	2007883a 	mov	r3,r4
  81091c:	010020b4 	movhi	r4,130
  810920:	21383f04 	addi	r4,r4,-7940
  810924:	21000017 	ldw	r4,0(r4)
  810928:	2805883a 	mov	r2,r5
  81092c:	300f883a 	mov	r7,r6
  810930:	180b883a 	mov	r5,r3
  810934:	100d883a 	mov	r6,r2
  810938:	080e9c81 	jmpi	80e9c8 <___vfprintf_internal_r>

0081093c <__sbprintf>:
  81093c:	2880030b 	ldhu	r2,12(r5)
  810940:	2ac01917 	ldw	r11,100(r5)
  810944:	2a80038b 	ldhu	r10,14(r5)
  810948:	2a400717 	ldw	r9,28(r5)
  81094c:	2a000917 	ldw	r8,36(r5)
  810950:	defee204 	addi	sp,sp,-1144
  810954:	00c10004 	movi	r3,1024
  810958:	dc011a15 	stw	r16,1128(sp)
  81095c:	10bfff4c 	andi	r2,r2,65533
  810960:	2821883a 	mov	r16,r5
  810964:	d8cb883a 	add	r5,sp,r3
  810968:	dc811c15 	stw	r18,1136(sp)
  81096c:	dc411b15 	stw	r17,1132(sp)
  810970:	dfc11d15 	stw	ra,1140(sp)
  810974:	2025883a 	mov	r18,r4
  810978:	d881030d 	sth	r2,1036(sp)
  81097c:	dac11915 	stw	r11,1124(sp)
  810980:	da81038d 	sth	r10,1038(sp)
  810984:	da410715 	stw	r9,1052(sp)
  810988:	da010915 	stw	r8,1060(sp)
  81098c:	dec10015 	stw	sp,1024(sp)
  810990:	dec10415 	stw	sp,1040(sp)
  810994:	d8c10215 	stw	r3,1032(sp)
  810998:	d8c10515 	stw	r3,1044(sp)
  81099c:	d8010615 	stw	zero,1048(sp)
  8109a0:	080e9c80 	call	80e9c8 <___vfprintf_internal_r>
  8109a4:	1023883a 	mov	r17,r2
  8109a8:	10000416 	blt	r2,zero,8109bc <__sbprintf+0x80>
  8109ac:	9009883a 	mov	r4,r18
  8109b0:	d9410004 	addi	r5,sp,1024
  8109b4:	081272c0 	call	81272c <_fflush_r>
  8109b8:	10000d1e 	bne	r2,zero,8109f0 <__sbprintf+0xb4>
  8109bc:	d8c1030b 	ldhu	r3,1036(sp)
  8109c0:	18c0100c 	andi	r3,r3,64
  8109c4:	18000326 	beq	r3,zero,8109d4 <__sbprintf+0x98>
  8109c8:	8080030b 	ldhu	r2,12(r16)
  8109cc:	10801014 	ori	r2,r2,64
  8109d0:	8080030d 	sth	r2,12(r16)
  8109d4:	8805883a 	mov	r2,r17
  8109d8:	dfc11d17 	ldw	ra,1140(sp)
  8109dc:	dc811c17 	ldw	r18,1136(sp)
  8109e0:	dc411b17 	ldw	r17,1132(sp)
  8109e4:	dc011a17 	ldw	r16,1128(sp)
  8109e8:	dec11e04 	addi	sp,sp,1144
  8109ec:	f800283a 	ret
  8109f0:	047fffc4 	movi	r17,-1
  8109f4:	003ff106 	br	8109bc <__alt_data_end+0xff8109bc>

008109f8 <_write_r>:
  8109f8:	defffd04 	addi	sp,sp,-12
  8109fc:	dc000015 	stw	r16,0(sp)
  810a00:	040020b4 	movhi	r16,130
  810a04:	dc400115 	stw	r17,4(sp)
  810a08:	843fbc04 	addi	r16,r16,-272
  810a0c:	2023883a 	mov	r17,r4
  810a10:	2809883a 	mov	r4,r5
  810a14:	300b883a 	mov	r5,r6
  810a18:	380d883a 	mov	r6,r7
  810a1c:	dfc00215 	stw	ra,8(sp)
  810a20:	80000015 	stw	zero,0(r16)
  810a24:	081af800 	call	81af80 <write>
  810a28:	00ffffc4 	movi	r3,-1
  810a2c:	10c00526 	beq	r2,r3,810a44 <_write_r+0x4c>
  810a30:	dfc00217 	ldw	ra,8(sp)
  810a34:	dc400117 	ldw	r17,4(sp)
  810a38:	dc000017 	ldw	r16,0(sp)
  810a3c:	dec00304 	addi	sp,sp,12
  810a40:	f800283a 	ret
  810a44:	80c00017 	ldw	r3,0(r16)
  810a48:	183ff926 	beq	r3,zero,810a30 <__alt_data_end+0xff810a30>
  810a4c:	88c00015 	stw	r3,0(r17)
  810a50:	003ff706 	br	810a30 <__alt_data_end+0xff810a30>

00810a54 <__swsetup_r>:
  810a54:	008020b4 	movhi	r2,130
  810a58:	defffd04 	addi	sp,sp,-12
  810a5c:	10b83f04 	addi	r2,r2,-7940
  810a60:	dc400115 	stw	r17,4(sp)
  810a64:	2023883a 	mov	r17,r4
  810a68:	11000017 	ldw	r4,0(r2)
  810a6c:	dc000015 	stw	r16,0(sp)
  810a70:	dfc00215 	stw	ra,8(sp)
  810a74:	2821883a 	mov	r16,r5
  810a78:	20000226 	beq	r4,zero,810a84 <__swsetup_r+0x30>
  810a7c:	20c00e17 	ldw	r3,56(r4)
  810a80:	18003126 	beq	r3,zero,810b48 <__swsetup_r+0xf4>
  810a84:	8080030b 	ldhu	r2,12(r16)
  810a88:	10c0020c 	andi	r3,r2,8
  810a8c:	100d883a 	mov	r6,r2
  810a90:	18000f26 	beq	r3,zero,810ad0 <__swsetup_r+0x7c>
  810a94:	80c00417 	ldw	r3,16(r16)
  810a98:	18001526 	beq	r3,zero,810af0 <__swsetup_r+0x9c>
  810a9c:	1100004c 	andi	r4,r2,1
  810aa0:	20001c1e 	bne	r4,zero,810b14 <__swsetup_r+0xc0>
  810aa4:	1080008c 	andi	r2,r2,2
  810aa8:	1000291e 	bne	r2,zero,810b50 <__swsetup_r+0xfc>
  810aac:	80800517 	ldw	r2,20(r16)
  810ab0:	80800215 	stw	r2,8(r16)
  810ab4:	18001c26 	beq	r3,zero,810b28 <__swsetup_r+0xd4>
  810ab8:	0005883a 	mov	r2,zero
  810abc:	dfc00217 	ldw	ra,8(sp)
  810ac0:	dc400117 	ldw	r17,4(sp)
  810ac4:	dc000017 	ldw	r16,0(sp)
  810ac8:	dec00304 	addi	sp,sp,12
  810acc:	f800283a 	ret
  810ad0:	3080040c 	andi	r2,r6,16
  810ad4:	10002e26 	beq	r2,zero,810b90 <__swsetup_r+0x13c>
  810ad8:	3080010c 	andi	r2,r6,4
  810adc:	10001e1e 	bne	r2,zero,810b58 <__swsetup_r+0x104>
  810ae0:	80c00417 	ldw	r3,16(r16)
  810ae4:	30800214 	ori	r2,r6,8
  810ae8:	8080030d 	sth	r2,12(r16)
  810aec:	183feb1e 	bne	r3,zero,810a9c <__alt_data_end+0xff810a9c>
  810af0:	1140a00c 	andi	r5,r2,640
  810af4:	01008004 	movi	r4,512
  810af8:	293fe826 	beq	r5,r4,810a9c <__alt_data_end+0xff810a9c>
  810afc:	8809883a 	mov	r4,r17
  810b00:	800b883a 	mov	r5,r16
  810b04:	080cd780 	call	80cd78 <__smakebuf_r>
  810b08:	8080030b 	ldhu	r2,12(r16)
  810b0c:	80c00417 	ldw	r3,16(r16)
  810b10:	003fe206 	br	810a9c <__alt_data_end+0xff810a9c>
  810b14:	80800517 	ldw	r2,20(r16)
  810b18:	80000215 	stw	zero,8(r16)
  810b1c:	0085c83a 	sub	r2,zero,r2
  810b20:	80800615 	stw	r2,24(r16)
  810b24:	183fe41e 	bne	r3,zero,810ab8 <__alt_data_end+0xff810ab8>
  810b28:	80c0030b 	ldhu	r3,12(r16)
  810b2c:	0005883a 	mov	r2,zero
  810b30:	1900200c 	andi	r4,r3,128
  810b34:	203fe126 	beq	r4,zero,810abc <__alt_data_end+0xff810abc>
  810b38:	18c01014 	ori	r3,r3,64
  810b3c:	80c0030d 	sth	r3,12(r16)
  810b40:	00bfffc4 	movi	r2,-1
  810b44:	003fdd06 	br	810abc <__alt_data_end+0xff810abc>
  810b48:	0812b080 	call	812b08 <__sinit>
  810b4c:	003fcd06 	br	810a84 <__alt_data_end+0xff810a84>
  810b50:	0005883a 	mov	r2,zero
  810b54:	003fd606 	br	810ab0 <__alt_data_end+0xff810ab0>
  810b58:	81400c17 	ldw	r5,48(r16)
  810b5c:	28000626 	beq	r5,zero,810b78 <__swsetup_r+0x124>
  810b60:	80801004 	addi	r2,r16,64
  810b64:	28800326 	beq	r5,r2,810b74 <__swsetup_r+0x120>
  810b68:	8809883a 	mov	r4,r17
  810b6c:	0812d280 	call	812d28 <_free_r>
  810b70:	8180030b 	ldhu	r6,12(r16)
  810b74:	80000c15 	stw	zero,48(r16)
  810b78:	80c00417 	ldw	r3,16(r16)
  810b7c:	00bff6c4 	movi	r2,-37
  810b80:	118c703a 	and	r6,r2,r6
  810b84:	80000115 	stw	zero,4(r16)
  810b88:	80c00015 	stw	r3,0(r16)
  810b8c:	003fd506 	br	810ae4 <__alt_data_end+0xff810ae4>
  810b90:	00800244 	movi	r2,9
  810b94:	88800015 	stw	r2,0(r17)
  810b98:	30801014 	ori	r2,r6,64
  810b9c:	8080030d 	sth	r2,12(r16)
  810ba0:	00bfffc4 	movi	r2,-1
  810ba4:	003fc506 	br	810abc <__alt_data_end+0xff810abc>

00810ba8 <_close_r>:
  810ba8:	defffd04 	addi	sp,sp,-12
  810bac:	dc000015 	stw	r16,0(sp)
  810bb0:	040020b4 	movhi	r16,130
  810bb4:	dc400115 	stw	r17,4(sp)
  810bb8:	843fbc04 	addi	r16,r16,-272
  810bbc:	2023883a 	mov	r17,r4
  810bc0:	2809883a 	mov	r4,r5
  810bc4:	dfc00215 	stw	ra,8(sp)
  810bc8:	80000015 	stw	zero,0(r16)
  810bcc:	081a0a40 	call	81a0a4 <close>
  810bd0:	00ffffc4 	movi	r3,-1
  810bd4:	10c00526 	beq	r2,r3,810bec <_close_r+0x44>
  810bd8:	dfc00217 	ldw	ra,8(sp)
  810bdc:	dc400117 	ldw	r17,4(sp)
  810be0:	dc000017 	ldw	r16,0(sp)
  810be4:	dec00304 	addi	sp,sp,12
  810be8:	f800283a 	ret
  810bec:	80c00017 	ldw	r3,0(r16)
  810bf0:	183ff926 	beq	r3,zero,810bd8 <__alt_data_end+0xff810bd8>
  810bf4:	88c00015 	stw	r3,0(r17)
  810bf8:	003ff706 	br	810bd8 <__alt_data_end+0xff810bd8>

00810bfc <quorem>:
  810bfc:	defff704 	addi	sp,sp,-36
  810c00:	dc800215 	stw	r18,8(sp)
  810c04:	20800417 	ldw	r2,16(r4)
  810c08:	2c800417 	ldw	r18,16(r5)
  810c0c:	dfc00815 	stw	ra,32(sp)
  810c10:	ddc00715 	stw	r23,28(sp)
  810c14:	dd800615 	stw	r22,24(sp)
  810c18:	dd400515 	stw	r21,20(sp)
  810c1c:	dd000415 	stw	r20,16(sp)
  810c20:	dcc00315 	stw	r19,12(sp)
  810c24:	dc400115 	stw	r17,4(sp)
  810c28:	dc000015 	stw	r16,0(sp)
  810c2c:	14807116 	blt	r2,r18,810df4 <quorem+0x1f8>
  810c30:	94bfffc4 	addi	r18,r18,-1
  810c34:	94ad883a 	add	r22,r18,r18
  810c38:	b5ad883a 	add	r22,r22,r22
  810c3c:	2c400504 	addi	r17,r5,20
  810c40:	8da9883a 	add	r20,r17,r22
  810c44:	25400504 	addi	r21,r4,20
  810c48:	282f883a 	mov	r23,r5
  810c4c:	adad883a 	add	r22,r21,r22
  810c50:	a1400017 	ldw	r5,0(r20)
  810c54:	2021883a 	mov	r16,r4
  810c58:	b1000017 	ldw	r4,0(r22)
  810c5c:	29400044 	addi	r5,r5,1
  810c60:	080c6300 	call	80c630 <__udivsi3>
  810c64:	1027883a 	mov	r19,r2
  810c68:	10002c26 	beq	r2,zero,810d1c <quorem+0x120>
  810c6c:	a813883a 	mov	r9,r21
  810c70:	8811883a 	mov	r8,r17
  810c74:	0009883a 	mov	r4,zero
  810c78:	000d883a 	mov	r6,zero
  810c7c:	41c00017 	ldw	r7,0(r8)
  810c80:	49400017 	ldw	r5,0(r9)
  810c84:	42000104 	addi	r8,r8,4
  810c88:	38bfffcc 	andi	r2,r7,65535
  810c8c:	14c5383a 	mul	r2,r2,r19
  810c90:	380ed43a 	srli	r7,r7,16
  810c94:	28ffffcc 	andi	r3,r5,65535
  810c98:	2085883a 	add	r2,r4,r2
  810c9c:	1008d43a 	srli	r4,r2,16
  810ca0:	3ccf383a 	mul	r7,r7,r19
  810ca4:	198d883a 	add	r6,r3,r6
  810ca8:	10ffffcc 	andi	r3,r2,65535
  810cac:	30c7c83a 	sub	r3,r6,r3
  810cb0:	280ad43a 	srli	r5,r5,16
  810cb4:	21c9883a 	add	r4,r4,r7
  810cb8:	180dd43a 	srai	r6,r3,16
  810cbc:	20bfffcc 	andi	r2,r4,65535
  810cc0:	288bc83a 	sub	r5,r5,r2
  810cc4:	298b883a 	add	r5,r5,r6
  810cc8:	280e943a 	slli	r7,r5,16
  810ccc:	18ffffcc 	andi	r3,r3,65535
  810cd0:	2008d43a 	srli	r4,r4,16
  810cd4:	38ceb03a 	or	r7,r7,r3
  810cd8:	49c00015 	stw	r7,0(r9)
  810cdc:	280dd43a 	srai	r6,r5,16
  810ce0:	4a400104 	addi	r9,r9,4
  810ce4:	a23fe52e 	bgeu	r20,r8,810c7c <__alt_data_end+0xff810c7c>
  810ce8:	b0800017 	ldw	r2,0(r22)
  810cec:	10000b1e 	bne	r2,zero,810d1c <quorem+0x120>
  810cf0:	b0bfff04 	addi	r2,r22,-4
  810cf4:	a880082e 	bgeu	r21,r2,810d18 <quorem+0x11c>
  810cf8:	b0ffff17 	ldw	r3,-4(r22)
  810cfc:	18000326 	beq	r3,zero,810d0c <quorem+0x110>
  810d00:	00000506 	br	810d18 <quorem+0x11c>
  810d04:	10c00017 	ldw	r3,0(r2)
  810d08:	1800031e 	bne	r3,zero,810d18 <quorem+0x11c>
  810d0c:	10bfff04 	addi	r2,r2,-4
  810d10:	94bfffc4 	addi	r18,r18,-1
  810d14:	a8bffb36 	bltu	r21,r2,810d04 <__alt_data_end+0xff810d04>
  810d18:	84800415 	stw	r18,16(r16)
  810d1c:	8009883a 	mov	r4,r16
  810d20:	b80b883a 	mov	r5,r23
  810d24:	0813cec0 	call	813cec <__mcmp>
  810d28:	10002616 	blt	r2,zero,810dc4 <quorem+0x1c8>
  810d2c:	9cc00044 	addi	r19,r19,1
  810d30:	a80d883a 	mov	r6,r21
  810d34:	000b883a 	mov	r5,zero
  810d38:	31000017 	ldw	r4,0(r6)
  810d3c:	88800017 	ldw	r2,0(r17)
  810d40:	31800104 	addi	r6,r6,4
  810d44:	20ffffcc 	andi	r3,r4,65535
  810d48:	194b883a 	add	r5,r3,r5
  810d4c:	10ffffcc 	andi	r3,r2,65535
  810d50:	28c7c83a 	sub	r3,r5,r3
  810d54:	1004d43a 	srli	r2,r2,16
  810d58:	2008d43a 	srli	r4,r4,16
  810d5c:	180bd43a 	srai	r5,r3,16
  810d60:	18ffffcc 	andi	r3,r3,65535
  810d64:	2089c83a 	sub	r4,r4,r2
  810d68:	2149883a 	add	r4,r4,r5
  810d6c:	2004943a 	slli	r2,r4,16
  810d70:	8c400104 	addi	r17,r17,4
  810d74:	200bd43a 	srai	r5,r4,16
  810d78:	10c6b03a 	or	r3,r2,r3
  810d7c:	30ffff15 	stw	r3,-4(r6)
  810d80:	a47fed2e 	bgeu	r20,r17,810d38 <__alt_data_end+0xff810d38>
  810d84:	9485883a 	add	r2,r18,r18
  810d88:	1085883a 	add	r2,r2,r2
  810d8c:	a887883a 	add	r3,r21,r2
  810d90:	18800017 	ldw	r2,0(r3)
  810d94:	10000b1e 	bne	r2,zero,810dc4 <quorem+0x1c8>
  810d98:	18bfff04 	addi	r2,r3,-4
  810d9c:	a880082e 	bgeu	r21,r2,810dc0 <quorem+0x1c4>
  810da0:	18ffff17 	ldw	r3,-4(r3)
  810da4:	18000326 	beq	r3,zero,810db4 <quorem+0x1b8>
  810da8:	00000506 	br	810dc0 <quorem+0x1c4>
  810dac:	10c00017 	ldw	r3,0(r2)
  810db0:	1800031e 	bne	r3,zero,810dc0 <quorem+0x1c4>
  810db4:	10bfff04 	addi	r2,r2,-4
  810db8:	94bfffc4 	addi	r18,r18,-1
  810dbc:	a8bffb36 	bltu	r21,r2,810dac <__alt_data_end+0xff810dac>
  810dc0:	84800415 	stw	r18,16(r16)
  810dc4:	9805883a 	mov	r2,r19
  810dc8:	dfc00817 	ldw	ra,32(sp)
  810dcc:	ddc00717 	ldw	r23,28(sp)
  810dd0:	dd800617 	ldw	r22,24(sp)
  810dd4:	dd400517 	ldw	r21,20(sp)
  810dd8:	dd000417 	ldw	r20,16(sp)
  810ddc:	dcc00317 	ldw	r19,12(sp)
  810de0:	dc800217 	ldw	r18,8(sp)
  810de4:	dc400117 	ldw	r17,4(sp)
  810de8:	dc000017 	ldw	r16,0(sp)
  810dec:	dec00904 	addi	sp,sp,36
  810df0:	f800283a 	ret
  810df4:	0005883a 	mov	r2,zero
  810df8:	003ff306 	br	810dc8 <__alt_data_end+0xff810dc8>

00810dfc <_dtoa_r>:
  810dfc:	20801017 	ldw	r2,64(r4)
  810e00:	deffde04 	addi	sp,sp,-136
  810e04:	dd401d15 	stw	r21,116(sp)
  810e08:	dcc01b15 	stw	r19,108(sp)
  810e0c:	dc801a15 	stw	r18,104(sp)
  810e10:	dc401915 	stw	r17,100(sp)
  810e14:	dc001815 	stw	r16,96(sp)
  810e18:	dfc02115 	stw	ra,132(sp)
  810e1c:	df002015 	stw	fp,128(sp)
  810e20:	ddc01f15 	stw	r23,124(sp)
  810e24:	dd801e15 	stw	r22,120(sp)
  810e28:	dd001c15 	stw	r20,112(sp)
  810e2c:	d9c00315 	stw	r7,12(sp)
  810e30:	2021883a 	mov	r16,r4
  810e34:	302b883a 	mov	r21,r6
  810e38:	2825883a 	mov	r18,r5
  810e3c:	dc402417 	ldw	r17,144(sp)
  810e40:	3027883a 	mov	r19,r6
  810e44:	10000826 	beq	r2,zero,810e68 <_dtoa_r+0x6c>
  810e48:	21801117 	ldw	r6,68(r4)
  810e4c:	00c00044 	movi	r3,1
  810e50:	100b883a 	mov	r5,r2
  810e54:	1986983a 	sll	r3,r3,r6
  810e58:	11800115 	stw	r6,4(r2)
  810e5c:	10c00215 	stw	r3,8(r2)
  810e60:	08134c00 	call	8134c0 <_Bfree>
  810e64:	80001015 	stw	zero,64(r16)
  810e68:	a8002d16 	blt	r21,zero,810f20 <_dtoa_r+0x124>
  810e6c:	88000015 	stw	zero,0(r17)
  810e70:	a8dffc2c 	andhi	r3,r21,32752
  810e74:	009ffc34 	movhi	r2,32752
  810e78:	18801b26 	beq	r3,r2,810ee8 <_dtoa_r+0xec>
  810e7c:	9009883a 	mov	r4,r18
  810e80:	980b883a 	mov	r5,r19
  810e84:	000d883a 	mov	r6,zero
  810e88:	000f883a 	mov	r7,zero
  810e8c:	0818a7c0 	call	818a7c <__eqdf2>
  810e90:	10002a1e 	bne	r2,zero,810f3c <_dtoa_r+0x140>
  810e94:	d8c02317 	ldw	r3,140(sp)
  810e98:	d9002517 	ldw	r4,148(sp)
  810e9c:	00800044 	movi	r2,1
  810ea0:	18800015 	stw	r2,0(r3)
  810ea4:	2001a226 	beq	r4,zero,811530 <_dtoa_r+0x734>
  810ea8:	008020b4 	movhi	r2,130
  810eac:	10b03e44 	addi	r2,r2,-16135
  810eb0:	20800015 	stw	r2,0(r4)
  810eb4:	10bfffc4 	addi	r2,r2,-1
  810eb8:	dfc02117 	ldw	ra,132(sp)
  810ebc:	df002017 	ldw	fp,128(sp)
  810ec0:	ddc01f17 	ldw	r23,124(sp)
  810ec4:	dd801e17 	ldw	r22,120(sp)
  810ec8:	dd401d17 	ldw	r21,116(sp)
  810ecc:	dd001c17 	ldw	r20,112(sp)
  810ed0:	dcc01b17 	ldw	r19,108(sp)
  810ed4:	dc801a17 	ldw	r18,104(sp)
  810ed8:	dc401917 	ldw	r17,100(sp)
  810edc:	dc001817 	ldw	r16,96(sp)
  810ee0:	dec02204 	addi	sp,sp,136
  810ee4:	f800283a 	ret
  810ee8:	d8c02317 	ldw	r3,140(sp)
  810eec:	0089c3c4 	movi	r2,9999
  810ef0:	18800015 	stw	r2,0(r3)
  810ef4:	90017c26 	beq	r18,zero,8114e8 <_dtoa_r+0x6ec>
  810ef8:	008020b4 	movhi	r2,130
  810efc:	10b04a04 	addi	r2,r2,-16088
  810f00:	d9002517 	ldw	r4,148(sp)
  810f04:	203fec26 	beq	r4,zero,810eb8 <__alt_data_end+0xff810eb8>
  810f08:	10c000c7 	ldb	r3,3(r2)
  810f0c:	18017d1e 	bne	r3,zero,811504 <_dtoa_r+0x708>
  810f10:	10c000c4 	addi	r3,r2,3
  810f14:	d9802517 	ldw	r6,148(sp)
  810f18:	30c00015 	stw	r3,0(r6)
  810f1c:	003fe606 	br	810eb8 <__alt_data_end+0xff810eb8>
  810f20:	04e00034 	movhi	r19,32768
  810f24:	9cffffc4 	addi	r19,r19,-1
  810f28:	00800044 	movi	r2,1
  810f2c:	ace6703a 	and	r19,r21,r19
  810f30:	88800015 	stw	r2,0(r17)
  810f34:	982b883a 	mov	r21,r19
  810f38:	003fcd06 	br	810e70 <__alt_data_end+0xff810e70>
  810f3c:	d8800204 	addi	r2,sp,8
  810f40:	a822d53a 	srli	r17,r21,20
  810f44:	d8800015 	stw	r2,0(sp)
  810f48:	8009883a 	mov	r4,r16
  810f4c:	900b883a 	mov	r5,r18
  810f50:	980d883a 	mov	r6,r19
  810f54:	d9c00104 	addi	r7,sp,4
  810f58:	08140600 	call	814060 <__d2b>
  810f5c:	1039883a 	mov	fp,r2
  810f60:	88016a1e 	bne	r17,zero,81150c <_dtoa_r+0x710>
  810f64:	dd000217 	ldw	r20,8(sp)
  810f68:	dc400117 	ldw	r17,4(sp)
  810f6c:	00befbc4 	movi	r2,-1041
  810f70:	a463883a 	add	r17,r20,r17
  810f74:	8882ea16 	blt	r17,r2,811b20 <_dtoa_r+0xd24>
  810f78:	00bf0384 	movi	r2,-1010
  810f7c:	1445c83a 	sub	r2,r2,r17
  810f80:	89010484 	addi	r4,r17,1042
  810f84:	a8aa983a 	sll	r21,r21,r2
  810f88:	9108d83a 	srl	r4,r18,r4
  810f8c:	a908b03a 	or	r4,r21,r4
  810f90:	0819e0c0 	call	819e0c <__floatunsidf>
  810f94:	017f8434 	movhi	r5,65040
  810f98:	01800044 	movi	r6,1
  810f9c:	1009883a 	mov	r4,r2
  810fa0:	194b883a 	add	r5,r3,r5
  810fa4:	8c7fffc4 	addi	r17,r17,-1
  810fa8:	d9800f15 	stw	r6,60(sp)
  810fac:	000d883a 	mov	r6,zero
  810fb0:	01cffe34 	movhi	r7,16376
  810fb4:	08193e40 	call	8193e4 <__subdf3>
  810fb8:	0198dbf4 	movhi	r6,25455
  810fbc:	01cff4f4 	movhi	r7,16339
  810fc0:	1009883a 	mov	r4,r2
  810fc4:	180b883a 	mov	r5,r3
  810fc8:	3190d844 	addi	r6,r6,17249
  810fcc:	39e1e9c4 	addi	r7,r7,-30809
  810fd0:	0818cc00 	call	818cc0 <__muldf3>
  810fd4:	01a2d874 	movhi	r6,35681
  810fd8:	01cff1f4 	movhi	r7,16327
  810fdc:	180b883a 	mov	r5,r3
  810fe0:	31b22cc4 	addi	r6,r6,-14157
  810fe4:	39e28a04 	addi	r7,r7,-30168
  810fe8:	1009883a 	mov	r4,r2
  810fec:	08179140 	call	817914 <__adddf3>
  810ff0:	8809883a 	mov	r4,r17
  810ff4:	102d883a 	mov	r22,r2
  810ff8:	182b883a 	mov	r21,r3
  810ffc:	0819d3c0 	call	819d3c <__floatsidf>
  811000:	019427f4 	movhi	r6,20639
  811004:	01cff4f4 	movhi	r7,16339
  811008:	1009883a 	mov	r4,r2
  81100c:	180b883a 	mov	r5,r3
  811010:	319e7ec4 	addi	r6,r6,31227
  811014:	39d104c4 	addi	r7,r7,17427
  811018:	0818cc00 	call	818cc0 <__muldf3>
  81101c:	b009883a 	mov	r4,r22
  811020:	a80b883a 	mov	r5,r21
  811024:	100d883a 	mov	r6,r2
  811028:	180f883a 	mov	r7,r3
  81102c:	08179140 	call	817914 <__adddf3>
  811030:	1009883a 	mov	r4,r2
  811034:	180b883a 	mov	r5,r3
  811038:	102d883a 	mov	r22,r2
  81103c:	182b883a 	mov	r21,r3
  811040:	0819cb40 	call	819cb4 <__fixdfsi>
  811044:	b009883a 	mov	r4,r22
  811048:	a80b883a 	mov	r5,r21
  81104c:	000d883a 	mov	r6,zero
  811050:	000f883a 	mov	r7,zero
  811054:	d8800515 	stw	r2,20(sp)
  811058:	0818be00 	call	818be0 <__ledf2>
  81105c:	10023116 	blt	r2,zero,811924 <_dtoa_r+0xb28>
  811060:	d8c00517 	ldw	r3,20(sp)
  811064:	00800584 	movi	r2,22
  811068:	10c21f36 	bltu	r2,r3,8118e8 <_dtoa_r+0xaec>
  81106c:	180490fa 	slli	r2,r3,3
  811070:	00c020b4 	movhi	r3,130
  811074:	18f06504 	addi	r3,r3,-15980
  811078:	1885883a 	add	r2,r3,r2
  81107c:	11000017 	ldw	r4,0(r2)
  811080:	11400117 	ldw	r5,4(r2)
  811084:	900d883a 	mov	r6,r18
  811088:	980f883a 	mov	r7,r19
  81108c:	0818b000 	call	818b00 <__gedf2>
  811090:	0082a70e 	bge	zero,r2,811b30 <_dtoa_r+0xd34>
  811094:	d9000517 	ldw	r4,20(sp)
  811098:	d8000d15 	stw	zero,52(sp)
  81109c:	213fffc4 	addi	r4,r4,-1
  8110a0:	d9000515 	stw	r4,20(sp)
  8110a4:	a463c83a 	sub	r17,r20,r17
  8110a8:	8dbfffc4 	addi	r22,r17,-1
  8110ac:	b0021916 	blt	r22,zero,811914 <_dtoa_r+0xb18>
  8110b0:	d8000815 	stw	zero,32(sp)
  8110b4:	d8800517 	ldw	r2,20(sp)
  8110b8:	10020e16 	blt	r2,zero,8118f4 <_dtoa_r+0xaf8>
  8110bc:	b0ad883a 	add	r22,r22,r2
  8110c0:	d8800a15 	stw	r2,40(sp)
  8110c4:	d8000915 	stw	zero,36(sp)
  8110c8:	d8c00317 	ldw	r3,12(sp)
  8110cc:	00800244 	movi	r2,9
  8110d0:	10c11a36 	bltu	r2,r3,81153c <_dtoa_r+0x740>
  8110d4:	00800144 	movi	r2,5
  8110d8:	10c4fc0e 	bge	r2,r3,8124cc <_dtoa_r+0x16d0>
  8110dc:	18ffff04 	addi	r3,r3,-4
  8110e0:	d8c00315 	stw	r3,12(sp)
  8110e4:	0029883a 	mov	r20,zero
  8110e8:	d9800317 	ldw	r6,12(sp)
  8110ec:	008000c4 	movi	r2,3
  8110f0:	3083bd26 	beq	r6,r2,811fe8 <_dtoa_r+0x11ec>
  8110f4:	1183670e 	bge	r2,r6,811e94 <_dtoa_r+0x1098>
  8110f8:	d8c00317 	ldw	r3,12(sp)
  8110fc:	00800104 	movi	r2,4
  811100:	1882e726 	beq	r3,r2,811ca0 <_dtoa_r+0xea4>
  811104:	00800144 	movi	r2,5
  811108:	1884f21e 	bne	r3,r2,8124d4 <_dtoa_r+0x16d8>
  81110c:	00800044 	movi	r2,1
  811110:	d8800b15 	stw	r2,44(sp)
  811114:	d8c02217 	ldw	r3,136(sp)
  811118:	d9000517 	ldw	r4,20(sp)
  81111c:	1907883a 	add	r3,r3,r4
  811120:	19800044 	addi	r6,r3,1
  811124:	d8c00c15 	stw	r3,48(sp)
  811128:	d9800615 	stw	r6,24(sp)
  81112c:	0183c30e 	bge	zero,r6,81203c <_dtoa_r+0x1240>
  811130:	d9800617 	ldw	r6,24(sp)
  811134:	3023883a 	mov	r17,r6
  811138:	80001115 	stw	zero,68(r16)
  81113c:	008005c4 	movi	r2,23
  811140:	1184f62e 	bgeu	r2,r6,81251c <_dtoa_r+0x1720>
  811144:	00c00044 	movi	r3,1
  811148:	00800104 	movi	r2,4
  81114c:	1085883a 	add	r2,r2,r2
  811150:	11000504 	addi	r4,r2,20
  811154:	180b883a 	mov	r5,r3
  811158:	18c00044 	addi	r3,r3,1
  81115c:	313ffb2e 	bgeu	r6,r4,81114c <__alt_data_end+0xff81114c>
  811160:	81401115 	stw	r5,68(r16)
  811164:	8009883a 	mov	r4,r16
  811168:	08134180 	call	813418 <_Balloc>
  81116c:	d8800715 	stw	r2,28(sp)
  811170:	80801015 	stw	r2,64(r16)
  811174:	00800384 	movi	r2,14
  811178:	1440fd36 	bltu	r2,r17,811570 <_dtoa_r+0x774>
  81117c:	a000fc26 	beq	r20,zero,811570 <_dtoa_r+0x774>
  811180:	d8800517 	ldw	r2,20(sp)
  811184:	0083b90e 	bge	zero,r2,81206c <_dtoa_r+0x1270>
  811188:	d8c00517 	ldw	r3,20(sp)
  81118c:	108003cc 	andi	r2,r2,15
  811190:	100490fa 	slli	r2,r2,3
  811194:	182fd13a 	srai	r23,r3,4
  811198:	00c020b4 	movhi	r3,130
  81119c:	18f06504 	addi	r3,r3,-15980
  8111a0:	1885883a 	add	r2,r3,r2
  8111a4:	b8c0040c 	andi	r3,r23,16
  8111a8:	12c00017 	ldw	r11,0(r2)
  8111ac:	12800117 	ldw	r10,4(r2)
  8111b0:	18039726 	beq	r3,zero,812010 <_dtoa_r+0x1214>
  8111b4:	008020b4 	movhi	r2,130
  8111b8:	10b05b04 	addi	r2,r2,-16020
  8111bc:	11800817 	ldw	r6,32(r2)
  8111c0:	11c00917 	ldw	r7,36(r2)
  8111c4:	9009883a 	mov	r4,r18
  8111c8:	980b883a 	mov	r5,r19
  8111cc:	da801615 	stw	r10,88(sp)
  8111d0:	dac01515 	stw	r11,84(sp)
  8111d4:	08181b00 	call	8181b0 <__divdf3>
  8111d8:	da801617 	ldw	r10,88(sp)
  8111dc:	dac01517 	ldw	r11,84(sp)
  8111e0:	bdc003cc 	andi	r23,r23,15
  8111e4:	044000c4 	movi	r17,3
  8111e8:	d8800e15 	stw	r2,56(sp)
  8111ec:	182b883a 	mov	r21,r3
  8111f0:	b8001126 	beq	r23,zero,811238 <_dtoa_r+0x43c>
  8111f4:	050020b4 	movhi	r20,130
  8111f8:	a5305b04 	addi	r20,r20,-16020
  8111fc:	5805883a 	mov	r2,r11
  811200:	5007883a 	mov	r3,r10
  811204:	b980004c 	andi	r6,r23,1
  811208:	1009883a 	mov	r4,r2
  81120c:	b82fd07a 	srai	r23,r23,1
  811210:	180b883a 	mov	r5,r3
  811214:	30000426 	beq	r6,zero,811228 <_dtoa_r+0x42c>
  811218:	a1800017 	ldw	r6,0(r20)
  81121c:	a1c00117 	ldw	r7,4(r20)
  811220:	8c400044 	addi	r17,r17,1
  811224:	0818cc00 	call	818cc0 <__muldf3>
  811228:	a5000204 	addi	r20,r20,8
  81122c:	b83ff51e 	bne	r23,zero,811204 <__alt_data_end+0xff811204>
  811230:	1017883a 	mov	r11,r2
  811234:	1815883a 	mov	r10,r3
  811238:	d9000e17 	ldw	r4,56(sp)
  81123c:	a80b883a 	mov	r5,r21
  811240:	580d883a 	mov	r6,r11
  811244:	500f883a 	mov	r7,r10
  811248:	08181b00 	call	8181b0 <__divdf3>
  81124c:	1029883a 	mov	r20,r2
  811250:	182b883a 	mov	r21,r3
  811254:	d9800d17 	ldw	r6,52(sp)
  811258:	30000626 	beq	r6,zero,811274 <_dtoa_r+0x478>
  81125c:	a009883a 	mov	r4,r20
  811260:	a80b883a 	mov	r5,r21
  811264:	000d883a 	mov	r6,zero
  811268:	01cffc34 	movhi	r7,16368
  81126c:	0818be00 	call	818be0 <__ledf2>
  811270:	10043216 	blt	r2,zero,81233c <_dtoa_r+0x1540>
  811274:	8809883a 	mov	r4,r17
  811278:	0819d3c0 	call	819d3c <__floatsidf>
  81127c:	1009883a 	mov	r4,r2
  811280:	180b883a 	mov	r5,r3
  811284:	a00d883a 	mov	r6,r20
  811288:	a80f883a 	mov	r7,r21
  81128c:	0818cc00 	call	818cc0 <__muldf3>
  811290:	000d883a 	mov	r6,zero
  811294:	1009883a 	mov	r4,r2
  811298:	180b883a 	mov	r5,r3
  81129c:	01d00734 	movhi	r7,16412
  8112a0:	08179140 	call	817914 <__adddf3>
  8112a4:	1023883a 	mov	r17,r2
  8112a8:	d9800617 	ldw	r6,24(sp)
  8112ac:	00bf3034 	movhi	r2,64704
  8112b0:	1885883a 	add	r2,r3,r2
  8112b4:	d8800e15 	stw	r2,56(sp)
  8112b8:	30032e26 	beq	r6,zero,811f74 <_dtoa_r+0x1178>
  8112bc:	d8c00517 	ldw	r3,20(sp)
  8112c0:	da800617 	ldw	r10,24(sp)
  8112c4:	d8c01215 	stw	r3,72(sp)
  8112c8:	d9000b17 	ldw	r4,44(sp)
  8112cc:	2003b026 	beq	r4,zero,812190 <_dtoa_r+0x1394>
  8112d0:	50bfffc4 	addi	r2,r10,-1
  8112d4:	100490fa 	slli	r2,r2,3
  8112d8:	00c020b4 	movhi	r3,130
  8112dc:	18f06504 	addi	r3,r3,-15980
  8112e0:	1885883a 	add	r2,r3,r2
  8112e4:	11800017 	ldw	r6,0(r2)
  8112e8:	11c00117 	ldw	r7,4(r2)
  8112ec:	d8800717 	ldw	r2,28(sp)
  8112f0:	0009883a 	mov	r4,zero
  8112f4:	014ff834 	movhi	r5,16352
  8112f8:	da801615 	stw	r10,88(sp)
  8112fc:	15c00044 	addi	r23,r2,1
  811300:	08181b00 	call	8181b0 <__divdf3>
  811304:	d9c00e17 	ldw	r7,56(sp)
  811308:	880d883a 	mov	r6,r17
  81130c:	1009883a 	mov	r4,r2
  811310:	180b883a 	mov	r5,r3
  811314:	08193e40 	call	8193e4 <__subdf3>
  811318:	a80b883a 	mov	r5,r21
  81131c:	a009883a 	mov	r4,r20
  811320:	d8c01015 	stw	r3,64(sp)
  811324:	d8800e15 	stw	r2,56(sp)
  811328:	0819cb40 	call	819cb4 <__fixdfsi>
  81132c:	1009883a 	mov	r4,r2
  811330:	d8801715 	stw	r2,92(sp)
  811334:	0819d3c0 	call	819d3c <__floatsidf>
  811338:	a009883a 	mov	r4,r20
  81133c:	a80b883a 	mov	r5,r21
  811340:	100d883a 	mov	r6,r2
  811344:	180f883a 	mov	r7,r3
  811348:	08193e40 	call	8193e4 <__subdf3>
  81134c:	da001717 	ldw	r8,92(sp)
  811350:	1829883a 	mov	r20,r3
  811354:	d8c00717 	ldw	r3,28(sp)
  811358:	d9000e17 	ldw	r4,56(sp)
  81135c:	d9401017 	ldw	r5,64(sp)
  811360:	42000c04 	addi	r8,r8,48
  811364:	1023883a 	mov	r17,r2
  811368:	1a000005 	stb	r8,0(r3)
  81136c:	880d883a 	mov	r6,r17
  811370:	a00f883a 	mov	r7,r20
  811374:	402b883a 	mov	r21,r8
  811378:	0818b000 	call	818b00 <__gedf2>
  81137c:	00844516 	blt	zero,r2,812494 <_dtoa_r+0x1698>
  811380:	0009883a 	mov	r4,zero
  811384:	014ffc34 	movhi	r5,16368
  811388:	880d883a 	mov	r6,r17
  81138c:	a00f883a 	mov	r7,r20
  811390:	08193e40 	call	8193e4 <__subdf3>
  811394:	d9000e17 	ldw	r4,56(sp)
  811398:	d9401017 	ldw	r5,64(sp)
  81139c:	100d883a 	mov	r6,r2
  8113a0:	180f883a 	mov	r7,r3
  8113a4:	0818b000 	call	818b00 <__gedf2>
  8113a8:	da801617 	ldw	r10,88(sp)
  8113ac:	00843616 	blt	zero,r2,812488 <_dtoa_r+0x168c>
  8113b0:	00800044 	movi	r2,1
  8113b4:	12806e0e 	bge	r2,r10,811570 <_dtoa_r+0x774>
  8113b8:	d9000717 	ldw	r4,28(sp)
  8113bc:	dd801315 	stw	r22,76(sp)
  8113c0:	dc001115 	stw	r16,68(sp)
  8113c4:	2295883a 	add	r10,r4,r10
  8113c8:	dcc01415 	stw	r19,80(sp)
  8113cc:	502d883a 	mov	r22,r10
  8113d0:	dcc01017 	ldw	r19,64(sp)
  8113d4:	b821883a 	mov	r16,r23
  8113d8:	dc801015 	stw	r18,64(sp)
  8113dc:	dc800e17 	ldw	r18,56(sp)
  8113e0:	00000906 	br	811408 <_dtoa_r+0x60c>
  8113e4:	08193e40 	call	8193e4 <__subdf3>
  8113e8:	1009883a 	mov	r4,r2
  8113ec:	180b883a 	mov	r5,r3
  8113f0:	900d883a 	mov	r6,r18
  8113f4:	980f883a 	mov	r7,r19
  8113f8:	0818be00 	call	818be0 <__ledf2>
  8113fc:	10040e16 	blt	r2,zero,812438 <_dtoa_r+0x163c>
  811400:	b821883a 	mov	r16,r23
  811404:	bd841026 	beq	r23,r22,812448 <_dtoa_r+0x164c>
  811408:	9009883a 	mov	r4,r18
  81140c:	980b883a 	mov	r5,r19
  811410:	000d883a 	mov	r6,zero
  811414:	01d00934 	movhi	r7,16420
  811418:	0818cc00 	call	818cc0 <__muldf3>
  81141c:	000d883a 	mov	r6,zero
  811420:	01d00934 	movhi	r7,16420
  811424:	8809883a 	mov	r4,r17
  811428:	a00b883a 	mov	r5,r20
  81142c:	1025883a 	mov	r18,r2
  811430:	1827883a 	mov	r19,r3
  811434:	0818cc00 	call	818cc0 <__muldf3>
  811438:	180b883a 	mov	r5,r3
  81143c:	1009883a 	mov	r4,r2
  811440:	1823883a 	mov	r17,r3
  811444:	1029883a 	mov	r20,r2
  811448:	0819cb40 	call	819cb4 <__fixdfsi>
  81144c:	1009883a 	mov	r4,r2
  811450:	102b883a 	mov	r21,r2
  811454:	0819d3c0 	call	819d3c <__floatsidf>
  811458:	a009883a 	mov	r4,r20
  81145c:	880b883a 	mov	r5,r17
  811460:	100d883a 	mov	r6,r2
  811464:	180f883a 	mov	r7,r3
  811468:	08193e40 	call	8193e4 <__subdf3>
  81146c:	ad400c04 	addi	r21,r21,48
  811470:	1009883a 	mov	r4,r2
  811474:	180b883a 	mov	r5,r3
  811478:	900d883a 	mov	r6,r18
  81147c:	980f883a 	mov	r7,r19
  811480:	85400005 	stb	r21,0(r16)
  811484:	1023883a 	mov	r17,r2
  811488:	1829883a 	mov	r20,r3
  81148c:	0818be00 	call	818be0 <__ledf2>
  811490:	bdc00044 	addi	r23,r23,1
  811494:	0009883a 	mov	r4,zero
  811498:	014ffc34 	movhi	r5,16368
  81149c:	880d883a 	mov	r6,r17
  8114a0:	a00f883a 	mov	r7,r20
  8114a4:	103fcf0e 	bge	r2,zero,8113e4 <__alt_data_end+0xff8113e4>
  8114a8:	d9801217 	ldw	r6,72(sp)
  8114ac:	dc001117 	ldw	r16,68(sp)
  8114b0:	d9800515 	stw	r6,20(sp)
  8114b4:	8009883a 	mov	r4,r16
  8114b8:	e00b883a 	mov	r5,fp
  8114bc:	08134c00 	call	8134c0 <_Bfree>
  8114c0:	d8c00517 	ldw	r3,20(sp)
  8114c4:	d9002317 	ldw	r4,140(sp)
  8114c8:	d9802517 	ldw	r6,148(sp)
  8114cc:	b8000005 	stb	zero,0(r23)
  8114d0:	18800044 	addi	r2,r3,1
  8114d4:	20800015 	stw	r2,0(r4)
  8114d8:	30027226 	beq	r6,zero,811ea4 <_dtoa_r+0x10a8>
  8114dc:	35c00015 	stw	r23,0(r6)
  8114e0:	d8800717 	ldw	r2,28(sp)
  8114e4:	003e7406 	br	810eb8 <__alt_data_end+0xff810eb8>
  8114e8:	00800434 	movhi	r2,16
  8114ec:	10bfffc4 	addi	r2,r2,-1
  8114f0:	a8aa703a 	and	r21,r21,r2
  8114f4:	a83e801e 	bne	r21,zero,810ef8 <__alt_data_end+0xff810ef8>
  8114f8:	008020b4 	movhi	r2,130
  8114fc:	10b04704 	addi	r2,r2,-16100
  811500:	003e7f06 	br	810f00 <__alt_data_end+0xff810f00>
  811504:	10c00204 	addi	r3,r2,8
  811508:	003e8206 	br	810f14 <__alt_data_end+0xff810f14>
  81150c:	01400434 	movhi	r5,16
  811510:	297fffc4 	addi	r5,r5,-1
  811514:	994a703a 	and	r5,r19,r5
  811518:	9009883a 	mov	r4,r18
  81151c:	8c7f0044 	addi	r17,r17,-1023
  811520:	294ffc34 	orhi	r5,r5,16368
  811524:	dd000217 	ldw	r20,8(sp)
  811528:	d8000f15 	stw	zero,60(sp)
  81152c:	003e9f06 	br	810fac <__alt_data_end+0xff810fac>
  811530:	008020b4 	movhi	r2,130
  811534:	10b03e04 	addi	r2,r2,-16136
  811538:	003e5f06 	br	810eb8 <__alt_data_end+0xff810eb8>
  81153c:	80001115 	stw	zero,68(r16)
  811540:	8009883a 	mov	r4,r16
  811544:	000b883a 	mov	r5,zero
  811548:	08134180 	call	813418 <_Balloc>
  81154c:	01bfffc4 	movi	r6,-1
  811550:	d8800715 	stw	r2,28(sp)
  811554:	80801015 	stw	r2,64(r16)
  811558:	00800044 	movi	r2,1
  81155c:	d9800c15 	stw	r6,48(sp)
  811560:	d8800b15 	stw	r2,44(sp)
  811564:	d9800615 	stw	r6,24(sp)
  811568:	d8002215 	stw	zero,136(sp)
  81156c:	d8000315 	stw	zero,12(sp)
  811570:	d8800117 	ldw	r2,4(sp)
  811574:	10008e16 	blt	r2,zero,8117b0 <_dtoa_r+0x9b4>
  811578:	d9000517 	ldw	r4,20(sp)
  81157c:	00c00384 	movi	r3,14
  811580:	19008b16 	blt	r3,r4,8117b0 <_dtoa_r+0x9b4>
  811584:	200490fa 	slli	r2,r4,3
  811588:	00c020b4 	movhi	r3,130
  81158c:	d9802217 	ldw	r6,136(sp)
  811590:	18f06504 	addi	r3,r3,-15980
  811594:	1885883a 	add	r2,r3,r2
  811598:	14400017 	ldw	r17,0(r2)
  81159c:	15000117 	ldw	r20,4(r2)
  8115a0:	3001c716 	blt	r6,zero,811cc0 <_dtoa_r+0xec4>
  8115a4:	880d883a 	mov	r6,r17
  8115a8:	a00f883a 	mov	r7,r20
  8115ac:	9009883a 	mov	r4,r18
  8115b0:	980b883a 	mov	r5,r19
  8115b4:	08181b00 	call	8181b0 <__divdf3>
  8115b8:	180b883a 	mov	r5,r3
  8115bc:	1009883a 	mov	r4,r2
  8115c0:	0819cb40 	call	819cb4 <__fixdfsi>
  8115c4:	1009883a 	mov	r4,r2
  8115c8:	102d883a 	mov	r22,r2
  8115cc:	0819d3c0 	call	819d3c <__floatsidf>
  8115d0:	1009883a 	mov	r4,r2
  8115d4:	180b883a 	mov	r5,r3
  8115d8:	880d883a 	mov	r6,r17
  8115dc:	a00f883a 	mov	r7,r20
  8115e0:	0818cc00 	call	818cc0 <__muldf3>
  8115e4:	9009883a 	mov	r4,r18
  8115e8:	980b883a 	mov	r5,r19
  8115ec:	100d883a 	mov	r6,r2
  8115f0:	180f883a 	mov	r7,r3
  8115f4:	08193e40 	call	8193e4 <__subdf3>
  8115f8:	d9000717 	ldw	r4,28(sp)
  8115fc:	d9800617 	ldw	r6,24(sp)
  811600:	180b883a 	mov	r5,r3
  811604:	b0c00c04 	addi	r3,r22,48
  811608:	20c00005 	stb	r3,0(r4)
  81160c:	25c00044 	addi	r23,r4,1
  811610:	01000044 	movi	r4,1
  811614:	1011883a 	mov	r8,r2
  811618:	2807883a 	mov	r3,r5
  81161c:	31003d26 	beq	r6,r4,811714 <_dtoa_r+0x918>
  811620:	000d883a 	mov	r6,zero
  811624:	01d00934 	movhi	r7,16420
  811628:	1009883a 	mov	r4,r2
  81162c:	0818cc00 	call	818cc0 <__muldf3>
  811630:	1009883a 	mov	r4,r2
  811634:	180b883a 	mov	r5,r3
  811638:	000d883a 	mov	r6,zero
  81163c:	000f883a 	mov	r7,zero
  811640:	1027883a 	mov	r19,r2
  811644:	182b883a 	mov	r21,r3
  811648:	0818a7c0 	call	818a7c <__eqdf2>
  81164c:	103f9926 	beq	r2,zero,8114b4 <__alt_data_end+0xff8114b4>
  811650:	d8c00617 	ldw	r3,24(sp)
  811654:	d9000717 	ldw	r4,28(sp)
  811658:	b825883a 	mov	r18,r23
  81165c:	18bfffc4 	addi	r2,r3,-1
  811660:	20ad883a 	add	r22,r4,r2
  811664:	dc000315 	stw	r16,12(sp)
  811668:	00000a06 	br	811694 <_dtoa_r+0x898>
  81166c:	0818cc00 	call	818cc0 <__muldf3>
  811670:	1009883a 	mov	r4,r2
  811674:	180b883a 	mov	r5,r3
  811678:	000d883a 	mov	r6,zero
  81167c:	000f883a 	mov	r7,zero
  811680:	1027883a 	mov	r19,r2
  811684:	182b883a 	mov	r21,r3
  811688:	b825883a 	mov	r18,r23
  81168c:	0818a7c0 	call	818a7c <__eqdf2>
  811690:	10022626 	beq	r2,zero,811f2c <_dtoa_r+0x1130>
  811694:	880d883a 	mov	r6,r17
  811698:	a00f883a 	mov	r7,r20
  81169c:	9809883a 	mov	r4,r19
  8116a0:	a80b883a 	mov	r5,r21
  8116a4:	08181b00 	call	8181b0 <__divdf3>
  8116a8:	180b883a 	mov	r5,r3
  8116ac:	1009883a 	mov	r4,r2
  8116b0:	0819cb40 	call	819cb4 <__fixdfsi>
  8116b4:	1009883a 	mov	r4,r2
  8116b8:	1021883a 	mov	r16,r2
  8116bc:	0819d3c0 	call	819d3c <__floatsidf>
  8116c0:	1009883a 	mov	r4,r2
  8116c4:	180b883a 	mov	r5,r3
  8116c8:	880d883a 	mov	r6,r17
  8116cc:	a00f883a 	mov	r7,r20
  8116d0:	0818cc00 	call	818cc0 <__muldf3>
  8116d4:	9809883a 	mov	r4,r19
  8116d8:	a80b883a 	mov	r5,r21
  8116dc:	100d883a 	mov	r6,r2
  8116e0:	180f883a 	mov	r7,r3
  8116e4:	08193e40 	call	8193e4 <__subdf3>
  8116e8:	82000c04 	addi	r8,r16,48
  8116ec:	92000005 	stb	r8,0(r18)
  8116f0:	1009883a 	mov	r4,r2
  8116f4:	180b883a 	mov	r5,r3
  8116f8:	000d883a 	mov	r6,zero
  8116fc:	01d00934 	movhi	r7,16420
  811700:	1011883a 	mov	r8,r2
  811704:	bdc00044 	addi	r23,r23,1
  811708:	95bfd81e 	bne	r18,r22,81166c <__alt_data_end+0xff81166c>
  81170c:	802d883a 	mov	r22,r16
  811710:	dc000317 	ldw	r16,12(sp)
  811714:	4009883a 	mov	r4,r8
  811718:	180b883a 	mov	r5,r3
  81171c:	400d883a 	mov	r6,r8
  811720:	180f883a 	mov	r7,r3
  811724:	08179140 	call	817914 <__adddf3>
  811728:	8809883a 	mov	r4,r17
  81172c:	a00b883a 	mov	r5,r20
  811730:	100d883a 	mov	r6,r2
  811734:	180f883a 	mov	r7,r3
  811738:	1027883a 	mov	r19,r2
  81173c:	1825883a 	mov	r18,r3
  811740:	0818be00 	call	818be0 <__ledf2>
  811744:	10000816 	blt	r2,zero,811768 <_dtoa_r+0x96c>
  811748:	8809883a 	mov	r4,r17
  81174c:	a00b883a 	mov	r5,r20
  811750:	980d883a 	mov	r6,r19
  811754:	900f883a 	mov	r7,r18
  811758:	0818a7c0 	call	818a7c <__eqdf2>
  81175c:	103f551e 	bne	r2,zero,8114b4 <__alt_data_end+0xff8114b4>
  811760:	b580004c 	andi	r22,r22,1
  811764:	b03f5326 	beq	r22,zero,8114b4 <__alt_data_end+0xff8114b4>
  811768:	bd7fffc3 	ldbu	r21,-1(r23)
  81176c:	b8bfffc4 	addi	r2,r23,-1
  811770:	1007883a 	mov	r3,r2
  811774:	01400e44 	movi	r5,57
  811778:	d9800717 	ldw	r6,28(sp)
  81177c:	00000506 	br	811794 <_dtoa_r+0x998>
  811780:	18ffffc4 	addi	r3,r3,-1
  811784:	30825e26 	beq	r6,r2,812100 <_dtoa_r+0x1304>
  811788:	1d400003 	ldbu	r21,0(r3)
  81178c:	102f883a 	mov	r23,r2
  811790:	10bfffc4 	addi	r2,r2,-1
  811794:	a9003fcc 	andi	r4,r21,255
  811798:	2100201c 	xori	r4,r4,128
  81179c:	213fe004 	addi	r4,r4,-128
  8117a0:	217ff726 	beq	r4,r5,811780 <__alt_data_end+0xff811780>
  8117a4:	aa000044 	addi	r8,r21,1
  8117a8:	12000005 	stb	r8,0(r2)
  8117ac:	003f4106 	br	8114b4 <__alt_data_end+0xff8114b4>
  8117b0:	d8c00b17 	ldw	r3,44(sp)
  8117b4:	18006726 	beq	r3,zero,811954 <_dtoa_r+0xb58>
  8117b8:	d9000317 	ldw	r4,12(sp)
  8117bc:	00c00044 	movi	r3,1
  8117c0:	19016a0e 	bge	r3,r4,811d6c <_dtoa_r+0xf70>
  8117c4:	d8800617 	ldw	r2,24(sp)
  8117c8:	d8c00917 	ldw	r3,36(sp)
  8117cc:	157fffc4 	addi	r21,r2,-1
  8117d0:	1d420716 	blt	r3,r21,811ff0 <_dtoa_r+0x11f4>
  8117d4:	1d6bc83a 	sub	r21,r3,r21
  8117d8:	d8800617 	ldw	r2,24(sp)
  8117dc:	1002c716 	blt	r2,zero,8122fc <_dtoa_r+0x1500>
  8117e0:	dd000817 	ldw	r20,32(sp)
  8117e4:	d8800617 	ldw	r2,24(sp)
  8117e8:	d9800817 	ldw	r6,32(sp)
  8117ec:	8009883a 	mov	r4,r16
  8117f0:	01400044 	movi	r5,1
  8117f4:	308d883a 	add	r6,r6,r2
  8117f8:	d9800815 	stw	r6,32(sp)
  8117fc:	b0ad883a 	add	r22,r22,r2
  811800:	08138240 	call	813824 <__i2b>
  811804:	1023883a 	mov	r17,r2
  811808:	a0000826 	beq	r20,zero,81182c <_dtoa_r+0xa30>
  81180c:	0580070e 	bge	zero,r22,81182c <_dtoa_r+0xa30>
  811810:	b005883a 	mov	r2,r22
  811814:	a5812016 	blt	r20,r22,811c98 <_dtoa_r+0xe9c>
  811818:	d8c00817 	ldw	r3,32(sp)
  81181c:	a0a9c83a 	sub	r20,r20,r2
  811820:	b0adc83a 	sub	r22,r22,r2
  811824:	1887c83a 	sub	r3,r3,r2
  811828:	d8c00815 	stw	r3,32(sp)
  81182c:	d9000917 	ldw	r4,36(sp)
  811830:	0100140e 	bge	zero,r4,811884 <_dtoa_r+0xa88>
  811834:	d9800b17 	ldw	r6,44(sp)
  811838:	3001e526 	beq	r6,zero,811fd0 <_dtoa_r+0x11d4>
  81183c:	05400e0e 	bge	zero,r21,811878 <_dtoa_r+0xa7c>
  811840:	880b883a 	mov	r5,r17
  811844:	8009883a 	mov	r4,r16
  811848:	a80d883a 	mov	r6,r21
  81184c:	0813a5c0 	call	813a5c <__pow5mult>
  811850:	e00d883a 	mov	r6,fp
  811854:	8009883a 	mov	r4,r16
  811858:	100b883a 	mov	r5,r2
  81185c:	1023883a 	mov	r17,r2
  811860:	08138600 	call	813860 <__multiply>
  811864:	102f883a 	mov	r23,r2
  811868:	e00b883a 	mov	r5,fp
  81186c:	8009883a 	mov	r4,r16
  811870:	08134c00 	call	8134c0 <_Bfree>
  811874:	b839883a 	mov	fp,r23
  811878:	d8800917 	ldw	r2,36(sp)
  81187c:	154dc83a 	sub	r6,r2,r21
  811880:	3001281e 	bne	r6,zero,811d24 <_dtoa_r+0xf28>
  811884:	05c00044 	movi	r23,1
  811888:	8009883a 	mov	r4,r16
  81188c:	b80b883a 	mov	r5,r23
  811890:	08138240 	call	813824 <__i2b>
  811894:	d8c00a17 	ldw	r3,40(sp)
  811898:	102b883a 	mov	r21,r2
  81189c:	00c0310e 	bge	zero,r3,811964 <_dtoa_r+0xb68>
  8118a0:	8009883a 	mov	r4,r16
  8118a4:	100b883a 	mov	r5,r2
  8118a8:	180d883a 	mov	r6,r3
  8118ac:	0813a5c0 	call	813a5c <__pow5mult>
  8118b0:	d9000317 	ldw	r4,12(sp)
  8118b4:	102b883a 	mov	r21,r2
  8118b8:	b9011f0e 	bge	r23,r4,811d38 <_dtoa_r+0xf3c>
  8118bc:	0027883a 	mov	r19,zero
  8118c0:	a8800417 	ldw	r2,16(r21)
  8118c4:	10800104 	addi	r2,r2,4
  8118c8:	1085883a 	add	r2,r2,r2
  8118cc:	1085883a 	add	r2,r2,r2
  8118d0:	a885883a 	add	r2,r21,r2
  8118d4:	11000017 	ldw	r4,0(r2)
  8118d8:	081370c0 	call	81370c <__hi0bits>
  8118dc:	00c00804 	movi	r3,32
  8118e0:	1885c83a 	sub	r2,r3,r2
  8118e4:	00002506 	br	81197c <_dtoa_r+0xb80>
  8118e8:	01800044 	movi	r6,1
  8118ec:	d9800d15 	stw	r6,52(sp)
  8118f0:	003dec06 	br	8110a4 <__alt_data_end+0xff8110a4>
  8118f4:	d8c00817 	ldw	r3,32(sp)
  8118f8:	d9000517 	ldw	r4,20(sp)
  8118fc:	d8000a15 	stw	zero,40(sp)
  811900:	1907c83a 	sub	r3,r3,r4
  811904:	010dc83a 	sub	r6,zero,r4
  811908:	d8c00815 	stw	r3,32(sp)
  81190c:	d9800915 	stw	r6,36(sp)
  811910:	003ded06 	br	8110c8 <__alt_data_end+0xff8110c8>
  811914:	05adc83a 	sub	r22,zero,r22
  811918:	dd800815 	stw	r22,32(sp)
  81191c:	002d883a 	mov	r22,zero
  811920:	003de406 	br	8110b4 <__alt_data_end+0xff8110b4>
  811924:	d9000517 	ldw	r4,20(sp)
  811928:	0819d3c0 	call	819d3c <__floatsidf>
  81192c:	1009883a 	mov	r4,r2
  811930:	180b883a 	mov	r5,r3
  811934:	b00d883a 	mov	r6,r22
  811938:	a80f883a 	mov	r7,r21
  81193c:	0818a7c0 	call	818a7c <__eqdf2>
  811940:	103dc726 	beq	r2,zero,811060 <__alt_data_end+0xff811060>
  811944:	d8800517 	ldw	r2,20(sp)
  811948:	10bfffc4 	addi	r2,r2,-1
  81194c:	d8800515 	stw	r2,20(sp)
  811950:	003dc306 	br	811060 <__alt_data_end+0xff811060>
  811954:	dd400917 	ldw	r21,36(sp)
  811958:	dd000817 	ldw	r20,32(sp)
  81195c:	0023883a 	mov	r17,zero
  811960:	003fa906 	br	811808 <__alt_data_end+0xff811808>
  811964:	d9800317 	ldw	r6,12(sp)
  811968:	b981670e 	bge	r23,r6,811f08 <_dtoa_r+0x110c>
  81196c:	0027883a 	mov	r19,zero
  811970:	d8c00a17 	ldw	r3,40(sp)
  811974:	183fd21e 	bne	r3,zero,8118c0 <__alt_data_end+0xff8118c0>
  811978:	00800044 	movi	r2,1
  81197c:	1585883a 	add	r2,r2,r22
  811980:	108007cc 	andi	r2,r2,31
  811984:	10005f26 	beq	r2,zero,811b04 <_dtoa_r+0xd08>
  811988:	00c00804 	movi	r3,32
  81198c:	1887c83a 	sub	r3,r3,r2
  811990:	01000104 	movi	r4,4
  811994:	20c2dd0e 	bge	r4,r3,81250c <_dtoa_r+0x1710>
  811998:	d9000817 	ldw	r4,32(sp)
  81199c:	00c00704 	movi	r3,28
  8119a0:	1885c83a 	sub	r2,r3,r2
  8119a4:	2089883a 	add	r4,r4,r2
  8119a8:	d9000815 	stw	r4,32(sp)
  8119ac:	a0a9883a 	add	r20,r20,r2
  8119b0:	b0ad883a 	add	r22,r22,r2
  8119b4:	d8800817 	ldw	r2,32(sp)
  8119b8:	0080050e 	bge	zero,r2,8119d0 <_dtoa_r+0xbd4>
  8119bc:	e00b883a 	mov	r5,fp
  8119c0:	8009883a 	mov	r4,r16
  8119c4:	100d883a 	mov	r6,r2
  8119c8:	0813b9c0 	call	813b9c <__lshift>
  8119cc:	1039883a 	mov	fp,r2
  8119d0:	0580050e 	bge	zero,r22,8119e8 <_dtoa_r+0xbec>
  8119d4:	a80b883a 	mov	r5,r21
  8119d8:	8009883a 	mov	r4,r16
  8119dc:	b00d883a 	mov	r6,r22
  8119e0:	0813b9c0 	call	813b9c <__lshift>
  8119e4:	102b883a 	mov	r21,r2
  8119e8:	d8c00d17 	ldw	r3,52(sp)
  8119ec:	1801161e 	bne	r3,zero,811e48 <_dtoa_r+0x104c>
  8119f0:	d8c00617 	ldw	r3,24(sp)
  8119f4:	00c12d0e 	bge	zero,r3,811eac <_dtoa_r+0x10b0>
  8119f8:	d8c00b17 	ldw	r3,44(sp)
  8119fc:	1800571e 	bne	r3,zero,811b5c <_dtoa_r+0xd60>
  811a00:	dc800717 	ldw	r18,28(sp)
  811a04:	dcc00617 	ldw	r19,24(sp)
  811a08:	9029883a 	mov	r20,r18
  811a0c:	00000206 	br	811a18 <_dtoa_r+0xc1c>
  811a10:	08134e80 	call	8134e8 <__multadd>
  811a14:	1039883a 	mov	fp,r2
  811a18:	e009883a 	mov	r4,fp
  811a1c:	a80b883a 	mov	r5,r21
  811a20:	0810bfc0 	call	810bfc <quorem>
  811a24:	10800c04 	addi	r2,r2,48
  811a28:	90800005 	stb	r2,0(r18)
  811a2c:	94800044 	addi	r18,r18,1
  811a30:	9507c83a 	sub	r3,r18,r20
  811a34:	8009883a 	mov	r4,r16
  811a38:	e00b883a 	mov	r5,fp
  811a3c:	01800284 	movi	r6,10
  811a40:	000f883a 	mov	r7,zero
  811a44:	1cfff216 	blt	r3,r19,811a10 <__alt_data_end+0xff811a10>
  811a48:	1011883a 	mov	r8,r2
  811a4c:	d8800617 	ldw	r2,24(sp)
  811a50:	00822e0e 	bge	zero,r2,81230c <_dtoa_r+0x1510>
  811a54:	d9000717 	ldw	r4,28(sp)
  811a58:	0025883a 	mov	r18,zero
  811a5c:	20af883a 	add	r23,r4,r2
  811a60:	e00b883a 	mov	r5,fp
  811a64:	01800044 	movi	r6,1
  811a68:	8009883a 	mov	r4,r16
  811a6c:	da001715 	stw	r8,92(sp)
  811a70:	0813b9c0 	call	813b9c <__lshift>
  811a74:	1009883a 	mov	r4,r2
  811a78:	a80b883a 	mov	r5,r21
  811a7c:	1039883a 	mov	fp,r2
  811a80:	0813cec0 	call	813cec <__mcmp>
  811a84:	da001717 	ldw	r8,92(sp)
  811a88:	00816e0e 	bge	zero,r2,812044 <_dtoa_r+0x1248>
  811a8c:	b93fffc3 	ldbu	r4,-1(r23)
  811a90:	b8bfffc4 	addi	r2,r23,-1
  811a94:	1007883a 	mov	r3,r2
  811a98:	01800e44 	movi	r6,57
  811a9c:	d9c00717 	ldw	r7,28(sp)
  811aa0:	00000506 	br	811ab8 <_dtoa_r+0xcbc>
  811aa4:	18ffffc4 	addi	r3,r3,-1
  811aa8:	38811926 	beq	r7,r2,811f10 <_dtoa_r+0x1114>
  811aac:	19000003 	ldbu	r4,0(r3)
  811ab0:	102f883a 	mov	r23,r2
  811ab4:	10bfffc4 	addi	r2,r2,-1
  811ab8:	21403fcc 	andi	r5,r4,255
  811abc:	2940201c 	xori	r5,r5,128
  811ac0:	297fe004 	addi	r5,r5,-128
  811ac4:	29bff726 	beq	r5,r6,811aa4 <__alt_data_end+0xff811aa4>
  811ac8:	21000044 	addi	r4,r4,1
  811acc:	11000005 	stb	r4,0(r2)
  811ad0:	8009883a 	mov	r4,r16
  811ad4:	a80b883a 	mov	r5,r21
  811ad8:	08134c00 	call	8134c0 <_Bfree>
  811adc:	883e7526 	beq	r17,zero,8114b4 <__alt_data_end+0xff8114b4>
  811ae0:	90000426 	beq	r18,zero,811af4 <_dtoa_r+0xcf8>
  811ae4:	94400326 	beq	r18,r17,811af4 <_dtoa_r+0xcf8>
  811ae8:	8009883a 	mov	r4,r16
  811aec:	900b883a 	mov	r5,r18
  811af0:	08134c00 	call	8134c0 <_Bfree>
  811af4:	8009883a 	mov	r4,r16
  811af8:	880b883a 	mov	r5,r17
  811afc:	08134c00 	call	8134c0 <_Bfree>
  811b00:	003e6c06 	br	8114b4 <__alt_data_end+0xff8114b4>
  811b04:	00800704 	movi	r2,28
  811b08:	d9800817 	ldw	r6,32(sp)
  811b0c:	a0a9883a 	add	r20,r20,r2
  811b10:	b0ad883a 	add	r22,r22,r2
  811b14:	308d883a 	add	r6,r6,r2
  811b18:	d9800815 	stw	r6,32(sp)
  811b1c:	003fa506 	br	8119b4 <__alt_data_end+0xff8119b4>
  811b20:	013efb84 	movi	r4,-1042
  811b24:	246bc83a 	sub	r21,r4,r17
  811b28:	9548983a 	sll	r4,r18,r21
  811b2c:	003d1806 	br	810f90 <__alt_data_end+0xff810f90>
  811b30:	d8000d15 	stw	zero,52(sp)
  811b34:	003d5b06 	br	8110a4 <__alt_data_end+0xff8110a4>
  811b38:	880b883a 	mov	r5,r17
  811b3c:	8009883a 	mov	r4,r16
  811b40:	01800284 	movi	r6,10
  811b44:	000f883a 	mov	r7,zero
  811b48:	08134e80 	call	8134e8 <__multadd>
  811b4c:	1023883a 	mov	r17,r2
  811b50:	d8800c17 	ldw	r2,48(sp)
  811b54:	0082550e 	bge	zero,r2,8124ac <_dtoa_r+0x16b0>
  811b58:	d8800615 	stw	r2,24(sp)
  811b5c:	0500050e 	bge	zero,r20,811b74 <_dtoa_r+0xd78>
  811b60:	880b883a 	mov	r5,r17
  811b64:	8009883a 	mov	r4,r16
  811b68:	a00d883a 	mov	r6,r20
  811b6c:	0813b9c0 	call	813b9c <__lshift>
  811b70:	1023883a 	mov	r17,r2
  811b74:	98016a1e 	bne	r19,zero,812120 <_dtoa_r+0x1324>
  811b78:	8829883a 	mov	r20,r17
  811b7c:	d9000617 	ldw	r4,24(sp)
  811b80:	dcc00717 	ldw	r19,28(sp)
  811b84:	9480004c 	andi	r18,r18,1
  811b88:	20bfffc4 	addi	r2,r4,-1
  811b8c:	9885883a 	add	r2,r19,r2
  811b90:	d8800415 	stw	r2,16(sp)
  811b94:	dc800615 	stw	r18,24(sp)
  811b98:	e009883a 	mov	r4,fp
  811b9c:	a80b883a 	mov	r5,r21
  811ba0:	0810bfc0 	call	810bfc <quorem>
  811ba4:	e009883a 	mov	r4,fp
  811ba8:	880b883a 	mov	r5,r17
  811bac:	102f883a 	mov	r23,r2
  811bb0:	0813cec0 	call	813cec <__mcmp>
  811bb4:	8009883a 	mov	r4,r16
  811bb8:	a80b883a 	mov	r5,r21
  811bbc:	a00d883a 	mov	r6,r20
  811bc0:	102d883a 	mov	r22,r2
  811bc4:	0813d4c0 	call	813d4c <__mdiff>
  811bc8:	1007883a 	mov	r3,r2
  811bcc:	10800317 	ldw	r2,12(r2)
  811bd0:	bc800c04 	addi	r18,r23,48
  811bd4:	1000971e 	bne	r2,zero,811e34 <_dtoa_r+0x1038>
  811bd8:	180b883a 	mov	r5,r3
  811bdc:	e009883a 	mov	r4,fp
  811be0:	d8c01515 	stw	r3,84(sp)
  811be4:	0813cec0 	call	813cec <__mcmp>
  811be8:	d8c01517 	ldw	r3,84(sp)
  811bec:	8009883a 	mov	r4,r16
  811bf0:	d8801515 	stw	r2,84(sp)
  811bf4:	180b883a 	mov	r5,r3
  811bf8:	08134c00 	call	8134c0 <_Bfree>
  811bfc:	d8801517 	ldw	r2,84(sp)
  811c00:	1000041e 	bne	r2,zero,811c14 <_dtoa_r+0xe18>
  811c04:	d9800317 	ldw	r6,12(sp)
  811c08:	3000021e 	bne	r6,zero,811c14 <_dtoa_r+0xe18>
  811c0c:	d8c00617 	ldw	r3,24(sp)
  811c10:	18007626 	beq	r3,zero,811dec <_dtoa_r+0xff0>
  811c14:	b0005b16 	blt	r22,zero,811d84 <_dtoa_r+0xf88>
  811c18:	b000041e 	bne	r22,zero,811c2c <_dtoa_r+0xe30>
  811c1c:	d9000317 	ldw	r4,12(sp)
  811c20:	2000021e 	bne	r4,zero,811c2c <_dtoa_r+0xe30>
  811c24:	d8c00617 	ldw	r3,24(sp)
  811c28:	18005626 	beq	r3,zero,811d84 <_dtoa_r+0xf88>
  811c2c:	00814d16 	blt	zero,r2,812164 <_dtoa_r+0x1368>
  811c30:	d8c00417 	ldw	r3,16(sp)
  811c34:	9d800044 	addi	r22,r19,1
  811c38:	9c800005 	stb	r18,0(r19)
  811c3c:	b02f883a 	mov	r23,r22
  811c40:	98c14c26 	beq	r19,r3,812174 <_dtoa_r+0x1378>
  811c44:	e00b883a 	mov	r5,fp
  811c48:	8009883a 	mov	r4,r16
  811c4c:	01800284 	movi	r6,10
  811c50:	000f883a 	mov	r7,zero
  811c54:	08134e80 	call	8134e8 <__multadd>
  811c58:	1039883a 	mov	fp,r2
  811c5c:	8d006d26 	beq	r17,r20,811e14 <_dtoa_r+0x1018>
  811c60:	880b883a 	mov	r5,r17
  811c64:	01800284 	movi	r6,10
  811c68:	000f883a 	mov	r7,zero
  811c6c:	8009883a 	mov	r4,r16
  811c70:	08134e80 	call	8134e8 <__multadd>
  811c74:	a00b883a 	mov	r5,r20
  811c78:	8009883a 	mov	r4,r16
  811c7c:	01800284 	movi	r6,10
  811c80:	000f883a 	mov	r7,zero
  811c84:	1023883a 	mov	r17,r2
  811c88:	08134e80 	call	8134e8 <__multadd>
  811c8c:	1029883a 	mov	r20,r2
  811c90:	b027883a 	mov	r19,r22
  811c94:	003fc006 	br	811b98 <__alt_data_end+0xff811b98>
  811c98:	a005883a 	mov	r2,r20
  811c9c:	003ede06 	br	811818 <__alt_data_end+0xff811818>
  811ca0:	01000044 	movi	r4,1
  811ca4:	d9000b15 	stw	r4,44(sp)
  811ca8:	d9802217 	ldw	r6,136(sp)
  811cac:	0180dc0e 	bge	zero,r6,812020 <_dtoa_r+0x1224>
  811cb0:	3023883a 	mov	r17,r6
  811cb4:	d9800c15 	stw	r6,48(sp)
  811cb8:	d9800615 	stw	r6,24(sp)
  811cbc:	003d1e06 	br	811138 <__alt_data_end+0xff811138>
  811cc0:	d8800617 	ldw	r2,24(sp)
  811cc4:	00be3716 	blt	zero,r2,8115a4 <__alt_data_end+0xff8115a4>
  811cc8:	1000be1e 	bne	r2,zero,811fc4 <_dtoa_r+0x11c8>
  811ccc:	8809883a 	mov	r4,r17
  811cd0:	a00b883a 	mov	r5,r20
  811cd4:	000d883a 	mov	r6,zero
  811cd8:	01d00534 	movhi	r7,16404
  811cdc:	0818cc00 	call	818cc0 <__muldf3>
  811ce0:	1009883a 	mov	r4,r2
  811ce4:	180b883a 	mov	r5,r3
  811ce8:	900d883a 	mov	r6,r18
  811cec:	980f883a 	mov	r7,r19
  811cf0:	0818b000 	call	818b00 <__gedf2>
  811cf4:	002b883a 	mov	r21,zero
  811cf8:	0023883a 	mov	r17,zero
  811cfc:	10007a16 	blt	r2,zero,811ee8 <_dtoa_r+0x10ec>
  811d00:	d9002217 	ldw	r4,136(sp)
  811d04:	ddc00717 	ldw	r23,28(sp)
  811d08:	0108303a 	nor	r4,zero,r4
  811d0c:	d9000515 	stw	r4,20(sp)
  811d10:	8009883a 	mov	r4,r16
  811d14:	a80b883a 	mov	r5,r21
  811d18:	08134c00 	call	8134c0 <_Bfree>
  811d1c:	883f751e 	bne	r17,zero,811af4 <__alt_data_end+0xff811af4>
  811d20:	003de406 	br	8114b4 <__alt_data_end+0xff8114b4>
  811d24:	e00b883a 	mov	r5,fp
  811d28:	8009883a 	mov	r4,r16
  811d2c:	0813a5c0 	call	813a5c <__pow5mult>
  811d30:	1039883a 	mov	fp,r2
  811d34:	003ed306 	br	811884 <__alt_data_end+0xff811884>
  811d38:	903ee01e 	bne	r18,zero,8118bc <__alt_data_end+0xff8118bc>
  811d3c:	00800434 	movhi	r2,16
  811d40:	10bfffc4 	addi	r2,r2,-1
  811d44:	9884703a 	and	r2,r19,r2
  811d48:	103f081e 	bne	r2,zero,81196c <__alt_data_end+0xff81196c>
  811d4c:	9cdffc2c 	andhi	r19,r19,32752
  811d50:	983f0626 	beq	r19,zero,81196c <__alt_data_end+0xff81196c>
  811d54:	d8800817 	ldw	r2,32(sp)
  811d58:	b5800044 	addi	r22,r22,1
  811d5c:	04c00044 	movi	r19,1
  811d60:	10800044 	addi	r2,r2,1
  811d64:	d8800815 	stw	r2,32(sp)
  811d68:	003f0106 	br	811970 <__alt_data_end+0xff811970>
  811d6c:	d9800f17 	ldw	r6,60(sp)
  811d70:	30016826 	beq	r6,zero,812314 <_dtoa_r+0x1518>
  811d74:	10810cc4 	addi	r2,r2,1075
  811d78:	dd400917 	ldw	r21,36(sp)
  811d7c:	dd000817 	ldw	r20,32(sp)
  811d80:	003e9906 	br	8117e8 <__alt_data_end+0xff8117e8>
  811d84:	9011883a 	mov	r8,r18
  811d88:	4007883a 	mov	r3,r8
  811d8c:	e02d883a 	mov	r22,fp
  811d90:	0080100e 	bge	zero,r2,811dd4 <_dtoa_r+0xfd8>
  811d94:	01800044 	movi	r6,1
  811d98:	8009883a 	mov	r4,r16
  811d9c:	e00b883a 	mov	r5,fp
  811da0:	da001515 	stw	r8,84(sp)
  811da4:	da001715 	stw	r8,92(sp)
  811da8:	0813b9c0 	call	813b9c <__lshift>
  811dac:	1009883a 	mov	r4,r2
  811db0:	a80b883a 	mov	r5,r21
  811db4:	102d883a 	mov	r22,r2
  811db8:	0813cec0 	call	813cec <__mcmp>
  811dbc:	d8c01517 	ldw	r3,84(sp)
  811dc0:	da001717 	ldw	r8,92(sp)
  811dc4:	0081a50e 	bge	zero,r2,81245c <_dtoa_r+0x1660>
  811dc8:	00800e44 	movi	r2,57
  811dcc:	40817b26 	beq	r8,r2,8123bc <_dtoa_r+0x15c0>
  811dd0:	40c00044 	addi	r3,r8,1
  811dd4:	8825883a 	mov	r18,r17
  811dd8:	9dc00044 	addi	r23,r19,1
  811ddc:	98c00005 	stb	r3,0(r19)
  811de0:	a023883a 	mov	r17,r20
  811de4:	b039883a 	mov	fp,r22
  811de8:	003f3906 	br	811ad0 <__alt_data_end+0xff811ad0>
  811dec:	00800e44 	movi	r2,57
  811df0:	9011883a 	mov	r8,r18
  811df4:	90817226 	beq	r18,r2,8123c0 <_dtoa_r+0x15c4>
  811df8:	0580010e 	bge	zero,r22,811e00 <_dtoa_r+0x1004>
  811dfc:	ba000c44 	addi	r8,r23,49
  811e00:	8825883a 	mov	r18,r17
  811e04:	9dc00044 	addi	r23,r19,1
  811e08:	9a000005 	stb	r8,0(r19)
  811e0c:	a023883a 	mov	r17,r20
  811e10:	003f2f06 	br	811ad0 <__alt_data_end+0xff811ad0>
  811e14:	880b883a 	mov	r5,r17
  811e18:	8009883a 	mov	r4,r16
  811e1c:	01800284 	movi	r6,10
  811e20:	000f883a 	mov	r7,zero
  811e24:	08134e80 	call	8134e8 <__multadd>
  811e28:	1023883a 	mov	r17,r2
  811e2c:	1029883a 	mov	r20,r2
  811e30:	003f9706 	br	811c90 <__alt_data_end+0xff811c90>
  811e34:	8009883a 	mov	r4,r16
  811e38:	180b883a 	mov	r5,r3
  811e3c:	08134c00 	call	8134c0 <_Bfree>
  811e40:	00800044 	movi	r2,1
  811e44:	003f7306 	br	811c14 <__alt_data_end+0xff811c14>
  811e48:	e009883a 	mov	r4,fp
  811e4c:	a80b883a 	mov	r5,r21
  811e50:	0813cec0 	call	813cec <__mcmp>
  811e54:	103ee60e 	bge	r2,zero,8119f0 <__alt_data_end+0xff8119f0>
  811e58:	8009883a 	mov	r4,r16
  811e5c:	e00b883a 	mov	r5,fp
  811e60:	01800284 	movi	r6,10
  811e64:	000f883a 	mov	r7,zero
  811e68:	08134e80 	call	8134e8 <__multadd>
  811e6c:	d9000517 	ldw	r4,20(sp)
  811e70:	d9800b17 	ldw	r6,44(sp)
  811e74:	1039883a 	mov	fp,r2
  811e78:	213fffc4 	addi	r4,r4,-1
  811e7c:	d9000515 	stw	r4,20(sp)
  811e80:	303f2d1e 	bne	r6,zero,811b38 <__alt_data_end+0xff811b38>
  811e84:	d9000c17 	ldw	r4,48(sp)
  811e88:	0101780e 	bge	zero,r4,81246c <_dtoa_r+0x1670>
  811e8c:	d9000615 	stw	r4,24(sp)
  811e90:	003edb06 	br	811a00 <__alt_data_end+0xff811a00>
  811e94:	00800084 	movi	r2,2
  811e98:	30818e1e 	bne	r6,r2,8124d4 <_dtoa_r+0x16d8>
  811e9c:	d8000b15 	stw	zero,44(sp)
  811ea0:	003f8106 	br	811ca8 <__alt_data_end+0xff811ca8>
  811ea4:	d8800717 	ldw	r2,28(sp)
  811ea8:	003c0306 	br	810eb8 <__alt_data_end+0xff810eb8>
  811eac:	d9000317 	ldw	r4,12(sp)
  811eb0:	00800084 	movi	r2,2
  811eb4:	113ed00e 	bge	r2,r4,8119f8 <__alt_data_end+0xff8119f8>
  811eb8:	d8c00617 	ldw	r3,24(sp)
  811ebc:	183f901e 	bne	r3,zero,811d00 <__alt_data_end+0xff811d00>
  811ec0:	a80b883a 	mov	r5,r21
  811ec4:	8009883a 	mov	r4,r16
  811ec8:	01800144 	movi	r6,5
  811ecc:	000f883a 	mov	r7,zero
  811ed0:	08134e80 	call	8134e8 <__multadd>
  811ed4:	e009883a 	mov	r4,fp
  811ed8:	100b883a 	mov	r5,r2
  811edc:	102b883a 	mov	r21,r2
  811ee0:	0813cec0 	call	813cec <__mcmp>
  811ee4:	00bf860e 	bge	zero,r2,811d00 <__alt_data_end+0xff811d00>
  811ee8:	d9800717 	ldw	r6,28(sp)
  811eec:	00800c44 	movi	r2,49
  811ef0:	30800005 	stb	r2,0(r6)
  811ef4:	d8800517 	ldw	r2,20(sp)
  811ef8:	35c00044 	addi	r23,r6,1
  811efc:	10800044 	addi	r2,r2,1
  811f00:	d8800515 	stw	r2,20(sp)
  811f04:	003f8206 	br	811d10 <__alt_data_end+0xff811d10>
  811f08:	903e981e 	bne	r18,zero,81196c <__alt_data_end+0xff81196c>
  811f0c:	003f8b06 	br	811d3c <__alt_data_end+0xff811d3c>
  811f10:	d9800517 	ldw	r6,20(sp)
  811f14:	d8c00717 	ldw	r3,28(sp)
  811f18:	00800c44 	movi	r2,49
  811f1c:	31800044 	addi	r6,r6,1
  811f20:	d9800515 	stw	r6,20(sp)
  811f24:	18800005 	stb	r2,0(r3)
  811f28:	003ee906 	br	811ad0 <__alt_data_end+0xff811ad0>
  811f2c:	dc000317 	ldw	r16,12(sp)
  811f30:	003d6006 	br	8114b4 <__alt_data_end+0xff8114b4>
  811f34:	8809883a 	mov	r4,r17
  811f38:	0819d3c0 	call	819d3c <__floatsidf>
  811f3c:	a009883a 	mov	r4,r20
  811f40:	a80b883a 	mov	r5,r21
  811f44:	100d883a 	mov	r6,r2
  811f48:	180f883a 	mov	r7,r3
  811f4c:	0818cc00 	call	818cc0 <__muldf3>
  811f50:	1009883a 	mov	r4,r2
  811f54:	180b883a 	mov	r5,r3
  811f58:	000d883a 	mov	r6,zero
  811f5c:	01d00734 	movhi	r7,16412
  811f60:	08179140 	call	817914 <__adddf3>
  811f64:	1023883a 	mov	r17,r2
  811f68:	00bf3034 	movhi	r2,64704
  811f6c:	1885883a 	add	r2,r3,r2
  811f70:	d8800e15 	stw	r2,56(sp)
  811f74:	a009883a 	mov	r4,r20
  811f78:	a80b883a 	mov	r5,r21
  811f7c:	000d883a 	mov	r6,zero
  811f80:	01d00534 	movhi	r7,16404
  811f84:	08193e40 	call	8193e4 <__subdf3>
  811f88:	d9c00e17 	ldw	r7,56(sp)
  811f8c:	1009883a 	mov	r4,r2
  811f90:	180b883a 	mov	r5,r3
  811f94:	880d883a 	mov	r6,r17
  811f98:	102b883a 	mov	r21,r2
  811f9c:	1829883a 	mov	r20,r3
  811fa0:	0818b000 	call	818b00 <__gedf2>
  811fa4:	00807716 	blt	zero,r2,812184 <_dtoa_r+0x1388>
  811fa8:	d8800e17 	ldw	r2,56(sp)
  811fac:	a809883a 	mov	r4,r21
  811fb0:	a00b883a 	mov	r5,r20
  811fb4:	11e0003c 	xorhi	r7,r2,32768
  811fb8:	880d883a 	mov	r6,r17
  811fbc:	0818be00 	call	818be0 <__ledf2>
  811fc0:	103d6b0e 	bge	r2,zero,811570 <__alt_data_end+0xff811570>
  811fc4:	002b883a 	mov	r21,zero
  811fc8:	0023883a 	mov	r17,zero
  811fcc:	003f4c06 	br	811d00 <__alt_data_end+0xff811d00>
  811fd0:	d9800917 	ldw	r6,36(sp)
  811fd4:	e00b883a 	mov	r5,fp
  811fd8:	8009883a 	mov	r4,r16
  811fdc:	0813a5c0 	call	813a5c <__pow5mult>
  811fe0:	1039883a 	mov	fp,r2
  811fe4:	003e2706 	br	811884 <__alt_data_end+0xff811884>
  811fe8:	d8000b15 	stw	zero,44(sp)
  811fec:	003c4906 	br	811114 <__alt_data_end+0xff811114>
  811ff0:	d9000917 	ldw	r4,36(sp)
  811ff4:	d9800a17 	ldw	r6,40(sp)
  811ff8:	dd400915 	stw	r21,36(sp)
  811ffc:	a905c83a 	sub	r2,r21,r4
  812000:	308d883a 	add	r6,r6,r2
  812004:	d9800a15 	stw	r6,40(sp)
  812008:	002b883a 	mov	r21,zero
  81200c:	003df206 	br	8117d8 <__alt_data_end+0xff8117d8>
  812010:	dc800e15 	stw	r18,56(sp)
  812014:	982b883a 	mov	r21,r19
  812018:	04400084 	movi	r17,2
  81201c:	003c7406 	br	8111f0 <__alt_data_end+0xff8111f0>
  812020:	04400044 	movi	r17,1
  812024:	dc400c15 	stw	r17,48(sp)
  812028:	dc400615 	stw	r17,24(sp)
  81202c:	dc402215 	stw	r17,136(sp)
  812030:	80001115 	stw	zero,68(r16)
  812034:	000b883a 	mov	r5,zero
  812038:	003c4a06 	br	811164 <__alt_data_end+0xff811164>
  81203c:	3023883a 	mov	r17,r6
  812040:	003ffb06 	br	812030 <__alt_data_end+0xff812030>
  812044:	1000021e 	bne	r2,zero,812050 <_dtoa_r+0x1254>
  812048:	4200004c 	andi	r8,r8,1
  81204c:	403e8f1e 	bne	r8,zero,811a8c <__alt_data_end+0xff811a8c>
  812050:	01000c04 	movi	r4,48
  812054:	00000106 	br	81205c <_dtoa_r+0x1260>
  812058:	102f883a 	mov	r23,r2
  81205c:	b8bfffc4 	addi	r2,r23,-1
  812060:	10c00007 	ldb	r3,0(r2)
  812064:	193ffc26 	beq	r3,r4,812058 <__alt_data_end+0xff812058>
  812068:	003e9906 	br	811ad0 <__alt_data_end+0xff811ad0>
  81206c:	d9000517 	ldw	r4,20(sp)
  812070:	012fc83a 	sub	r23,zero,r4
  812074:	b800ad26 	beq	r23,zero,81232c <_dtoa_r+0x1530>
  812078:	b88003cc 	andi	r2,r23,15
  81207c:	100490fa 	slli	r2,r2,3
  812080:	00c020b4 	movhi	r3,130
  812084:	18f06504 	addi	r3,r3,-15980
  812088:	1885883a 	add	r2,r3,r2
  81208c:	11800017 	ldw	r6,0(r2)
  812090:	11c00117 	ldw	r7,4(r2)
  812094:	b82fd13a 	srai	r23,r23,4
  812098:	9009883a 	mov	r4,r18
  81209c:	980b883a 	mov	r5,r19
  8120a0:	0818cc00 	call	818cc0 <__muldf3>
  8120a4:	1029883a 	mov	r20,r2
  8120a8:	182b883a 	mov	r21,r3
  8120ac:	b800f426 	beq	r23,zero,812480 <_dtoa_r+0x1684>
  8120b0:	020020b4 	movhi	r8,130
  8120b4:	42305b04 	addi	r8,r8,-16020
  8120b8:	8029883a 	mov	r20,r16
  8120bc:	04400084 	movi	r17,2
  8120c0:	4021883a 	mov	r16,r8
  8120c4:	b980004c 	andi	r6,r23,1
  8120c8:	1009883a 	mov	r4,r2
  8120cc:	b82fd07a 	srai	r23,r23,1
  8120d0:	180b883a 	mov	r5,r3
  8120d4:	30000426 	beq	r6,zero,8120e8 <_dtoa_r+0x12ec>
  8120d8:	81800017 	ldw	r6,0(r16)
  8120dc:	81c00117 	ldw	r7,4(r16)
  8120e0:	8c400044 	addi	r17,r17,1
  8120e4:	0818cc00 	call	818cc0 <__muldf3>
  8120e8:	84000204 	addi	r16,r16,8
  8120ec:	b83ff51e 	bne	r23,zero,8120c4 <__alt_data_end+0xff8120c4>
  8120f0:	a021883a 	mov	r16,r20
  8120f4:	182b883a 	mov	r21,r3
  8120f8:	1029883a 	mov	r20,r2
  8120fc:	003c5506 	br	811254 <__alt_data_end+0xff811254>
  812100:	d9800517 	ldw	r6,20(sp)
  812104:	d9000717 	ldw	r4,28(sp)
  812108:	00c00c04 	movi	r3,48
  81210c:	31800044 	addi	r6,r6,1
  812110:	d9800515 	stw	r6,20(sp)
  812114:	20c00005 	stb	r3,0(r4)
  812118:	02000c44 	movi	r8,49
  81211c:	003da206 	br	8117a8 <__alt_data_end+0xff8117a8>
  812120:	89400117 	ldw	r5,4(r17)
  812124:	8009883a 	mov	r4,r16
  812128:	08134180 	call	813418 <_Balloc>
  81212c:	89800417 	ldw	r6,16(r17)
  812130:	11000304 	addi	r4,r2,12
  812134:	89400304 	addi	r5,r17,12
  812138:	31800084 	addi	r6,r6,2
  81213c:	318d883a 	add	r6,r6,r6
  812140:	318d883a 	add	r6,r6,r6
  812144:	1027883a 	mov	r19,r2
  812148:	080d6d80 	call	80d6d8 <memcpy>
  81214c:	8009883a 	mov	r4,r16
  812150:	980b883a 	mov	r5,r19
  812154:	01800044 	movi	r6,1
  812158:	0813b9c0 	call	813b9c <__lshift>
  81215c:	1029883a 	mov	r20,r2
  812160:	003e8606 	br	811b7c <__alt_data_end+0xff811b7c>
  812164:	00800e44 	movi	r2,57
  812168:	90809526 	beq	r18,r2,8123c0 <_dtoa_r+0x15c4>
  81216c:	92000044 	addi	r8,r18,1
  812170:	003f2306 	br	811e00 <__alt_data_end+0xff811e00>
  812174:	9011883a 	mov	r8,r18
  812178:	8825883a 	mov	r18,r17
  81217c:	a023883a 	mov	r17,r20
  812180:	003e3706 	br	811a60 <__alt_data_end+0xff811a60>
  812184:	002b883a 	mov	r21,zero
  812188:	0023883a 	mov	r17,zero
  81218c:	003f5606 	br	811ee8 <__alt_data_end+0xff811ee8>
  812190:	51bfffc4 	addi	r6,r10,-1
  812194:	300490fa 	slli	r2,r6,3
  812198:	00c020b4 	movhi	r3,130
  81219c:	18f06504 	addi	r3,r3,-15980
  8121a0:	1885883a 	add	r2,r3,r2
  8121a4:	d9c00e17 	ldw	r7,56(sp)
  8121a8:	11000017 	ldw	r4,0(r2)
  8121ac:	11400117 	ldw	r5,4(r2)
  8121b0:	d8800717 	ldw	r2,28(sp)
  8121b4:	d9801015 	stw	r6,64(sp)
  8121b8:	880d883a 	mov	r6,r17
  8121bc:	da801615 	stw	r10,88(sp)
  8121c0:	15c00044 	addi	r23,r2,1
  8121c4:	0818cc00 	call	818cc0 <__muldf3>
  8121c8:	a80b883a 	mov	r5,r21
  8121cc:	a009883a 	mov	r4,r20
  8121d0:	d8c01115 	stw	r3,68(sp)
  8121d4:	d8800e15 	stw	r2,56(sp)
  8121d8:	0819cb40 	call	819cb4 <__fixdfsi>
  8121dc:	1009883a 	mov	r4,r2
  8121e0:	1023883a 	mov	r17,r2
  8121e4:	0819d3c0 	call	819d3c <__floatsidf>
  8121e8:	a009883a 	mov	r4,r20
  8121ec:	a80b883a 	mov	r5,r21
  8121f0:	100d883a 	mov	r6,r2
  8121f4:	180f883a 	mov	r7,r3
  8121f8:	08193e40 	call	8193e4 <__subdf3>
  8121fc:	1813883a 	mov	r9,r3
  812200:	d8c00717 	ldw	r3,28(sp)
  812204:	8c400c04 	addi	r17,r17,48
  812208:	1011883a 	mov	r8,r2
  81220c:	1c400005 	stb	r17,0(r3)
  812210:	da801617 	ldw	r10,88(sp)
  812214:	00800044 	movi	r2,1
  812218:	50802326 	beq	r10,r2,8122a8 <_dtoa_r+0x14ac>
  81221c:	d8800717 	ldw	r2,28(sp)
  812220:	b82b883a 	mov	r21,r23
  812224:	dc001315 	stw	r16,76(sp)
  812228:	12a9883a 	add	r20,r2,r10
  81222c:	4807883a 	mov	r3,r9
  812230:	4005883a 	mov	r2,r8
  812234:	dc801415 	stw	r18,80(sp)
  812238:	000d883a 	mov	r6,zero
  81223c:	01d00934 	movhi	r7,16420
  812240:	1009883a 	mov	r4,r2
  812244:	180b883a 	mov	r5,r3
  812248:	0818cc00 	call	818cc0 <__muldf3>
  81224c:	180b883a 	mov	r5,r3
  812250:	1009883a 	mov	r4,r2
  812254:	1821883a 	mov	r16,r3
  812258:	1025883a 	mov	r18,r2
  81225c:	0819cb40 	call	819cb4 <__fixdfsi>
  812260:	1009883a 	mov	r4,r2
  812264:	1023883a 	mov	r17,r2
  812268:	0819d3c0 	call	819d3c <__floatsidf>
  81226c:	9009883a 	mov	r4,r18
  812270:	800b883a 	mov	r5,r16
  812274:	100d883a 	mov	r6,r2
  812278:	180f883a 	mov	r7,r3
  81227c:	8c400c04 	addi	r17,r17,48
  812280:	08193e40 	call	8193e4 <__subdf3>
  812284:	ad400044 	addi	r21,r21,1
  812288:	ac7fffc5 	stb	r17,-1(r21)
  81228c:	ad3fea1e 	bne	r21,r20,812238 <__alt_data_end+0xff812238>
  812290:	1813883a 	mov	r9,r3
  812294:	d8c01017 	ldw	r3,64(sp)
  812298:	dc001317 	ldw	r16,76(sp)
  81229c:	dc801417 	ldw	r18,80(sp)
  8122a0:	1011883a 	mov	r8,r2
  8122a4:	b8ef883a 	add	r23,r23,r3
  8122a8:	d9000e17 	ldw	r4,56(sp)
  8122ac:	d9401117 	ldw	r5,68(sp)
  8122b0:	000d883a 	mov	r6,zero
  8122b4:	01cff834 	movhi	r7,16352
  8122b8:	da001715 	stw	r8,92(sp)
  8122bc:	da401515 	stw	r9,84(sp)
  8122c0:	08179140 	call	817914 <__adddf3>
  8122c4:	da001717 	ldw	r8,92(sp)
  8122c8:	da401517 	ldw	r9,84(sp)
  8122cc:	1009883a 	mov	r4,r2
  8122d0:	400d883a 	mov	r6,r8
  8122d4:	480f883a 	mov	r7,r9
  8122d8:	180b883a 	mov	r5,r3
  8122dc:	0818be00 	call	818be0 <__ledf2>
  8122e0:	da001717 	ldw	r8,92(sp)
  8122e4:	da401517 	ldw	r9,84(sp)
  8122e8:	10003b0e 	bge	r2,zero,8123d8 <_dtoa_r+0x15dc>
  8122ec:	d9001217 	ldw	r4,72(sp)
  8122f0:	bd7fffc3 	ldbu	r21,-1(r23)
  8122f4:	d9000515 	stw	r4,20(sp)
  8122f8:	003d1c06 	br	81176c <__alt_data_end+0xff81176c>
  8122fc:	d8c00817 	ldw	r3,32(sp)
  812300:	18a9c83a 	sub	r20,r3,r2
  812304:	0005883a 	mov	r2,zero
  812308:	003d3706 	br	8117e8 <__alt_data_end+0xff8117e8>
  81230c:	00800044 	movi	r2,1
  812310:	003dd006 	br	811a54 <__alt_data_end+0xff811a54>
  812314:	d8c00217 	ldw	r3,8(sp)
  812318:	00800d84 	movi	r2,54
  81231c:	dd400917 	ldw	r21,36(sp)
  812320:	10c5c83a 	sub	r2,r2,r3
  812324:	dd000817 	ldw	r20,32(sp)
  812328:	003d2f06 	br	8117e8 <__alt_data_end+0xff8117e8>
  81232c:	9029883a 	mov	r20,r18
  812330:	982b883a 	mov	r21,r19
  812334:	04400084 	movi	r17,2
  812338:	003bc606 	br	811254 <__alt_data_end+0xff811254>
  81233c:	d8800617 	ldw	r2,24(sp)
  812340:	103efc26 	beq	r2,zero,811f34 <__alt_data_end+0xff811f34>
  812344:	d8c00c17 	ldw	r3,48(sp)
  812348:	00fc890e 	bge	zero,r3,811570 <__alt_data_end+0xff811570>
  81234c:	a80b883a 	mov	r5,r21
  812350:	a009883a 	mov	r4,r20
  812354:	000d883a 	mov	r6,zero
  812358:	01d00934 	movhi	r7,16420
  81235c:	0818cc00 	call	818cc0 <__muldf3>
  812360:	89000044 	addi	r4,r17,1
  812364:	1029883a 	mov	r20,r2
  812368:	182b883a 	mov	r21,r3
  81236c:	0819d3c0 	call	819d3c <__floatsidf>
  812370:	a009883a 	mov	r4,r20
  812374:	a80b883a 	mov	r5,r21
  812378:	100d883a 	mov	r6,r2
  81237c:	180f883a 	mov	r7,r3
  812380:	0818cc00 	call	818cc0 <__muldf3>
  812384:	1009883a 	mov	r4,r2
  812388:	180b883a 	mov	r5,r3
  81238c:	000d883a 	mov	r6,zero
  812390:	01d00734 	movhi	r7,16412
  812394:	08179140 	call	817914 <__adddf3>
  812398:	d9000517 	ldw	r4,20(sp)
  81239c:	1023883a 	mov	r17,r2
  8123a0:	00bf3034 	movhi	r2,64704
  8123a4:	213fffc4 	addi	r4,r4,-1
  8123a8:	1885883a 	add	r2,r3,r2
  8123ac:	d9001215 	stw	r4,72(sp)
  8123b0:	d8800e15 	stw	r2,56(sp)
  8123b4:	da800c17 	ldw	r10,48(sp)
  8123b8:	003bc306 	br	8112c8 <__alt_data_end+0xff8112c8>
  8123bc:	b039883a 	mov	fp,r22
  8123c0:	01000e44 	movi	r4,57
  8123c4:	8825883a 	mov	r18,r17
  8123c8:	9dc00044 	addi	r23,r19,1
  8123cc:	99000005 	stb	r4,0(r19)
  8123d0:	a023883a 	mov	r17,r20
  8123d4:	003dae06 	br	811a90 <__alt_data_end+0xff811a90>
  8123d8:	d9800e17 	ldw	r6,56(sp)
  8123dc:	d9c01117 	ldw	r7,68(sp)
  8123e0:	0009883a 	mov	r4,zero
  8123e4:	014ff834 	movhi	r5,16352
  8123e8:	da001715 	stw	r8,92(sp)
  8123ec:	da401515 	stw	r9,84(sp)
  8123f0:	08193e40 	call	8193e4 <__subdf3>
  8123f4:	da001717 	ldw	r8,92(sp)
  8123f8:	da401517 	ldw	r9,84(sp)
  8123fc:	1009883a 	mov	r4,r2
  812400:	180b883a 	mov	r5,r3
  812404:	400d883a 	mov	r6,r8
  812408:	480f883a 	mov	r7,r9
  81240c:	0818b000 	call	818b00 <__gedf2>
  812410:	00bc570e 	bge	zero,r2,811570 <__alt_data_end+0xff811570>
  812414:	01000c04 	movi	r4,48
  812418:	00000106 	br	812420 <_dtoa_r+0x1624>
  81241c:	102f883a 	mov	r23,r2
  812420:	b8bfffc4 	addi	r2,r23,-1
  812424:	10c00007 	ldb	r3,0(r2)
  812428:	193ffc26 	beq	r3,r4,81241c <__alt_data_end+0xff81241c>
  81242c:	d9801217 	ldw	r6,72(sp)
  812430:	d9800515 	stw	r6,20(sp)
  812434:	003c1f06 	br	8114b4 <__alt_data_end+0xff8114b4>
  812438:	d8801217 	ldw	r2,72(sp)
  81243c:	dc001117 	ldw	r16,68(sp)
  812440:	d8800515 	stw	r2,20(sp)
  812444:	003cc906 	br	81176c <__alt_data_end+0xff81176c>
  812448:	dd801317 	ldw	r22,76(sp)
  81244c:	dc001117 	ldw	r16,68(sp)
  812450:	dcc01417 	ldw	r19,80(sp)
  812454:	dc801017 	ldw	r18,64(sp)
  812458:	003c4506 	br	811570 <__alt_data_end+0xff811570>
  81245c:	103e5d1e 	bne	r2,zero,811dd4 <__alt_data_end+0xff811dd4>
  812460:	4080004c 	andi	r2,r8,1
  812464:	103e5b26 	beq	r2,zero,811dd4 <__alt_data_end+0xff811dd4>
  812468:	003e5706 	br	811dc8 <__alt_data_end+0xff811dc8>
  81246c:	d8c00317 	ldw	r3,12(sp)
  812470:	00800084 	movi	r2,2
  812474:	10c00a16 	blt	r2,r3,8124a0 <_dtoa_r+0x16a4>
  812478:	d9000c17 	ldw	r4,48(sp)
  81247c:	003e8306 	br	811e8c <__alt_data_end+0xff811e8c>
  812480:	04400084 	movi	r17,2
  812484:	003b7306 	br	811254 <__alt_data_end+0xff811254>
  812488:	d9801217 	ldw	r6,72(sp)
  81248c:	d9800515 	stw	r6,20(sp)
  812490:	003cb606 	br	81176c <__alt_data_end+0xff81176c>
  812494:	d9001217 	ldw	r4,72(sp)
  812498:	d9000515 	stw	r4,20(sp)
  81249c:	003c0506 	br	8114b4 <__alt_data_end+0xff8114b4>
  8124a0:	d9800c17 	ldw	r6,48(sp)
  8124a4:	d9800615 	stw	r6,24(sp)
  8124a8:	003e8306 	br	811eb8 <__alt_data_end+0xff811eb8>
  8124ac:	d9800317 	ldw	r6,12(sp)
  8124b0:	00800084 	movi	r2,2
  8124b4:	11800216 	blt	r2,r6,8124c0 <_dtoa_r+0x16c4>
  8124b8:	d8800c17 	ldw	r2,48(sp)
  8124bc:	003da606 	br	811b58 <__alt_data_end+0xff811b58>
  8124c0:	d8800c17 	ldw	r2,48(sp)
  8124c4:	d8800615 	stw	r2,24(sp)
  8124c8:	003e7b06 	br	811eb8 <__alt_data_end+0xff811eb8>
  8124cc:	05000044 	movi	r20,1
  8124d0:	003b0506 	br	8110e8 <__alt_data_end+0xff8110e8>
  8124d4:	8009883a 	mov	r4,r16
  8124d8:	80001115 	stw	zero,68(r16)
  8124dc:	000b883a 	mov	r5,zero
  8124e0:	08134180 	call	813418 <_Balloc>
  8124e4:	d8800715 	stw	r2,28(sp)
  8124e8:	d8c00717 	ldw	r3,28(sp)
  8124ec:	00bfffc4 	movi	r2,-1
  8124f0:	01000044 	movi	r4,1
  8124f4:	d8800c15 	stw	r2,48(sp)
  8124f8:	80c01015 	stw	r3,64(r16)
  8124fc:	d9000b15 	stw	r4,44(sp)
  812500:	d8800615 	stw	r2,24(sp)
  812504:	d8002215 	stw	zero,136(sp)
  812508:	003c1906 	br	811570 <__alt_data_end+0xff811570>
  81250c:	193d2926 	beq	r3,r4,8119b4 <__alt_data_end+0xff8119b4>
  812510:	00c00f04 	movi	r3,60
  812514:	1885c83a 	sub	r2,r3,r2
  812518:	003d7b06 	br	811b08 <__alt_data_end+0xff811b08>
  81251c:	000b883a 	mov	r5,zero
  812520:	003b1006 	br	811164 <__alt_data_end+0xff811164>

00812524 <__sflush_r>:
  812524:	2880030b 	ldhu	r2,12(r5)
  812528:	defffb04 	addi	sp,sp,-20
  81252c:	dcc00315 	stw	r19,12(sp)
  812530:	dc400115 	stw	r17,4(sp)
  812534:	dfc00415 	stw	ra,16(sp)
  812538:	dc800215 	stw	r18,8(sp)
  81253c:	dc000015 	stw	r16,0(sp)
  812540:	10c0020c 	andi	r3,r2,8
  812544:	2823883a 	mov	r17,r5
  812548:	2027883a 	mov	r19,r4
  81254c:	1800311e 	bne	r3,zero,812614 <__sflush_r+0xf0>
  812550:	28c00117 	ldw	r3,4(r5)
  812554:	10820014 	ori	r2,r2,2048
  812558:	2880030d 	sth	r2,12(r5)
  81255c:	00c04b0e 	bge	zero,r3,81268c <__sflush_r+0x168>
  812560:	8a000a17 	ldw	r8,40(r17)
  812564:	40002326 	beq	r8,zero,8125f4 <__sflush_r+0xd0>
  812568:	9c000017 	ldw	r16,0(r19)
  81256c:	10c4000c 	andi	r3,r2,4096
  812570:	98000015 	stw	zero,0(r19)
  812574:	18004826 	beq	r3,zero,812698 <__sflush_r+0x174>
  812578:	89801417 	ldw	r6,80(r17)
  81257c:	10c0010c 	andi	r3,r2,4
  812580:	18000626 	beq	r3,zero,81259c <__sflush_r+0x78>
  812584:	88c00117 	ldw	r3,4(r17)
  812588:	88800c17 	ldw	r2,48(r17)
  81258c:	30cdc83a 	sub	r6,r6,r3
  812590:	10000226 	beq	r2,zero,81259c <__sflush_r+0x78>
  812594:	88800f17 	ldw	r2,60(r17)
  812598:	308dc83a 	sub	r6,r6,r2
  81259c:	89400717 	ldw	r5,28(r17)
  8125a0:	9809883a 	mov	r4,r19
  8125a4:	000f883a 	mov	r7,zero
  8125a8:	403ee83a 	callr	r8
  8125ac:	00ffffc4 	movi	r3,-1
  8125b0:	10c04426 	beq	r2,r3,8126c4 <__sflush_r+0x1a0>
  8125b4:	88c0030b 	ldhu	r3,12(r17)
  8125b8:	89000417 	ldw	r4,16(r17)
  8125bc:	88000115 	stw	zero,4(r17)
  8125c0:	197dffcc 	andi	r5,r3,63487
  8125c4:	8940030d 	sth	r5,12(r17)
  8125c8:	89000015 	stw	r4,0(r17)
  8125cc:	18c4000c 	andi	r3,r3,4096
  8125d0:	18002c1e 	bne	r3,zero,812684 <__sflush_r+0x160>
  8125d4:	89400c17 	ldw	r5,48(r17)
  8125d8:	9c000015 	stw	r16,0(r19)
  8125dc:	28000526 	beq	r5,zero,8125f4 <__sflush_r+0xd0>
  8125e0:	88801004 	addi	r2,r17,64
  8125e4:	28800226 	beq	r5,r2,8125f0 <__sflush_r+0xcc>
  8125e8:	9809883a 	mov	r4,r19
  8125ec:	0812d280 	call	812d28 <_free_r>
  8125f0:	88000c15 	stw	zero,48(r17)
  8125f4:	0005883a 	mov	r2,zero
  8125f8:	dfc00417 	ldw	ra,16(sp)
  8125fc:	dcc00317 	ldw	r19,12(sp)
  812600:	dc800217 	ldw	r18,8(sp)
  812604:	dc400117 	ldw	r17,4(sp)
  812608:	dc000017 	ldw	r16,0(sp)
  81260c:	dec00504 	addi	sp,sp,20
  812610:	f800283a 	ret
  812614:	2c800417 	ldw	r18,16(r5)
  812618:	903ff626 	beq	r18,zero,8125f4 <__alt_data_end+0xff8125f4>
  81261c:	2c000017 	ldw	r16,0(r5)
  812620:	108000cc 	andi	r2,r2,3
  812624:	2c800015 	stw	r18,0(r5)
  812628:	84a1c83a 	sub	r16,r16,r18
  81262c:	1000131e 	bne	r2,zero,81267c <__sflush_r+0x158>
  812630:	28800517 	ldw	r2,20(r5)
  812634:	88800215 	stw	r2,8(r17)
  812638:	04000316 	blt	zero,r16,812648 <__sflush_r+0x124>
  81263c:	003fed06 	br	8125f4 <__alt_data_end+0xff8125f4>
  812640:	90a5883a 	add	r18,r18,r2
  812644:	043feb0e 	bge	zero,r16,8125f4 <__alt_data_end+0xff8125f4>
  812648:	88800917 	ldw	r2,36(r17)
  81264c:	89400717 	ldw	r5,28(r17)
  812650:	800f883a 	mov	r7,r16
  812654:	900d883a 	mov	r6,r18
  812658:	9809883a 	mov	r4,r19
  81265c:	103ee83a 	callr	r2
  812660:	80a1c83a 	sub	r16,r16,r2
  812664:	00bff616 	blt	zero,r2,812640 <__alt_data_end+0xff812640>
  812668:	88c0030b 	ldhu	r3,12(r17)
  81266c:	00bfffc4 	movi	r2,-1
  812670:	18c01014 	ori	r3,r3,64
  812674:	88c0030d 	sth	r3,12(r17)
  812678:	003fdf06 	br	8125f8 <__alt_data_end+0xff8125f8>
  81267c:	0005883a 	mov	r2,zero
  812680:	003fec06 	br	812634 <__alt_data_end+0xff812634>
  812684:	88801415 	stw	r2,80(r17)
  812688:	003fd206 	br	8125d4 <__alt_data_end+0xff8125d4>
  81268c:	28c00f17 	ldw	r3,60(r5)
  812690:	00ffb316 	blt	zero,r3,812560 <__alt_data_end+0xff812560>
  812694:	003fd706 	br	8125f4 <__alt_data_end+0xff8125f4>
  812698:	89400717 	ldw	r5,28(r17)
  81269c:	000d883a 	mov	r6,zero
  8126a0:	9809883a 	mov	r4,r19
  8126a4:	01c00044 	movi	r7,1
  8126a8:	403ee83a 	callr	r8
  8126ac:	100d883a 	mov	r6,r2
  8126b0:	00bfffc4 	movi	r2,-1
  8126b4:	30801426 	beq	r6,r2,812708 <__sflush_r+0x1e4>
  8126b8:	8880030b 	ldhu	r2,12(r17)
  8126bc:	8a000a17 	ldw	r8,40(r17)
  8126c0:	003fae06 	br	81257c <__alt_data_end+0xff81257c>
  8126c4:	98c00017 	ldw	r3,0(r19)
  8126c8:	183fba26 	beq	r3,zero,8125b4 <__alt_data_end+0xff8125b4>
  8126cc:	01000744 	movi	r4,29
  8126d0:	19000626 	beq	r3,r4,8126ec <__sflush_r+0x1c8>
  8126d4:	01000584 	movi	r4,22
  8126d8:	19000426 	beq	r3,r4,8126ec <__sflush_r+0x1c8>
  8126dc:	88c0030b 	ldhu	r3,12(r17)
  8126e0:	18c01014 	ori	r3,r3,64
  8126e4:	88c0030d 	sth	r3,12(r17)
  8126e8:	003fc306 	br	8125f8 <__alt_data_end+0xff8125f8>
  8126ec:	8880030b 	ldhu	r2,12(r17)
  8126f0:	88c00417 	ldw	r3,16(r17)
  8126f4:	88000115 	stw	zero,4(r17)
  8126f8:	10bdffcc 	andi	r2,r2,63487
  8126fc:	8880030d 	sth	r2,12(r17)
  812700:	88c00015 	stw	r3,0(r17)
  812704:	003fb306 	br	8125d4 <__alt_data_end+0xff8125d4>
  812708:	98800017 	ldw	r2,0(r19)
  81270c:	103fea26 	beq	r2,zero,8126b8 <__alt_data_end+0xff8126b8>
  812710:	00c00744 	movi	r3,29
  812714:	10c00226 	beq	r2,r3,812720 <__sflush_r+0x1fc>
  812718:	00c00584 	movi	r3,22
  81271c:	10ffd21e 	bne	r2,r3,812668 <__alt_data_end+0xff812668>
  812720:	9c000015 	stw	r16,0(r19)
  812724:	0005883a 	mov	r2,zero
  812728:	003fb306 	br	8125f8 <__alt_data_end+0xff8125f8>

0081272c <_fflush_r>:
  81272c:	defffd04 	addi	sp,sp,-12
  812730:	dc000115 	stw	r16,4(sp)
  812734:	dfc00215 	stw	ra,8(sp)
  812738:	2021883a 	mov	r16,r4
  81273c:	20000226 	beq	r4,zero,812748 <_fflush_r+0x1c>
  812740:	20800e17 	ldw	r2,56(r4)
  812744:	10000c26 	beq	r2,zero,812778 <_fflush_r+0x4c>
  812748:	2880030f 	ldh	r2,12(r5)
  81274c:	1000051e 	bne	r2,zero,812764 <_fflush_r+0x38>
  812750:	0005883a 	mov	r2,zero
  812754:	dfc00217 	ldw	ra,8(sp)
  812758:	dc000117 	ldw	r16,4(sp)
  81275c:	dec00304 	addi	sp,sp,12
  812760:	f800283a 	ret
  812764:	8009883a 	mov	r4,r16
  812768:	dfc00217 	ldw	ra,8(sp)
  81276c:	dc000117 	ldw	r16,4(sp)
  812770:	dec00304 	addi	sp,sp,12
  812774:	08125241 	jmpi	812524 <__sflush_r>
  812778:	d9400015 	stw	r5,0(sp)
  81277c:	0812b080 	call	812b08 <__sinit>
  812780:	d9400017 	ldw	r5,0(sp)
  812784:	003ff006 	br	812748 <__alt_data_end+0xff812748>

00812788 <fflush>:
  812788:	20000526 	beq	r4,zero,8127a0 <fflush+0x18>
  81278c:	008020b4 	movhi	r2,130
  812790:	10b83f04 	addi	r2,r2,-7940
  812794:	200b883a 	mov	r5,r4
  812798:	11000017 	ldw	r4,0(r2)
  81279c:	081272c1 	jmpi	81272c <_fflush_r>
  8127a0:	008020b4 	movhi	r2,130
  8127a4:	10b83e04 	addi	r2,r2,-7944
  8127a8:	11000017 	ldw	r4,0(r2)
  8127ac:	01402074 	movhi	r5,129
  8127b0:	2949cb04 	addi	r5,r5,10028
  8127b4:	08130dc1 	jmpi	8130dc <_fwalk_reent>

008127b8 <__fp_lock>:
  8127b8:	0005883a 	mov	r2,zero
  8127bc:	f800283a 	ret

008127c0 <__fp_unlock>:
  8127c0:	0005883a 	mov	r2,zero
  8127c4:	f800283a 	ret

008127c8 <_cleanup_r>:
  8127c8:	01402074 	movhi	r5,129
  8127cc:	29575d04 	addi	r5,r5,23924
  8127d0:	08130dc1 	jmpi	8130dc <_fwalk_reent>

008127d4 <__sinit.part.1>:
  8127d4:	defff704 	addi	sp,sp,-36
  8127d8:	00c02074 	movhi	r3,129
  8127dc:	dfc00815 	stw	ra,32(sp)
  8127e0:	ddc00715 	stw	r23,28(sp)
  8127e4:	dd800615 	stw	r22,24(sp)
  8127e8:	dd400515 	stw	r21,20(sp)
  8127ec:	dd000415 	stw	r20,16(sp)
  8127f0:	dcc00315 	stw	r19,12(sp)
  8127f4:	dc800215 	stw	r18,8(sp)
  8127f8:	dc400115 	stw	r17,4(sp)
  8127fc:	dc000015 	stw	r16,0(sp)
  812800:	18c9f204 	addi	r3,r3,10184
  812804:	24000117 	ldw	r16,4(r4)
  812808:	20c00f15 	stw	r3,60(r4)
  81280c:	2080bb04 	addi	r2,r4,748
  812810:	00c000c4 	movi	r3,3
  812814:	20c0b915 	stw	r3,740(r4)
  812818:	2080ba15 	stw	r2,744(r4)
  81281c:	2000b815 	stw	zero,736(r4)
  812820:	05c00204 	movi	r23,8
  812824:	00800104 	movi	r2,4
  812828:	2025883a 	mov	r18,r4
  81282c:	b80d883a 	mov	r6,r23
  812830:	81001704 	addi	r4,r16,92
  812834:	000b883a 	mov	r5,zero
  812838:	80000015 	stw	zero,0(r16)
  81283c:	80000115 	stw	zero,4(r16)
  812840:	80000215 	stw	zero,8(r16)
  812844:	8080030d 	sth	r2,12(r16)
  812848:	80001915 	stw	zero,100(r16)
  81284c:	8000038d 	sth	zero,14(r16)
  812850:	80000415 	stw	zero,16(r16)
  812854:	80000515 	stw	zero,20(r16)
  812858:	80000615 	stw	zero,24(r16)
  81285c:	080d8100 	call	80d810 <memset>
  812860:	05802074 	movhi	r22,129
  812864:	94400217 	ldw	r17,8(r18)
  812868:	05402074 	movhi	r21,129
  81286c:	05002074 	movhi	r20,129
  812870:	04c02074 	movhi	r19,129
  812874:	b5b71f04 	addi	r22,r22,-9092
  812878:	ad773604 	addi	r21,r21,-9000
  81287c:	a5375504 	addi	r20,r20,-8876
  812880:	9cf76c04 	addi	r19,r19,-8784
  812884:	85800815 	stw	r22,32(r16)
  812888:	85400915 	stw	r21,36(r16)
  81288c:	85000a15 	stw	r20,40(r16)
  812890:	84c00b15 	stw	r19,44(r16)
  812894:	84000715 	stw	r16,28(r16)
  812898:	00800284 	movi	r2,10
  81289c:	8880030d 	sth	r2,12(r17)
  8128a0:	00800044 	movi	r2,1
  8128a4:	89001704 	addi	r4,r17,92
  8128a8:	b80d883a 	mov	r6,r23
  8128ac:	000b883a 	mov	r5,zero
  8128b0:	88000015 	stw	zero,0(r17)
  8128b4:	88000115 	stw	zero,4(r17)
  8128b8:	88000215 	stw	zero,8(r17)
  8128bc:	88001915 	stw	zero,100(r17)
  8128c0:	8880038d 	sth	r2,14(r17)
  8128c4:	88000415 	stw	zero,16(r17)
  8128c8:	88000515 	stw	zero,20(r17)
  8128cc:	88000615 	stw	zero,24(r17)
  8128d0:	080d8100 	call	80d810 <memset>
  8128d4:	94000317 	ldw	r16,12(r18)
  8128d8:	00800484 	movi	r2,18
  8128dc:	8c400715 	stw	r17,28(r17)
  8128e0:	8d800815 	stw	r22,32(r17)
  8128e4:	8d400915 	stw	r21,36(r17)
  8128e8:	8d000a15 	stw	r20,40(r17)
  8128ec:	8cc00b15 	stw	r19,44(r17)
  8128f0:	8080030d 	sth	r2,12(r16)
  8128f4:	00800084 	movi	r2,2
  8128f8:	80000015 	stw	zero,0(r16)
  8128fc:	80000115 	stw	zero,4(r16)
  812900:	80000215 	stw	zero,8(r16)
  812904:	80001915 	stw	zero,100(r16)
  812908:	8080038d 	sth	r2,14(r16)
  81290c:	80000415 	stw	zero,16(r16)
  812910:	80000515 	stw	zero,20(r16)
  812914:	80000615 	stw	zero,24(r16)
  812918:	81001704 	addi	r4,r16,92
  81291c:	000b883a 	mov	r5,zero
  812920:	b80d883a 	mov	r6,r23
  812924:	080d8100 	call	80d810 <memset>
  812928:	00800044 	movi	r2,1
  81292c:	84000715 	stw	r16,28(r16)
  812930:	85800815 	stw	r22,32(r16)
  812934:	85400915 	stw	r21,36(r16)
  812938:	85000a15 	stw	r20,40(r16)
  81293c:	84c00b15 	stw	r19,44(r16)
  812940:	90800e15 	stw	r2,56(r18)
  812944:	dfc00817 	ldw	ra,32(sp)
  812948:	ddc00717 	ldw	r23,28(sp)
  81294c:	dd800617 	ldw	r22,24(sp)
  812950:	dd400517 	ldw	r21,20(sp)
  812954:	dd000417 	ldw	r20,16(sp)
  812958:	dcc00317 	ldw	r19,12(sp)
  81295c:	dc800217 	ldw	r18,8(sp)
  812960:	dc400117 	ldw	r17,4(sp)
  812964:	dc000017 	ldw	r16,0(sp)
  812968:	dec00904 	addi	sp,sp,36
  81296c:	f800283a 	ret

00812970 <__sfmoreglue>:
  812970:	defffc04 	addi	sp,sp,-16
  812974:	dc400115 	stw	r17,4(sp)
  812978:	2c7fffc4 	addi	r17,r5,-1
  81297c:	8c401a24 	muli	r17,r17,104
  812980:	dc800215 	stw	r18,8(sp)
  812984:	2825883a 	mov	r18,r5
  812988:	89401d04 	addi	r5,r17,116
  81298c:	dc000015 	stw	r16,0(sp)
  812990:	dfc00315 	stw	ra,12(sp)
  812994:	080cf300 	call	80cf30 <_malloc_r>
  812998:	1021883a 	mov	r16,r2
  81299c:	10000726 	beq	r2,zero,8129bc <__sfmoreglue+0x4c>
  8129a0:	11000304 	addi	r4,r2,12
  8129a4:	10000015 	stw	zero,0(r2)
  8129a8:	14800115 	stw	r18,4(r2)
  8129ac:	11000215 	stw	r4,8(r2)
  8129b0:	000b883a 	mov	r5,zero
  8129b4:	89801a04 	addi	r6,r17,104
  8129b8:	080d8100 	call	80d810 <memset>
  8129bc:	8005883a 	mov	r2,r16
  8129c0:	dfc00317 	ldw	ra,12(sp)
  8129c4:	dc800217 	ldw	r18,8(sp)
  8129c8:	dc400117 	ldw	r17,4(sp)
  8129cc:	dc000017 	ldw	r16,0(sp)
  8129d0:	dec00404 	addi	sp,sp,16
  8129d4:	f800283a 	ret

008129d8 <__sfp>:
  8129d8:	008020b4 	movhi	r2,130
  8129dc:	defffb04 	addi	sp,sp,-20
  8129e0:	10b83e04 	addi	r2,r2,-7944
  8129e4:	dc800215 	stw	r18,8(sp)
  8129e8:	14800017 	ldw	r18,0(r2)
  8129ec:	dcc00315 	stw	r19,12(sp)
  8129f0:	dfc00415 	stw	ra,16(sp)
  8129f4:	90800e17 	ldw	r2,56(r18)
  8129f8:	dc400115 	stw	r17,4(sp)
  8129fc:	dc000015 	stw	r16,0(sp)
  812a00:	2027883a 	mov	r19,r4
  812a04:	1000021e 	bne	r2,zero,812a10 <__sfp+0x38>
  812a08:	9009883a 	mov	r4,r18
  812a0c:	08127d40 	call	8127d4 <__sinit.part.1>
  812a10:	9480b804 	addi	r18,r18,736
  812a14:	047fffc4 	movi	r17,-1
  812a18:	91400117 	ldw	r5,4(r18)
  812a1c:	94000217 	ldw	r16,8(r18)
  812a20:	297fffc4 	addi	r5,r5,-1
  812a24:	28000a16 	blt	r5,zero,812a50 <__sfp+0x78>
  812a28:	8080030f 	ldh	r2,12(r16)
  812a2c:	10000c26 	beq	r2,zero,812a60 <__sfp+0x88>
  812a30:	80c01d04 	addi	r3,r16,116
  812a34:	00000206 	br	812a40 <__sfp+0x68>
  812a38:	18bfe60f 	ldh	r2,-104(r3)
  812a3c:	10000826 	beq	r2,zero,812a60 <__sfp+0x88>
  812a40:	297fffc4 	addi	r5,r5,-1
  812a44:	1c3ffd04 	addi	r16,r3,-12
  812a48:	18c01a04 	addi	r3,r3,104
  812a4c:	2c7ffa1e 	bne	r5,r17,812a38 <__alt_data_end+0xff812a38>
  812a50:	90800017 	ldw	r2,0(r18)
  812a54:	10001d26 	beq	r2,zero,812acc <__sfp+0xf4>
  812a58:	1025883a 	mov	r18,r2
  812a5c:	003fee06 	br	812a18 <__alt_data_end+0xff812a18>
  812a60:	00bfffc4 	movi	r2,-1
  812a64:	8080038d 	sth	r2,14(r16)
  812a68:	00800044 	movi	r2,1
  812a6c:	8080030d 	sth	r2,12(r16)
  812a70:	80001915 	stw	zero,100(r16)
  812a74:	80000015 	stw	zero,0(r16)
  812a78:	80000215 	stw	zero,8(r16)
  812a7c:	80000115 	stw	zero,4(r16)
  812a80:	80000415 	stw	zero,16(r16)
  812a84:	80000515 	stw	zero,20(r16)
  812a88:	80000615 	stw	zero,24(r16)
  812a8c:	81001704 	addi	r4,r16,92
  812a90:	000b883a 	mov	r5,zero
  812a94:	01800204 	movi	r6,8
  812a98:	080d8100 	call	80d810 <memset>
  812a9c:	8005883a 	mov	r2,r16
  812aa0:	80000c15 	stw	zero,48(r16)
  812aa4:	80000d15 	stw	zero,52(r16)
  812aa8:	80001115 	stw	zero,68(r16)
  812aac:	80001215 	stw	zero,72(r16)
  812ab0:	dfc00417 	ldw	ra,16(sp)
  812ab4:	dcc00317 	ldw	r19,12(sp)
  812ab8:	dc800217 	ldw	r18,8(sp)
  812abc:	dc400117 	ldw	r17,4(sp)
  812ac0:	dc000017 	ldw	r16,0(sp)
  812ac4:	dec00504 	addi	sp,sp,20
  812ac8:	f800283a 	ret
  812acc:	9809883a 	mov	r4,r19
  812ad0:	01400104 	movi	r5,4
  812ad4:	08129700 	call	812970 <__sfmoreglue>
  812ad8:	90800015 	stw	r2,0(r18)
  812adc:	103fde1e 	bne	r2,zero,812a58 <__alt_data_end+0xff812a58>
  812ae0:	00800304 	movi	r2,12
  812ae4:	98800015 	stw	r2,0(r19)
  812ae8:	0005883a 	mov	r2,zero
  812aec:	003ff006 	br	812ab0 <__alt_data_end+0xff812ab0>

00812af0 <_cleanup>:
  812af0:	008020b4 	movhi	r2,130
  812af4:	10b83e04 	addi	r2,r2,-7944
  812af8:	11000017 	ldw	r4,0(r2)
  812afc:	01402074 	movhi	r5,129
  812b00:	29575d04 	addi	r5,r5,23924
  812b04:	08130dc1 	jmpi	8130dc <_fwalk_reent>

00812b08 <__sinit>:
  812b08:	20800e17 	ldw	r2,56(r4)
  812b0c:	10000126 	beq	r2,zero,812b14 <__sinit+0xc>
  812b10:	f800283a 	ret
  812b14:	08127d41 	jmpi	8127d4 <__sinit.part.1>

00812b18 <__sfp_lock_acquire>:
  812b18:	f800283a 	ret

00812b1c <__sfp_lock_release>:
  812b1c:	f800283a 	ret

00812b20 <__sinit_lock_acquire>:
  812b20:	f800283a 	ret

00812b24 <__sinit_lock_release>:
  812b24:	f800283a 	ret

00812b28 <__fp_lock_all>:
  812b28:	008020b4 	movhi	r2,130
  812b2c:	10b83f04 	addi	r2,r2,-7940
  812b30:	11000017 	ldw	r4,0(r2)
  812b34:	01402074 	movhi	r5,129
  812b38:	2949ee04 	addi	r5,r5,10168
  812b3c:	08130181 	jmpi	813018 <_fwalk>

00812b40 <__fp_unlock_all>:
  812b40:	008020b4 	movhi	r2,130
  812b44:	10b83f04 	addi	r2,r2,-7940
  812b48:	11000017 	ldw	r4,0(r2)
  812b4c:	01402074 	movhi	r5,129
  812b50:	2949f004 	addi	r5,r5,10176
  812b54:	08130181 	jmpi	813018 <_fwalk>

00812b58 <__sflags>:
  812b58:	28800007 	ldb	r2,0(r5)
  812b5c:	00c01c84 	movi	r3,114
  812b60:	10c02426 	beq	r2,r3,812bf4 <__sflags+0x9c>
  812b64:	00c01dc4 	movi	r3,119
  812b68:	10c01e26 	beq	r2,r3,812be4 <__sflags+0x8c>
  812b6c:	00c01844 	movi	r3,97
  812b70:	10c00426 	beq	r2,r3,812b84 <__sflags+0x2c>
  812b74:	00800584 	movi	r2,22
  812b78:	20800015 	stw	r2,0(r4)
  812b7c:	0005883a 	mov	r2,zero
  812b80:	f800283a 	ret
  812b84:	02c08204 	movi	r11,520
  812b88:	01000044 	movi	r4,1
  812b8c:	00804204 	movi	r2,264
  812b90:	01c00ac4 	movi	r7,43
  812b94:	02bff8c4 	movi	r10,-29
  812b98:	027fff04 	movi	r9,-4
  812b9c:	02001e04 	movi	r8,120
  812ba0:	29400044 	addi	r5,r5,1
  812ba4:	28c00007 	ldb	r3,0(r5)
  812ba8:	18000626 	beq	r3,zero,812bc4 <__sflags+0x6c>
  812bac:	19c00826 	beq	r3,r7,812bd0 <__sflags+0x78>
  812bb0:	1a3ffb1e 	bne	r3,r8,812ba0 <__alt_data_end+0xff812ba0>
  812bb4:	29400044 	addi	r5,r5,1
  812bb8:	28c00007 	ldb	r3,0(r5)
  812bbc:	21020014 	ori	r4,r4,2048
  812bc0:	183ffa1e 	bne	r3,zero,812bac <__alt_data_end+0xff812bac>
  812bc4:	22c8b03a 	or	r4,r4,r11
  812bc8:	31000015 	stw	r4,0(r6)
  812bcc:	f800283a 	ret
  812bd0:	1284703a 	and	r2,r2,r10
  812bd4:	2248703a 	and	r4,r4,r9
  812bd8:	10800414 	ori	r2,r2,16
  812bdc:	21000094 	ori	r4,r4,2
  812be0:	003fef06 	br	812ba0 <__alt_data_end+0xff812ba0>
  812be4:	02c18004 	movi	r11,1536
  812be8:	01000044 	movi	r4,1
  812bec:	00800204 	movi	r2,8
  812bf0:	003fe706 	br	812b90 <__alt_data_end+0xff812b90>
  812bf4:	0017883a 	mov	r11,zero
  812bf8:	0009883a 	mov	r4,zero
  812bfc:	00800104 	movi	r2,4
  812c00:	003fe306 	br	812b90 <__alt_data_end+0xff812b90>

00812c04 <_malloc_trim_r>:
  812c04:	defffb04 	addi	sp,sp,-20
  812c08:	dcc00315 	stw	r19,12(sp)
  812c0c:	04c020b4 	movhi	r19,130
  812c10:	dc800215 	stw	r18,8(sp)
  812c14:	dc400115 	stw	r17,4(sp)
  812c18:	dc000015 	stw	r16,0(sp)
  812c1c:	dfc00415 	stw	ra,16(sp)
  812c20:	2821883a 	mov	r16,r5
  812c24:	9cf20604 	addi	r19,r19,-14312
  812c28:	2025883a 	mov	r18,r4
  812c2c:	081a8540 	call	81a854 <__malloc_lock>
  812c30:	98800217 	ldw	r2,8(r19)
  812c34:	14400117 	ldw	r17,4(r2)
  812c38:	00bfff04 	movi	r2,-4
  812c3c:	88a2703a 	and	r17,r17,r2
  812c40:	8c21c83a 	sub	r16,r17,r16
  812c44:	8403fbc4 	addi	r16,r16,4079
  812c48:	8020d33a 	srli	r16,r16,12
  812c4c:	0083ffc4 	movi	r2,4095
  812c50:	843fffc4 	addi	r16,r16,-1
  812c54:	8020933a 	slli	r16,r16,12
  812c58:	1400060e 	bge	r2,r16,812c74 <_malloc_trim_r+0x70>
  812c5c:	9009883a 	mov	r4,r18
  812c60:	000b883a 	mov	r5,zero
  812c64:	080dc280 	call	80dc28 <_sbrk_r>
  812c68:	98c00217 	ldw	r3,8(r19)
  812c6c:	1c47883a 	add	r3,r3,r17
  812c70:	10c00a26 	beq	r2,r3,812c9c <_malloc_trim_r+0x98>
  812c74:	9009883a 	mov	r4,r18
  812c78:	081a8740 	call	81a874 <__malloc_unlock>
  812c7c:	0005883a 	mov	r2,zero
  812c80:	dfc00417 	ldw	ra,16(sp)
  812c84:	dcc00317 	ldw	r19,12(sp)
  812c88:	dc800217 	ldw	r18,8(sp)
  812c8c:	dc400117 	ldw	r17,4(sp)
  812c90:	dc000017 	ldw	r16,0(sp)
  812c94:	dec00504 	addi	sp,sp,20
  812c98:	f800283a 	ret
  812c9c:	9009883a 	mov	r4,r18
  812ca0:	040bc83a 	sub	r5,zero,r16
  812ca4:	080dc280 	call	80dc28 <_sbrk_r>
  812ca8:	00ffffc4 	movi	r3,-1
  812cac:	10c00d26 	beq	r2,r3,812ce4 <_malloc_trim_r+0xe0>
  812cb0:	00c020b4 	movhi	r3,130
  812cb4:	18c03404 	addi	r3,r3,208
  812cb8:	18800017 	ldw	r2,0(r3)
  812cbc:	99000217 	ldw	r4,8(r19)
  812cc0:	8c23c83a 	sub	r17,r17,r16
  812cc4:	8c400054 	ori	r17,r17,1
  812cc8:	1421c83a 	sub	r16,r2,r16
  812ccc:	24400115 	stw	r17,4(r4)
  812cd0:	9009883a 	mov	r4,r18
  812cd4:	1c000015 	stw	r16,0(r3)
  812cd8:	081a8740 	call	81a874 <__malloc_unlock>
  812cdc:	00800044 	movi	r2,1
  812ce0:	003fe706 	br	812c80 <__alt_data_end+0xff812c80>
  812ce4:	9009883a 	mov	r4,r18
  812ce8:	000b883a 	mov	r5,zero
  812cec:	080dc280 	call	80dc28 <_sbrk_r>
  812cf0:	99000217 	ldw	r4,8(r19)
  812cf4:	014003c4 	movi	r5,15
  812cf8:	1107c83a 	sub	r3,r2,r4
  812cfc:	28ffdd0e 	bge	r5,r3,812c74 <__alt_data_end+0xff812c74>
  812d00:	014020b4 	movhi	r5,130
  812d04:	29784004 	addi	r5,r5,-7936
  812d08:	29400017 	ldw	r5,0(r5)
  812d0c:	18c00054 	ori	r3,r3,1
  812d10:	20c00115 	stw	r3,4(r4)
  812d14:	00c020b4 	movhi	r3,130
  812d18:	1145c83a 	sub	r2,r2,r5
  812d1c:	18c03404 	addi	r3,r3,208
  812d20:	18800015 	stw	r2,0(r3)
  812d24:	003fd306 	br	812c74 <__alt_data_end+0xff812c74>

00812d28 <_free_r>:
  812d28:	28004c26 	beq	r5,zero,812e5c <_free_r+0x134>
  812d2c:	defffd04 	addi	sp,sp,-12
  812d30:	dc400115 	stw	r17,4(sp)
  812d34:	dc000015 	stw	r16,0(sp)
  812d38:	2023883a 	mov	r17,r4
  812d3c:	2821883a 	mov	r16,r5
  812d40:	dfc00215 	stw	ra,8(sp)
  812d44:	081a8540 	call	81a854 <__malloc_lock>
  812d48:	813fff17 	ldw	r4,-4(r16)
  812d4c:	00bfff84 	movi	r2,-2
  812d50:	024020b4 	movhi	r9,130
  812d54:	81bffe04 	addi	r6,r16,-8
  812d58:	2084703a 	and	r2,r4,r2
  812d5c:	4a720604 	addi	r9,r9,-14312
  812d60:	308b883a 	add	r5,r6,r2
  812d64:	2a000117 	ldw	r8,4(r5)
  812d68:	49c00217 	ldw	r7,8(r9)
  812d6c:	00ffff04 	movi	r3,-4
  812d70:	40c6703a 	and	r3,r8,r3
  812d74:	39405326 	beq	r7,r5,812ec4 <_free_r+0x19c>
  812d78:	28c00115 	stw	r3,4(r5)
  812d7c:	2100004c 	andi	r4,r4,1
  812d80:	2000091e 	bne	r4,zero,812da8 <_free_r+0x80>
  812d84:	81fffe17 	ldw	r7,-8(r16)
  812d88:	4a000204 	addi	r8,r9,8
  812d8c:	31cdc83a 	sub	r6,r6,r7
  812d90:	31000217 	ldw	r4,8(r6)
  812d94:	11c5883a 	add	r2,r2,r7
  812d98:	22006126 	beq	r4,r8,812f20 <_free_r+0x1f8>
  812d9c:	31c00317 	ldw	r7,12(r6)
  812da0:	21c00315 	stw	r7,12(r4)
  812da4:	39000215 	stw	r4,8(r7)
  812da8:	28c9883a 	add	r4,r5,r3
  812dac:	21c00117 	ldw	r7,4(r4)
  812db0:	39c0004c 	andi	r7,r7,1
  812db4:	38000d1e 	bne	r7,zero,812dec <_free_r+0xc4>
  812db8:	29000217 	ldw	r4,8(r5)
  812dbc:	10c5883a 	add	r2,r2,r3
  812dc0:	00c020b4 	movhi	r3,130
  812dc4:	18f20804 	addi	r3,r3,-14304
  812dc8:	20c07526 	beq	r4,r3,812fa0 <_free_r+0x278>
  812dcc:	29c00317 	ldw	r7,12(r5)
  812dd0:	11400054 	ori	r5,r2,1
  812dd4:	3087883a 	add	r3,r6,r2
  812dd8:	21c00315 	stw	r7,12(r4)
  812ddc:	39000215 	stw	r4,8(r7)
  812de0:	31400115 	stw	r5,4(r6)
  812de4:	18800015 	stw	r2,0(r3)
  812de8:	00000406 	br	812dfc <_free_r+0xd4>
  812dec:	10c00054 	ori	r3,r2,1
  812df0:	30c00115 	stw	r3,4(r6)
  812df4:	3087883a 	add	r3,r6,r2
  812df8:	18800015 	stw	r2,0(r3)
  812dfc:	00c07fc4 	movi	r3,511
  812e00:	18801736 	bltu	r3,r2,812e60 <_free_r+0x138>
  812e04:	1004d0fa 	srli	r2,r2,3
  812e08:	01400044 	movi	r5,1
  812e0c:	49000117 	ldw	r4,4(r9)
  812e10:	1087883a 	add	r3,r2,r2
  812e14:	18c7883a 	add	r3,r3,r3
  812e18:	1005d0ba 	srai	r2,r2,2
  812e1c:	18c7883a 	add	r3,r3,r3
  812e20:	1a47883a 	add	r3,r3,r9
  812e24:	19c00217 	ldw	r7,8(r3)
  812e28:	2884983a 	sll	r2,r5,r2
  812e2c:	30c00315 	stw	r3,12(r6)
  812e30:	31c00215 	stw	r7,8(r6)
  812e34:	1104b03a 	or	r2,r2,r4
  812e38:	19800215 	stw	r6,8(r3)
  812e3c:	48800115 	stw	r2,4(r9)
  812e40:	39800315 	stw	r6,12(r7)
  812e44:	8809883a 	mov	r4,r17
  812e48:	dfc00217 	ldw	ra,8(sp)
  812e4c:	dc400117 	ldw	r17,4(sp)
  812e50:	dc000017 	ldw	r16,0(sp)
  812e54:	dec00304 	addi	sp,sp,12
  812e58:	081a8741 	jmpi	81a874 <__malloc_unlock>
  812e5c:	f800283a 	ret
  812e60:	1006d27a 	srli	r3,r2,9
  812e64:	01000104 	movi	r4,4
  812e68:	20c04036 	bltu	r4,r3,812f6c <_free_r+0x244>
  812e6c:	1006d1ba 	srli	r3,r2,6
  812e70:	19400e04 	addi	r5,r3,56
  812e74:	2947883a 	add	r3,r5,r5
  812e78:	18c7883a 	add	r3,r3,r3
  812e7c:	18c7883a 	add	r3,r3,r3
  812e80:	1a49883a 	add	r4,r3,r9
  812e84:	20c00217 	ldw	r3,8(r4)
  812e88:	01c020b4 	movhi	r7,130
  812e8c:	39f20604 	addi	r7,r7,-14312
  812e90:	19003b26 	beq	r3,r4,812f80 <_free_r+0x258>
  812e94:	01ffff04 	movi	r7,-4
  812e98:	19400117 	ldw	r5,4(r3)
  812e9c:	29ca703a 	and	r5,r5,r7
  812ea0:	1140022e 	bgeu	r2,r5,812eac <_free_r+0x184>
  812ea4:	18c00217 	ldw	r3,8(r3)
  812ea8:	20fffb1e 	bne	r4,r3,812e98 <__alt_data_end+0xff812e98>
  812eac:	18800317 	ldw	r2,12(r3)
  812eb0:	30800315 	stw	r2,12(r6)
  812eb4:	30c00215 	stw	r3,8(r6)
  812eb8:	11800215 	stw	r6,8(r2)
  812ebc:	19800315 	stw	r6,12(r3)
  812ec0:	003fe006 	br	812e44 <__alt_data_end+0xff812e44>
  812ec4:	2100004c 	andi	r4,r4,1
  812ec8:	1885883a 	add	r2,r3,r2
  812ecc:	2000071e 	bne	r4,zero,812eec <_free_r+0x1c4>
  812ed0:	817ffe17 	ldw	r5,-8(r16)
  812ed4:	314dc83a 	sub	r6,r6,r5
  812ed8:	30c00317 	ldw	r3,12(r6)
  812edc:	31000217 	ldw	r4,8(r6)
  812ee0:	1145883a 	add	r2,r2,r5
  812ee4:	20c00315 	stw	r3,12(r4)
  812ee8:	19000215 	stw	r4,8(r3)
  812eec:	10c00054 	ori	r3,r2,1
  812ef0:	30c00115 	stw	r3,4(r6)
  812ef4:	00c020b4 	movhi	r3,130
  812ef8:	18f84104 	addi	r3,r3,-7932
  812efc:	18c00017 	ldw	r3,0(r3)
  812f00:	49800215 	stw	r6,8(r9)
  812f04:	10ffcf36 	bltu	r2,r3,812e44 <__alt_data_end+0xff812e44>
  812f08:	008020b4 	movhi	r2,130
  812f0c:	10bfbf04 	addi	r2,r2,-260
  812f10:	11400017 	ldw	r5,0(r2)
  812f14:	8809883a 	mov	r4,r17
  812f18:	0812c040 	call	812c04 <_malloc_trim_r>
  812f1c:	003fc906 	br	812e44 <__alt_data_end+0xff812e44>
  812f20:	28c9883a 	add	r4,r5,r3
  812f24:	21000117 	ldw	r4,4(r4)
  812f28:	2100004c 	andi	r4,r4,1
  812f2c:	20000a1e 	bne	r4,zero,812f58 <_free_r+0x230>
  812f30:	29000317 	ldw	r4,12(r5)
  812f34:	29400217 	ldw	r5,8(r5)
  812f38:	10c5883a 	add	r2,r2,r3
  812f3c:	10c00054 	ori	r3,r2,1
  812f40:	29000315 	stw	r4,12(r5)
  812f44:	21400215 	stw	r5,8(r4)
  812f48:	30c00115 	stw	r3,4(r6)
  812f4c:	308d883a 	add	r6,r6,r2
  812f50:	30800015 	stw	r2,0(r6)
  812f54:	003fbb06 	br	812e44 <__alt_data_end+0xff812e44>
  812f58:	10c00054 	ori	r3,r2,1
  812f5c:	30c00115 	stw	r3,4(r6)
  812f60:	308d883a 	add	r6,r6,r2
  812f64:	30800015 	stw	r2,0(r6)
  812f68:	003fb606 	br	812e44 <__alt_data_end+0xff812e44>
  812f6c:	01000504 	movi	r4,20
  812f70:	20c01436 	bltu	r4,r3,812fc4 <_free_r+0x29c>
  812f74:	194016c4 	addi	r5,r3,91
  812f78:	2947883a 	add	r3,r5,r5
  812f7c:	003fbe06 	br	812e78 <__alt_data_end+0xff812e78>
  812f80:	280bd0ba 	srai	r5,r5,2
  812f84:	00800044 	movi	r2,1
  812f88:	39000117 	ldw	r4,4(r7)
  812f8c:	114a983a 	sll	r5,r2,r5
  812f90:	1805883a 	mov	r2,r3
  812f94:	2908b03a 	or	r4,r5,r4
  812f98:	39000115 	stw	r4,4(r7)
  812f9c:	003fc406 	br	812eb0 <__alt_data_end+0xff812eb0>
  812fa0:	49800515 	stw	r6,20(r9)
  812fa4:	49800415 	stw	r6,16(r9)
  812fa8:	10c00054 	ori	r3,r2,1
  812fac:	31000315 	stw	r4,12(r6)
  812fb0:	31000215 	stw	r4,8(r6)
  812fb4:	30c00115 	stw	r3,4(r6)
  812fb8:	308d883a 	add	r6,r6,r2
  812fbc:	30800015 	stw	r2,0(r6)
  812fc0:	003fa006 	br	812e44 <__alt_data_end+0xff812e44>
  812fc4:	01001504 	movi	r4,84
  812fc8:	20c00436 	bltu	r4,r3,812fdc <_free_r+0x2b4>
  812fcc:	1006d33a 	srli	r3,r2,12
  812fd0:	19401b84 	addi	r5,r3,110
  812fd4:	2947883a 	add	r3,r5,r5
  812fd8:	003fa706 	br	812e78 <__alt_data_end+0xff812e78>
  812fdc:	01005504 	movi	r4,340
  812fe0:	20c00436 	bltu	r4,r3,812ff4 <_free_r+0x2cc>
  812fe4:	1006d3fa 	srli	r3,r2,15
  812fe8:	19401dc4 	addi	r5,r3,119
  812fec:	2947883a 	add	r3,r5,r5
  812ff0:	003fa106 	br	812e78 <__alt_data_end+0xff812e78>
  812ff4:	01015504 	movi	r4,1364
  812ff8:	20c00436 	bltu	r4,r3,81300c <_free_r+0x2e4>
  812ffc:	1006d4ba 	srli	r3,r2,18
  813000:	19401f04 	addi	r5,r3,124
  813004:	2947883a 	add	r3,r5,r5
  813008:	003f9b06 	br	812e78 <__alt_data_end+0xff812e78>
  81300c:	00c03f04 	movi	r3,252
  813010:	01401f84 	movi	r5,126
  813014:	003f9806 	br	812e78 <__alt_data_end+0xff812e78>

00813018 <_fwalk>:
  813018:	defff704 	addi	sp,sp,-36
  81301c:	dd000415 	stw	r20,16(sp)
  813020:	dfc00815 	stw	ra,32(sp)
  813024:	ddc00715 	stw	r23,28(sp)
  813028:	dd800615 	stw	r22,24(sp)
  81302c:	dd400515 	stw	r21,20(sp)
  813030:	dcc00315 	stw	r19,12(sp)
  813034:	dc800215 	stw	r18,8(sp)
  813038:	dc400115 	stw	r17,4(sp)
  81303c:	dc000015 	stw	r16,0(sp)
  813040:	2500b804 	addi	r20,r4,736
  813044:	a0002326 	beq	r20,zero,8130d4 <_fwalk+0xbc>
  813048:	282b883a 	mov	r21,r5
  81304c:	002f883a 	mov	r23,zero
  813050:	05800044 	movi	r22,1
  813054:	04ffffc4 	movi	r19,-1
  813058:	a4400117 	ldw	r17,4(r20)
  81305c:	a4800217 	ldw	r18,8(r20)
  813060:	8c7fffc4 	addi	r17,r17,-1
  813064:	88000d16 	blt	r17,zero,81309c <_fwalk+0x84>
  813068:	94000304 	addi	r16,r18,12
  81306c:	94800384 	addi	r18,r18,14
  813070:	80c0000b 	ldhu	r3,0(r16)
  813074:	8c7fffc4 	addi	r17,r17,-1
  813078:	813ffd04 	addi	r4,r16,-12
  81307c:	b0c0042e 	bgeu	r22,r3,813090 <_fwalk+0x78>
  813080:	90c0000f 	ldh	r3,0(r18)
  813084:	1cc00226 	beq	r3,r19,813090 <_fwalk+0x78>
  813088:	a83ee83a 	callr	r21
  81308c:	b8aeb03a 	or	r23,r23,r2
  813090:	84001a04 	addi	r16,r16,104
  813094:	94801a04 	addi	r18,r18,104
  813098:	8cfff51e 	bne	r17,r19,813070 <__alt_data_end+0xff813070>
  81309c:	a5000017 	ldw	r20,0(r20)
  8130a0:	a03fed1e 	bne	r20,zero,813058 <__alt_data_end+0xff813058>
  8130a4:	b805883a 	mov	r2,r23
  8130a8:	dfc00817 	ldw	ra,32(sp)
  8130ac:	ddc00717 	ldw	r23,28(sp)
  8130b0:	dd800617 	ldw	r22,24(sp)
  8130b4:	dd400517 	ldw	r21,20(sp)
  8130b8:	dd000417 	ldw	r20,16(sp)
  8130bc:	dcc00317 	ldw	r19,12(sp)
  8130c0:	dc800217 	ldw	r18,8(sp)
  8130c4:	dc400117 	ldw	r17,4(sp)
  8130c8:	dc000017 	ldw	r16,0(sp)
  8130cc:	dec00904 	addi	sp,sp,36
  8130d0:	f800283a 	ret
  8130d4:	002f883a 	mov	r23,zero
  8130d8:	003ff206 	br	8130a4 <__alt_data_end+0xff8130a4>

008130dc <_fwalk_reent>:
  8130dc:	defff704 	addi	sp,sp,-36
  8130e0:	dd400515 	stw	r21,20(sp)
  8130e4:	dfc00815 	stw	ra,32(sp)
  8130e8:	ddc00715 	stw	r23,28(sp)
  8130ec:	dd800615 	stw	r22,24(sp)
  8130f0:	dd000415 	stw	r20,16(sp)
  8130f4:	dcc00315 	stw	r19,12(sp)
  8130f8:	dc800215 	stw	r18,8(sp)
  8130fc:	dc400115 	stw	r17,4(sp)
  813100:	dc000015 	stw	r16,0(sp)
  813104:	2540b804 	addi	r21,r4,736
  813108:	a8002326 	beq	r21,zero,813198 <_fwalk_reent+0xbc>
  81310c:	2829883a 	mov	r20,r5
  813110:	202d883a 	mov	r22,r4
  813114:	002f883a 	mov	r23,zero
  813118:	04c00044 	movi	r19,1
  81311c:	04bfffc4 	movi	r18,-1
  813120:	ac400117 	ldw	r17,4(r21)
  813124:	ac000217 	ldw	r16,8(r21)
  813128:	8c7fffc4 	addi	r17,r17,-1
  81312c:	88000c16 	blt	r17,zero,813160 <_fwalk_reent+0x84>
  813130:	84000304 	addi	r16,r16,12
  813134:	80c0000b 	ldhu	r3,0(r16)
  813138:	8c7fffc4 	addi	r17,r17,-1
  81313c:	817ffd04 	addi	r5,r16,-12
  813140:	98c0052e 	bgeu	r19,r3,813158 <_fwalk_reent+0x7c>
  813144:	80c0008f 	ldh	r3,2(r16)
  813148:	b009883a 	mov	r4,r22
  81314c:	1c800226 	beq	r3,r18,813158 <_fwalk_reent+0x7c>
  813150:	a03ee83a 	callr	r20
  813154:	b8aeb03a 	or	r23,r23,r2
  813158:	84001a04 	addi	r16,r16,104
  81315c:	8cbff51e 	bne	r17,r18,813134 <__alt_data_end+0xff813134>
  813160:	ad400017 	ldw	r21,0(r21)
  813164:	a83fee1e 	bne	r21,zero,813120 <__alt_data_end+0xff813120>
  813168:	b805883a 	mov	r2,r23
  81316c:	dfc00817 	ldw	ra,32(sp)
  813170:	ddc00717 	ldw	r23,28(sp)
  813174:	dd800617 	ldw	r22,24(sp)
  813178:	dd400517 	ldw	r21,20(sp)
  81317c:	dd000417 	ldw	r20,16(sp)
  813180:	dcc00317 	ldw	r19,12(sp)
  813184:	dc800217 	ldw	r18,8(sp)
  813188:	dc400117 	ldw	r17,4(sp)
  81318c:	dc000017 	ldw	r16,0(sp)
  813190:	dec00904 	addi	sp,sp,36
  813194:	f800283a 	ret
  813198:	002f883a 	mov	r23,zero
  81319c:	003ff206 	br	813168 <__alt_data_end+0xff813168>

008131a0 <_isatty_r>:
  8131a0:	defffd04 	addi	sp,sp,-12
  8131a4:	dc000015 	stw	r16,0(sp)
  8131a8:	040020b4 	movhi	r16,130
  8131ac:	dc400115 	stw	r17,4(sp)
  8131b0:	843fbc04 	addi	r16,r16,-272
  8131b4:	2023883a 	mov	r17,r4
  8131b8:	2809883a 	mov	r4,r5
  8131bc:	dfc00215 	stw	ra,8(sp)
  8131c0:	80000015 	stw	zero,0(r16)
  8131c4:	081a5300 	call	81a530 <isatty>
  8131c8:	00ffffc4 	movi	r3,-1
  8131cc:	10c00526 	beq	r2,r3,8131e4 <_isatty_r+0x44>
  8131d0:	dfc00217 	ldw	ra,8(sp)
  8131d4:	dc400117 	ldw	r17,4(sp)
  8131d8:	dc000017 	ldw	r16,0(sp)
  8131dc:	dec00304 	addi	sp,sp,12
  8131e0:	f800283a 	ret
  8131e4:	80c00017 	ldw	r3,0(r16)
  8131e8:	183ff926 	beq	r3,zero,8131d0 <__alt_data_end+0xff8131d0>
  8131ec:	88c00015 	stw	r3,0(r17)
  8131f0:	003ff706 	br	8131d0 <__alt_data_end+0xff8131d0>

008131f4 <_setlocale_r>:
  8131f4:	30001b26 	beq	r6,zero,813264 <_setlocale_r+0x70>
  8131f8:	014020b4 	movhi	r5,130
  8131fc:	defffe04 	addi	sp,sp,-8
  813200:	29704b04 	addi	r5,r5,-16084
  813204:	3009883a 	mov	r4,r6
  813208:	dc000015 	stw	r16,0(sp)
  81320c:	dfc00115 	stw	ra,4(sp)
  813210:	3021883a 	mov	r16,r6
  813214:	08145f40 	call	8145f4 <strcmp>
  813218:	1000061e 	bne	r2,zero,813234 <_setlocale_r+0x40>
  81321c:	008020b4 	movhi	r2,130
  813220:	10b02d04 	addi	r2,r2,-16204
  813224:	dfc00117 	ldw	ra,4(sp)
  813228:	dc000017 	ldw	r16,0(sp)
  81322c:	dec00204 	addi	sp,sp,8
  813230:	f800283a 	ret
  813234:	014020b4 	movhi	r5,130
  813238:	29702d04 	addi	r5,r5,-16204
  81323c:	8009883a 	mov	r4,r16
  813240:	08145f40 	call	8145f4 <strcmp>
  813244:	103ff526 	beq	r2,zero,81321c <__alt_data_end+0xff81321c>
  813248:	014020b4 	movhi	r5,130
  81324c:	29703604 	addi	r5,r5,-16168
  813250:	8009883a 	mov	r4,r16
  813254:	08145f40 	call	8145f4 <strcmp>
  813258:	103ff026 	beq	r2,zero,81321c <__alt_data_end+0xff81321c>
  81325c:	0005883a 	mov	r2,zero
  813260:	003ff006 	br	813224 <__alt_data_end+0xff813224>
  813264:	008020b4 	movhi	r2,130
  813268:	10b02d04 	addi	r2,r2,-16204
  81326c:	f800283a 	ret

00813270 <__locale_charset>:
  813270:	008020b4 	movhi	r2,130
  813274:	10b31004 	addi	r2,r2,-13248
  813278:	f800283a 	ret

0081327c <__locale_mb_cur_max>:
  81327c:	008020b4 	movhi	r2,130
  813280:	10b84204 	addi	r2,r2,-7928
  813284:	10800017 	ldw	r2,0(r2)
  813288:	f800283a 	ret

0081328c <__locale_msgcharset>:
  81328c:	008020b4 	movhi	r2,130
  813290:	10b30804 	addi	r2,r2,-13280
  813294:	f800283a 	ret

00813298 <__locale_cjk_lang>:
  813298:	0005883a 	mov	r2,zero
  81329c:	f800283a 	ret

008132a0 <_localeconv_r>:
  8132a0:	008020b4 	movhi	r2,130
  8132a4:	10b31804 	addi	r2,r2,-13216
  8132a8:	f800283a 	ret

008132ac <setlocale>:
  8132ac:	00c020b4 	movhi	r3,130
  8132b0:	18f83f04 	addi	r3,r3,-7940
  8132b4:	2005883a 	mov	r2,r4
  8132b8:	19000017 	ldw	r4,0(r3)
  8132bc:	280d883a 	mov	r6,r5
  8132c0:	100b883a 	mov	r5,r2
  8132c4:	08131f41 	jmpi	8131f4 <_setlocale_r>

008132c8 <localeconv>:
  8132c8:	008020b4 	movhi	r2,130
  8132cc:	10b31804 	addi	r2,r2,-13216
  8132d0:	f800283a 	ret

008132d4 <_lseek_r>:
  8132d4:	defffd04 	addi	sp,sp,-12
  8132d8:	dc000015 	stw	r16,0(sp)
  8132dc:	040020b4 	movhi	r16,130
  8132e0:	dc400115 	stw	r17,4(sp)
  8132e4:	843fbc04 	addi	r16,r16,-272
  8132e8:	2023883a 	mov	r17,r4
  8132ec:	2809883a 	mov	r4,r5
  8132f0:	300b883a 	mov	r5,r6
  8132f4:	380d883a 	mov	r6,r7
  8132f8:	dfc00215 	stw	ra,8(sp)
  8132fc:	80000015 	stw	zero,0(r16)
  813300:	081a7080 	call	81a708 <lseek>
  813304:	00ffffc4 	movi	r3,-1
  813308:	10c00526 	beq	r2,r3,813320 <_lseek_r+0x4c>
  81330c:	dfc00217 	ldw	ra,8(sp)
  813310:	dc400117 	ldw	r17,4(sp)
  813314:	dc000017 	ldw	r16,0(sp)
  813318:	dec00304 	addi	sp,sp,12
  81331c:	f800283a 	ret
  813320:	80c00017 	ldw	r3,0(r16)
  813324:	183ff926 	beq	r3,zero,81330c <__alt_data_end+0xff81330c>
  813328:	88c00015 	stw	r3,0(r17)
  81332c:	003ff706 	br	81330c <__alt_data_end+0xff81330c>

00813330 <memchr>:
  813330:	208000cc 	andi	r2,r4,3
  813334:	280f883a 	mov	r7,r5
  813338:	10003526 	beq	r2,zero,813410 <memchr+0xe0>
  81333c:	30bfffc4 	addi	r2,r6,-1
  813340:	30001b26 	beq	r6,zero,8133b0 <memchr+0x80>
  813344:	21800003 	ldbu	r6,0(r4)
  813348:	28c03fcc 	andi	r3,r5,255
  81334c:	30c01a26 	beq	r6,r3,8133b8 <memchr+0x88>
  813350:	180d883a 	mov	r6,r3
  813354:	00000406 	br	813368 <memchr+0x38>
  813358:	10001526 	beq	r2,zero,8133b0 <memchr+0x80>
  81335c:	20c00003 	ldbu	r3,0(r4)
  813360:	10bfffc4 	addi	r2,r2,-1
  813364:	19801426 	beq	r3,r6,8133b8 <memchr+0x88>
  813368:	21000044 	addi	r4,r4,1
  81336c:	20c000cc 	andi	r3,r4,3
  813370:	183ff91e 	bne	r3,zero,813358 <__alt_data_end+0xff813358>
  813374:	024000c4 	movi	r9,3
  813378:	48801136 	bltu	r9,r2,8133c0 <memchr+0x90>
  81337c:	10000c26 	beq	r2,zero,8133b0 <memchr+0x80>
  813380:	20c00003 	ldbu	r3,0(r4)
  813384:	29403fcc 	andi	r5,r5,255
  813388:	19400b26 	beq	r3,r5,8133b8 <memchr+0x88>
  81338c:	20c00044 	addi	r3,r4,1
  813390:	2085883a 	add	r2,r4,r2
  813394:	39803fcc 	andi	r6,r7,255
  813398:	00000306 	br	8133a8 <memchr+0x78>
  81339c:	18c00044 	addi	r3,r3,1
  8133a0:	197fffc3 	ldbu	r5,-1(r3)
  8133a4:	29800426 	beq	r5,r6,8133b8 <memchr+0x88>
  8133a8:	1809883a 	mov	r4,r3
  8133ac:	18bffb1e 	bne	r3,r2,81339c <__alt_data_end+0xff81339c>
  8133b0:	0005883a 	mov	r2,zero
  8133b4:	f800283a 	ret
  8133b8:	2005883a 	mov	r2,r4
  8133bc:	f800283a 	ret
  8133c0:	28c03fcc 	andi	r3,r5,255
  8133c4:	1810923a 	slli	r8,r3,8
  8133c8:	02ffbff4 	movhi	r11,65279
  8133cc:	02a02074 	movhi	r10,32897
  8133d0:	40c6b03a 	or	r3,r8,r3
  8133d4:	1810943a 	slli	r8,r3,16
  8133d8:	5affbfc4 	addi	r11,r11,-257
  8133dc:	52a02004 	addi	r10,r10,-32640
  8133e0:	40d0b03a 	or	r8,r8,r3
  8133e4:	20c00017 	ldw	r3,0(r4)
  8133e8:	40c6f03a 	xor	r3,r8,r3
  8133ec:	1acd883a 	add	r6,r3,r11
  8133f0:	00c6303a 	nor	r3,zero,r3
  8133f4:	30c6703a 	and	r3,r6,r3
  8133f8:	1a86703a 	and	r3,r3,r10
  8133fc:	183fdf1e 	bne	r3,zero,81337c <__alt_data_end+0xff81337c>
  813400:	10bfff04 	addi	r2,r2,-4
  813404:	21000104 	addi	r4,r4,4
  813408:	48bff636 	bltu	r9,r2,8133e4 <__alt_data_end+0xff8133e4>
  81340c:	003fdb06 	br	81337c <__alt_data_end+0xff81337c>
  813410:	3005883a 	mov	r2,r6
  813414:	003fd706 	br	813374 <__alt_data_end+0xff813374>

00813418 <_Balloc>:
  813418:	20801317 	ldw	r2,76(r4)
  81341c:	defffc04 	addi	sp,sp,-16
  813420:	dc400115 	stw	r17,4(sp)
  813424:	dc000015 	stw	r16,0(sp)
  813428:	dfc00315 	stw	ra,12(sp)
  81342c:	dc800215 	stw	r18,8(sp)
  813430:	2023883a 	mov	r17,r4
  813434:	2821883a 	mov	r16,r5
  813438:	10000f26 	beq	r2,zero,813478 <_Balloc+0x60>
  81343c:	8407883a 	add	r3,r16,r16
  813440:	18c7883a 	add	r3,r3,r3
  813444:	10c7883a 	add	r3,r2,r3
  813448:	18800017 	ldw	r2,0(r3)
  81344c:	10001126 	beq	r2,zero,813494 <_Balloc+0x7c>
  813450:	11000017 	ldw	r4,0(r2)
  813454:	19000015 	stw	r4,0(r3)
  813458:	10000415 	stw	zero,16(r2)
  81345c:	10000315 	stw	zero,12(r2)
  813460:	dfc00317 	ldw	ra,12(sp)
  813464:	dc800217 	ldw	r18,8(sp)
  813468:	dc400117 	ldw	r17,4(sp)
  81346c:	dc000017 	ldw	r16,0(sp)
  813470:	dec00404 	addi	sp,sp,16
  813474:	f800283a 	ret
  813478:	01400104 	movi	r5,4
  81347c:	01800844 	movi	r6,33
  813480:	0815cb00 	call	815cb0 <_calloc_r>
  813484:	88801315 	stw	r2,76(r17)
  813488:	103fec1e 	bne	r2,zero,81343c <__alt_data_end+0xff81343c>
  81348c:	0005883a 	mov	r2,zero
  813490:	003ff306 	br	813460 <__alt_data_end+0xff813460>
  813494:	01400044 	movi	r5,1
  813498:	2c24983a 	sll	r18,r5,r16
  81349c:	8809883a 	mov	r4,r17
  8134a0:	91800144 	addi	r6,r18,5
  8134a4:	318d883a 	add	r6,r6,r6
  8134a8:	318d883a 	add	r6,r6,r6
  8134ac:	0815cb00 	call	815cb0 <_calloc_r>
  8134b0:	103ff626 	beq	r2,zero,81348c <__alt_data_end+0xff81348c>
  8134b4:	14000115 	stw	r16,4(r2)
  8134b8:	14800215 	stw	r18,8(r2)
  8134bc:	003fe606 	br	813458 <__alt_data_end+0xff813458>

008134c0 <_Bfree>:
  8134c0:	28000826 	beq	r5,zero,8134e4 <_Bfree+0x24>
  8134c4:	28c00117 	ldw	r3,4(r5)
  8134c8:	20801317 	ldw	r2,76(r4)
  8134cc:	18c7883a 	add	r3,r3,r3
  8134d0:	18c7883a 	add	r3,r3,r3
  8134d4:	10c5883a 	add	r2,r2,r3
  8134d8:	10c00017 	ldw	r3,0(r2)
  8134dc:	28c00015 	stw	r3,0(r5)
  8134e0:	11400015 	stw	r5,0(r2)
  8134e4:	f800283a 	ret

008134e8 <__multadd>:
  8134e8:	defffa04 	addi	sp,sp,-24
  8134ec:	dc000115 	stw	r16,4(sp)
  8134f0:	2c000417 	ldw	r16,16(r5)
  8134f4:	dc800315 	stw	r18,12(sp)
  8134f8:	dc400215 	stw	r17,8(sp)
  8134fc:	dfc00515 	stw	ra,20(sp)
  813500:	dcc00415 	stw	r19,16(sp)
  813504:	2823883a 	mov	r17,r5
  813508:	2025883a 	mov	r18,r4
  81350c:	2a400504 	addi	r9,r5,20
  813510:	0015883a 	mov	r10,zero
  813514:	4a000017 	ldw	r8,0(r9)
  813518:	4a400104 	addi	r9,r9,4
  81351c:	52800044 	addi	r10,r10,1
  813520:	40ffffcc 	andi	r3,r8,65535
  813524:	1987383a 	mul	r3,r3,r6
  813528:	4010d43a 	srli	r8,r8,16
  81352c:	19cf883a 	add	r7,r3,r7
  813530:	4191383a 	mul	r8,r8,r6
  813534:	3816d43a 	srli	r11,r7,16
  813538:	38ffffcc 	andi	r3,r7,65535
  81353c:	5a0f883a 	add	r7,r11,r8
  813540:	3810943a 	slli	r8,r7,16
  813544:	380ed43a 	srli	r7,r7,16
  813548:	40c7883a 	add	r3,r8,r3
  81354c:	48ffff15 	stw	r3,-4(r9)
  813550:	543ff016 	blt	r10,r16,813514 <__alt_data_end+0xff813514>
  813554:	38000926 	beq	r7,zero,81357c <__multadd+0x94>
  813558:	88800217 	ldw	r2,8(r17)
  81355c:	80800f0e 	bge	r16,r2,81359c <__multadd+0xb4>
  813560:	80800144 	addi	r2,r16,5
  813564:	1085883a 	add	r2,r2,r2
  813568:	1085883a 	add	r2,r2,r2
  81356c:	8885883a 	add	r2,r17,r2
  813570:	11c00015 	stw	r7,0(r2)
  813574:	84000044 	addi	r16,r16,1
  813578:	8c000415 	stw	r16,16(r17)
  81357c:	8805883a 	mov	r2,r17
  813580:	dfc00517 	ldw	ra,20(sp)
  813584:	dcc00417 	ldw	r19,16(sp)
  813588:	dc800317 	ldw	r18,12(sp)
  81358c:	dc400217 	ldw	r17,8(sp)
  813590:	dc000117 	ldw	r16,4(sp)
  813594:	dec00604 	addi	sp,sp,24
  813598:	f800283a 	ret
  81359c:	89400117 	ldw	r5,4(r17)
  8135a0:	9009883a 	mov	r4,r18
  8135a4:	d9c00015 	stw	r7,0(sp)
  8135a8:	29400044 	addi	r5,r5,1
  8135ac:	08134180 	call	813418 <_Balloc>
  8135b0:	89800417 	ldw	r6,16(r17)
  8135b4:	11000304 	addi	r4,r2,12
  8135b8:	89400304 	addi	r5,r17,12
  8135bc:	31800084 	addi	r6,r6,2
  8135c0:	318d883a 	add	r6,r6,r6
  8135c4:	318d883a 	add	r6,r6,r6
  8135c8:	1027883a 	mov	r19,r2
  8135cc:	080d6d80 	call	80d6d8 <memcpy>
  8135d0:	d9c00017 	ldw	r7,0(sp)
  8135d4:	88000a26 	beq	r17,zero,813600 <__multadd+0x118>
  8135d8:	89000117 	ldw	r4,4(r17)
  8135dc:	90c01317 	ldw	r3,76(r18)
  8135e0:	2109883a 	add	r4,r4,r4
  8135e4:	2109883a 	add	r4,r4,r4
  8135e8:	1907883a 	add	r3,r3,r4
  8135ec:	18800017 	ldw	r2,0(r3)
  8135f0:	88800015 	stw	r2,0(r17)
  8135f4:	1c400015 	stw	r17,0(r3)
  8135f8:	9823883a 	mov	r17,r19
  8135fc:	003fd806 	br	813560 <__alt_data_end+0xff813560>
  813600:	9823883a 	mov	r17,r19
  813604:	003fd606 	br	813560 <__alt_data_end+0xff813560>

00813608 <__s2b>:
  813608:	defff904 	addi	sp,sp,-28
  81360c:	dc400115 	stw	r17,4(sp)
  813610:	dc000015 	stw	r16,0(sp)
  813614:	2023883a 	mov	r17,r4
  813618:	2821883a 	mov	r16,r5
  81361c:	39000204 	addi	r4,r7,8
  813620:	01400244 	movi	r5,9
  813624:	dcc00315 	stw	r19,12(sp)
  813628:	dc800215 	stw	r18,8(sp)
  81362c:	dfc00615 	stw	ra,24(sp)
  813630:	dd400515 	stw	r21,20(sp)
  813634:	dd000415 	stw	r20,16(sp)
  813638:	3825883a 	mov	r18,r7
  81363c:	3027883a 	mov	r19,r6
  813640:	080c5800 	call	80c580 <__divsi3>
  813644:	00c00044 	movi	r3,1
  813648:	000b883a 	mov	r5,zero
  81364c:	1880030e 	bge	r3,r2,81365c <__s2b+0x54>
  813650:	18c7883a 	add	r3,r3,r3
  813654:	29400044 	addi	r5,r5,1
  813658:	18bffd16 	blt	r3,r2,813650 <__alt_data_end+0xff813650>
  81365c:	8809883a 	mov	r4,r17
  813660:	08134180 	call	813418 <_Balloc>
  813664:	d8c00717 	ldw	r3,28(sp)
  813668:	10c00515 	stw	r3,20(r2)
  81366c:	00c00044 	movi	r3,1
  813670:	10c00415 	stw	r3,16(r2)
  813674:	00c00244 	movi	r3,9
  813678:	1cc0210e 	bge	r3,r19,813700 <__s2b+0xf8>
  81367c:	80eb883a 	add	r21,r16,r3
  813680:	a829883a 	mov	r20,r21
  813684:	84e1883a 	add	r16,r16,r19
  813688:	a1c00007 	ldb	r7,0(r20)
  81368c:	8809883a 	mov	r4,r17
  813690:	a5000044 	addi	r20,r20,1
  813694:	100b883a 	mov	r5,r2
  813698:	01800284 	movi	r6,10
  81369c:	39fff404 	addi	r7,r7,-48
  8136a0:	08134e80 	call	8134e8 <__multadd>
  8136a4:	a43ff81e 	bne	r20,r16,813688 <__alt_data_end+0xff813688>
  8136a8:	ace1883a 	add	r16,r21,r19
  8136ac:	843ffe04 	addi	r16,r16,-8
  8136b0:	9c800a0e 	bge	r19,r18,8136dc <__s2b+0xd4>
  8136b4:	94e5c83a 	sub	r18,r18,r19
  8136b8:	84a5883a 	add	r18,r16,r18
  8136bc:	81c00007 	ldb	r7,0(r16)
  8136c0:	8809883a 	mov	r4,r17
  8136c4:	84000044 	addi	r16,r16,1
  8136c8:	100b883a 	mov	r5,r2
  8136cc:	01800284 	movi	r6,10
  8136d0:	39fff404 	addi	r7,r7,-48
  8136d4:	08134e80 	call	8134e8 <__multadd>
  8136d8:	84bff81e 	bne	r16,r18,8136bc <__alt_data_end+0xff8136bc>
  8136dc:	dfc00617 	ldw	ra,24(sp)
  8136e0:	dd400517 	ldw	r21,20(sp)
  8136e4:	dd000417 	ldw	r20,16(sp)
  8136e8:	dcc00317 	ldw	r19,12(sp)
  8136ec:	dc800217 	ldw	r18,8(sp)
  8136f0:	dc400117 	ldw	r17,4(sp)
  8136f4:	dc000017 	ldw	r16,0(sp)
  8136f8:	dec00704 	addi	sp,sp,28
  8136fc:	f800283a 	ret
  813700:	84000284 	addi	r16,r16,10
  813704:	1827883a 	mov	r19,r3
  813708:	003fe906 	br	8136b0 <__alt_data_end+0xff8136b0>

0081370c <__hi0bits>:
  81370c:	20bfffec 	andhi	r2,r4,65535
  813710:	1000141e 	bne	r2,zero,813764 <__hi0bits+0x58>
  813714:	2008943a 	slli	r4,r4,16
  813718:	00800404 	movi	r2,16
  81371c:	20ffc02c 	andhi	r3,r4,65280
  813720:	1800021e 	bne	r3,zero,81372c <__hi0bits+0x20>
  813724:	2008923a 	slli	r4,r4,8
  813728:	10800204 	addi	r2,r2,8
  81372c:	20fc002c 	andhi	r3,r4,61440
  813730:	1800021e 	bne	r3,zero,81373c <__hi0bits+0x30>
  813734:	2008913a 	slli	r4,r4,4
  813738:	10800104 	addi	r2,r2,4
  81373c:	20f0002c 	andhi	r3,r4,49152
  813740:	1800031e 	bne	r3,zero,813750 <__hi0bits+0x44>
  813744:	2109883a 	add	r4,r4,r4
  813748:	10800084 	addi	r2,r2,2
  81374c:	2109883a 	add	r4,r4,r4
  813750:	20000316 	blt	r4,zero,813760 <__hi0bits+0x54>
  813754:	2110002c 	andhi	r4,r4,16384
  813758:	2000041e 	bne	r4,zero,81376c <__hi0bits+0x60>
  81375c:	00800804 	movi	r2,32
  813760:	f800283a 	ret
  813764:	0005883a 	mov	r2,zero
  813768:	003fec06 	br	81371c <__alt_data_end+0xff81371c>
  81376c:	10800044 	addi	r2,r2,1
  813770:	f800283a 	ret

00813774 <__lo0bits>:
  813774:	20c00017 	ldw	r3,0(r4)
  813778:	188001cc 	andi	r2,r3,7
  81377c:	10000826 	beq	r2,zero,8137a0 <__lo0bits+0x2c>
  813780:	1880004c 	andi	r2,r3,1
  813784:	1000211e 	bne	r2,zero,81380c <__lo0bits+0x98>
  813788:	1880008c 	andi	r2,r3,2
  81378c:	1000211e 	bne	r2,zero,813814 <__lo0bits+0xa0>
  813790:	1806d0ba 	srli	r3,r3,2
  813794:	00800084 	movi	r2,2
  813798:	20c00015 	stw	r3,0(r4)
  81379c:	f800283a 	ret
  8137a0:	18bfffcc 	andi	r2,r3,65535
  8137a4:	10001326 	beq	r2,zero,8137f4 <__lo0bits+0x80>
  8137a8:	0005883a 	mov	r2,zero
  8137ac:	19403fcc 	andi	r5,r3,255
  8137b0:	2800021e 	bne	r5,zero,8137bc <__lo0bits+0x48>
  8137b4:	1806d23a 	srli	r3,r3,8
  8137b8:	10800204 	addi	r2,r2,8
  8137bc:	194003cc 	andi	r5,r3,15
  8137c0:	2800021e 	bne	r5,zero,8137cc <__lo0bits+0x58>
  8137c4:	1806d13a 	srli	r3,r3,4
  8137c8:	10800104 	addi	r2,r2,4
  8137cc:	194000cc 	andi	r5,r3,3
  8137d0:	2800021e 	bne	r5,zero,8137dc <__lo0bits+0x68>
  8137d4:	1806d0ba 	srli	r3,r3,2
  8137d8:	10800084 	addi	r2,r2,2
  8137dc:	1940004c 	andi	r5,r3,1
  8137e0:	2800081e 	bne	r5,zero,813804 <__lo0bits+0x90>
  8137e4:	1806d07a 	srli	r3,r3,1
  8137e8:	1800051e 	bne	r3,zero,813800 <__lo0bits+0x8c>
  8137ec:	00800804 	movi	r2,32
  8137f0:	f800283a 	ret
  8137f4:	1806d43a 	srli	r3,r3,16
  8137f8:	00800404 	movi	r2,16
  8137fc:	003feb06 	br	8137ac <__alt_data_end+0xff8137ac>
  813800:	10800044 	addi	r2,r2,1
  813804:	20c00015 	stw	r3,0(r4)
  813808:	f800283a 	ret
  81380c:	0005883a 	mov	r2,zero
  813810:	f800283a 	ret
  813814:	1806d07a 	srli	r3,r3,1
  813818:	00800044 	movi	r2,1
  81381c:	20c00015 	stw	r3,0(r4)
  813820:	f800283a 	ret

00813824 <__i2b>:
  813824:	defffd04 	addi	sp,sp,-12
  813828:	dc000015 	stw	r16,0(sp)
  81382c:	04000044 	movi	r16,1
  813830:	dc400115 	stw	r17,4(sp)
  813834:	2823883a 	mov	r17,r5
  813838:	800b883a 	mov	r5,r16
  81383c:	dfc00215 	stw	ra,8(sp)
  813840:	08134180 	call	813418 <_Balloc>
  813844:	14400515 	stw	r17,20(r2)
  813848:	14000415 	stw	r16,16(r2)
  81384c:	dfc00217 	ldw	ra,8(sp)
  813850:	dc400117 	ldw	r17,4(sp)
  813854:	dc000017 	ldw	r16,0(sp)
  813858:	dec00304 	addi	sp,sp,12
  81385c:	f800283a 	ret

00813860 <__multiply>:
  813860:	defffa04 	addi	sp,sp,-24
  813864:	dcc00315 	stw	r19,12(sp)
  813868:	dc800215 	stw	r18,8(sp)
  81386c:	2cc00417 	ldw	r19,16(r5)
  813870:	34800417 	ldw	r18,16(r6)
  813874:	dd000415 	stw	r20,16(sp)
  813878:	dc400115 	stw	r17,4(sp)
  81387c:	dfc00515 	stw	ra,20(sp)
  813880:	dc000015 	stw	r16,0(sp)
  813884:	2829883a 	mov	r20,r5
  813888:	3023883a 	mov	r17,r6
  81388c:	9c807016 	blt	r19,r18,813a50 <__multiply+0x1f0>
  813890:	9005883a 	mov	r2,r18
  813894:	9825883a 	mov	r18,r19
  813898:	1027883a 	mov	r19,r2
  81389c:	a0800217 	ldw	r2,8(r20)
  8138a0:	94e1883a 	add	r16,r18,r19
  8138a4:	a1400117 	ldw	r5,4(r20)
  8138a8:	1400010e 	bge	r2,r16,8138b0 <__multiply+0x50>
  8138ac:	29400044 	addi	r5,r5,1
  8138b0:	08134180 	call	813418 <_Balloc>
  8138b4:	8417883a 	add	r11,r16,r16
  8138b8:	13000504 	addi	r12,r2,20
  8138bc:	5ad7883a 	add	r11,r11,r11
  8138c0:	62d7883a 	add	r11,r12,r11
  8138c4:	6007883a 	mov	r3,r12
  8138c8:	62c0032e 	bgeu	r12,r11,8138d8 <__multiply+0x78>
  8138cc:	18000015 	stw	zero,0(r3)
  8138d0:	18c00104 	addi	r3,r3,4
  8138d4:	1afffd36 	bltu	r3,r11,8138cc <__alt_data_end+0xff8138cc>
  8138d8:	9ce7883a 	add	r19,r19,r19
  8138dc:	94a5883a 	add	r18,r18,r18
  8138e0:	89800504 	addi	r6,r17,20
  8138e4:	9ce7883a 	add	r19,r19,r19
  8138e8:	a3800504 	addi	r14,r20,20
  8138ec:	94a5883a 	add	r18,r18,r18
  8138f0:	34db883a 	add	r13,r6,r19
  8138f4:	7495883a 	add	r10,r14,r18
  8138f8:	3340422e 	bgeu	r6,r13,813a04 <__multiply+0x1a4>
  8138fc:	34400017 	ldw	r17,0(r6)
  813900:	8cbfffcc 	andi	r18,r17,65535
  813904:	90001b26 	beq	r18,zero,813974 <__multiply+0x114>
  813908:	6013883a 	mov	r9,r12
  81390c:	7023883a 	mov	r17,r14
  813910:	0011883a 	mov	r8,zero
  813914:	88c00017 	ldw	r3,0(r17)
  813918:	4bc00017 	ldw	r15,0(r9)
  81391c:	8c400104 	addi	r17,r17,4
  813920:	19ffffcc 	andi	r7,r3,65535
  813924:	3c8f383a 	mul	r7,r7,r18
  813928:	1808d43a 	srli	r4,r3,16
  81392c:	797fffcc 	andi	r5,r15,65535
  813930:	29cb883a 	add	r5,r5,r7
  813934:	2a0b883a 	add	r5,r5,r8
  813938:	2489383a 	mul	r4,r4,r18
  81393c:	7806d43a 	srli	r3,r15,16
  813940:	2810d43a 	srli	r8,r5,16
  813944:	297fffcc 	andi	r5,r5,65535
  813948:	1907883a 	add	r3,r3,r4
  81394c:	1a07883a 	add	r3,r3,r8
  813950:	1808943a 	slli	r4,r3,16
  813954:	480f883a 	mov	r7,r9
  813958:	1810d43a 	srli	r8,r3,16
  81395c:	214ab03a 	or	r5,r4,r5
  813960:	49400015 	stw	r5,0(r9)
  813964:	4a400104 	addi	r9,r9,4
  813968:	8abfea36 	bltu	r17,r10,813914 <__alt_data_end+0xff813914>
  81396c:	3a000115 	stw	r8,4(r7)
  813970:	34400017 	ldw	r17,0(r6)
  813974:	8822d43a 	srli	r17,r17,16
  813978:	88001f26 	beq	r17,zero,8139f8 <__multiply+0x198>
  81397c:	60c00017 	ldw	r3,0(r12)
  813980:	7013883a 	mov	r9,r14
  813984:	601f883a 	mov	r15,r12
  813988:	1811883a 	mov	r8,r3
  81398c:	6027883a 	mov	r19,r12
  813990:	000f883a 	mov	r7,zero
  813994:	00000106 	br	81399c <__multiply+0x13c>
  813998:	9027883a 	mov	r19,r18
  81399c:	4940000b 	ldhu	r5,0(r9)
  8139a0:	4010d43a 	srli	r8,r8,16
  8139a4:	193fffcc 	andi	r4,r3,65535
  8139a8:	2c4b383a 	mul	r5,r5,r17
  8139ac:	7bc00104 	addi	r15,r15,4
  8139b0:	4a400104 	addi	r9,r9,4
  8139b4:	2a0b883a 	add	r5,r5,r8
  8139b8:	29cb883a 	add	r5,r5,r7
  8139bc:	2806943a 	slli	r3,r5,16
  8139c0:	9c800104 	addi	r18,r19,4
  8139c4:	280ad43a 	srli	r5,r5,16
  8139c8:	1908b03a 	or	r4,r3,r4
  8139cc:	793fff15 	stw	r4,-4(r15)
  8139d0:	48ffff17 	ldw	r3,-4(r9)
  8139d4:	92000017 	ldw	r8,0(r18)
  8139d8:	1806d43a 	srli	r3,r3,16
  8139dc:	413fffcc 	andi	r4,r8,65535
  8139e0:	1c47383a 	mul	r3,r3,r17
  8139e4:	1907883a 	add	r3,r3,r4
  8139e8:	1947883a 	add	r3,r3,r5
  8139ec:	180ed43a 	srli	r7,r3,16
  8139f0:	4abfe936 	bltu	r9,r10,813998 <__alt_data_end+0xff813998>
  8139f4:	98c00115 	stw	r3,4(r19)
  8139f8:	31800104 	addi	r6,r6,4
  8139fc:	63000104 	addi	r12,r12,4
  813a00:	337fbe36 	bltu	r6,r13,8138fc <__alt_data_end+0xff8138fc>
  813a04:	0400090e 	bge	zero,r16,813a2c <__multiply+0x1cc>
  813a08:	58ffff17 	ldw	r3,-4(r11)
  813a0c:	5affff04 	addi	r11,r11,-4
  813a10:	18000326 	beq	r3,zero,813a20 <__multiply+0x1c0>
  813a14:	00000506 	br	813a2c <__multiply+0x1cc>
  813a18:	58c00017 	ldw	r3,0(r11)
  813a1c:	1800031e 	bne	r3,zero,813a2c <__multiply+0x1cc>
  813a20:	843fffc4 	addi	r16,r16,-1
  813a24:	5affff04 	addi	r11,r11,-4
  813a28:	803ffb1e 	bne	r16,zero,813a18 <__alt_data_end+0xff813a18>
  813a2c:	14000415 	stw	r16,16(r2)
  813a30:	dfc00517 	ldw	ra,20(sp)
  813a34:	dd000417 	ldw	r20,16(sp)
  813a38:	dcc00317 	ldw	r19,12(sp)
  813a3c:	dc800217 	ldw	r18,8(sp)
  813a40:	dc400117 	ldw	r17,4(sp)
  813a44:	dc000017 	ldw	r16,0(sp)
  813a48:	dec00604 	addi	sp,sp,24
  813a4c:	f800283a 	ret
  813a50:	3029883a 	mov	r20,r6
  813a54:	2823883a 	mov	r17,r5
  813a58:	003f9006 	br	81389c <__alt_data_end+0xff81389c>

00813a5c <__pow5mult>:
  813a5c:	defffa04 	addi	sp,sp,-24
  813a60:	dcc00315 	stw	r19,12(sp)
  813a64:	dc800215 	stw	r18,8(sp)
  813a68:	dc000015 	stw	r16,0(sp)
  813a6c:	dfc00515 	stw	ra,20(sp)
  813a70:	dd000415 	stw	r20,16(sp)
  813a74:	dc400115 	stw	r17,4(sp)
  813a78:	308000cc 	andi	r2,r6,3
  813a7c:	3021883a 	mov	r16,r6
  813a80:	2027883a 	mov	r19,r4
  813a84:	2825883a 	mov	r18,r5
  813a88:	10002e1e 	bne	r2,zero,813b44 <__pow5mult+0xe8>
  813a8c:	8021d0ba 	srai	r16,r16,2
  813a90:	80001a26 	beq	r16,zero,813afc <__pow5mult+0xa0>
  813a94:	9c401217 	ldw	r17,72(r19)
  813a98:	8800061e 	bne	r17,zero,813ab4 <__pow5mult+0x58>
  813a9c:	00003406 	br	813b70 <__pow5mult+0x114>
  813aa0:	8021d07a 	srai	r16,r16,1
  813aa4:	80001526 	beq	r16,zero,813afc <__pow5mult+0xa0>
  813aa8:	88800017 	ldw	r2,0(r17)
  813aac:	10001c26 	beq	r2,zero,813b20 <__pow5mult+0xc4>
  813ab0:	1023883a 	mov	r17,r2
  813ab4:	80c0004c 	andi	r3,r16,1
  813ab8:	183ff926 	beq	r3,zero,813aa0 <__alt_data_end+0xff813aa0>
  813abc:	900b883a 	mov	r5,r18
  813ac0:	880d883a 	mov	r6,r17
  813ac4:	9809883a 	mov	r4,r19
  813ac8:	08138600 	call	813860 <__multiply>
  813acc:	90001b26 	beq	r18,zero,813b3c <__pow5mult+0xe0>
  813ad0:	91c00117 	ldw	r7,4(r18)
  813ad4:	98c01317 	ldw	r3,76(r19)
  813ad8:	8021d07a 	srai	r16,r16,1
  813adc:	39cf883a 	add	r7,r7,r7
  813ae0:	39cf883a 	add	r7,r7,r7
  813ae4:	19c7883a 	add	r3,r3,r7
  813ae8:	19000017 	ldw	r4,0(r3)
  813aec:	91000015 	stw	r4,0(r18)
  813af0:	1c800015 	stw	r18,0(r3)
  813af4:	1025883a 	mov	r18,r2
  813af8:	803feb1e 	bne	r16,zero,813aa8 <__alt_data_end+0xff813aa8>
  813afc:	9005883a 	mov	r2,r18
  813b00:	dfc00517 	ldw	ra,20(sp)
  813b04:	dd000417 	ldw	r20,16(sp)
  813b08:	dcc00317 	ldw	r19,12(sp)
  813b0c:	dc800217 	ldw	r18,8(sp)
  813b10:	dc400117 	ldw	r17,4(sp)
  813b14:	dc000017 	ldw	r16,0(sp)
  813b18:	dec00604 	addi	sp,sp,24
  813b1c:	f800283a 	ret
  813b20:	9809883a 	mov	r4,r19
  813b24:	880b883a 	mov	r5,r17
  813b28:	880d883a 	mov	r6,r17
  813b2c:	08138600 	call	813860 <__multiply>
  813b30:	88800015 	stw	r2,0(r17)
  813b34:	10000015 	stw	zero,0(r2)
  813b38:	003fdd06 	br	813ab0 <__alt_data_end+0xff813ab0>
  813b3c:	1025883a 	mov	r18,r2
  813b40:	003fd706 	br	813aa0 <__alt_data_end+0xff813aa0>
  813b44:	10bfffc4 	addi	r2,r2,-1
  813b48:	1085883a 	add	r2,r2,r2
  813b4c:	00c020b4 	movhi	r3,130
  813b50:	18f04e04 	addi	r3,r3,-16072
  813b54:	1085883a 	add	r2,r2,r2
  813b58:	1885883a 	add	r2,r3,r2
  813b5c:	11800017 	ldw	r6,0(r2)
  813b60:	000f883a 	mov	r7,zero
  813b64:	08134e80 	call	8134e8 <__multadd>
  813b68:	1025883a 	mov	r18,r2
  813b6c:	003fc706 	br	813a8c <__alt_data_end+0xff813a8c>
  813b70:	05000044 	movi	r20,1
  813b74:	9809883a 	mov	r4,r19
  813b78:	a00b883a 	mov	r5,r20
  813b7c:	08134180 	call	813418 <_Balloc>
  813b80:	1023883a 	mov	r17,r2
  813b84:	00809c44 	movi	r2,625
  813b88:	88800515 	stw	r2,20(r17)
  813b8c:	8d000415 	stw	r20,16(r17)
  813b90:	9c401215 	stw	r17,72(r19)
  813b94:	88000015 	stw	zero,0(r17)
  813b98:	003fc606 	br	813ab4 <__alt_data_end+0xff813ab4>

00813b9c <__lshift>:
  813b9c:	defff904 	addi	sp,sp,-28
  813ba0:	dd000415 	stw	r20,16(sp)
  813ba4:	dcc00315 	stw	r19,12(sp)
  813ba8:	3029d17a 	srai	r20,r6,5
  813bac:	2cc00417 	ldw	r19,16(r5)
  813bb0:	28800217 	ldw	r2,8(r5)
  813bb4:	dd400515 	stw	r21,20(sp)
  813bb8:	a4e7883a 	add	r19,r20,r19
  813bbc:	dc800215 	stw	r18,8(sp)
  813bc0:	dc400115 	stw	r17,4(sp)
  813bc4:	dc000015 	stw	r16,0(sp)
  813bc8:	dfc00615 	stw	ra,24(sp)
  813bcc:	9c000044 	addi	r16,r19,1
  813bd0:	2823883a 	mov	r17,r5
  813bd4:	302b883a 	mov	r21,r6
  813bd8:	2025883a 	mov	r18,r4
  813bdc:	29400117 	ldw	r5,4(r5)
  813be0:	1400030e 	bge	r2,r16,813bf0 <__lshift+0x54>
  813be4:	1085883a 	add	r2,r2,r2
  813be8:	29400044 	addi	r5,r5,1
  813bec:	143ffd16 	blt	r2,r16,813be4 <__alt_data_end+0xff813be4>
  813bf0:	9009883a 	mov	r4,r18
  813bf4:	08134180 	call	813418 <_Balloc>
  813bf8:	11c00504 	addi	r7,r2,20
  813bfc:	0500090e 	bge	zero,r20,813c24 <__lshift+0x88>
  813c00:	3811883a 	mov	r8,r7
  813c04:	0007883a 	mov	r3,zero
  813c08:	40000015 	stw	zero,0(r8)
  813c0c:	18c00044 	addi	r3,r3,1
  813c10:	42000104 	addi	r8,r8,4
  813c14:	1d3ffc1e 	bne	r3,r20,813c08 <__alt_data_end+0xff813c08>
  813c18:	18c7883a 	add	r3,r3,r3
  813c1c:	18c7883a 	add	r3,r3,r3
  813c20:	38cf883a 	add	r7,r7,r3
  813c24:	89000417 	ldw	r4,16(r17)
  813c28:	88c00504 	addi	r3,r17,20
  813c2c:	a98007cc 	andi	r6,r21,31
  813c30:	2109883a 	add	r4,r4,r4
  813c34:	2109883a 	add	r4,r4,r4
  813c38:	1909883a 	add	r4,r3,r4
  813c3c:	30002326 	beq	r6,zero,813ccc <__lshift+0x130>
  813c40:	01400804 	movi	r5,32
  813c44:	298bc83a 	sub	r5,r5,r6
  813c48:	0013883a 	mov	r9,zero
  813c4c:	1a000017 	ldw	r8,0(r3)
  813c50:	3815883a 	mov	r10,r7
  813c54:	39c00104 	addi	r7,r7,4
  813c58:	4190983a 	sll	r8,r8,r6
  813c5c:	18c00104 	addi	r3,r3,4
  813c60:	4a10b03a 	or	r8,r9,r8
  813c64:	3a3fff15 	stw	r8,-4(r7)
  813c68:	1a3fff17 	ldw	r8,-4(r3)
  813c6c:	4152d83a 	srl	r9,r8,r5
  813c70:	193ff636 	bltu	r3,r4,813c4c <__alt_data_end+0xff813c4c>
  813c74:	52400115 	stw	r9,4(r10)
  813c78:	48001a1e 	bne	r9,zero,813ce4 <__lshift+0x148>
  813c7c:	843fffc4 	addi	r16,r16,-1
  813c80:	14000415 	stw	r16,16(r2)
  813c84:	88000826 	beq	r17,zero,813ca8 <__lshift+0x10c>
  813c88:	89000117 	ldw	r4,4(r17)
  813c8c:	90c01317 	ldw	r3,76(r18)
  813c90:	2109883a 	add	r4,r4,r4
  813c94:	2109883a 	add	r4,r4,r4
  813c98:	1907883a 	add	r3,r3,r4
  813c9c:	19000017 	ldw	r4,0(r3)
  813ca0:	89000015 	stw	r4,0(r17)
  813ca4:	1c400015 	stw	r17,0(r3)
  813ca8:	dfc00617 	ldw	ra,24(sp)
  813cac:	dd400517 	ldw	r21,20(sp)
  813cb0:	dd000417 	ldw	r20,16(sp)
  813cb4:	dcc00317 	ldw	r19,12(sp)
  813cb8:	dc800217 	ldw	r18,8(sp)
  813cbc:	dc400117 	ldw	r17,4(sp)
  813cc0:	dc000017 	ldw	r16,0(sp)
  813cc4:	dec00704 	addi	sp,sp,28
  813cc8:	f800283a 	ret
  813ccc:	19400017 	ldw	r5,0(r3)
  813cd0:	39c00104 	addi	r7,r7,4
  813cd4:	18c00104 	addi	r3,r3,4
  813cd8:	397fff15 	stw	r5,-4(r7)
  813cdc:	193ffb36 	bltu	r3,r4,813ccc <__alt_data_end+0xff813ccc>
  813ce0:	003fe606 	br	813c7c <__alt_data_end+0xff813c7c>
  813ce4:	9c000084 	addi	r16,r19,2
  813ce8:	003fe406 	br	813c7c <__alt_data_end+0xff813c7c>

00813cec <__mcmp>:
  813cec:	20800417 	ldw	r2,16(r4)
  813cf0:	28c00417 	ldw	r3,16(r5)
  813cf4:	10c5c83a 	sub	r2,r2,r3
  813cf8:	1000111e 	bne	r2,zero,813d40 <__mcmp+0x54>
  813cfc:	18c7883a 	add	r3,r3,r3
  813d00:	18c7883a 	add	r3,r3,r3
  813d04:	21000504 	addi	r4,r4,20
  813d08:	29400504 	addi	r5,r5,20
  813d0c:	20c5883a 	add	r2,r4,r3
  813d10:	28cb883a 	add	r5,r5,r3
  813d14:	00000106 	br	813d1c <__mcmp+0x30>
  813d18:	20800a2e 	bgeu	r4,r2,813d44 <__mcmp+0x58>
  813d1c:	10bfff04 	addi	r2,r2,-4
  813d20:	297fff04 	addi	r5,r5,-4
  813d24:	11800017 	ldw	r6,0(r2)
  813d28:	28c00017 	ldw	r3,0(r5)
  813d2c:	30fffa26 	beq	r6,r3,813d18 <__alt_data_end+0xff813d18>
  813d30:	30c00236 	bltu	r6,r3,813d3c <__mcmp+0x50>
  813d34:	00800044 	movi	r2,1
  813d38:	f800283a 	ret
  813d3c:	00bfffc4 	movi	r2,-1
  813d40:	f800283a 	ret
  813d44:	0005883a 	mov	r2,zero
  813d48:	f800283a 	ret

00813d4c <__mdiff>:
  813d4c:	defffb04 	addi	sp,sp,-20
  813d50:	dc000015 	stw	r16,0(sp)
  813d54:	2821883a 	mov	r16,r5
  813d58:	dcc00315 	stw	r19,12(sp)
  813d5c:	300b883a 	mov	r5,r6
  813d60:	2027883a 	mov	r19,r4
  813d64:	8009883a 	mov	r4,r16
  813d68:	dc800215 	stw	r18,8(sp)
  813d6c:	dfc00415 	stw	ra,16(sp)
  813d70:	dc400115 	stw	r17,4(sp)
  813d74:	3025883a 	mov	r18,r6
  813d78:	0813cec0 	call	813cec <__mcmp>
  813d7c:	10005226 	beq	r2,zero,813ec8 <__mdiff+0x17c>
  813d80:	10004c16 	blt	r2,zero,813eb4 <__mdiff+0x168>
  813d84:	0023883a 	mov	r17,zero
  813d88:	81400117 	ldw	r5,4(r16)
  813d8c:	9809883a 	mov	r4,r19
  813d90:	08134180 	call	813418 <_Balloc>
  813d94:	83400417 	ldw	r13,16(r16)
  813d98:	93800417 	ldw	r14,16(r18)
  813d9c:	81000504 	addi	r4,r16,20
  813da0:	6b59883a 	add	r12,r13,r13
  813da4:	739d883a 	add	r14,r14,r14
  813da8:	6319883a 	add	r12,r12,r12
  813dac:	91800504 	addi	r6,r18,20
  813db0:	739d883a 	add	r14,r14,r14
  813db4:	14400315 	stw	r17,12(r2)
  813db8:	2319883a 	add	r12,r4,r12
  813dbc:	339d883a 	add	r14,r6,r14
  813dc0:	12400504 	addi	r9,r2,20
  813dc4:	0007883a 	mov	r3,zero
  813dc8:	22000017 	ldw	r8,0(r4)
  813dcc:	32800017 	ldw	r10,0(r6)
  813dd0:	4ac00104 	addi	r11,r9,4
  813dd4:	41ffffcc 	andi	r7,r8,65535
  813dd8:	38c7883a 	add	r3,r7,r3
  813ddc:	51ffffcc 	andi	r7,r10,65535
  813de0:	19cfc83a 	sub	r7,r3,r7
  813de4:	4010d43a 	srli	r8,r8,16
  813de8:	5014d43a 	srli	r10,r10,16
  813dec:	3807d43a 	srai	r3,r7,16
  813df0:	39ffffcc 	andi	r7,r7,65535
  813df4:	4291c83a 	sub	r8,r8,r10
  813df8:	40c7883a 	add	r3,r8,r3
  813dfc:	1810943a 	slli	r8,r3,16
  813e00:	31800104 	addi	r6,r6,4
  813e04:	21000104 	addi	r4,r4,4
  813e08:	41ceb03a 	or	r7,r8,r7
  813e0c:	49c00015 	stw	r7,0(r9)
  813e10:	1807d43a 	srai	r3,r3,16
  813e14:	580b883a 	mov	r5,r11
  813e18:	5813883a 	mov	r9,r11
  813e1c:	33bfea36 	bltu	r6,r14,813dc8 <__alt_data_end+0xff813dc8>
  813e20:	2011883a 	mov	r8,r4
  813e24:	2300152e 	bgeu	r4,r12,813e7c <__mdiff+0x130>
  813e28:	21400017 	ldw	r5,0(r4)
  813e2c:	4a400104 	addi	r9,r9,4
  813e30:	21000104 	addi	r4,r4,4
  813e34:	29ffffcc 	andi	r7,r5,65535
  813e38:	38c7883a 	add	r3,r7,r3
  813e3c:	280ad43a 	srli	r5,r5,16
  813e40:	180dd43a 	srai	r6,r3,16
  813e44:	19ffffcc 	andi	r7,r3,65535
  813e48:	3147883a 	add	r3,r6,r5
  813e4c:	180a943a 	slli	r5,r3,16
  813e50:	1807d43a 	srai	r3,r3,16
  813e54:	29ceb03a 	or	r7,r5,r7
  813e58:	49ffff15 	stw	r7,-4(r9)
  813e5c:	233ff236 	bltu	r4,r12,813e28 <__alt_data_end+0xff813e28>
  813e60:	0206303a 	nor	r3,zero,r8
  813e64:	1b07883a 	add	r3,r3,r12
  813e68:	1806d0ba 	srli	r3,r3,2
  813e6c:	18c00044 	addi	r3,r3,1
  813e70:	18c7883a 	add	r3,r3,r3
  813e74:	18c7883a 	add	r3,r3,r3
  813e78:	58cb883a 	add	r5,r11,r3
  813e7c:	28ffff04 	addi	r3,r5,-4
  813e80:	3800041e 	bne	r7,zero,813e94 <__mdiff+0x148>
  813e84:	18ffff04 	addi	r3,r3,-4
  813e88:	19000017 	ldw	r4,0(r3)
  813e8c:	6b7fffc4 	addi	r13,r13,-1
  813e90:	203ffc26 	beq	r4,zero,813e84 <__alt_data_end+0xff813e84>
  813e94:	13400415 	stw	r13,16(r2)
  813e98:	dfc00417 	ldw	ra,16(sp)
  813e9c:	dcc00317 	ldw	r19,12(sp)
  813ea0:	dc800217 	ldw	r18,8(sp)
  813ea4:	dc400117 	ldw	r17,4(sp)
  813ea8:	dc000017 	ldw	r16,0(sp)
  813eac:	dec00504 	addi	sp,sp,20
  813eb0:	f800283a 	ret
  813eb4:	8005883a 	mov	r2,r16
  813eb8:	04400044 	movi	r17,1
  813ebc:	9021883a 	mov	r16,r18
  813ec0:	1025883a 	mov	r18,r2
  813ec4:	003fb006 	br	813d88 <__alt_data_end+0xff813d88>
  813ec8:	9809883a 	mov	r4,r19
  813ecc:	000b883a 	mov	r5,zero
  813ed0:	08134180 	call	813418 <_Balloc>
  813ed4:	00c00044 	movi	r3,1
  813ed8:	10c00415 	stw	r3,16(r2)
  813edc:	10000515 	stw	zero,20(r2)
  813ee0:	003fed06 	br	813e98 <__alt_data_end+0xff813e98>

00813ee4 <__ulp>:
  813ee4:	295ffc2c 	andhi	r5,r5,32752
  813ee8:	00bf3034 	movhi	r2,64704
  813eec:	2887883a 	add	r3,r5,r2
  813ef0:	00c0020e 	bge	zero,r3,813efc <__ulp+0x18>
  813ef4:	0005883a 	mov	r2,zero
  813ef8:	f800283a 	ret
  813efc:	00c7c83a 	sub	r3,zero,r3
  813f00:	180bd53a 	srai	r5,r3,20
  813f04:	008004c4 	movi	r2,19
  813f08:	11400a0e 	bge	r2,r5,813f34 <__ulp+0x50>
  813f0c:	00800c84 	movi	r2,50
  813f10:	0007883a 	mov	r3,zero
  813f14:	11400516 	blt	r2,r5,813f2c <__ulp+0x48>
  813f18:	00800cc4 	movi	r2,51
  813f1c:	114bc83a 	sub	r5,r2,r5
  813f20:	00800044 	movi	r2,1
  813f24:	1144983a 	sll	r2,r2,r5
  813f28:	f800283a 	ret
  813f2c:	00800044 	movi	r2,1
  813f30:	f800283a 	ret
  813f34:	00800234 	movhi	r2,8
  813f38:	1147d83a 	sra	r3,r2,r5
  813f3c:	0005883a 	mov	r2,zero
  813f40:	f800283a 	ret

00813f44 <__b2d>:
  813f44:	defffa04 	addi	sp,sp,-24
  813f48:	dc000015 	stw	r16,0(sp)
  813f4c:	24000417 	ldw	r16,16(r4)
  813f50:	dc400115 	stw	r17,4(sp)
  813f54:	24400504 	addi	r17,r4,20
  813f58:	8421883a 	add	r16,r16,r16
  813f5c:	8421883a 	add	r16,r16,r16
  813f60:	8c21883a 	add	r16,r17,r16
  813f64:	dc800215 	stw	r18,8(sp)
  813f68:	84bfff17 	ldw	r18,-4(r16)
  813f6c:	dd000415 	stw	r20,16(sp)
  813f70:	dcc00315 	stw	r19,12(sp)
  813f74:	9009883a 	mov	r4,r18
  813f78:	2829883a 	mov	r20,r5
  813f7c:	dfc00515 	stw	ra,20(sp)
  813f80:	081370c0 	call	81370c <__hi0bits>
  813f84:	00c00804 	movi	r3,32
  813f88:	1887c83a 	sub	r3,r3,r2
  813f8c:	a0c00015 	stw	r3,0(r20)
  813f90:	00c00284 	movi	r3,10
  813f94:	84ffff04 	addi	r19,r16,-4
  813f98:	18801216 	blt	r3,r2,813fe4 <__b2d+0xa0>
  813f9c:	014002c4 	movi	r5,11
  813fa0:	2889c83a 	sub	r4,r5,r2
  813fa4:	9106d83a 	srl	r3,r18,r4
  813fa8:	18cffc34 	orhi	r3,r3,16368
  813fac:	8cc0282e 	bgeu	r17,r19,814050 <__b2d+0x10c>
  813fb0:	817ffe17 	ldw	r5,-8(r16)
  813fb4:	290ad83a 	srl	r5,r5,r4
  813fb8:	10800544 	addi	r2,r2,21
  813fbc:	9084983a 	sll	r2,r18,r2
  813fc0:	2884b03a 	or	r2,r5,r2
  813fc4:	dfc00517 	ldw	ra,20(sp)
  813fc8:	dd000417 	ldw	r20,16(sp)
  813fcc:	dcc00317 	ldw	r19,12(sp)
  813fd0:	dc800217 	ldw	r18,8(sp)
  813fd4:	dc400117 	ldw	r17,4(sp)
  813fd8:	dc000017 	ldw	r16,0(sp)
  813fdc:	dec00604 	addi	sp,sp,24
  813fe0:	f800283a 	ret
  813fe4:	113ffd44 	addi	r4,r2,-11
  813fe8:	8cc00f2e 	bgeu	r17,r19,814028 <__b2d+0xe4>
  813fec:	81bffe04 	addi	r6,r16,-8
  813ff0:	817ffe17 	ldw	r5,-8(r16)
  813ff4:	20001326 	beq	r4,zero,814044 <__b2d+0x100>
  813ff8:	00c00ac4 	movi	r3,43
  813ffc:	1885c83a 	sub	r2,r3,r2
  814000:	2886d83a 	srl	r3,r5,r2
  814004:	9124983a 	sll	r18,r18,r4
  814008:	90e4b03a 	or	r18,r18,r3
  81400c:	90cffc34 	orhi	r3,r18,16368
  814010:	8980112e 	bgeu	r17,r6,814058 <__b2d+0x114>
  814014:	81bffd17 	ldw	r6,-12(r16)
  814018:	308cd83a 	srl	r6,r6,r2
  81401c:	2904983a 	sll	r2,r5,r4
  814020:	1184b03a 	or	r2,r2,r6
  814024:	003fe706 	br	813fc4 <__alt_data_end+0xff813fc4>
  814028:	20000526 	beq	r4,zero,814040 <__b2d+0xfc>
  81402c:	9124983a 	sll	r18,r18,r4
  814030:	000d883a 	mov	r6,zero
  814034:	000b883a 	mov	r5,zero
  814038:	90cffc34 	orhi	r3,r18,16368
  81403c:	003ff706 	br	81401c <__alt_data_end+0xff81401c>
  814040:	000b883a 	mov	r5,zero
  814044:	90cffc34 	orhi	r3,r18,16368
  814048:	2805883a 	mov	r2,r5
  81404c:	003fdd06 	br	813fc4 <__alt_data_end+0xff813fc4>
  814050:	000b883a 	mov	r5,zero
  814054:	003fd806 	br	813fb8 <__alt_data_end+0xff813fb8>
  814058:	000d883a 	mov	r6,zero
  81405c:	003fef06 	br	81401c <__alt_data_end+0xff81401c>

00814060 <__d2b>:
  814060:	defff704 	addi	sp,sp,-36
  814064:	dc000215 	stw	r16,8(sp)
  814068:	3021883a 	mov	r16,r6
  81406c:	dc400315 	stw	r17,12(sp)
  814070:	8022907a 	slli	r17,r16,1
  814074:	dd400715 	stw	r21,28(sp)
  814078:	282b883a 	mov	r21,r5
  81407c:	01400044 	movi	r5,1
  814080:	dd000615 	stw	r20,24(sp)
  814084:	dcc00515 	stw	r19,20(sp)
  814088:	dc800415 	stw	r18,16(sp)
  81408c:	dfc00815 	stw	ra,32(sp)
  814090:	3829883a 	mov	r20,r7
  814094:	dc800917 	ldw	r18,36(sp)
  814098:	8822d57a 	srli	r17,r17,21
  81409c:	08134180 	call	813418 <_Balloc>
  8140a0:	1027883a 	mov	r19,r2
  8140a4:	00800434 	movhi	r2,16
  8140a8:	10bfffc4 	addi	r2,r2,-1
  8140ac:	808c703a 	and	r6,r16,r2
  8140b0:	88000126 	beq	r17,zero,8140b8 <__d2b+0x58>
  8140b4:	31800434 	orhi	r6,r6,16
  8140b8:	d9800015 	stw	r6,0(sp)
  8140bc:	a8001f26 	beq	r21,zero,81413c <__d2b+0xdc>
  8140c0:	d9000104 	addi	r4,sp,4
  8140c4:	dd400115 	stw	r21,4(sp)
  8140c8:	08137740 	call	813774 <__lo0bits>
  8140cc:	d8c00017 	ldw	r3,0(sp)
  8140d0:	1000291e 	bne	r2,zero,814178 <__d2b+0x118>
  8140d4:	d9000117 	ldw	r4,4(sp)
  8140d8:	99000515 	stw	r4,20(r19)
  8140dc:	1820c03a 	cmpne	r16,r3,zero
  8140e0:	84000044 	addi	r16,r16,1
  8140e4:	98c00615 	stw	r3,24(r19)
  8140e8:	9c000415 	stw	r16,16(r19)
  8140ec:	88001b1e 	bne	r17,zero,81415c <__d2b+0xfc>
  8140f0:	800690ba 	slli	r3,r16,2
  8140f4:	10bef384 	addi	r2,r2,-1074
  8140f8:	a0800015 	stw	r2,0(r20)
  8140fc:	98c5883a 	add	r2,r19,r3
  814100:	11000417 	ldw	r4,16(r2)
  814104:	8020917a 	slli	r16,r16,5
  814108:	081370c0 	call	81370c <__hi0bits>
  81410c:	8085c83a 	sub	r2,r16,r2
  814110:	90800015 	stw	r2,0(r18)
  814114:	9805883a 	mov	r2,r19
  814118:	dfc00817 	ldw	ra,32(sp)
  81411c:	dd400717 	ldw	r21,28(sp)
  814120:	dd000617 	ldw	r20,24(sp)
  814124:	dcc00517 	ldw	r19,20(sp)
  814128:	dc800417 	ldw	r18,16(sp)
  81412c:	dc400317 	ldw	r17,12(sp)
  814130:	dc000217 	ldw	r16,8(sp)
  814134:	dec00904 	addi	sp,sp,36
  814138:	f800283a 	ret
  81413c:	d809883a 	mov	r4,sp
  814140:	08137740 	call	813774 <__lo0bits>
  814144:	d8c00017 	ldw	r3,0(sp)
  814148:	04000044 	movi	r16,1
  81414c:	9c000415 	stw	r16,16(r19)
  814150:	98c00515 	stw	r3,20(r19)
  814154:	10800804 	addi	r2,r2,32
  814158:	883fe526 	beq	r17,zero,8140f0 <__alt_data_end+0xff8140f0>
  81415c:	8c7ef344 	addi	r17,r17,-1075
  814160:	88a3883a 	add	r17,r17,r2
  814164:	00c00d44 	movi	r3,53
  814168:	a4400015 	stw	r17,0(r20)
  81416c:	1885c83a 	sub	r2,r3,r2
  814170:	90800015 	stw	r2,0(r18)
  814174:	003fe706 	br	814114 <__alt_data_end+0xff814114>
  814178:	01000804 	movi	r4,32
  81417c:	2089c83a 	sub	r4,r4,r2
  814180:	1908983a 	sll	r4,r3,r4
  814184:	d9400117 	ldw	r5,4(sp)
  814188:	1886d83a 	srl	r3,r3,r2
  81418c:	2148b03a 	or	r4,r4,r5
  814190:	99000515 	stw	r4,20(r19)
  814194:	d8c00015 	stw	r3,0(sp)
  814198:	003fd006 	br	8140dc <__alt_data_end+0xff8140dc>

0081419c <__ratio>:
  81419c:	defff904 	addi	sp,sp,-28
  8141a0:	dc400315 	stw	r17,12(sp)
  8141a4:	2823883a 	mov	r17,r5
  8141a8:	d9400104 	addi	r5,sp,4
  8141ac:	dfc00615 	stw	ra,24(sp)
  8141b0:	dcc00515 	stw	r19,20(sp)
  8141b4:	dc800415 	stw	r18,16(sp)
  8141b8:	2027883a 	mov	r19,r4
  8141bc:	dc000215 	stw	r16,8(sp)
  8141c0:	0813f440 	call	813f44 <__b2d>
  8141c4:	8809883a 	mov	r4,r17
  8141c8:	d80b883a 	mov	r5,sp
  8141cc:	1025883a 	mov	r18,r2
  8141d0:	1821883a 	mov	r16,r3
  8141d4:	0813f440 	call	813f44 <__b2d>
  8141d8:	8a400417 	ldw	r9,16(r17)
  8141dc:	9a000417 	ldw	r8,16(r19)
  8141e0:	100d883a 	mov	r6,r2
  8141e4:	d8800017 	ldw	r2,0(sp)
  8141e8:	4251c83a 	sub	r8,r8,r9
  8141ec:	4012917a 	slli	r9,r8,5
  8141f0:	da000117 	ldw	r8,4(sp)
  8141f4:	4091c83a 	sub	r8,r8,r2
  8141f8:	4251883a 	add	r8,r8,r9
  8141fc:	02000d0e 	bge	zero,r8,814234 <__ratio+0x98>
  814200:	4010953a 	slli	r8,r8,20
  814204:	4421883a 	add	r16,r8,r16
  814208:	9009883a 	mov	r4,r18
  81420c:	800b883a 	mov	r5,r16
  814210:	180f883a 	mov	r7,r3
  814214:	08181b00 	call	8181b0 <__divdf3>
  814218:	dfc00617 	ldw	ra,24(sp)
  81421c:	dcc00517 	ldw	r19,20(sp)
  814220:	dc800417 	ldw	r18,16(sp)
  814224:	dc400317 	ldw	r17,12(sp)
  814228:	dc000217 	ldw	r16,8(sp)
  81422c:	dec00704 	addi	sp,sp,28
  814230:	f800283a 	ret
  814234:	4010953a 	slli	r8,r8,20
  814238:	1a07c83a 	sub	r3,r3,r8
  81423c:	003ff206 	br	814208 <__alt_data_end+0xff814208>

00814240 <_mprec_log10>:
  814240:	defffe04 	addi	sp,sp,-8
  814244:	dc000015 	stw	r16,0(sp)
  814248:	dfc00115 	stw	ra,4(sp)
  81424c:	008005c4 	movi	r2,23
  814250:	2021883a 	mov	r16,r4
  814254:	11000d0e 	bge	r2,r4,81428c <_mprec_log10+0x4c>
  814258:	0005883a 	mov	r2,zero
  81425c:	00cffc34 	movhi	r3,16368
  814260:	843fffc4 	addi	r16,r16,-1
  814264:	1009883a 	mov	r4,r2
  814268:	180b883a 	mov	r5,r3
  81426c:	000d883a 	mov	r6,zero
  814270:	01d00934 	movhi	r7,16420
  814274:	0818cc00 	call	818cc0 <__muldf3>
  814278:	803ff91e 	bne	r16,zero,814260 <__alt_data_end+0xff814260>
  81427c:	dfc00117 	ldw	ra,4(sp)
  814280:	dc000017 	ldw	r16,0(sp)
  814284:	dec00204 	addi	sp,sp,8
  814288:	f800283a 	ret
  81428c:	202090fa 	slli	r16,r4,3
  814290:	008020b4 	movhi	r2,130
  814294:	10b06504 	addi	r2,r2,-15980
  814298:	1421883a 	add	r16,r2,r16
  81429c:	80800017 	ldw	r2,0(r16)
  8142a0:	80c00117 	ldw	r3,4(r16)
  8142a4:	dfc00117 	ldw	ra,4(sp)
  8142a8:	dc000017 	ldw	r16,0(sp)
  8142ac:	dec00204 	addi	sp,sp,8
  8142b0:	f800283a 	ret

008142b4 <__copybits>:
  8142b4:	297fffc4 	addi	r5,r5,-1
  8142b8:	280fd17a 	srai	r7,r5,5
  8142bc:	30c00417 	ldw	r3,16(r6)
  8142c0:	30800504 	addi	r2,r6,20
  8142c4:	39c00044 	addi	r7,r7,1
  8142c8:	18c7883a 	add	r3,r3,r3
  8142cc:	39cf883a 	add	r7,r7,r7
  8142d0:	18c7883a 	add	r3,r3,r3
  8142d4:	39cf883a 	add	r7,r7,r7
  8142d8:	10c7883a 	add	r3,r2,r3
  8142dc:	21cf883a 	add	r7,r4,r7
  8142e0:	10c00d2e 	bgeu	r2,r3,814318 <__copybits+0x64>
  8142e4:	200b883a 	mov	r5,r4
  8142e8:	12000017 	ldw	r8,0(r2)
  8142ec:	29400104 	addi	r5,r5,4
  8142f0:	10800104 	addi	r2,r2,4
  8142f4:	2a3fff15 	stw	r8,-4(r5)
  8142f8:	10fffb36 	bltu	r2,r3,8142e8 <__alt_data_end+0xff8142e8>
  8142fc:	1985c83a 	sub	r2,r3,r6
  814300:	10bffac4 	addi	r2,r2,-21
  814304:	1004d0ba 	srli	r2,r2,2
  814308:	10800044 	addi	r2,r2,1
  81430c:	1085883a 	add	r2,r2,r2
  814310:	1085883a 	add	r2,r2,r2
  814314:	2089883a 	add	r4,r4,r2
  814318:	21c0032e 	bgeu	r4,r7,814328 <__copybits+0x74>
  81431c:	20000015 	stw	zero,0(r4)
  814320:	21000104 	addi	r4,r4,4
  814324:	21fffd36 	bltu	r4,r7,81431c <__alt_data_end+0xff81431c>
  814328:	f800283a 	ret

0081432c <__any_on>:
  81432c:	20c00417 	ldw	r3,16(r4)
  814330:	2805d17a 	srai	r2,r5,5
  814334:	21000504 	addi	r4,r4,20
  814338:	18800d0e 	bge	r3,r2,814370 <__any_on+0x44>
  81433c:	18c7883a 	add	r3,r3,r3
  814340:	18c7883a 	add	r3,r3,r3
  814344:	20c7883a 	add	r3,r4,r3
  814348:	20c0192e 	bgeu	r4,r3,8143b0 <__any_on+0x84>
  81434c:	18bfff17 	ldw	r2,-4(r3)
  814350:	18ffff04 	addi	r3,r3,-4
  814354:	1000041e 	bne	r2,zero,814368 <__any_on+0x3c>
  814358:	20c0142e 	bgeu	r4,r3,8143ac <__any_on+0x80>
  81435c:	18ffff04 	addi	r3,r3,-4
  814360:	19400017 	ldw	r5,0(r3)
  814364:	283ffc26 	beq	r5,zero,814358 <__alt_data_end+0xff814358>
  814368:	00800044 	movi	r2,1
  81436c:	f800283a 	ret
  814370:	10c00a0e 	bge	r2,r3,81439c <__any_on+0x70>
  814374:	1085883a 	add	r2,r2,r2
  814378:	1085883a 	add	r2,r2,r2
  81437c:	294007cc 	andi	r5,r5,31
  814380:	2087883a 	add	r3,r4,r2
  814384:	283ff026 	beq	r5,zero,814348 <__alt_data_end+0xff814348>
  814388:	19800017 	ldw	r6,0(r3)
  81438c:	3144d83a 	srl	r2,r6,r5
  814390:	114a983a 	sll	r5,r2,r5
  814394:	29bff41e 	bne	r5,r6,814368 <__alt_data_end+0xff814368>
  814398:	003feb06 	br	814348 <__alt_data_end+0xff814348>
  81439c:	1085883a 	add	r2,r2,r2
  8143a0:	1085883a 	add	r2,r2,r2
  8143a4:	2087883a 	add	r3,r4,r2
  8143a8:	003fe706 	br	814348 <__alt_data_end+0xff814348>
  8143ac:	f800283a 	ret
  8143b0:	0005883a 	mov	r2,zero
  8143b4:	f800283a 	ret

008143b8 <_putc_r>:
  8143b8:	defffc04 	addi	sp,sp,-16
  8143bc:	dc000215 	stw	r16,8(sp)
  8143c0:	dfc00315 	stw	ra,12(sp)
  8143c4:	2021883a 	mov	r16,r4
  8143c8:	20000226 	beq	r4,zero,8143d4 <_putc_r+0x1c>
  8143cc:	20800e17 	ldw	r2,56(r4)
  8143d0:	10001b26 	beq	r2,zero,814440 <_putc_r+0x88>
  8143d4:	30800217 	ldw	r2,8(r6)
  8143d8:	10bfffc4 	addi	r2,r2,-1
  8143dc:	30800215 	stw	r2,8(r6)
  8143e0:	10000a16 	blt	r2,zero,81440c <_putc_r+0x54>
  8143e4:	30800017 	ldw	r2,0(r6)
  8143e8:	11400005 	stb	r5,0(r2)
  8143ec:	30800017 	ldw	r2,0(r6)
  8143f0:	10c00044 	addi	r3,r2,1
  8143f4:	30c00015 	stw	r3,0(r6)
  8143f8:	10800003 	ldbu	r2,0(r2)
  8143fc:	dfc00317 	ldw	ra,12(sp)
  814400:	dc000217 	ldw	r16,8(sp)
  814404:	dec00404 	addi	sp,sp,16
  814408:	f800283a 	ret
  81440c:	30c00617 	ldw	r3,24(r6)
  814410:	10c00616 	blt	r2,r3,81442c <_putc_r+0x74>
  814414:	30800017 	ldw	r2,0(r6)
  814418:	00c00284 	movi	r3,10
  81441c:	11400005 	stb	r5,0(r2)
  814420:	30800017 	ldw	r2,0(r6)
  814424:	11400003 	ldbu	r5,0(r2)
  814428:	28fff11e 	bne	r5,r3,8143f0 <__alt_data_end+0xff8143f0>
  81442c:	8009883a 	mov	r4,r16
  814430:	dfc00317 	ldw	ra,12(sp)
  814434:	dc000217 	ldw	r16,8(sp)
  814438:	dec00404 	addi	sp,sp,16
  81443c:	0815b5c1 	jmpi	815b5c <__swbuf_r>
  814440:	d9400015 	stw	r5,0(sp)
  814444:	d9800115 	stw	r6,4(sp)
  814448:	0812b080 	call	812b08 <__sinit>
  81444c:	d9800117 	ldw	r6,4(sp)
  814450:	d9400017 	ldw	r5,0(sp)
  814454:	003fdf06 	br	8143d4 <__alt_data_end+0xff8143d4>

00814458 <putc>:
  814458:	008020b4 	movhi	r2,130
  81445c:	defffc04 	addi	sp,sp,-16
  814460:	10b83f04 	addi	r2,r2,-7940
  814464:	dc400115 	stw	r17,4(sp)
  814468:	14400017 	ldw	r17,0(r2)
  81446c:	dc800215 	stw	r18,8(sp)
  814470:	dc000015 	stw	r16,0(sp)
  814474:	dfc00315 	stw	ra,12(sp)
  814478:	2025883a 	mov	r18,r4
  81447c:	2821883a 	mov	r16,r5
  814480:	88000226 	beq	r17,zero,81448c <putc+0x34>
  814484:	88800e17 	ldw	r2,56(r17)
  814488:	10001a26 	beq	r2,zero,8144f4 <putc+0x9c>
  81448c:	80800217 	ldw	r2,8(r16)
  814490:	10bfffc4 	addi	r2,r2,-1
  814494:	80800215 	stw	r2,8(r16)
  814498:	10000c16 	blt	r2,zero,8144cc <putc+0x74>
  81449c:	80800017 	ldw	r2,0(r16)
  8144a0:	14800005 	stb	r18,0(r2)
  8144a4:	80800017 	ldw	r2,0(r16)
  8144a8:	10c00044 	addi	r3,r2,1
  8144ac:	80c00015 	stw	r3,0(r16)
  8144b0:	10800003 	ldbu	r2,0(r2)
  8144b4:	dfc00317 	ldw	ra,12(sp)
  8144b8:	dc800217 	ldw	r18,8(sp)
  8144bc:	dc400117 	ldw	r17,4(sp)
  8144c0:	dc000017 	ldw	r16,0(sp)
  8144c4:	dec00404 	addi	sp,sp,16
  8144c8:	f800283a 	ret
  8144cc:	80c00617 	ldw	r3,24(r16)
  8144d0:	10c00b16 	blt	r2,r3,814500 <putc+0xa8>
  8144d4:	80800017 	ldw	r2,0(r16)
  8144d8:	00c00284 	movi	r3,10
  8144dc:	14800005 	stb	r18,0(r2)
  8144e0:	80800017 	ldw	r2,0(r16)
  8144e4:	11400003 	ldbu	r5,0(r2)
  8144e8:	28ffef1e 	bne	r5,r3,8144a8 <__alt_data_end+0xff8144a8>
  8144ec:	8809883a 	mov	r4,r17
  8144f0:	00000506 	br	814508 <putc+0xb0>
  8144f4:	8809883a 	mov	r4,r17
  8144f8:	0812b080 	call	812b08 <__sinit>
  8144fc:	003fe306 	br	81448c <__alt_data_end+0xff81448c>
  814500:	8809883a 	mov	r4,r17
  814504:	900b883a 	mov	r5,r18
  814508:	800d883a 	mov	r6,r16
  81450c:	dfc00317 	ldw	ra,12(sp)
  814510:	dc800217 	ldw	r18,8(sp)
  814514:	dc400117 	ldw	r17,4(sp)
  814518:	dc000017 	ldw	r16,0(sp)
  81451c:	dec00404 	addi	sp,sp,16
  814520:	0815b5c1 	jmpi	815b5c <__swbuf_r>

00814524 <_read_r>:
  814524:	defffd04 	addi	sp,sp,-12
  814528:	dc000015 	stw	r16,0(sp)
  81452c:	040020b4 	movhi	r16,130
  814530:	dc400115 	stw	r17,4(sp)
  814534:	843fbc04 	addi	r16,r16,-272
  814538:	2023883a 	mov	r17,r4
  81453c:	2809883a 	mov	r4,r5
  814540:	300b883a 	mov	r5,r6
  814544:	380d883a 	mov	r6,r7
  814548:	dfc00215 	stw	ra,8(sp)
  81454c:	80000015 	stw	zero,0(r16)
  814550:	081ab580 	call	81ab58 <read>
  814554:	00ffffc4 	movi	r3,-1
  814558:	10c00526 	beq	r2,r3,814570 <_read_r+0x4c>
  81455c:	dfc00217 	ldw	ra,8(sp)
  814560:	dc400117 	ldw	r17,4(sp)
  814564:	dc000017 	ldw	r16,0(sp)
  814568:	dec00304 	addi	sp,sp,12
  81456c:	f800283a 	ret
  814570:	80c00017 	ldw	r3,0(r16)
  814574:	183ff926 	beq	r3,zero,81455c <__alt_data_end+0xff81455c>
  814578:	88c00015 	stw	r3,0(r17)
  81457c:	003ff706 	br	81455c <__alt_data_end+0xff81455c>

00814580 <__fpclassifyd>:
  814580:	00a00034 	movhi	r2,32768
  814584:	10bfffc4 	addi	r2,r2,-1
  814588:	2884703a 	and	r2,r5,r2
  81458c:	10000726 	beq	r2,zero,8145ac <__fpclassifyd+0x2c>
  814590:	00fffc34 	movhi	r3,65520
  814594:	019ff834 	movhi	r6,32736
  814598:	28c7883a 	add	r3,r5,r3
  81459c:	31bfffc4 	addi	r6,r6,-1
  8145a0:	30c00536 	bltu	r6,r3,8145b8 <__fpclassifyd+0x38>
  8145a4:	00800104 	movi	r2,4
  8145a8:	f800283a 	ret
  8145ac:	2000021e 	bne	r4,zero,8145b8 <__fpclassifyd+0x38>
  8145b0:	00800084 	movi	r2,2
  8145b4:	f800283a 	ret
  8145b8:	00dffc34 	movhi	r3,32752
  8145bc:	019ff834 	movhi	r6,32736
  8145c0:	28cb883a 	add	r5,r5,r3
  8145c4:	31bfffc4 	addi	r6,r6,-1
  8145c8:	317ff62e 	bgeu	r6,r5,8145a4 <__alt_data_end+0xff8145a4>
  8145cc:	01400434 	movhi	r5,16
  8145d0:	297fffc4 	addi	r5,r5,-1
  8145d4:	28800236 	bltu	r5,r2,8145e0 <__fpclassifyd+0x60>
  8145d8:	008000c4 	movi	r2,3
  8145dc:	f800283a 	ret
  8145e0:	10c00226 	beq	r2,r3,8145ec <__fpclassifyd+0x6c>
  8145e4:	0005883a 	mov	r2,zero
  8145e8:	f800283a 	ret
  8145ec:	2005003a 	cmpeq	r2,r4,zero
  8145f0:	f800283a 	ret

008145f4 <strcmp>:
  8145f4:	2144b03a 	or	r2,r4,r5
  8145f8:	108000cc 	andi	r2,r2,3
  8145fc:	1000171e 	bne	r2,zero,81465c <strcmp+0x68>
  814600:	20800017 	ldw	r2,0(r4)
  814604:	28c00017 	ldw	r3,0(r5)
  814608:	10c0141e 	bne	r2,r3,81465c <strcmp+0x68>
  81460c:	027fbff4 	movhi	r9,65279
  814610:	4a7fbfc4 	addi	r9,r9,-257
  814614:	0086303a 	nor	r3,zero,r2
  814618:	02202074 	movhi	r8,32897
  81461c:	1245883a 	add	r2,r2,r9
  814620:	42202004 	addi	r8,r8,-32640
  814624:	10c4703a 	and	r2,r2,r3
  814628:	1204703a 	and	r2,r2,r8
  81462c:	10000226 	beq	r2,zero,814638 <strcmp+0x44>
  814630:	00001706 	br	814690 <strcmp+0x9c>
  814634:	1000161e 	bne	r2,zero,814690 <strcmp+0x9c>
  814638:	21000104 	addi	r4,r4,4
  81463c:	20c00017 	ldw	r3,0(r4)
  814640:	29400104 	addi	r5,r5,4
  814644:	29800017 	ldw	r6,0(r5)
  814648:	1a4f883a 	add	r7,r3,r9
  81464c:	00c4303a 	nor	r2,zero,r3
  814650:	3884703a 	and	r2,r7,r2
  814654:	1204703a 	and	r2,r2,r8
  814658:	19bff626 	beq	r3,r6,814634 <__alt_data_end+0xff814634>
  81465c:	20800007 	ldb	r2,0(r4)
  814660:	1000051e 	bne	r2,zero,814678 <strcmp+0x84>
  814664:	00000606 	br	814680 <strcmp+0x8c>
  814668:	21000044 	addi	r4,r4,1
  81466c:	20800007 	ldb	r2,0(r4)
  814670:	29400044 	addi	r5,r5,1
  814674:	10000226 	beq	r2,zero,814680 <strcmp+0x8c>
  814678:	28c00007 	ldb	r3,0(r5)
  81467c:	10fffa26 	beq	r2,r3,814668 <__alt_data_end+0xff814668>
  814680:	20800003 	ldbu	r2,0(r4)
  814684:	28c00003 	ldbu	r3,0(r5)
  814688:	10c5c83a 	sub	r2,r2,r3
  81468c:	f800283a 	ret
  814690:	0005883a 	mov	r2,zero
  814694:	f800283a 	ret

00814698 <__sprint_r.part.0>:
  814698:	28801917 	ldw	r2,100(r5)
  81469c:	defff604 	addi	sp,sp,-40
  8146a0:	dd400515 	stw	r21,20(sp)
  8146a4:	dcc00315 	stw	r19,12(sp)
  8146a8:	dfc00915 	stw	ra,36(sp)
  8146ac:	df000815 	stw	fp,32(sp)
  8146b0:	ddc00715 	stw	r23,28(sp)
  8146b4:	dd800615 	stw	r22,24(sp)
  8146b8:	dd000415 	stw	r20,16(sp)
  8146bc:	dc800215 	stw	r18,8(sp)
  8146c0:	dc400115 	stw	r17,4(sp)
  8146c4:	dc000015 	stw	r16,0(sp)
  8146c8:	1088000c 	andi	r2,r2,8192
  8146cc:	2827883a 	mov	r19,r5
  8146d0:	302b883a 	mov	r21,r6
  8146d4:	10002d26 	beq	r2,zero,81478c <__sprint_r.part.0+0xf4>
  8146d8:	30800217 	ldw	r2,8(r6)
  8146dc:	35800017 	ldw	r22,0(r6)
  8146e0:	10002826 	beq	r2,zero,814784 <__sprint_r.part.0+0xec>
  8146e4:	2029883a 	mov	r20,r4
  8146e8:	b5c00104 	addi	r23,r22,4
  8146ec:	04bfffc4 	movi	r18,-1
  8146f0:	bc400017 	ldw	r17,0(r23)
  8146f4:	b4000017 	ldw	r16,0(r22)
  8146f8:	0039883a 	mov	fp,zero
  8146fc:	8822d0ba 	srli	r17,r17,2
  814700:	04400316 	blt	zero,r17,814710 <__sprint_r.part.0+0x78>
  814704:	00001806 	br	814768 <__sprint_r.part.0+0xd0>
  814708:	84000104 	addi	r16,r16,4
  81470c:	8f001526 	beq	r17,fp,814764 <__sprint_r.part.0+0xcc>
  814710:	81400017 	ldw	r5,0(r16)
  814714:	a009883a 	mov	r4,r20
  814718:	980d883a 	mov	r6,r19
  81471c:	0815e780 	call	815e78 <_fputwc_r>
  814720:	e7000044 	addi	fp,fp,1
  814724:	14bff81e 	bne	r2,r18,814708 <__alt_data_end+0xff814708>
  814728:	9005883a 	mov	r2,r18
  81472c:	a8000215 	stw	zero,8(r21)
  814730:	a8000115 	stw	zero,4(r21)
  814734:	dfc00917 	ldw	ra,36(sp)
  814738:	df000817 	ldw	fp,32(sp)
  81473c:	ddc00717 	ldw	r23,28(sp)
  814740:	dd800617 	ldw	r22,24(sp)
  814744:	dd400517 	ldw	r21,20(sp)
  814748:	dd000417 	ldw	r20,16(sp)
  81474c:	dcc00317 	ldw	r19,12(sp)
  814750:	dc800217 	ldw	r18,8(sp)
  814754:	dc400117 	ldw	r17,4(sp)
  814758:	dc000017 	ldw	r16,0(sp)
  81475c:	dec00a04 	addi	sp,sp,40
  814760:	f800283a 	ret
  814764:	a8800217 	ldw	r2,8(r21)
  814768:	8c63883a 	add	r17,r17,r17
  81476c:	8c63883a 	add	r17,r17,r17
  814770:	1445c83a 	sub	r2,r2,r17
  814774:	a8800215 	stw	r2,8(r21)
  814778:	b5800204 	addi	r22,r22,8
  81477c:	bdc00204 	addi	r23,r23,8
  814780:	103fdb1e 	bne	r2,zero,8146f0 <__alt_data_end+0xff8146f0>
  814784:	0005883a 	mov	r2,zero
  814788:	003fe806 	br	81472c <__alt_data_end+0xff81472c>
  81478c:	08160580 	call	816058 <__sfvwrite_r>
  814790:	003fe606 	br	81472c <__alt_data_end+0xff81472c>

00814794 <__sprint_r>:
  814794:	30c00217 	ldw	r3,8(r6)
  814798:	18000126 	beq	r3,zero,8147a0 <__sprint_r+0xc>
  81479c:	08146981 	jmpi	814698 <__sprint_r.part.0>
  8147a0:	30000115 	stw	zero,4(r6)
  8147a4:	0005883a 	mov	r2,zero
  8147a8:	f800283a 	ret

008147ac <___vfiprintf_internal_r>:
  8147ac:	deffca04 	addi	sp,sp,-216
  8147b0:	dd803215 	stw	r22,200(sp)
  8147b4:	dd403115 	stw	r21,196(sp)
  8147b8:	dfc03515 	stw	ra,212(sp)
  8147bc:	df003415 	stw	fp,208(sp)
  8147c0:	ddc03315 	stw	r23,204(sp)
  8147c4:	dd003015 	stw	r20,192(sp)
  8147c8:	dcc02f15 	stw	r19,188(sp)
  8147cc:	dc802e15 	stw	r18,184(sp)
  8147d0:	dc402d15 	stw	r17,180(sp)
  8147d4:	dc002c15 	stw	r16,176(sp)
  8147d8:	d9002015 	stw	r4,128(sp)
  8147dc:	d9c02215 	stw	r7,136(sp)
  8147e0:	282b883a 	mov	r21,r5
  8147e4:	302d883a 	mov	r22,r6
  8147e8:	20000226 	beq	r4,zero,8147f4 <___vfiprintf_internal_r+0x48>
  8147ec:	20800e17 	ldw	r2,56(r4)
  8147f0:	1001b126 	beq	r2,zero,814eb8 <___vfiprintf_internal_r+0x70c>
  8147f4:	a880030b 	ldhu	r2,12(r21)
  8147f8:	10c8000c 	andi	r3,r2,8192
  8147fc:	1800061e 	bne	r3,zero,814818 <___vfiprintf_internal_r+0x6c>
  814800:	a9001917 	ldw	r4,100(r21)
  814804:	00f7ffc4 	movi	r3,-8193
  814808:	10880014 	ori	r2,r2,8192
  81480c:	20c6703a 	and	r3,r4,r3
  814810:	a880030d 	sth	r2,12(r21)
  814814:	a8c01915 	stw	r3,100(r21)
  814818:	10c0020c 	andi	r3,r2,8
  81481c:	18018926 	beq	r3,zero,814e44 <___vfiprintf_internal_r+0x698>
  814820:	a8c00417 	ldw	r3,16(r21)
  814824:	18018726 	beq	r3,zero,814e44 <___vfiprintf_internal_r+0x698>
  814828:	1080068c 	andi	r2,r2,26
  81482c:	00c00284 	movi	r3,10
  814830:	10c18c26 	beq	r2,r3,814e64 <___vfiprintf_internal_r+0x6b8>
  814834:	d8801a04 	addi	r2,sp,104
  814838:	d8c019c4 	addi	r3,sp,103
  81483c:	070020b4 	movhi	fp,130
  814840:	05c020b4 	movhi	r23,130
  814844:	10c9c83a 	sub	r4,r2,r3
  814848:	e7309b04 	addi	fp,fp,-15764
  81484c:	bdf09704 	addi	r23,r23,-15780
  814850:	d8801e15 	stw	r2,120(sp)
  814854:	d8c01f15 	stw	r3,124(sp)
  814858:	dec01a15 	stw	sp,104(sp)
  81485c:	d8001c15 	stw	zero,112(sp)
  814860:	d8001b15 	stw	zero,108(sp)
  814864:	d8002615 	stw	zero,152(sp)
  814868:	d8002315 	stw	zero,140(sp)
  81486c:	d9002715 	stw	r4,156(sp)
  814870:	d811883a 	mov	r8,sp
  814874:	dd402115 	stw	r21,132(sp)
  814878:	b021883a 	mov	r16,r22
  81487c:	80800007 	ldb	r2,0(r16)
  814880:	10037226 	beq	r2,zero,81564c <___vfiprintf_internal_r+0xea0>
  814884:	01000944 	movi	r4,37
  814888:	11037026 	beq	r2,r4,81564c <___vfiprintf_internal_r+0xea0>
  81488c:	8005883a 	mov	r2,r16
  814890:	00000106 	br	814898 <___vfiprintf_internal_r+0xec>
  814894:	19000326 	beq	r3,r4,8148a4 <___vfiprintf_internal_r+0xf8>
  814898:	10800044 	addi	r2,r2,1
  81489c:	10c00007 	ldb	r3,0(r2)
  8148a0:	183ffc1e 	bne	r3,zero,814894 <__alt_data_end+0xff814894>
  8148a4:	1425c83a 	sub	r18,r2,r16
  8148a8:	1023883a 	mov	r17,r2
  8148ac:	90001026 	beq	r18,zero,8148f0 <___vfiprintf_internal_r+0x144>
  8148b0:	d8c01c17 	ldw	r3,112(sp)
  8148b4:	d8801b17 	ldw	r2,108(sp)
  8148b8:	44000015 	stw	r16,0(r8)
  8148bc:	90c7883a 	add	r3,r18,r3
  8148c0:	10800044 	addi	r2,r2,1
  8148c4:	44800115 	stw	r18,4(r8)
  8148c8:	d8c01c15 	stw	r3,112(sp)
  8148cc:	d8801b15 	stw	r2,108(sp)
  8148d0:	010001c4 	movi	r4,7
  8148d4:	2080750e 	bge	r4,r2,814aac <___vfiprintf_internal_r+0x300>
  8148d8:	18036f1e 	bne	r3,zero,815698 <___vfiprintf_internal_r+0xeec>
  8148dc:	d8802317 	ldw	r2,140(sp)
  8148e0:	d8001b15 	stw	zero,108(sp)
  8148e4:	d811883a 	mov	r8,sp
  8148e8:	1485883a 	add	r2,r2,r18
  8148ec:	d8802315 	stw	r2,140(sp)
  8148f0:	88800007 	ldb	r2,0(r17)
  8148f4:	10041026 	beq	r2,zero,815938 <___vfiprintf_internal_r+0x118c>
  8148f8:	88c00047 	ldb	r3,1(r17)
  8148fc:	88800044 	addi	r2,r17,1
  814900:	d8001d85 	stb	zero,118(sp)
  814904:	000f883a 	mov	r7,zero
  814908:	027fffc4 	movi	r9,-1
  81490c:	0025883a 	mov	r18,zero
  814910:	002b883a 	mov	r21,zero
  814914:	01401604 	movi	r5,88
  814918:	01800244 	movi	r6,9
  81491c:	03400a84 	movi	r13,42
  814920:	03001b04 	movi	r12,108
  814924:	14000044 	addi	r16,r2,1
  814928:	18bff804 	addi	r2,r3,-32
  81492c:	28825536 	bltu	r5,r2,815284 <___vfiprintf_internal_r+0xad8>
  814930:	100490ba 	slli	r2,r2,2
  814934:	01002074 	movhi	r4,129
  814938:	21125204 	addi	r4,r4,18760
  81493c:	1105883a 	add	r2,r2,r4
  814940:	10800017 	ldw	r2,0(r2)
  814944:	1000683a 	jmp	r2
  814948:	00815048 	cmpgei	r2,zero,1345
  81494c:	00815284 	movi	r2,1354
  814950:	00815284 	movi	r2,1354
  814954:	00815068 	cmpgeui	r2,zero,1345
  814958:	00815284 	movi	r2,1354
  81495c:	00815284 	movi	r2,1354
  814960:	00815284 	movi	r2,1354
  814964:	00815284 	movi	r2,1354
  814968:	00815284 	movi	r2,1354
  81496c:	00815284 	movi	r2,1354
  814970:	00815078 	rdprs	r2,zero,1345
  814974:	00815098 	cmpnei	r2,zero,1346
  814978:	00815284 	movi	r2,1354
  81497c:	00814ec0 	call	814ec <__alt_mem_sdram_0-0x77eb14>
  814980:	00814fac 	andhi	r2,zero,1342
  814984:	00815284 	movi	r2,1354
  814988:	00814f2c 	andhi	r2,zero,1340
  81498c:	00814f3c 	xorhi	r2,zero,1340
  814990:	00814f3c 	xorhi	r2,zero,1340
  814994:	00814f3c 	xorhi	r2,zero,1340
  814998:	00814f3c 	xorhi	r2,zero,1340
  81499c:	00814f3c 	xorhi	r2,zero,1340
  8149a0:	00814f3c 	xorhi	r2,zero,1340
  8149a4:	00814f3c 	xorhi	r2,zero,1340
  8149a8:	00814f3c 	xorhi	r2,zero,1340
  8149ac:	00814f3c 	xorhi	r2,zero,1340
  8149b0:	00815284 	movi	r2,1354
  8149b4:	00815284 	movi	r2,1354
  8149b8:	00815284 	movi	r2,1354
  8149bc:	00815284 	movi	r2,1354
  8149c0:	00815284 	movi	r2,1354
  8149c4:	00815284 	movi	r2,1354
  8149c8:	00815284 	movi	r2,1354
  8149cc:	00815284 	movi	r2,1354
  8149d0:	00815284 	movi	r2,1354
  8149d4:	00815284 	movi	r2,1354
  8149d8:	00814f68 	cmpgeui	r2,zero,1341
  8149dc:	00815284 	movi	r2,1354
  8149e0:	00815284 	movi	r2,1354
  8149e4:	00815284 	movi	r2,1354
  8149e8:	00815284 	movi	r2,1354
  8149ec:	00815284 	movi	r2,1354
  8149f0:	00815284 	movi	r2,1354
  8149f4:	00815284 	movi	r2,1354
  8149f8:	00815284 	movi	r2,1354
  8149fc:	00815284 	movi	r2,1354
  814a00:	00815284 	movi	r2,1354
  814a04:	00814af4 	movhi	r2,1323
  814a08:	00815284 	movi	r2,1354
  814a0c:	00815284 	movi	r2,1354
  814a10:	00815284 	movi	r2,1354
  814a14:	00815284 	movi	r2,1354
  814a18:	00815284 	movi	r2,1354
  814a1c:	00814ac0 	call	814ac <__alt_mem_sdram_0-0x77eb54>
  814a20:	00815284 	movi	r2,1354
  814a24:	00815284 	movi	r2,1354
  814a28:	00815108 	cmpgei	r2,zero,1348
  814a2c:	00815284 	movi	r2,1354
  814a30:	00815284 	movi	r2,1354
  814a34:	00815284 	movi	r2,1354
  814a38:	00815284 	movi	r2,1354
  814a3c:	00815284 	movi	r2,1354
  814a40:	00815284 	movi	r2,1354
  814a44:	00815284 	movi	r2,1354
  814a48:	00815284 	movi	r2,1354
  814a4c:	00815284 	movi	r2,1354
  814a50:	00815284 	movi	r2,1354
  814a54:	008150a8 	cmpgeui	r2,zero,1346
  814a58:	008150d4 	movui	r2,1347
  814a5c:	00815284 	movi	r2,1354
  814a60:	00815284 	movi	r2,1354
  814a64:	00815284 	movi	r2,1354
  814a68:	008151b0 	cmpltui	r2,zero,1350
  814a6c:	008150d4 	movui	r2,1347
  814a70:	00815284 	movi	r2,1354
  814a74:	00815284 	movi	r2,1354
  814a78:	008151c0 	call	8151c <__alt_mem_sdram_0-0x77eae4>
  814a7c:	00815284 	movi	r2,1354
  814a80:	00814fec 	andhi	r2,zero,1343
  814a84:	00814af8 	rdprs	r2,zero,1323
  814a88:	008151d4 	movui	r2,1351
  814a8c:	00815214 	movui	r2,1352
  814a90:	00815284 	movi	r2,1354
  814a94:	0081515c 	xori	r2,zero,1349
  814a98:	00815284 	movi	r2,1354
  814a9c:	00814ac4 	movi	r2,1323
  814aa0:	00815284 	movi	r2,1354
  814aa4:	00815284 	movi	r2,1354
  814aa8:	00815224 	muli	r2,zero,1352
  814aac:	42000204 	addi	r8,r8,8
  814ab0:	d8802317 	ldw	r2,140(sp)
  814ab4:	1485883a 	add	r2,r2,r18
  814ab8:	d8802315 	stw	r2,140(sp)
  814abc:	003f8c06 	br	8148f0 <__alt_data_end+0xff8148f0>
  814ac0:	ad400414 	ori	r21,r21,16
  814ac4:	a880080c 	andi	r2,r21,32
  814ac8:	1001e61e 	bne	r2,zero,815264 <___vfiprintf_internal_r+0xab8>
  814acc:	a880040c 	andi	r2,r21,16
  814ad0:	10034726 	beq	r2,zero,8157f0 <___vfiprintf_internal_r+0x1044>
  814ad4:	d8802217 	ldw	r2,136(sp)
  814ad8:	001b883a 	mov	r13,zero
  814adc:	15800017 	ldw	r22,0(r2)
  814ae0:	10800104 	addi	r2,r2,4
  814ae4:	d8802215 	stw	r2,136(sp)
  814ae8:	b009883a 	mov	r4,r22
  814aec:	00800044 	movi	r2,1
  814af0:	00000c06 	br	814b24 <___vfiprintf_internal_r+0x378>
  814af4:	ad400414 	ori	r21,r21,16
  814af8:	a880080c 	andi	r2,r21,32
  814afc:	1001491e 	bne	r2,zero,815024 <___vfiprintf_internal_r+0x878>
  814b00:	a880040c 	andi	r2,r21,16
  814b04:	10032d26 	beq	r2,zero,8157bc <___vfiprintf_internal_r+0x1010>
  814b08:	d9002217 	ldw	r4,136(sp)
  814b0c:	001b883a 	mov	r13,zero
  814b10:	0005883a 	mov	r2,zero
  814b14:	25800017 	ldw	r22,0(r4)
  814b18:	21000104 	addi	r4,r4,4
  814b1c:	d9002215 	stw	r4,136(sp)
  814b20:	b009883a 	mov	r4,r22
  814b24:	d8001d85 	stb	zero,118(sp)
  814b28:	4827883a 	mov	r19,r9
  814b2c:	001d883a 	mov	r14,zero
  814b30:	48000216 	blt	r9,zero,814b3c <___vfiprintf_internal_r+0x390>
  814b34:	00ffdfc4 	movi	r3,-129
  814b38:	a8ea703a 	and	r21,r21,r3
  814b3c:	2002071e 	bne	r4,zero,81535c <___vfiprintf_internal_r+0xbb0>
  814b40:	4802ad26 	beq	r9,zero,8155f8 <___vfiprintf_internal_r+0xe4c>
  814b44:	10803fcc 	andi	r2,r2,255
  814b48:	00c00044 	movi	r3,1
  814b4c:	10c22b26 	beq	r2,r3,8153fc <___vfiprintf_internal_r+0xc50>
  814b50:	00c00084 	movi	r3,2
  814b54:	dd001a04 	addi	r20,sp,104
  814b58:	10c0dd1e 	bne	r2,r3,814ed0 <___vfiprintf_internal_r+0x724>
  814b5c:	d9002617 	ldw	r4,152(sp)
  814b60:	b08003cc 	andi	r2,r22,15
  814b64:	6806973a 	slli	r3,r13,28
  814b68:	2085883a 	add	r2,r4,r2
  814b6c:	b02cd13a 	srli	r22,r22,4
  814b70:	10800003 	ldbu	r2,0(r2)
  814b74:	681ad13a 	srli	r13,r13,4
  814b78:	a53fffc4 	addi	r20,r20,-1
  814b7c:	1dacb03a 	or	r22,r3,r22
  814b80:	a0800005 	stb	r2,0(r20)
  814b84:	b344b03a 	or	r2,r22,r13
  814b88:	103ff51e 	bne	r2,zero,814b60 <__alt_data_end+0xff814b60>
  814b8c:	d9001e17 	ldw	r4,120(sp)
  814b90:	2527c83a 	sub	r19,r4,r20
  814b94:	9823883a 	mov	r17,r19
  814b98:	9a40010e 	bge	r19,r9,814ba0 <___vfiprintf_internal_r+0x3f4>
  814b9c:	4823883a 	mov	r17,r9
  814ba0:	73803fcc 	andi	r14,r14,255
  814ba4:	7380201c 	xori	r14,r14,128
  814ba8:	73bfe004 	addi	r14,r14,-128
  814bac:	70000126 	beq	r14,zero,814bb4 <___vfiprintf_internal_r+0x408>
  814bb0:	8c400044 	addi	r17,r17,1
  814bb4:	ab40008c 	andi	r13,r21,2
  814bb8:	68000126 	beq	r13,zero,814bc0 <___vfiprintf_internal_r+0x414>
  814bbc:	8c400084 	addi	r17,r17,2
  814bc0:	ad80210c 	andi	r22,r21,132
  814bc4:	b001c51e 	bne	r22,zero,8152dc <___vfiprintf_internal_r+0xb30>
  814bc8:	9447c83a 	sub	r3,r18,r17
  814bcc:	00c1c30e 	bge	zero,r3,8152dc <___vfiprintf_internal_r+0xb30>
  814bd0:	01c00404 	movi	r7,16
  814bd4:	d8801c17 	ldw	r2,112(sp)
  814bd8:	38c37b0e 	bge	r7,r3,8159c8 <___vfiprintf_internal_r+0x121c>
  814bdc:	010020b4 	movhi	r4,130
  814be0:	21309b04 	addi	r4,r4,-15764
  814be4:	dc002915 	stw	r16,164(sp)
  814be8:	d9801b17 	ldw	r6,108(sp)
  814bec:	d9002415 	stw	r4,144(sp)
  814bf0:	03c001c4 	movi	r15,7
  814bf4:	da402515 	stw	r9,148(sp)
  814bf8:	db402815 	stw	r13,160(sp)
  814bfc:	1821883a 	mov	r16,r3
  814c00:	00000506 	br	814c18 <___vfiprintf_internal_r+0x46c>
  814c04:	31400084 	addi	r5,r6,2
  814c08:	42000204 	addi	r8,r8,8
  814c0c:	200d883a 	mov	r6,r4
  814c10:	843ffc04 	addi	r16,r16,-16
  814c14:	3c000d0e 	bge	r7,r16,814c4c <___vfiprintf_internal_r+0x4a0>
  814c18:	10800404 	addi	r2,r2,16
  814c1c:	31000044 	addi	r4,r6,1
  814c20:	47000015 	stw	fp,0(r8)
  814c24:	41c00115 	stw	r7,4(r8)
  814c28:	d8801c15 	stw	r2,112(sp)
  814c2c:	d9001b15 	stw	r4,108(sp)
  814c30:	793ff40e 	bge	r15,r4,814c04 <__alt_data_end+0xff814c04>
  814c34:	10019b1e 	bne	r2,zero,8152a4 <___vfiprintf_internal_r+0xaf8>
  814c38:	843ffc04 	addi	r16,r16,-16
  814c3c:	000d883a 	mov	r6,zero
  814c40:	01400044 	movi	r5,1
  814c44:	d811883a 	mov	r8,sp
  814c48:	3c3ff316 	blt	r7,r16,814c18 <__alt_data_end+0xff814c18>
  814c4c:	8007883a 	mov	r3,r16
  814c50:	da402517 	ldw	r9,148(sp)
  814c54:	db402817 	ldw	r13,160(sp)
  814c58:	dc002917 	ldw	r16,164(sp)
  814c5c:	d9002417 	ldw	r4,144(sp)
  814c60:	1885883a 	add	r2,r3,r2
  814c64:	40c00115 	stw	r3,4(r8)
  814c68:	41000015 	stw	r4,0(r8)
  814c6c:	d8801c15 	stw	r2,112(sp)
  814c70:	d9401b15 	stw	r5,108(sp)
  814c74:	00c001c4 	movi	r3,7
  814c78:	19426a16 	blt	r3,r5,815624 <___vfiprintf_internal_r+0xe78>
  814c7c:	d8c01d87 	ldb	r3,118(sp)
  814c80:	42000204 	addi	r8,r8,8
  814c84:	29000044 	addi	r4,r5,1
  814c88:	1801991e 	bne	r3,zero,8152f0 <___vfiprintf_internal_r+0xb44>
  814c8c:	68000c26 	beq	r13,zero,814cc0 <___vfiprintf_internal_r+0x514>
  814c90:	d8c01d04 	addi	r3,sp,116
  814c94:	10800084 	addi	r2,r2,2
  814c98:	40c00015 	stw	r3,0(r8)
  814c9c:	00c00084 	movi	r3,2
  814ca0:	40c00115 	stw	r3,4(r8)
  814ca4:	d8801c15 	stw	r2,112(sp)
  814ca8:	d9001b15 	stw	r4,108(sp)
  814cac:	00c001c4 	movi	r3,7
  814cb0:	19024c16 	blt	r3,r4,8155e4 <___vfiprintf_internal_r+0xe38>
  814cb4:	200b883a 	mov	r5,r4
  814cb8:	42000204 	addi	r8,r8,8
  814cbc:	21000044 	addi	r4,r4,1
  814cc0:	00c02004 	movi	r3,128
  814cc4:	b0c20126 	beq	r22,r3,8154cc <___vfiprintf_internal_r+0xd20>
  814cc8:	4cedc83a 	sub	r22,r9,r19
  814ccc:	0580230e 	bge	zero,r22,814d5c <___vfiprintf_internal_r+0x5b0>
  814cd0:	01c00404 	movi	r7,16
  814cd4:	3d83140e 	bge	r7,r22,815928 <___vfiprintf_internal_r+0x117c>
  814cd8:	010020b4 	movhi	r4,130
  814cdc:	21309704 	addi	r4,r4,-15780
  814ce0:	d9002415 	stw	r4,144(sp)
  814ce4:	034001c4 	movi	r13,7
  814ce8:	00000506 	br	814d00 <___vfiprintf_internal_r+0x554>
  814cec:	29000084 	addi	r4,r5,2
  814cf0:	42000204 	addi	r8,r8,8
  814cf4:	180b883a 	mov	r5,r3
  814cf8:	b5bffc04 	addi	r22,r22,-16
  814cfc:	3d800d0e 	bge	r7,r22,814d34 <___vfiprintf_internal_r+0x588>
  814d00:	10800404 	addi	r2,r2,16
  814d04:	28c00044 	addi	r3,r5,1
  814d08:	45c00015 	stw	r23,0(r8)
  814d0c:	41c00115 	stw	r7,4(r8)
  814d10:	d8801c15 	stw	r2,112(sp)
  814d14:	d8c01b15 	stw	r3,108(sp)
  814d18:	68fff40e 	bge	r13,r3,814cec <__alt_data_end+0xff814cec>
  814d1c:	1001811e 	bne	r2,zero,815324 <___vfiprintf_internal_r+0xb78>
  814d20:	b5bffc04 	addi	r22,r22,-16
  814d24:	01000044 	movi	r4,1
  814d28:	000b883a 	mov	r5,zero
  814d2c:	d811883a 	mov	r8,sp
  814d30:	3dbff316 	blt	r7,r22,814d00 <__alt_data_end+0xff814d00>
  814d34:	d8c02417 	ldw	r3,144(sp)
  814d38:	1585883a 	add	r2,r2,r22
  814d3c:	45800115 	stw	r22,4(r8)
  814d40:	40c00015 	stw	r3,0(r8)
  814d44:	d8801c15 	stw	r2,112(sp)
  814d48:	d9001b15 	stw	r4,108(sp)
  814d4c:	00c001c4 	movi	r3,7
  814d50:	1901d016 	blt	r3,r4,815494 <___vfiprintf_internal_r+0xce8>
  814d54:	42000204 	addi	r8,r8,8
  814d58:	21000044 	addi	r4,r4,1
  814d5c:	14c5883a 	add	r2,r2,r19
  814d60:	45000015 	stw	r20,0(r8)
  814d64:	44c00115 	stw	r19,4(r8)
  814d68:	d8801c15 	stw	r2,112(sp)
  814d6c:	d9001b15 	stw	r4,108(sp)
  814d70:	00c001c4 	movi	r3,7
  814d74:	1901cf0e 	bge	r3,r4,8154b4 <___vfiprintf_internal_r+0xd08>
  814d78:	1002361e 	bne	r2,zero,815654 <___vfiprintf_internal_r+0xea8>
  814d7c:	d8001b15 	stw	zero,108(sp)
  814d80:	aac0010c 	andi	r11,r21,4
  814d84:	58002826 	beq	r11,zero,814e28 <___vfiprintf_internal_r+0x67c>
  814d88:	9467c83a 	sub	r19,r18,r17
  814d8c:	d811883a 	mov	r8,sp
  814d90:	04c3340e 	bge	zero,r19,815a64 <___vfiprintf_internal_r+0x12b8>
  814d94:	01c00404 	movi	r7,16
  814d98:	3cc31b0e 	bge	r7,r19,815a08 <___vfiprintf_internal_r+0x125c>
  814d9c:	00c020b4 	movhi	r3,130
  814da0:	18f09b04 	addi	r3,r3,-15764
  814da4:	d9001b17 	ldw	r4,108(sp)
  814da8:	d8c02415 	stw	r3,144(sp)
  814dac:	382b883a 	mov	r21,r7
  814db0:	050001c4 	movi	r20,7
  814db4:	dd802017 	ldw	r22,128(sp)
  814db8:	00000506 	br	814dd0 <___vfiprintf_internal_r+0x624>
  814dbc:	21400084 	addi	r5,r4,2
  814dc0:	42000204 	addi	r8,r8,8
  814dc4:	1809883a 	mov	r4,r3
  814dc8:	9cfffc04 	addi	r19,r19,-16
  814dcc:	acc00d0e 	bge	r21,r19,814e04 <___vfiprintf_internal_r+0x658>
  814dd0:	10800404 	addi	r2,r2,16
  814dd4:	20c00044 	addi	r3,r4,1
  814dd8:	47000015 	stw	fp,0(r8)
  814ddc:	45400115 	stw	r21,4(r8)
  814de0:	d8801c15 	stw	r2,112(sp)
  814de4:	d8c01b15 	stw	r3,108(sp)
  814de8:	a0fff40e 	bge	r20,r3,814dbc <__alt_data_end+0xff814dbc>
  814dec:	10019f1e 	bne	r2,zero,81546c <___vfiprintf_internal_r+0xcc0>
  814df0:	9cfffc04 	addi	r19,r19,-16
  814df4:	01400044 	movi	r5,1
  814df8:	0009883a 	mov	r4,zero
  814dfc:	d811883a 	mov	r8,sp
  814e00:	acfff316 	blt	r21,r19,814dd0 <__alt_data_end+0xff814dd0>
  814e04:	d8c02417 	ldw	r3,144(sp)
  814e08:	14c5883a 	add	r2,r2,r19
  814e0c:	44c00115 	stw	r19,4(r8)
  814e10:	40c00015 	stw	r3,0(r8)
  814e14:	d8801c15 	stw	r2,112(sp)
  814e18:	d9401b15 	stw	r5,108(sp)
  814e1c:	00c001c4 	movi	r3,7
  814e20:	1941810e 	bge	r3,r5,815428 <___vfiprintf_internal_r+0xc7c>
  814e24:	10017a1e 	bne	r2,zero,815410 <___vfiprintf_internal_r+0xc64>
  814e28:	8c82a416 	blt	r17,r18,8158bc <___vfiprintf_internal_r+0x1110>
  814e2c:	d9002317 	ldw	r4,140(sp)
  814e30:	2449883a 	add	r4,r4,r17
  814e34:	d9002315 	stw	r4,140(sp)
  814e38:	d8001b15 	stw	zero,108(sp)
  814e3c:	d811883a 	mov	r8,sp
  814e40:	003e8e06 	br	81487c <__alt_data_end+0xff81487c>
  814e44:	d9002017 	ldw	r4,128(sp)
  814e48:	a80b883a 	mov	r5,r21
  814e4c:	0810a540 	call	810a54 <__swsetup_r>
  814e50:	10000c1e 	bne	r2,zero,814e84 <___vfiprintf_internal_r+0x6d8>
  814e54:	a880030b 	ldhu	r2,12(r21)
  814e58:	00c00284 	movi	r3,10
  814e5c:	1080068c 	andi	r2,r2,26
  814e60:	10fe741e 	bne	r2,r3,814834 <__alt_data_end+0xff814834>
  814e64:	a880038f 	ldh	r2,14(r21)
  814e68:	103e7216 	blt	r2,zero,814834 <__alt_data_end+0xff814834>
  814e6c:	d9002017 	ldw	r4,128(sp)
  814e70:	d9c02217 	ldw	r7,136(sp)
  814e74:	a80b883a 	mov	r5,r21
  814e78:	b00d883a 	mov	r6,r22
  814e7c:	0815aa00 	call	815aa0 <__sbprintf>
  814e80:	00000106 	br	814e88 <___vfiprintf_internal_r+0x6dc>
  814e84:	00bfffc4 	movi	r2,-1
  814e88:	dfc03517 	ldw	ra,212(sp)
  814e8c:	df003417 	ldw	fp,208(sp)
  814e90:	ddc03317 	ldw	r23,204(sp)
  814e94:	dd803217 	ldw	r22,200(sp)
  814e98:	dd403117 	ldw	r21,196(sp)
  814e9c:	dd003017 	ldw	r20,192(sp)
  814ea0:	dcc02f17 	ldw	r19,188(sp)
  814ea4:	dc802e17 	ldw	r18,184(sp)
  814ea8:	dc402d17 	ldw	r17,180(sp)
  814eac:	dc002c17 	ldw	r16,176(sp)
  814eb0:	dec03604 	addi	sp,sp,216
  814eb4:	f800283a 	ret
  814eb8:	0812b080 	call	812b08 <__sinit>
  814ebc:	003e4d06 	br	8147f4 <__alt_data_end+0xff8147f4>
  814ec0:	8005883a 	mov	r2,r16
  814ec4:	ad400114 	ori	r21,r21,4
  814ec8:	80c00007 	ldb	r3,0(r16)
  814ecc:	003e9506 	br	814924 <__alt_data_end+0xff814924>
  814ed0:	b006d0fa 	srli	r3,r22,3
  814ed4:	6808977a 	slli	r4,r13,29
  814ed8:	681ad0fa 	srli	r13,r13,3
  814edc:	b58001cc 	andi	r22,r22,7
  814ee0:	b0800c04 	addi	r2,r22,48
  814ee4:	a53fffc4 	addi	r20,r20,-1
  814ee8:	20ecb03a 	or	r22,r4,r3
  814eec:	a0800005 	stb	r2,0(r20)
  814ef0:	b346b03a 	or	r3,r22,r13
  814ef4:	183ff61e 	bne	r3,zero,814ed0 <__alt_data_end+0xff814ed0>
  814ef8:	a8c0004c 	andi	r3,r21,1
  814efc:	a009883a 	mov	r4,r20
  814f00:	18013b26 	beq	r3,zero,8153f0 <___vfiprintf_internal_r+0xc44>
  814f04:	10803fcc 	andi	r2,r2,255
  814f08:	1080201c 	xori	r2,r2,128
  814f0c:	10bfe004 	addi	r2,r2,-128
  814f10:	00c00c04 	movi	r3,48
  814f14:	10ff1d26 	beq	r2,r3,814b8c <__alt_data_end+0xff814b8c>
  814f18:	d8801e17 	ldw	r2,120(sp)
  814f1c:	a53fffc4 	addi	r20,r20,-1
  814f20:	20ffffc5 	stb	r3,-1(r4)
  814f24:	1527c83a 	sub	r19,r2,r20
  814f28:	003f1a06 	br	814b94 <__alt_data_end+0xff814b94>
  814f2c:	ad402014 	ori	r21,r21,128
  814f30:	8005883a 	mov	r2,r16
  814f34:	80c00007 	ldb	r3,0(r16)
  814f38:	003e7a06 	br	814924 <__alt_data_end+0xff814924>
  814f3c:	8005883a 	mov	r2,r16
  814f40:	0025883a 	mov	r18,zero
  814f44:	193ff404 	addi	r4,r3,-48
  814f48:	10c00007 	ldb	r3,0(r2)
  814f4c:	948002a4 	muli	r18,r18,10
  814f50:	84000044 	addi	r16,r16,1
  814f54:	8005883a 	mov	r2,r16
  814f58:	9125883a 	add	r18,r18,r4
  814f5c:	193ff404 	addi	r4,r3,-48
  814f60:	313ff92e 	bgeu	r6,r4,814f48 <__alt_data_end+0xff814f48>
  814f64:	003e7006 	br	814928 <__alt_data_end+0xff814928>
  814f68:	ad400414 	ori	r21,r21,16
  814f6c:	d9c01d85 	stb	r7,118(sp)
  814f70:	a880080c 	andi	r2,r21,32
  814f74:	d8c02217 	ldw	r3,136(sp)
  814f78:	10005a26 	beq	r2,zero,8150e4 <___vfiprintf_internal_r+0x938>
  814f7c:	d9002217 	ldw	r4,136(sp)
  814f80:	18800117 	ldw	r2,4(r3)
  814f84:	1d800017 	ldw	r22,0(r3)
  814f88:	21000204 	addi	r4,r4,8
  814f8c:	d9002215 	stw	r4,136(sp)
  814f90:	101b883a 	mov	r13,r2
  814f94:	1001f416 	blt	r2,zero,815768 <___vfiprintf_internal_r+0xfbc>
  814f98:	db801d83 	ldbu	r14,118(sp)
  814f9c:	4827883a 	mov	r19,r9
  814fa0:	00800044 	movi	r2,1
  814fa4:	b348b03a 	or	r4,r22,r13
  814fa8:	003ee106 	br	814b30 <__alt_data_end+0xff814b30>
  814fac:	80c00007 	ldb	r3,0(r16)
  814fb0:	80800044 	addi	r2,r16,1
  814fb4:	1b42a326 	beq	r3,r13,815a44 <___vfiprintf_internal_r+0x1298>
  814fb8:	193ff404 	addi	r4,r3,-48
  814fbc:	1021883a 	mov	r16,r2
  814fc0:	0013883a 	mov	r9,zero
  814fc4:	313e5836 	bltu	r6,r4,814928 <__alt_data_end+0xff814928>
  814fc8:	80c00007 	ldb	r3,0(r16)
  814fcc:	4a4002a4 	muli	r9,r9,10
  814fd0:	84000044 	addi	r16,r16,1
  814fd4:	2253883a 	add	r9,r4,r9
  814fd8:	193ff404 	addi	r4,r3,-48
  814fdc:	313ffa2e 	bgeu	r6,r4,814fc8 <__alt_data_end+0xff814fc8>
  814fe0:	483e510e 	bge	r9,zero,814928 <__alt_data_end+0xff814928>
  814fe4:	027fffc4 	movi	r9,-1
  814fe8:	003e4f06 	br	814928 <__alt_data_end+0xff814928>
  814fec:	d9c01d85 	stb	r7,118(sp)
  814ff0:	a880080c 	andi	r2,r21,32
  814ff4:	10020826 	beq	r2,zero,815818 <___vfiprintf_internal_r+0x106c>
  814ff8:	d8c02217 	ldw	r3,136(sp)
  814ffc:	d9002317 	ldw	r4,140(sp)
  815000:	18800017 	ldw	r2,0(r3)
  815004:	2007d7fa 	srai	r3,r4,31
  815008:	d9002217 	ldw	r4,136(sp)
  81500c:	10c00115 	stw	r3,4(r2)
  815010:	21000104 	addi	r4,r4,4
  815014:	d9002215 	stw	r4,136(sp)
  815018:	d9002317 	ldw	r4,140(sp)
  81501c:	11000015 	stw	r4,0(r2)
  815020:	003e1606 	br	81487c <__alt_data_end+0xff81487c>
  815024:	d8802217 	ldw	r2,136(sp)
  815028:	d8c02217 	ldw	r3,136(sp)
  81502c:	15800017 	ldw	r22,0(r2)
  815030:	13400117 	ldw	r13,4(r2)
  815034:	18c00204 	addi	r3,r3,8
  815038:	0005883a 	mov	r2,zero
  81503c:	d8c02215 	stw	r3,136(sp)
  815040:	b348b03a 	or	r4,r22,r13
  815044:	003eb706 	br	814b24 <__alt_data_end+0xff814b24>
  815048:	38803fcc 	andi	r2,r7,255
  81504c:	1080201c 	xori	r2,r2,128
  815050:	10bfe004 	addi	r2,r2,-128
  815054:	1001e31e 	bne	r2,zero,8157e4 <___vfiprintf_internal_r+0x1038>
  815058:	8005883a 	mov	r2,r16
  81505c:	01c00804 	movi	r7,32
  815060:	80c00007 	ldb	r3,0(r16)
  815064:	003e2f06 	br	814924 <__alt_data_end+0xff814924>
  815068:	ad400054 	ori	r21,r21,1
  81506c:	8005883a 	mov	r2,r16
  815070:	80c00007 	ldb	r3,0(r16)
  815074:	003e2b06 	br	814924 <__alt_data_end+0xff814924>
  815078:	d8c02217 	ldw	r3,136(sp)
  81507c:	1c800017 	ldw	r18,0(r3)
  815080:	18c00104 	addi	r3,r3,4
  815084:	90023816 	blt	r18,zero,815968 <___vfiprintf_internal_r+0x11bc>
  815088:	d8c02215 	stw	r3,136(sp)
  81508c:	8005883a 	mov	r2,r16
  815090:	80c00007 	ldb	r3,0(r16)
  815094:	003e2306 	br	814924 <__alt_data_end+0xff814924>
  815098:	8005883a 	mov	r2,r16
  81509c:	01c00ac4 	movi	r7,43
  8150a0:	80c00007 	ldb	r3,0(r16)
  8150a4:	003e1f06 	br	814924 <__alt_data_end+0xff814924>
  8150a8:	d8c02217 	ldw	r3,136(sp)
  8150ac:	04400044 	movi	r17,1
  8150b0:	d8001d85 	stb	zero,118(sp)
  8150b4:	18800017 	ldw	r2,0(r3)
  8150b8:	18c00104 	addi	r3,r3,4
  8150bc:	d8c02215 	stw	r3,136(sp)
  8150c0:	d8801005 	stb	r2,64(sp)
  8150c4:	8827883a 	mov	r19,r17
  8150c8:	dd001004 	addi	r20,sp,64
  8150cc:	0013883a 	mov	r9,zero
  8150d0:	003eb806 	br	814bb4 <__alt_data_end+0xff814bb4>
  8150d4:	d9c01d85 	stb	r7,118(sp)
  8150d8:	a880080c 	andi	r2,r21,32
  8150dc:	d8c02217 	ldw	r3,136(sp)
  8150e0:	103fa61e 	bne	r2,zero,814f7c <__alt_data_end+0xff814f7c>
  8150e4:	a880040c 	andi	r2,r21,16
  8150e8:	1001dd26 	beq	r2,zero,815860 <___vfiprintf_internal_r+0x10b4>
  8150ec:	1d800017 	ldw	r22,0(r3)
  8150f0:	d8802217 	ldw	r2,136(sp)
  8150f4:	b01bd7fa 	srai	r13,r22,31
  8150f8:	10800104 	addi	r2,r2,4
  8150fc:	d8802215 	stw	r2,136(sp)
  815100:	6805883a 	mov	r2,r13
  815104:	003fa306 	br	814f94 <__alt_data_end+0xff814f94>
  815108:	008020b4 	movhi	r2,130
  81510c:	10b03204 	addi	r2,r2,-16184
  815110:	d8802615 	stw	r2,152(sp)
  815114:	d9c01d85 	stb	r7,118(sp)
  815118:	a880080c 	andi	r2,r21,32
  81511c:	10004726 	beq	r2,zero,81523c <___vfiprintf_internal_r+0xa90>
  815120:	d9002217 	ldw	r4,136(sp)
  815124:	25800017 	ldw	r22,0(r4)
  815128:	23400117 	ldw	r13,4(r4)
  81512c:	21000204 	addi	r4,r4,8
  815130:	d9002215 	stw	r4,136(sp)
  815134:	a880004c 	andi	r2,r21,1
  815138:	10014e26 	beq	r2,zero,815674 <___vfiprintf_internal_r+0xec8>
  81513c:	b348b03a 	or	r4,r22,r13
  815140:	20019c26 	beq	r4,zero,8157b4 <___vfiprintf_internal_r+0x1008>
  815144:	00800c04 	movi	r2,48
  815148:	d8801d05 	stb	r2,116(sp)
  81514c:	d8c01d45 	stb	r3,117(sp)
  815150:	ad400094 	ori	r21,r21,2
  815154:	00800084 	movi	r2,2
  815158:	003e7206 	br	814b24 <__alt_data_end+0xff814b24>
  81515c:	d8c02217 	ldw	r3,136(sp)
  815160:	d8001d85 	stb	zero,118(sp)
  815164:	1d000017 	ldw	r20,0(r3)
  815168:	1d800104 	addi	r22,r3,4
  81516c:	a0021c26 	beq	r20,zero,8159e0 <___vfiprintf_internal_r+0x1234>
  815170:	a009883a 	mov	r4,r20
  815174:	48020016 	blt	r9,zero,815978 <___vfiprintf_internal_r+0x11cc>
  815178:	480d883a 	mov	r6,r9
  81517c:	000b883a 	mov	r5,zero
  815180:	da002a15 	stw	r8,168(sp)
  815184:	da402b15 	stw	r9,172(sp)
  815188:	08133300 	call	813330 <memchr>
  81518c:	da002a17 	ldw	r8,168(sp)
  815190:	da402b17 	ldw	r9,172(sp)
  815194:	10022226 	beq	r2,zero,815a20 <___vfiprintf_internal_r+0x1274>
  815198:	1527c83a 	sub	r19,r2,r20
  81519c:	4cc1c916 	blt	r9,r19,8158c4 <___vfiprintf_internal_r+0x1118>
  8151a0:	db801d83 	ldbu	r14,118(sp)
  8151a4:	dd802215 	stw	r22,136(sp)
  8151a8:	0013883a 	mov	r9,zero
  8151ac:	003e7906 	br	814b94 <__alt_data_end+0xff814b94>
  8151b0:	ad401014 	ori	r21,r21,64
  8151b4:	8005883a 	mov	r2,r16
  8151b8:	80c00007 	ldb	r3,0(r16)
  8151bc:	003dd906 	br	814924 <__alt_data_end+0xff814924>
  8151c0:	80c00007 	ldb	r3,0(r16)
  8151c4:	8005883a 	mov	r2,r16
  8151c8:	1b01e326 	beq	r3,r12,815958 <___vfiprintf_internal_r+0x11ac>
  8151cc:	ad400414 	ori	r21,r21,16
  8151d0:	003dd406 	br	814924 <__alt_data_end+0xff814924>
  8151d4:	d9002217 	ldw	r4,136(sp)
  8151d8:	00800c04 	movi	r2,48
  8151dc:	d8801d05 	stb	r2,116(sp)
  8151e0:	25800017 	ldw	r22,0(r4)
  8151e4:	00801e04 	movi	r2,120
  8151e8:	d8801d45 	stb	r2,117(sp)
  8151ec:	008020b4 	movhi	r2,130
  8151f0:	21000104 	addi	r4,r4,4
  8151f4:	10b03704 	addi	r2,r2,-16164
  8151f8:	d9002215 	stw	r4,136(sp)
  8151fc:	d8802615 	stw	r2,152(sp)
  815200:	001b883a 	mov	r13,zero
  815204:	ad400094 	ori	r21,r21,2
  815208:	00800084 	movi	r2,2
  81520c:	b009883a 	mov	r4,r22
  815210:	003e4406 	br	814b24 <__alt_data_end+0xff814b24>
  815214:	ad400814 	ori	r21,r21,32
  815218:	8005883a 	mov	r2,r16
  81521c:	80c00007 	ldb	r3,0(r16)
  815220:	003dc006 	br	814924 <__alt_data_end+0xff814924>
  815224:	008020b4 	movhi	r2,130
  815228:	10b03704 	addi	r2,r2,-16164
  81522c:	d8802615 	stw	r2,152(sp)
  815230:	d9c01d85 	stb	r7,118(sp)
  815234:	a880080c 	andi	r2,r21,32
  815238:	103fb91e 	bne	r2,zero,815120 <__alt_data_end+0xff815120>
  81523c:	a880040c 	andi	r2,r21,16
  815240:	10010f1e 	bne	r2,zero,815680 <___vfiprintf_internal_r+0xed4>
  815244:	a880100c 	andi	r2,r21,64
  815248:	10010d26 	beq	r2,zero,815680 <___vfiprintf_internal_r+0xed4>
  81524c:	d9002217 	ldw	r4,136(sp)
  815250:	001b883a 	mov	r13,zero
  815254:	2580000b 	ldhu	r22,0(r4)
  815258:	21000104 	addi	r4,r4,4
  81525c:	d9002215 	stw	r4,136(sp)
  815260:	003fb406 	br	815134 <__alt_data_end+0xff815134>
  815264:	d9002217 	ldw	r4,136(sp)
  815268:	00800044 	movi	r2,1
  81526c:	25800017 	ldw	r22,0(r4)
  815270:	23400117 	ldw	r13,4(r4)
  815274:	21000204 	addi	r4,r4,8
  815278:	d9002215 	stw	r4,136(sp)
  81527c:	b348b03a 	or	r4,r22,r13
  815280:	003e2806 	br	814b24 <__alt_data_end+0xff814b24>
  815284:	d9c01d85 	stb	r7,118(sp)
  815288:	1801ab26 	beq	r3,zero,815938 <___vfiprintf_internal_r+0x118c>
  81528c:	04400044 	movi	r17,1
  815290:	d8c01005 	stb	r3,64(sp)
  815294:	d8001d85 	stb	zero,118(sp)
  815298:	8827883a 	mov	r19,r17
  81529c:	dd001004 	addi	r20,sp,64
  8152a0:	003f8a06 	br	8150cc <__alt_data_end+0xff8150cc>
  8152a4:	d9002017 	ldw	r4,128(sp)
  8152a8:	d9402117 	ldw	r5,132(sp)
  8152ac:	d9801a04 	addi	r6,sp,104
  8152b0:	d9c02b15 	stw	r7,172(sp)
  8152b4:	dbc02a15 	stw	r15,168(sp)
  8152b8:	08146980 	call	814698 <__sprint_r.part.0>
  8152bc:	d9c02b17 	ldw	r7,172(sp)
  8152c0:	dbc02a17 	ldw	r15,168(sp)
  8152c4:	1000631e 	bne	r2,zero,815454 <___vfiprintf_internal_r+0xca8>
  8152c8:	d9801b17 	ldw	r6,108(sp)
  8152cc:	d8801c17 	ldw	r2,112(sp)
  8152d0:	d811883a 	mov	r8,sp
  8152d4:	31400044 	addi	r5,r6,1
  8152d8:	003e4d06 	br	814c10 <__alt_data_end+0xff814c10>
  8152dc:	d9401b17 	ldw	r5,108(sp)
  8152e0:	d8801c17 	ldw	r2,112(sp)
  8152e4:	29000044 	addi	r4,r5,1
  8152e8:	d8c01d87 	ldb	r3,118(sp)
  8152ec:	183e6726 	beq	r3,zero,814c8c <__alt_data_end+0xff814c8c>
  8152f0:	00c00044 	movi	r3,1
  8152f4:	d9401d84 	addi	r5,sp,118
  8152f8:	10c5883a 	add	r2,r2,r3
  8152fc:	41400015 	stw	r5,0(r8)
  815300:	40c00115 	stw	r3,4(r8)
  815304:	d8801c15 	stw	r2,112(sp)
  815308:	d9001b15 	stw	r4,108(sp)
  81530c:	014001c4 	movi	r5,7
  815310:	2900ab16 	blt	r5,r4,8155c0 <___vfiprintf_internal_r+0xe14>
  815314:	200b883a 	mov	r5,r4
  815318:	42000204 	addi	r8,r8,8
  81531c:	21000044 	addi	r4,r4,1
  815320:	003e5a06 	br	814c8c <__alt_data_end+0xff814c8c>
  815324:	d9002017 	ldw	r4,128(sp)
  815328:	d9402117 	ldw	r5,132(sp)
  81532c:	d9801a04 	addi	r6,sp,104
  815330:	d9c02b15 	stw	r7,172(sp)
  815334:	db402a15 	stw	r13,168(sp)
  815338:	08146980 	call	814698 <__sprint_r.part.0>
  81533c:	d9c02b17 	ldw	r7,172(sp)
  815340:	db402a17 	ldw	r13,168(sp)
  815344:	1000431e 	bne	r2,zero,815454 <___vfiprintf_internal_r+0xca8>
  815348:	d9401b17 	ldw	r5,108(sp)
  81534c:	d8801c17 	ldw	r2,112(sp)
  815350:	d811883a 	mov	r8,sp
  815354:	29000044 	addi	r4,r5,1
  815358:	003e6706 	br	814cf8 <__alt_data_end+0xff814cf8>
  81535c:	10803fcc 	andi	r2,r2,255
  815360:	00c00044 	movi	r3,1
  815364:	10fdfa1e 	bne	r2,r3,814b50 <__alt_data_end+0xff814b50>
  815368:	6800021e 	bne	r13,zero,815374 <___vfiprintf_internal_r+0xbc8>
  81536c:	00800244 	movi	r2,9
  815370:	1580222e 	bgeu	r2,r22,8153fc <___vfiprintf_internal_r+0xc50>
  815374:	dc802415 	stw	r18,144(sp)
  815378:	dc002515 	stw	r16,148(sp)
  81537c:	dc401a04 	addi	r17,sp,104
  815380:	b021883a 	mov	r16,r22
  815384:	4827883a 	mov	r19,r9
  815388:	4029883a 	mov	r20,r8
  81538c:	702d883a 	mov	r22,r14
  815390:	6825883a 	mov	r18,r13
  815394:	8009883a 	mov	r4,r16
  815398:	900b883a 	mov	r5,r18
  81539c:	01800284 	movi	r6,10
  8153a0:	000f883a 	mov	r7,zero
  8153a4:	08173840 	call	817384 <__umoddi3>
  8153a8:	10800c04 	addi	r2,r2,48
  8153ac:	8c7fffc4 	addi	r17,r17,-1
  8153b0:	8009883a 	mov	r4,r16
  8153b4:	900b883a 	mov	r5,r18
  8153b8:	01800284 	movi	r6,10
  8153bc:	000f883a 	mov	r7,zero
  8153c0:	88800005 	stb	r2,0(r17)
  8153c4:	0816dc40 	call	816dc4 <__udivdi3>
  8153c8:	1021883a 	mov	r16,r2
  8153cc:	10c4b03a 	or	r2,r2,r3
  8153d0:	1825883a 	mov	r18,r3
  8153d4:	103fef1e 	bne	r2,zero,815394 <__alt_data_end+0xff815394>
  8153d8:	dc802417 	ldw	r18,144(sp)
  8153dc:	dc002517 	ldw	r16,148(sp)
  8153e0:	a011883a 	mov	r8,r20
  8153e4:	9813883a 	mov	r9,r19
  8153e8:	b01d883a 	mov	r14,r22
  8153ec:	8829883a 	mov	r20,r17
  8153f0:	d8c01e17 	ldw	r3,120(sp)
  8153f4:	1d27c83a 	sub	r19,r3,r20
  8153f8:	003de606 	br	814b94 <__alt_data_end+0xff814b94>
  8153fc:	b5800c04 	addi	r22,r22,48
  815400:	dd8019c5 	stb	r22,103(sp)
  815404:	dcc02717 	ldw	r19,156(sp)
  815408:	dd0019c4 	addi	r20,sp,103
  81540c:	003de106 	br	814b94 <__alt_data_end+0xff814b94>
  815410:	d9002017 	ldw	r4,128(sp)
  815414:	d9402117 	ldw	r5,132(sp)
  815418:	d9801a04 	addi	r6,sp,104
  81541c:	08146980 	call	814698 <__sprint_r.part.0>
  815420:	10000c1e 	bne	r2,zero,815454 <___vfiprintf_internal_r+0xca8>
  815424:	d8801c17 	ldw	r2,112(sp)
  815428:	8c80010e 	bge	r17,r18,815430 <___vfiprintf_internal_r+0xc84>
  81542c:	9023883a 	mov	r17,r18
  815430:	d8c02317 	ldw	r3,140(sp)
  815434:	1c47883a 	add	r3,r3,r17
  815438:	d8c02315 	stw	r3,140(sp)
  81543c:	103e7e26 	beq	r2,zero,814e38 <__alt_data_end+0xff814e38>
  815440:	d9002017 	ldw	r4,128(sp)
  815444:	d9402117 	ldw	r5,132(sp)
  815448:	d9801a04 	addi	r6,sp,104
  81544c:	08146980 	call	814698 <__sprint_r.part.0>
  815450:	103e7926 	beq	r2,zero,814e38 <__alt_data_end+0xff814e38>
  815454:	dd402117 	ldw	r21,132(sp)
  815458:	a880030b 	ldhu	r2,12(r21)
  81545c:	1080100c 	andi	r2,r2,64
  815460:	103e881e 	bne	r2,zero,814e84 <__alt_data_end+0xff814e84>
  815464:	d8802317 	ldw	r2,140(sp)
  815468:	003e8706 	br	814e88 <__alt_data_end+0xff814e88>
  81546c:	d9402117 	ldw	r5,132(sp)
  815470:	b009883a 	mov	r4,r22
  815474:	d9801a04 	addi	r6,sp,104
  815478:	08146980 	call	814698 <__sprint_r.part.0>
  81547c:	103ff51e 	bne	r2,zero,815454 <__alt_data_end+0xff815454>
  815480:	d9001b17 	ldw	r4,108(sp)
  815484:	d8801c17 	ldw	r2,112(sp)
  815488:	d811883a 	mov	r8,sp
  81548c:	21400044 	addi	r5,r4,1
  815490:	003e4d06 	br	814dc8 <__alt_data_end+0xff814dc8>
  815494:	1000aa1e 	bne	r2,zero,815740 <___vfiprintf_internal_r+0xf94>
  815498:	00c00044 	movi	r3,1
  81549c:	9805883a 	mov	r2,r19
  8154a0:	dd000015 	stw	r20,0(sp)
  8154a4:	dcc00115 	stw	r19,4(sp)
  8154a8:	dcc01c15 	stw	r19,112(sp)
  8154ac:	d8c01b15 	stw	r3,108(sp)
  8154b0:	d811883a 	mov	r8,sp
  8154b4:	42000204 	addi	r8,r8,8
  8154b8:	aac0010c 	andi	r11,r21,4
  8154bc:	583fda26 	beq	r11,zero,815428 <__alt_data_end+0xff815428>
  8154c0:	9467c83a 	sub	r19,r18,r17
  8154c4:	04fe3316 	blt	zero,r19,814d94 <__alt_data_end+0xff814d94>
  8154c8:	003fd706 	br	815428 <__alt_data_end+0xff815428>
  8154cc:	946dc83a 	sub	r22,r18,r17
  8154d0:	05bdfd0e 	bge	zero,r22,814cc8 <__alt_data_end+0xff814cc8>
  8154d4:	00c020b4 	movhi	r3,130
  8154d8:	18f09704 	addi	r3,r3,-15780
  8154dc:	01c00404 	movi	r7,16
  8154e0:	d8c02415 	stw	r3,144(sp)
  8154e4:	3d81530e 	bge	r7,r22,815a34 <___vfiprintf_internal_r+0x1288>
  8154e8:	8007883a 	mov	r3,r16
  8154ec:	034001c4 	movi	r13,7
  8154f0:	b021883a 	mov	r16,r22
  8154f4:	da402515 	stw	r9,148(sp)
  8154f8:	182d883a 	mov	r22,r3
  8154fc:	00000506 	br	815514 <___vfiprintf_internal_r+0xd68>
  815500:	29800084 	addi	r6,r5,2
  815504:	42000204 	addi	r8,r8,8
  815508:	180b883a 	mov	r5,r3
  81550c:	843ffc04 	addi	r16,r16,-16
  815510:	3c000d0e 	bge	r7,r16,815548 <___vfiprintf_internal_r+0xd9c>
  815514:	10800404 	addi	r2,r2,16
  815518:	28c00044 	addi	r3,r5,1
  81551c:	45c00015 	stw	r23,0(r8)
  815520:	41c00115 	stw	r7,4(r8)
  815524:	d8801c15 	stw	r2,112(sp)
  815528:	d8c01b15 	stw	r3,108(sp)
  81552c:	68fff40e 	bge	r13,r3,815500 <__alt_data_end+0xff815500>
  815530:	1000151e 	bne	r2,zero,815588 <___vfiprintf_internal_r+0xddc>
  815534:	843ffc04 	addi	r16,r16,-16
  815538:	01800044 	movi	r6,1
  81553c:	000b883a 	mov	r5,zero
  815540:	d811883a 	mov	r8,sp
  815544:	3c3ff316 	blt	r7,r16,815514 <__alt_data_end+0xff815514>
  815548:	da402517 	ldw	r9,148(sp)
  81554c:	b007883a 	mov	r3,r22
  815550:	802d883a 	mov	r22,r16
  815554:	1821883a 	mov	r16,r3
  815558:	d8c02417 	ldw	r3,144(sp)
  81555c:	1585883a 	add	r2,r2,r22
  815560:	45800115 	stw	r22,4(r8)
  815564:	40c00015 	stw	r3,0(r8)
  815568:	d8801c15 	stw	r2,112(sp)
  81556c:	d9801b15 	stw	r6,108(sp)
  815570:	00c001c4 	movi	r3,7
  815574:	19806d16 	blt	r3,r6,81572c <___vfiprintf_internal_r+0xf80>
  815578:	42000204 	addi	r8,r8,8
  81557c:	31000044 	addi	r4,r6,1
  815580:	300b883a 	mov	r5,r6
  815584:	003dd006 	br	814cc8 <__alt_data_end+0xff814cc8>
  815588:	d9002017 	ldw	r4,128(sp)
  81558c:	d9402117 	ldw	r5,132(sp)
  815590:	d9801a04 	addi	r6,sp,104
  815594:	d9c02b15 	stw	r7,172(sp)
  815598:	db402a15 	stw	r13,168(sp)
  81559c:	08146980 	call	814698 <__sprint_r.part.0>
  8155a0:	d9c02b17 	ldw	r7,172(sp)
  8155a4:	db402a17 	ldw	r13,168(sp)
  8155a8:	103faa1e 	bne	r2,zero,815454 <__alt_data_end+0xff815454>
  8155ac:	d9401b17 	ldw	r5,108(sp)
  8155b0:	d8801c17 	ldw	r2,112(sp)
  8155b4:	d811883a 	mov	r8,sp
  8155b8:	29800044 	addi	r6,r5,1
  8155bc:	003fd306 	br	81550c <__alt_data_end+0xff81550c>
  8155c0:	1000401e 	bne	r2,zero,8156c4 <___vfiprintf_internal_r+0xf18>
  8155c4:	68003b26 	beq	r13,zero,8156b4 <___vfiprintf_internal_r+0xf08>
  8155c8:	d9001d04 	addi	r4,sp,116
  8155cc:	00800084 	movi	r2,2
  8155d0:	d9000015 	stw	r4,0(sp)
  8155d4:	d8800115 	stw	r2,4(sp)
  8155d8:	1809883a 	mov	r4,r3
  8155dc:	d811883a 	mov	r8,sp
  8155e0:	003db406 	br	814cb4 <__alt_data_end+0xff814cb4>
  8155e4:	1000451e 	bne	r2,zero,8156fc <___vfiprintf_internal_r+0xf50>
  8155e8:	01000044 	movi	r4,1
  8155ec:	000b883a 	mov	r5,zero
  8155f0:	d811883a 	mov	r8,sp
  8155f4:	003db206 	br	814cc0 <__alt_data_end+0xff814cc0>
  8155f8:	10803fcc 	andi	r2,r2,255
  8155fc:	1000071e 	bne	r2,zero,81561c <___vfiprintf_internal_r+0xe70>
  815600:	a880004c 	andi	r2,r21,1
  815604:	10000526 	beq	r2,zero,81561c <___vfiprintf_internal_r+0xe70>
  815608:	00800c04 	movi	r2,48
  81560c:	d88019c5 	stb	r2,103(sp)
  815610:	dcc02717 	ldw	r19,156(sp)
  815614:	dd0019c4 	addi	r20,sp,103
  815618:	003d5e06 	br	814b94 <__alt_data_end+0xff814b94>
  81561c:	dd001a04 	addi	r20,sp,104
  815620:	003d5c06 	br	814b94 <__alt_data_end+0xff814b94>
  815624:	1000971e 	bne	r2,zero,815884 <___vfiprintf_internal_r+0x10d8>
  815628:	d8c01d87 	ldb	r3,118(sp)
  81562c:	18005826 	beq	r3,zero,815790 <___vfiprintf_internal_r+0xfe4>
  815630:	00800044 	movi	r2,1
  815634:	d8c01d84 	addi	r3,sp,118
  815638:	1009883a 	mov	r4,r2
  81563c:	d8c00015 	stw	r3,0(sp)
  815640:	d8800115 	stw	r2,4(sp)
  815644:	d811883a 	mov	r8,sp
  815648:	003f3206 	br	815314 <__alt_data_end+0xff815314>
  81564c:	8023883a 	mov	r17,r16
  815650:	003ca706 	br	8148f0 <__alt_data_end+0xff8148f0>
  815654:	d9002017 	ldw	r4,128(sp)
  815658:	d9402117 	ldw	r5,132(sp)
  81565c:	d9801a04 	addi	r6,sp,104
  815660:	08146980 	call	814698 <__sprint_r.part.0>
  815664:	103f7b1e 	bne	r2,zero,815454 <__alt_data_end+0xff815454>
  815668:	d8801c17 	ldw	r2,112(sp)
  81566c:	d811883a 	mov	r8,sp
  815670:	003f9106 	br	8154b8 <__alt_data_end+0xff8154b8>
  815674:	00800084 	movi	r2,2
  815678:	b348b03a 	or	r4,r22,r13
  81567c:	003d2906 	br	814b24 <__alt_data_end+0xff814b24>
  815680:	d8802217 	ldw	r2,136(sp)
  815684:	001b883a 	mov	r13,zero
  815688:	15800017 	ldw	r22,0(r2)
  81568c:	10800104 	addi	r2,r2,4
  815690:	d8802215 	stw	r2,136(sp)
  815694:	003ea706 	br	815134 <__alt_data_end+0xff815134>
  815698:	d9002017 	ldw	r4,128(sp)
  81569c:	d9402117 	ldw	r5,132(sp)
  8156a0:	d9801a04 	addi	r6,sp,104
  8156a4:	08146980 	call	814698 <__sprint_r.part.0>
  8156a8:	103f6a1e 	bne	r2,zero,815454 <__alt_data_end+0xff815454>
  8156ac:	d811883a 	mov	r8,sp
  8156b0:	003cff06 	br	814ab0 <__alt_data_end+0xff814ab0>
  8156b4:	000b883a 	mov	r5,zero
  8156b8:	1809883a 	mov	r4,r3
  8156bc:	d811883a 	mov	r8,sp
  8156c0:	003d7f06 	br	814cc0 <__alt_data_end+0xff814cc0>
  8156c4:	d9002017 	ldw	r4,128(sp)
  8156c8:	d9402117 	ldw	r5,132(sp)
  8156cc:	d9801a04 	addi	r6,sp,104
  8156d0:	da402b15 	stw	r9,172(sp)
  8156d4:	db402a15 	stw	r13,168(sp)
  8156d8:	08146980 	call	814698 <__sprint_r.part.0>
  8156dc:	da402b17 	ldw	r9,172(sp)
  8156e0:	db402a17 	ldw	r13,168(sp)
  8156e4:	103f5b1e 	bne	r2,zero,815454 <__alt_data_end+0xff815454>
  8156e8:	d9401b17 	ldw	r5,108(sp)
  8156ec:	d8801c17 	ldw	r2,112(sp)
  8156f0:	d811883a 	mov	r8,sp
  8156f4:	29000044 	addi	r4,r5,1
  8156f8:	003d6406 	br	814c8c <__alt_data_end+0xff814c8c>
  8156fc:	d9002017 	ldw	r4,128(sp)
  815700:	d9402117 	ldw	r5,132(sp)
  815704:	d9801a04 	addi	r6,sp,104
  815708:	da402b15 	stw	r9,172(sp)
  81570c:	08146980 	call	814698 <__sprint_r.part.0>
  815710:	da402b17 	ldw	r9,172(sp)
  815714:	103f4f1e 	bne	r2,zero,815454 <__alt_data_end+0xff815454>
  815718:	d9401b17 	ldw	r5,108(sp)
  81571c:	d8801c17 	ldw	r2,112(sp)
  815720:	d811883a 	mov	r8,sp
  815724:	29000044 	addi	r4,r5,1
  815728:	003d6506 	br	814cc0 <__alt_data_end+0xff814cc0>
  81572c:	10009a1e 	bne	r2,zero,815998 <___vfiprintf_internal_r+0x11ec>
  815730:	01000044 	movi	r4,1
  815734:	000b883a 	mov	r5,zero
  815738:	d811883a 	mov	r8,sp
  81573c:	003d6206 	br	814cc8 <__alt_data_end+0xff814cc8>
  815740:	d9002017 	ldw	r4,128(sp)
  815744:	d9402117 	ldw	r5,132(sp)
  815748:	d9801a04 	addi	r6,sp,104
  81574c:	08146980 	call	814698 <__sprint_r.part.0>
  815750:	103f401e 	bne	r2,zero,815454 <__alt_data_end+0xff815454>
  815754:	d9001b17 	ldw	r4,108(sp)
  815758:	d8801c17 	ldw	r2,112(sp)
  81575c:	d811883a 	mov	r8,sp
  815760:	21000044 	addi	r4,r4,1
  815764:	003d7d06 	br	814d5c <__alt_data_end+0xff814d5c>
  815768:	05adc83a 	sub	r22,zero,r22
  81576c:	b004c03a 	cmpne	r2,r22,zero
  815770:	035bc83a 	sub	r13,zero,r13
  815774:	689bc83a 	sub	r13,r13,r2
  815778:	03800b44 	movi	r14,45
  81577c:	db801d85 	stb	r14,118(sp)
  815780:	4827883a 	mov	r19,r9
  815784:	00800044 	movi	r2,1
  815788:	b348b03a 	or	r4,r22,r13
  81578c:	003ce806 	br	814b30 <__alt_data_end+0xff814b30>
  815790:	000b883a 	mov	r5,zero
  815794:	01000044 	movi	r4,1
  815798:	d811883a 	mov	r8,sp
  81579c:	683d4826 	beq	r13,zero,814cc0 <__alt_data_end+0xff814cc0>
  8157a0:	00800084 	movi	r2,2
  8157a4:	d8c01d04 	addi	r3,sp,116
  8157a8:	d8c00015 	stw	r3,0(sp)
  8157ac:	d8800115 	stw	r2,4(sp)
  8157b0:	003d4006 	br	814cb4 <__alt_data_end+0xff814cb4>
  8157b4:	00800084 	movi	r2,2
  8157b8:	003cda06 	br	814b24 <__alt_data_end+0xff814b24>
  8157bc:	a880100c 	andi	r2,r21,64
  8157c0:	10004226 	beq	r2,zero,8158cc <___vfiprintf_internal_r+0x1120>
  8157c4:	d8802217 	ldw	r2,136(sp)
  8157c8:	001b883a 	mov	r13,zero
  8157cc:	1580000b 	ldhu	r22,0(r2)
  8157d0:	10800104 	addi	r2,r2,4
  8157d4:	d8802215 	stw	r2,136(sp)
  8157d8:	b009883a 	mov	r4,r22
  8157dc:	0005883a 	mov	r2,zero
  8157e0:	003cd006 	br	814b24 <__alt_data_end+0xff814b24>
  8157e4:	80c00007 	ldb	r3,0(r16)
  8157e8:	8005883a 	mov	r2,r16
  8157ec:	003c4d06 	br	814924 <__alt_data_end+0xff814924>
  8157f0:	a880100c 	andi	r2,r21,64
  8157f4:	10004426 	beq	r2,zero,815908 <___vfiprintf_internal_r+0x115c>
  8157f8:	d8c02217 	ldw	r3,136(sp)
  8157fc:	001b883a 	mov	r13,zero
  815800:	00800044 	movi	r2,1
  815804:	1d80000b 	ldhu	r22,0(r3)
  815808:	18c00104 	addi	r3,r3,4
  81580c:	d8c02215 	stw	r3,136(sp)
  815810:	b009883a 	mov	r4,r22
  815814:	003cc306 	br	814b24 <__alt_data_end+0xff814b24>
  815818:	a880040c 	andi	r2,r21,16
  81581c:	1000091e 	bne	r2,zero,815844 <___vfiprintf_internal_r+0x1098>
  815820:	aac0100c 	andi	r11,r21,64
  815824:	58000726 	beq	r11,zero,815844 <___vfiprintf_internal_r+0x1098>
  815828:	d8c02217 	ldw	r3,136(sp)
  81582c:	d9002317 	ldw	r4,140(sp)
  815830:	18800017 	ldw	r2,0(r3)
  815834:	18c00104 	addi	r3,r3,4
  815838:	d8c02215 	stw	r3,136(sp)
  81583c:	1100000d 	sth	r4,0(r2)
  815840:	003c0e06 	br	81487c <__alt_data_end+0xff81487c>
  815844:	d8c02217 	ldw	r3,136(sp)
  815848:	d9002317 	ldw	r4,140(sp)
  81584c:	18800017 	ldw	r2,0(r3)
  815850:	18c00104 	addi	r3,r3,4
  815854:	d8c02215 	stw	r3,136(sp)
  815858:	11000015 	stw	r4,0(r2)
  81585c:	003c0706 	br	81487c <__alt_data_end+0xff81487c>
  815860:	a880100c 	andi	r2,r21,64
  815864:	10002126 	beq	r2,zero,8158ec <___vfiprintf_internal_r+0x1140>
  815868:	1d80000f 	ldh	r22,0(r3)
  81586c:	d8c02217 	ldw	r3,136(sp)
  815870:	b01bd7fa 	srai	r13,r22,31
  815874:	18c00104 	addi	r3,r3,4
  815878:	d8c02215 	stw	r3,136(sp)
  81587c:	6805883a 	mov	r2,r13
  815880:	003dc406 	br	814f94 <__alt_data_end+0xff814f94>
  815884:	d9002017 	ldw	r4,128(sp)
  815888:	d9402117 	ldw	r5,132(sp)
  81588c:	d9801a04 	addi	r6,sp,104
  815890:	da402b15 	stw	r9,172(sp)
  815894:	db402a15 	stw	r13,168(sp)
  815898:	08146980 	call	814698 <__sprint_r.part.0>
  81589c:	da402b17 	ldw	r9,172(sp)
  8158a0:	db402a17 	ldw	r13,168(sp)
  8158a4:	103eeb1e 	bne	r2,zero,815454 <__alt_data_end+0xff815454>
  8158a8:	d9401b17 	ldw	r5,108(sp)
  8158ac:	d8801c17 	ldw	r2,112(sp)
  8158b0:	d811883a 	mov	r8,sp
  8158b4:	29000044 	addi	r4,r5,1
  8158b8:	003e8b06 	br	8152e8 <__alt_data_end+0xff8152e8>
  8158bc:	9023883a 	mov	r17,r18
  8158c0:	003d5a06 	br	814e2c <__alt_data_end+0xff814e2c>
  8158c4:	4827883a 	mov	r19,r9
  8158c8:	003e3506 	br	8151a0 <__alt_data_end+0xff8151a0>
  8158cc:	d8c02217 	ldw	r3,136(sp)
  8158d0:	001b883a 	mov	r13,zero
  8158d4:	0005883a 	mov	r2,zero
  8158d8:	1d800017 	ldw	r22,0(r3)
  8158dc:	18c00104 	addi	r3,r3,4
  8158e0:	d8c02215 	stw	r3,136(sp)
  8158e4:	b009883a 	mov	r4,r22
  8158e8:	003c8e06 	br	814b24 <__alt_data_end+0xff814b24>
  8158ec:	1d800017 	ldw	r22,0(r3)
  8158f0:	d9002217 	ldw	r4,136(sp)
  8158f4:	b01bd7fa 	srai	r13,r22,31
  8158f8:	21000104 	addi	r4,r4,4
  8158fc:	d9002215 	stw	r4,136(sp)
  815900:	6805883a 	mov	r2,r13
  815904:	003da306 	br	814f94 <__alt_data_end+0xff814f94>
  815908:	d9002217 	ldw	r4,136(sp)
  81590c:	001b883a 	mov	r13,zero
  815910:	00800044 	movi	r2,1
  815914:	25800017 	ldw	r22,0(r4)
  815918:	21000104 	addi	r4,r4,4
  81591c:	d9002215 	stw	r4,136(sp)
  815920:	b009883a 	mov	r4,r22
  815924:	003c7f06 	br	814b24 <__alt_data_end+0xff814b24>
  815928:	00c020b4 	movhi	r3,130
  81592c:	18f09704 	addi	r3,r3,-15780
  815930:	d8c02415 	stw	r3,144(sp)
  815934:	003cff06 	br	814d34 <__alt_data_end+0xff814d34>
  815938:	d8801c17 	ldw	r2,112(sp)
  81593c:	dd402117 	ldw	r21,132(sp)
  815940:	103ec526 	beq	r2,zero,815458 <__alt_data_end+0xff815458>
  815944:	d9002017 	ldw	r4,128(sp)
  815948:	a80b883a 	mov	r5,r21
  81594c:	d9801a04 	addi	r6,sp,104
  815950:	08146980 	call	814698 <__sprint_r.part.0>
  815954:	003ec006 	br	815458 <__alt_data_end+0xff815458>
  815958:	80800044 	addi	r2,r16,1
  81595c:	ad400814 	ori	r21,r21,32
  815960:	80c00047 	ldb	r3,1(r16)
  815964:	003bef06 	br	814924 <__alt_data_end+0xff814924>
  815968:	04a5c83a 	sub	r18,zero,r18
  81596c:	8005883a 	mov	r2,r16
  815970:	d8c02215 	stw	r3,136(sp)
  815974:	003d5306 	br	814ec4 <__alt_data_end+0xff814ec4>
  815978:	da002a15 	stw	r8,168(sp)
  81597c:	080e8b40 	call	80e8b4 <strlen>
  815980:	1027883a 	mov	r19,r2
  815984:	db801d83 	ldbu	r14,118(sp)
  815988:	dd802215 	stw	r22,136(sp)
  81598c:	0013883a 	mov	r9,zero
  815990:	da002a17 	ldw	r8,168(sp)
  815994:	003c7f06 	br	814b94 <__alt_data_end+0xff814b94>
  815998:	d9002017 	ldw	r4,128(sp)
  81599c:	d9402117 	ldw	r5,132(sp)
  8159a0:	d9801a04 	addi	r6,sp,104
  8159a4:	da402b15 	stw	r9,172(sp)
  8159a8:	08146980 	call	814698 <__sprint_r.part.0>
  8159ac:	da402b17 	ldw	r9,172(sp)
  8159b0:	103ea81e 	bne	r2,zero,815454 <__alt_data_end+0xff815454>
  8159b4:	d9401b17 	ldw	r5,108(sp)
  8159b8:	d8801c17 	ldw	r2,112(sp)
  8159bc:	d811883a 	mov	r8,sp
  8159c0:	29000044 	addi	r4,r5,1
  8159c4:	003cc006 	br	814cc8 <__alt_data_end+0xff814cc8>
  8159c8:	d9401b17 	ldw	r5,108(sp)
  8159cc:	010020b4 	movhi	r4,130
  8159d0:	21309b04 	addi	r4,r4,-15764
  8159d4:	d9002415 	stw	r4,144(sp)
  8159d8:	29400044 	addi	r5,r5,1
  8159dc:	003c9f06 	br	814c5c <__alt_data_end+0xff814c5c>
  8159e0:	00800184 	movi	r2,6
  8159e4:	1240012e 	bgeu	r2,r9,8159ec <___vfiprintf_internal_r+0x1240>
  8159e8:	1013883a 	mov	r9,r2
  8159ec:	4827883a 	mov	r19,r9
  8159f0:	4823883a 	mov	r17,r9
  8159f4:	48001116 	blt	r9,zero,815a3c <___vfiprintf_internal_r+0x1290>
  8159f8:	050020b4 	movhi	r20,130
  8159fc:	dd802215 	stw	r22,136(sp)
  815a00:	a5303c04 	addi	r20,r20,-16144
  815a04:	003db106 	br	8150cc <__alt_data_end+0xff8150cc>
  815a08:	d9401b17 	ldw	r5,108(sp)
  815a0c:	010020b4 	movhi	r4,130
  815a10:	21309b04 	addi	r4,r4,-15764
  815a14:	d9002415 	stw	r4,144(sp)
  815a18:	29400044 	addi	r5,r5,1
  815a1c:	003cf906 	br	814e04 <__alt_data_end+0xff814e04>
  815a20:	4827883a 	mov	r19,r9
  815a24:	db801d83 	ldbu	r14,118(sp)
  815a28:	dd802215 	stw	r22,136(sp)
  815a2c:	0013883a 	mov	r9,zero
  815a30:	003c5806 	br	814b94 <__alt_data_end+0xff814b94>
  815a34:	200d883a 	mov	r6,r4
  815a38:	003ec706 	br	815558 <__alt_data_end+0xff815558>
  815a3c:	0023883a 	mov	r17,zero
  815a40:	003fed06 	br	8159f8 <__alt_data_end+0xff8159f8>
  815a44:	d9002217 	ldw	r4,136(sp)
  815a48:	22400017 	ldw	r9,0(r4)
  815a4c:	20c00104 	addi	r3,r4,4
  815a50:	d8c02215 	stw	r3,136(sp)
  815a54:	483fc20e 	bge	r9,zero,815960 <__alt_data_end+0xff815960>
  815a58:	027fffc4 	movi	r9,-1
  815a5c:	80c00047 	ldb	r3,1(r16)
  815a60:	003bb006 	br	814924 <__alt_data_end+0xff814924>
  815a64:	8c80010e 	bge	r17,r18,815a6c <___vfiprintf_internal_r+0x12c0>
  815a68:	9023883a 	mov	r17,r18
  815a6c:	d8802317 	ldw	r2,140(sp)
  815a70:	1445883a 	add	r2,r2,r17
  815a74:	d8802315 	stw	r2,140(sp)
  815a78:	003cef06 	br	814e38 <__alt_data_end+0xff814e38>

00815a7c <__vfiprintf_internal>:
  815a7c:	2007883a 	mov	r3,r4
  815a80:	010020b4 	movhi	r4,130
  815a84:	21383f04 	addi	r4,r4,-7940
  815a88:	21000017 	ldw	r4,0(r4)
  815a8c:	2805883a 	mov	r2,r5
  815a90:	300f883a 	mov	r7,r6
  815a94:	180b883a 	mov	r5,r3
  815a98:	100d883a 	mov	r6,r2
  815a9c:	08147ac1 	jmpi	8147ac <___vfiprintf_internal_r>

00815aa0 <__sbprintf>:
  815aa0:	2880030b 	ldhu	r2,12(r5)
  815aa4:	2ac01917 	ldw	r11,100(r5)
  815aa8:	2a80038b 	ldhu	r10,14(r5)
  815aac:	2a400717 	ldw	r9,28(r5)
  815ab0:	2a000917 	ldw	r8,36(r5)
  815ab4:	defee204 	addi	sp,sp,-1144
  815ab8:	00c10004 	movi	r3,1024
  815abc:	dc011a15 	stw	r16,1128(sp)
  815ac0:	10bfff4c 	andi	r2,r2,65533
  815ac4:	2821883a 	mov	r16,r5
  815ac8:	d8cb883a 	add	r5,sp,r3
  815acc:	dc811c15 	stw	r18,1136(sp)
  815ad0:	dc411b15 	stw	r17,1132(sp)
  815ad4:	dfc11d15 	stw	ra,1140(sp)
  815ad8:	2025883a 	mov	r18,r4
  815adc:	d881030d 	sth	r2,1036(sp)
  815ae0:	dac11915 	stw	r11,1124(sp)
  815ae4:	da81038d 	sth	r10,1038(sp)
  815ae8:	da410715 	stw	r9,1052(sp)
  815aec:	da010915 	stw	r8,1060(sp)
  815af0:	dec10015 	stw	sp,1024(sp)
  815af4:	dec10415 	stw	sp,1040(sp)
  815af8:	d8c10215 	stw	r3,1032(sp)
  815afc:	d8c10515 	stw	r3,1044(sp)
  815b00:	d8010615 	stw	zero,1048(sp)
  815b04:	08147ac0 	call	8147ac <___vfiprintf_internal_r>
  815b08:	1023883a 	mov	r17,r2
  815b0c:	10000416 	blt	r2,zero,815b20 <__sbprintf+0x80>
  815b10:	9009883a 	mov	r4,r18
  815b14:	d9410004 	addi	r5,sp,1024
  815b18:	081272c0 	call	81272c <_fflush_r>
  815b1c:	10000d1e 	bne	r2,zero,815b54 <__sbprintf+0xb4>
  815b20:	d8c1030b 	ldhu	r3,1036(sp)
  815b24:	18c0100c 	andi	r3,r3,64
  815b28:	18000326 	beq	r3,zero,815b38 <__sbprintf+0x98>
  815b2c:	8080030b 	ldhu	r2,12(r16)
  815b30:	10801014 	ori	r2,r2,64
  815b34:	8080030d 	sth	r2,12(r16)
  815b38:	8805883a 	mov	r2,r17
  815b3c:	dfc11d17 	ldw	ra,1140(sp)
  815b40:	dc811c17 	ldw	r18,1136(sp)
  815b44:	dc411b17 	ldw	r17,1132(sp)
  815b48:	dc011a17 	ldw	r16,1128(sp)
  815b4c:	dec11e04 	addi	sp,sp,1144
  815b50:	f800283a 	ret
  815b54:	047fffc4 	movi	r17,-1
  815b58:	003ff106 	br	815b20 <__alt_data_end+0xff815b20>

00815b5c <__swbuf_r>:
  815b5c:	defffc04 	addi	sp,sp,-16
  815b60:	dc800215 	stw	r18,8(sp)
  815b64:	dc400115 	stw	r17,4(sp)
  815b68:	dc000015 	stw	r16,0(sp)
  815b6c:	dfc00315 	stw	ra,12(sp)
  815b70:	2025883a 	mov	r18,r4
  815b74:	2823883a 	mov	r17,r5
  815b78:	3021883a 	mov	r16,r6
  815b7c:	20000226 	beq	r4,zero,815b88 <__swbuf_r+0x2c>
  815b80:	20800e17 	ldw	r2,56(r4)
  815b84:	10004126 	beq	r2,zero,815c8c <__swbuf_r+0x130>
  815b88:	80c00617 	ldw	r3,24(r16)
  815b8c:	8180030b 	ldhu	r6,12(r16)
  815b90:	80c00215 	stw	r3,8(r16)
  815b94:	30c0020c 	andi	r3,r6,8
  815b98:	18003526 	beq	r3,zero,815c70 <__swbuf_r+0x114>
  815b9c:	80c00417 	ldw	r3,16(r16)
  815ba0:	18003326 	beq	r3,zero,815c70 <__swbuf_r+0x114>
  815ba4:	3088000c 	andi	r2,r6,8192
  815ba8:	8c403fcc 	andi	r17,r17,255
  815bac:	10001726 	beq	r2,zero,815c0c <__swbuf_r+0xb0>
  815bb0:	80800017 	ldw	r2,0(r16)
  815bb4:	81000517 	ldw	r4,20(r16)
  815bb8:	10c7c83a 	sub	r3,r2,r3
  815bbc:	19001d0e 	bge	r3,r4,815c34 <__swbuf_r+0xd8>
  815bc0:	18c00044 	addi	r3,r3,1
  815bc4:	81400217 	ldw	r5,8(r16)
  815bc8:	11000044 	addi	r4,r2,1
  815bcc:	81000015 	stw	r4,0(r16)
  815bd0:	297fffc4 	addi	r5,r5,-1
  815bd4:	81400215 	stw	r5,8(r16)
  815bd8:	14400005 	stb	r17,0(r2)
  815bdc:	80800517 	ldw	r2,20(r16)
  815be0:	10c01d26 	beq	r2,r3,815c58 <__swbuf_r+0xfc>
  815be4:	8080030b 	ldhu	r2,12(r16)
  815be8:	1080004c 	andi	r2,r2,1
  815bec:	1000181e 	bne	r2,zero,815c50 <__swbuf_r+0xf4>
  815bf0:	8805883a 	mov	r2,r17
  815bf4:	dfc00317 	ldw	ra,12(sp)
  815bf8:	dc800217 	ldw	r18,8(sp)
  815bfc:	dc400117 	ldw	r17,4(sp)
  815c00:	dc000017 	ldw	r16,0(sp)
  815c04:	dec00404 	addi	sp,sp,16
  815c08:	f800283a 	ret
  815c0c:	81001917 	ldw	r4,100(r16)
  815c10:	00b7ffc4 	movi	r2,-8193
  815c14:	31880014 	ori	r6,r6,8192
  815c18:	2084703a 	and	r2,r4,r2
  815c1c:	80801915 	stw	r2,100(r16)
  815c20:	80800017 	ldw	r2,0(r16)
  815c24:	81000517 	ldw	r4,20(r16)
  815c28:	8180030d 	sth	r6,12(r16)
  815c2c:	10c7c83a 	sub	r3,r2,r3
  815c30:	193fe316 	blt	r3,r4,815bc0 <__alt_data_end+0xff815bc0>
  815c34:	9009883a 	mov	r4,r18
  815c38:	800b883a 	mov	r5,r16
  815c3c:	081272c0 	call	81272c <_fflush_r>
  815c40:	1000091e 	bne	r2,zero,815c68 <__swbuf_r+0x10c>
  815c44:	80800017 	ldw	r2,0(r16)
  815c48:	00c00044 	movi	r3,1
  815c4c:	003fdd06 	br	815bc4 <__alt_data_end+0xff815bc4>
  815c50:	00800284 	movi	r2,10
  815c54:	88bfe61e 	bne	r17,r2,815bf0 <__alt_data_end+0xff815bf0>
  815c58:	9009883a 	mov	r4,r18
  815c5c:	800b883a 	mov	r5,r16
  815c60:	081272c0 	call	81272c <_fflush_r>
  815c64:	103fe226 	beq	r2,zero,815bf0 <__alt_data_end+0xff815bf0>
  815c68:	00bfffc4 	movi	r2,-1
  815c6c:	003fe106 	br	815bf4 <__alt_data_end+0xff815bf4>
  815c70:	9009883a 	mov	r4,r18
  815c74:	800b883a 	mov	r5,r16
  815c78:	0810a540 	call	810a54 <__swsetup_r>
  815c7c:	103ffa1e 	bne	r2,zero,815c68 <__alt_data_end+0xff815c68>
  815c80:	8180030b 	ldhu	r6,12(r16)
  815c84:	80c00417 	ldw	r3,16(r16)
  815c88:	003fc606 	br	815ba4 <__alt_data_end+0xff815ba4>
  815c8c:	0812b080 	call	812b08 <__sinit>
  815c90:	003fbd06 	br	815b88 <__alt_data_end+0xff815b88>

00815c94 <__swbuf>:
  815c94:	00c020b4 	movhi	r3,130
  815c98:	18f83f04 	addi	r3,r3,-7940
  815c9c:	2005883a 	mov	r2,r4
  815ca0:	19000017 	ldw	r4,0(r3)
  815ca4:	280d883a 	mov	r6,r5
  815ca8:	100b883a 	mov	r5,r2
  815cac:	0815b5c1 	jmpi	815b5c <__swbuf_r>

00815cb0 <_calloc_r>:
  815cb0:	298b383a 	mul	r5,r5,r6
  815cb4:	defffe04 	addi	sp,sp,-8
  815cb8:	dc000015 	stw	r16,0(sp)
  815cbc:	dfc00115 	stw	ra,4(sp)
  815cc0:	080cf300 	call	80cf30 <_malloc_r>
  815cc4:	1021883a 	mov	r16,r2
  815cc8:	10002826 	beq	r2,zero,815d6c <_calloc_r+0xbc>
  815ccc:	11bfff17 	ldw	r6,-4(r2)
  815cd0:	00bfff04 	movi	r2,-4
  815cd4:	00c00904 	movi	r3,36
  815cd8:	308c703a 	and	r6,r6,r2
  815cdc:	308d883a 	add	r6,r6,r2
  815ce0:	19801436 	bltu	r3,r6,815d34 <_calloc_r+0x84>
  815ce4:	008004c4 	movi	r2,19
  815ce8:	11800936 	bltu	r2,r6,815d10 <_calloc_r+0x60>
  815cec:	8005883a 	mov	r2,r16
  815cf0:	10000015 	stw	zero,0(r2)
  815cf4:	10000115 	stw	zero,4(r2)
  815cf8:	10000215 	stw	zero,8(r2)
  815cfc:	8005883a 	mov	r2,r16
  815d00:	dfc00117 	ldw	ra,4(sp)
  815d04:	dc000017 	ldw	r16,0(sp)
  815d08:	dec00204 	addi	sp,sp,8
  815d0c:	f800283a 	ret
  815d10:	80000015 	stw	zero,0(r16)
  815d14:	80000115 	stw	zero,4(r16)
  815d18:	008006c4 	movi	r2,27
  815d1c:	11800d2e 	bgeu	r2,r6,815d54 <_calloc_r+0xa4>
  815d20:	80000215 	stw	zero,8(r16)
  815d24:	80000315 	stw	zero,12(r16)
  815d28:	30c00c26 	beq	r6,r3,815d5c <_calloc_r+0xac>
  815d2c:	80800404 	addi	r2,r16,16
  815d30:	003fef06 	br	815cf0 <__alt_data_end+0xff815cf0>
  815d34:	8009883a 	mov	r4,r16
  815d38:	000b883a 	mov	r5,zero
  815d3c:	080d8100 	call	80d810 <memset>
  815d40:	8005883a 	mov	r2,r16
  815d44:	dfc00117 	ldw	ra,4(sp)
  815d48:	dc000017 	ldw	r16,0(sp)
  815d4c:	dec00204 	addi	sp,sp,8
  815d50:	f800283a 	ret
  815d54:	80800204 	addi	r2,r16,8
  815d58:	003fe506 	br	815cf0 <__alt_data_end+0xff815cf0>
  815d5c:	80000415 	stw	zero,16(r16)
  815d60:	80800604 	addi	r2,r16,24
  815d64:	80000515 	stw	zero,20(r16)
  815d68:	003fe106 	br	815cf0 <__alt_data_end+0xff815cf0>
  815d6c:	0005883a 	mov	r2,zero
  815d70:	003fe306 	br	815d00 <__alt_data_end+0xff815d00>

00815d74 <_fclose_r>:
  815d74:	28003926 	beq	r5,zero,815e5c <_fclose_r+0xe8>
  815d78:	defffc04 	addi	sp,sp,-16
  815d7c:	dc400115 	stw	r17,4(sp)
  815d80:	dc000015 	stw	r16,0(sp)
  815d84:	dfc00315 	stw	ra,12(sp)
  815d88:	dc800215 	stw	r18,8(sp)
  815d8c:	2023883a 	mov	r17,r4
  815d90:	2821883a 	mov	r16,r5
  815d94:	20000226 	beq	r4,zero,815da0 <_fclose_r+0x2c>
  815d98:	20800e17 	ldw	r2,56(r4)
  815d9c:	10002726 	beq	r2,zero,815e3c <_fclose_r+0xc8>
  815da0:	8080030f 	ldh	r2,12(r16)
  815da4:	1000071e 	bne	r2,zero,815dc4 <_fclose_r+0x50>
  815da8:	0005883a 	mov	r2,zero
  815dac:	dfc00317 	ldw	ra,12(sp)
  815db0:	dc800217 	ldw	r18,8(sp)
  815db4:	dc400117 	ldw	r17,4(sp)
  815db8:	dc000017 	ldw	r16,0(sp)
  815dbc:	dec00404 	addi	sp,sp,16
  815dc0:	f800283a 	ret
  815dc4:	8809883a 	mov	r4,r17
  815dc8:	800b883a 	mov	r5,r16
  815dcc:	08125240 	call	812524 <__sflush_r>
  815dd0:	1025883a 	mov	r18,r2
  815dd4:	80800b17 	ldw	r2,44(r16)
  815dd8:	10000426 	beq	r2,zero,815dec <_fclose_r+0x78>
  815ddc:	81400717 	ldw	r5,28(r16)
  815de0:	8809883a 	mov	r4,r17
  815de4:	103ee83a 	callr	r2
  815de8:	10001616 	blt	r2,zero,815e44 <_fclose_r+0xd0>
  815dec:	8080030b 	ldhu	r2,12(r16)
  815df0:	1080200c 	andi	r2,r2,128
  815df4:	1000151e 	bne	r2,zero,815e4c <_fclose_r+0xd8>
  815df8:	81400c17 	ldw	r5,48(r16)
  815dfc:	28000526 	beq	r5,zero,815e14 <_fclose_r+0xa0>
  815e00:	80801004 	addi	r2,r16,64
  815e04:	28800226 	beq	r5,r2,815e10 <_fclose_r+0x9c>
  815e08:	8809883a 	mov	r4,r17
  815e0c:	0812d280 	call	812d28 <_free_r>
  815e10:	80000c15 	stw	zero,48(r16)
  815e14:	81401117 	ldw	r5,68(r16)
  815e18:	28000326 	beq	r5,zero,815e28 <_fclose_r+0xb4>
  815e1c:	8809883a 	mov	r4,r17
  815e20:	0812d280 	call	812d28 <_free_r>
  815e24:	80001115 	stw	zero,68(r16)
  815e28:	0812b180 	call	812b18 <__sfp_lock_acquire>
  815e2c:	8000030d 	sth	zero,12(r16)
  815e30:	0812b1c0 	call	812b1c <__sfp_lock_release>
  815e34:	9005883a 	mov	r2,r18
  815e38:	003fdc06 	br	815dac <__alt_data_end+0xff815dac>
  815e3c:	0812b080 	call	812b08 <__sinit>
  815e40:	003fd706 	br	815da0 <__alt_data_end+0xff815da0>
  815e44:	04bfffc4 	movi	r18,-1
  815e48:	003fe806 	br	815dec <__alt_data_end+0xff815dec>
  815e4c:	81400417 	ldw	r5,16(r16)
  815e50:	8809883a 	mov	r4,r17
  815e54:	0812d280 	call	812d28 <_free_r>
  815e58:	003fe706 	br	815df8 <__alt_data_end+0xff815df8>
  815e5c:	0005883a 	mov	r2,zero
  815e60:	f800283a 	ret

00815e64 <fclose>:
  815e64:	008020b4 	movhi	r2,130
  815e68:	10b83f04 	addi	r2,r2,-7940
  815e6c:	200b883a 	mov	r5,r4
  815e70:	11000017 	ldw	r4,0(r2)
  815e74:	0815d741 	jmpi	815d74 <_fclose_r>

00815e78 <_fputwc_r>:
  815e78:	3080030b 	ldhu	r2,12(r6)
  815e7c:	defff804 	addi	sp,sp,-32
  815e80:	dcc00415 	stw	r19,16(sp)
  815e84:	dc800315 	stw	r18,12(sp)
  815e88:	dc000115 	stw	r16,4(sp)
  815e8c:	dfc00715 	stw	ra,28(sp)
  815e90:	dd400615 	stw	r21,24(sp)
  815e94:	dd000515 	stw	r20,20(sp)
  815e98:	dc400215 	stw	r17,8(sp)
  815e9c:	10c8000c 	andi	r3,r2,8192
  815ea0:	3021883a 	mov	r16,r6
  815ea4:	2027883a 	mov	r19,r4
  815ea8:	2825883a 	mov	r18,r5
  815eac:	1800051e 	bne	r3,zero,815ec4 <_fputwc_r+0x4c>
  815eb0:	30c01917 	ldw	r3,100(r6)
  815eb4:	10880014 	ori	r2,r2,8192
  815eb8:	3080030d 	sth	r2,12(r6)
  815ebc:	18880014 	ori	r2,r3,8192
  815ec0:	30801915 	stw	r2,100(r6)
  815ec4:	081327c0 	call	81327c <__locale_mb_cur_max>
  815ec8:	00c00044 	movi	r3,1
  815ecc:	10c03e26 	beq	r2,r3,815fc8 <_fputwc_r+0x150>
  815ed0:	9809883a 	mov	r4,r19
  815ed4:	d80b883a 	mov	r5,sp
  815ed8:	900d883a 	mov	r6,r18
  815edc:	81c01704 	addi	r7,r16,92
  815ee0:	0816bdc0 	call	816bdc <_wcrtomb_r>
  815ee4:	1029883a 	mov	r20,r2
  815ee8:	00bfffc4 	movi	r2,-1
  815eec:	a0802026 	beq	r20,r2,815f70 <_fputwc_r+0xf8>
  815ef0:	d9400003 	ldbu	r5,0(sp)
  815ef4:	a0001c26 	beq	r20,zero,815f68 <_fputwc_r+0xf0>
  815ef8:	0023883a 	mov	r17,zero
  815efc:	05400284 	movi	r21,10
  815f00:	00000906 	br	815f28 <_fputwc_r+0xb0>
  815f04:	80800017 	ldw	r2,0(r16)
  815f08:	11400005 	stb	r5,0(r2)
  815f0c:	80c00017 	ldw	r3,0(r16)
  815f10:	18c00044 	addi	r3,r3,1
  815f14:	80c00015 	stw	r3,0(r16)
  815f18:	8c400044 	addi	r17,r17,1
  815f1c:	dc45883a 	add	r2,sp,r17
  815f20:	8d00112e 	bgeu	r17,r20,815f68 <_fputwc_r+0xf0>
  815f24:	11400003 	ldbu	r5,0(r2)
  815f28:	80c00217 	ldw	r3,8(r16)
  815f2c:	18ffffc4 	addi	r3,r3,-1
  815f30:	80c00215 	stw	r3,8(r16)
  815f34:	183ff30e 	bge	r3,zero,815f04 <__alt_data_end+0xff815f04>
  815f38:	80800617 	ldw	r2,24(r16)
  815f3c:	18801916 	blt	r3,r2,815fa4 <_fputwc_r+0x12c>
  815f40:	80800017 	ldw	r2,0(r16)
  815f44:	11400005 	stb	r5,0(r2)
  815f48:	80800017 	ldw	r2,0(r16)
  815f4c:	10c00003 	ldbu	r3,0(r2)
  815f50:	10800044 	addi	r2,r2,1
  815f54:	1d402326 	beq	r3,r21,815fe4 <_fputwc_r+0x16c>
  815f58:	80800015 	stw	r2,0(r16)
  815f5c:	8c400044 	addi	r17,r17,1
  815f60:	dc45883a 	add	r2,sp,r17
  815f64:	8d3fef36 	bltu	r17,r20,815f24 <__alt_data_end+0xff815f24>
  815f68:	9005883a 	mov	r2,r18
  815f6c:	00000406 	br	815f80 <_fputwc_r+0x108>
  815f70:	80c0030b 	ldhu	r3,12(r16)
  815f74:	a005883a 	mov	r2,r20
  815f78:	18c01014 	ori	r3,r3,64
  815f7c:	80c0030d 	sth	r3,12(r16)
  815f80:	dfc00717 	ldw	ra,28(sp)
  815f84:	dd400617 	ldw	r21,24(sp)
  815f88:	dd000517 	ldw	r20,20(sp)
  815f8c:	dcc00417 	ldw	r19,16(sp)
  815f90:	dc800317 	ldw	r18,12(sp)
  815f94:	dc400217 	ldw	r17,8(sp)
  815f98:	dc000117 	ldw	r16,4(sp)
  815f9c:	dec00804 	addi	sp,sp,32
  815fa0:	f800283a 	ret
  815fa4:	9809883a 	mov	r4,r19
  815fa8:	29403fcc 	andi	r5,r5,255
  815fac:	800d883a 	mov	r6,r16
  815fb0:	0815b5c0 	call	815b5c <__swbuf_r>
  815fb4:	10bfffe0 	cmpeqi	r2,r2,-1
  815fb8:	10803fcc 	andi	r2,r2,255
  815fbc:	103fd626 	beq	r2,zero,815f18 <__alt_data_end+0xff815f18>
  815fc0:	00bfffc4 	movi	r2,-1
  815fc4:	003fee06 	br	815f80 <__alt_data_end+0xff815f80>
  815fc8:	90ffffc4 	addi	r3,r18,-1
  815fcc:	01003f84 	movi	r4,254
  815fd0:	20ffbf36 	bltu	r4,r3,815ed0 <__alt_data_end+0xff815ed0>
  815fd4:	900b883a 	mov	r5,r18
  815fd8:	dc800005 	stb	r18,0(sp)
  815fdc:	1029883a 	mov	r20,r2
  815fe0:	003fc506 	br	815ef8 <__alt_data_end+0xff815ef8>
  815fe4:	9809883a 	mov	r4,r19
  815fe8:	a80b883a 	mov	r5,r21
  815fec:	800d883a 	mov	r6,r16
  815ff0:	0815b5c0 	call	815b5c <__swbuf_r>
  815ff4:	10bfffe0 	cmpeqi	r2,r2,-1
  815ff8:	003fef06 	br	815fb8 <__alt_data_end+0xff815fb8>

00815ffc <fputwc>:
  815ffc:	008020b4 	movhi	r2,130
  816000:	defffc04 	addi	sp,sp,-16
  816004:	10b83f04 	addi	r2,r2,-7940
  816008:	dc000115 	stw	r16,4(sp)
  81600c:	14000017 	ldw	r16,0(r2)
  816010:	dc400215 	stw	r17,8(sp)
  816014:	dfc00315 	stw	ra,12(sp)
  816018:	2023883a 	mov	r17,r4
  81601c:	280d883a 	mov	r6,r5
  816020:	80000626 	beq	r16,zero,81603c <fputwc+0x40>
  816024:	80800e17 	ldw	r2,56(r16)
  816028:	1000041e 	bne	r2,zero,81603c <fputwc+0x40>
  81602c:	8009883a 	mov	r4,r16
  816030:	d9400015 	stw	r5,0(sp)
  816034:	0812b080 	call	812b08 <__sinit>
  816038:	d9800017 	ldw	r6,0(sp)
  81603c:	8009883a 	mov	r4,r16
  816040:	880b883a 	mov	r5,r17
  816044:	dfc00317 	ldw	ra,12(sp)
  816048:	dc400217 	ldw	r17,8(sp)
  81604c:	dc000117 	ldw	r16,4(sp)
  816050:	dec00404 	addi	sp,sp,16
  816054:	0815e781 	jmpi	815e78 <_fputwc_r>

00816058 <__sfvwrite_r>:
  816058:	30800217 	ldw	r2,8(r6)
  81605c:	10006726 	beq	r2,zero,8161fc <__sfvwrite_r+0x1a4>
  816060:	defff404 	addi	sp,sp,-48
  816064:	dd000615 	stw	r20,24(sp)
  816068:	2029883a 	mov	r20,r4
  81606c:	2900030b 	ldhu	r4,12(r5)
  816070:	ddc00915 	stw	r23,36(sp)
  816074:	dc000215 	stw	r16,8(sp)
  816078:	dfc00b15 	stw	ra,44(sp)
  81607c:	df000a15 	stw	fp,40(sp)
  816080:	dd800815 	stw	r22,32(sp)
  816084:	dd400715 	stw	r21,28(sp)
  816088:	dcc00515 	stw	r19,20(sp)
  81608c:	dc800415 	stw	r18,16(sp)
  816090:	dc400315 	stw	r17,12(sp)
  816094:	2080020c 	andi	r2,r4,8
  816098:	2821883a 	mov	r16,r5
  81609c:	302f883a 	mov	r23,r6
  8160a0:	10002726 	beq	r2,zero,816140 <__sfvwrite_r+0xe8>
  8160a4:	28800417 	ldw	r2,16(r5)
  8160a8:	10002526 	beq	r2,zero,816140 <__sfvwrite_r+0xe8>
  8160ac:	2080008c 	andi	r2,r4,2
  8160b0:	bc400017 	ldw	r17,0(r23)
  8160b4:	10002a26 	beq	r2,zero,816160 <__sfvwrite_r+0x108>
  8160b8:	05600034 	movhi	r21,32768
  8160bc:	0027883a 	mov	r19,zero
  8160c0:	0025883a 	mov	r18,zero
  8160c4:	ad7f0004 	addi	r21,r21,-1024
  8160c8:	980d883a 	mov	r6,r19
  8160cc:	a009883a 	mov	r4,r20
  8160d0:	90004626 	beq	r18,zero,8161ec <__sfvwrite_r+0x194>
  8160d4:	900f883a 	mov	r7,r18
  8160d8:	81400717 	ldw	r5,28(r16)
  8160dc:	ac80022e 	bgeu	r21,r18,8160e8 <__sfvwrite_r+0x90>
  8160e0:	01e00034 	movhi	r7,32768
  8160e4:	39ff0004 	addi	r7,r7,-1024
  8160e8:	80800917 	ldw	r2,36(r16)
  8160ec:	103ee83a 	callr	r2
  8160f0:	0080520e 	bge	zero,r2,81623c <__sfvwrite_r+0x1e4>
  8160f4:	b8c00217 	ldw	r3,8(r23)
  8160f8:	98a7883a 	add	r19,r19,r2
  8160fc:	90a5c83a 	sub	r18,r18,r2
  816100:	1885c83a 	sub	r2,r3,r2
  816104:	b8800215 	stw	r2,8(r23)
  816108:	103fef1e 	bne	r2,zero,8160c8 <__alt_data_end+0xff8160c8>
  81610c:	0005883a 	mov	r2,zero
  816110:	dfc00b17 	ldw	ra,44(sp)
  816114:	df000a17 	ldw	fp,40(sp)
  816118:	ddc00917 	ldw	r23,36(sp)
  81611c:	dd800817 	ldw	r22,32(sp)
  816120:	dd400717 	ldw	r21,28(sp)
  816124:	dd000617 	ldw	r20,24(sp)
  816128:	dcc00517 	ldw	r19,20(sp)
  81612c:	dc800417 	ldw	r18,16(sp)
  816130:	dc400317 	ldw	r17,12(sp)
  816134:	dc000217 	ldw	r16,8(sp)
  816138:	dec00c04 	addi	sp,sp,48
  81613c:	f800283a 	ret
  816140:	a009883a 	mov	r4,r20
  816144:	800b883a 	mov	r5,r16
  816148:	0810a540 	call	810a54 <__swsetup_r>
  81614c:	1000ec1e 	bne	r2,zero,816500 <__sfvwrite_r+0x4a8>
  816150:	8100030b 	ldhu	r4,12(r16)
  816154:	bc400017 	ldw	r17,0(r23)
  816158:	2080008c 	andi	r2,r4,2
  81615c:	103fd61e 	bne	r2,zero,8160b8 <__alt_data_end+0xff8160b8>
  816160:	2080004c 	andi	r2,r4,1
  816164:	10003a1e 	bne	r2,zero,816250 <__sfvwrite_r+0x1f8>
  816168:	0039883a 	mov	fp,zero
  81616c:	0025883a 	mov	r18,zero
  816170:	90001a26 	beq	r18,zero,8161dc <__sfvwrite_r+0x184>
  816174:	2080800c 	andi	r2,r4,512
  816178:	85800217 	ldw	r22,8(r16)
  81617c:	10007626 	beq	r2,zero,816358 <__sfvwrite_r+0x300>
  816180:	b027883a 	mov	r19,r22
  816184:	95809436 	bltu	r18,r22,8163d8 <__sfvwrite_r+0x380>
  816188:	2081200c 	andi	r2,r4,1152
  81618c:	10009f1e 	bne	r2,zero,81640c <__sfvwrite_r+0x3b4>
  816190:	81000017 	ldw	r4,0(r16)
  816194:	e00b883a 	mov	r5,fp
  816198:	980d883a 	mov	r6,r19
  81619c:	08165180 	call	816518 <memmove>
  8161a0:	81000217 	ldw	r4,8(r16)
  8161a4:	81400017 	ldw	r5,0(r16)
  8161a8:	9005883a 	mov	r2,r18
  8161ac:	2587c83a 	sub	r3,r4,r22
  8161b0:	2ce7883a 	add	r19,r5,r19
  8161b4:	80c00215 	stw	r3,8(r16)
  8161b8:	84c00015 	stw	r19,0(r16)
  8161bc:	b8c00217 	ldw	r3,8(r23)
  8161c0:	e0b9883a 	add	fp,fp,r2
  8161c4:	90a5c83a 	sub	r18,r18,r2
  8161c8:	1885c83a 	sub	r2,r3,r2
  8161cc:	b8800215 	stw	r2,8(r23)
  8161d0:	103fce26 	beq	r2,zero,81610c <__alt_data_end+0xff81610c>
  8161d4:	8100030b 	ldhu	r4,12(r16)
  8161d8:	903fe61e 	bne	r18,zero,816174 <__alt_data_end+0xff816174>
  8161dc:	8f000017 	ldw	fp,0(r17)
  8161e0:	8c800117 	ldw	r18,4(r17)
  8161e4:	8c400204 	addi	r17,r17,8
  8161e8:	003fe106 	br	816170 <__alt_data_end+0xff816170>
  8161ec:	8cc00017 	ldw	r19,0(r17)
  8161f0:	8c800117 	ldw	r18,4(r17)
  8161f4:	8c400204 	addi	r17,r17,8
  8161f8:	003fb306 	br	8160c8 <__alt_data_end+0xff8160c8>
  8161fc:	0005883a 	mov	r2,zero
  816200:	f800283a 	ret
  816204:	00a00034 	movhi	r2,32768
  816208:	10bfffc4 	addi	r2,r2,-1
  81620c:	9009883a 	mov	r4,r18
  816210:	1480012e 	bgeu	r2,r18,816218 <__sfvwrite_r+0x1c0>
  816214:	1009883a 	mov	r4,r2
  816218:	980b883a 	mov	r5,r19
  81621c:	080c5800 	call	80c580 <__divsi3>
  816220:	81400717 	ldw	r5,28(r16)
  816224:	80c00917 	ldw	r3,36(r16)
  816228:	988f383a 	mul	r7,r19,r2
  81622c:	a009883a 	mov	r4,r20
  816230:	e00d883a 	mov	r6,fp
  816234:	183ee83a 	callr	r3
  816238:	00bfe016 	blt	zero,r2,8161bc <__alt_data_end+0xff8161bc>
  81623c:	8080030b 	ldhu	r2,12(r16)
  816240:	10801014 	ori	r2,r2,64
  816244:	8080030d 	sth	r2,12(r16)
  816248:	00bfffc4 	movi	r2,-1
  81624c:	003fb006 	br	816110 <__alt_data_end+0xff816110>
  816250:	0027883a 	mov	r19,zero
  816254:	0011883a 	mov	r8,zero
  816258:	0039883a 	mov	fp,zero
  81625c:	0025883a 	mov	r18,zero
  816260:	90001f26 	beq	r18,zero,8162e0 <__sfvwrite_r+0x288>
  816264:	40006026 	beq	r8,zero,8163e8 <__sfvwrite_r+0x390>
  816268:	982b883a 	mov	r21,r19
  81626c:	94c0012e 	bgeu	r18,r19,816274 <__sfvwrite_r+0x21c>
  816270:	902b883a 	mov	r21,r18
  816274:	81000017 	ldw	r4,0(r16)
  816278:	80800417 	ldw	r2,16(r16)
  81627c:	a82d883a 	mov	r22,r21
  816280:	81800217 	ldw	r6,8(r16)
  816284:	81c00517 	ldw	r7,20(r16)
  816288:	1100022e 	bgeu	r2,r4,816294 <__sfvwrite_r+0x23c>
  81628c:	31c7883a 	add	r3,r6,r7
  816290:	1d401816 	blt	r3,r21,8162f4 <__sfvwrite_r+0x29c>
  816294:	a9c04416 	blt	r21,r7,8163a8 <__sfvwrite_r+0x350>
  816298:	80800917 	ldw	r2,36(r16)
  81629c:	81400717 	ldw	r5,28(r16)
  8162a0:	a009883a 	mov	r4,r20
  8162a4:	da000115 	stw	r8,4(sp)
  8162a8:	e00d883a 	mov	r6,fp
  8162ac:	103ee83a 	callr	r2
  8162b0:	102d883a 	mov	r22,r2
  8162b4:	da000117 	ldw	r8,4(sp)
  8162b8:	00bfe00e 	bge	zero,r2,81623c <__alt_data_end+0xff81623c>
  8162bc:	9da7c83a 	sub	r19,r19,r22
  8162c0:	98001f26 	beq	r19,zero,816340 <__sfvwrite_r+0x2e8>
  8162c4:	b8800217 	ldw	r2,8(r23)
  8162c8:	e5b9883a 	add	fp,fp,r22
  8162cc:	95a5c83a 	sub	r18,r18,r22
  8162d0:	15adc83a 	sub	r22,r2,r22
  8162d4:	bd800215 	stw	r22,8(r23)
  8162d8:	b03f8c26 	beq	r22,zero,81610c <__alt_data_end+0xff81610c>
  8162dc:	903fe11e 	bne	r18,zero,816264 <__alt_data_end+0xff816264>
  8162e0:	8f000017 	ldw	fp,0(r17)
  8162e4:	8c800117 	ldw	r18,4(r17)
  8162e8:	0011883a 	mov	r8,zero
  8162ec:	8c400204 	addi	r17,r17,8
  8162f0:	003fdb06 	br	816260 <__alt_data_end+0xff816260>
  8162f4:	180d883a 	mov	r6,r3
  8162f8:	e00b883a 	mov	r5,fp
  8162fc:	da000115 	stw	r8,4(sp)
  816300:	d8c00015 	stw	r3,0(sp)
  816304:	08165180 	call	816518 <memmove>
  816308:	d8c00017 	ldw	r3,0(sp)
  81630c:	80800017 	ldw	r2,0(r16)
  816310:	a009883a 	mov	r4,r20
  816314:	800b883a 	mov	r5,r16
  816318:	10c5883a 	add	r2,r2,r3
  81631c:	80800015 	stw	r2,0(r16)
  816320:	d8c00015 	stw	r3,0(sp)
  816324:	081272c0 	call	81272c <_fflush_r>
  816328:	d8c00017 	ldw	r3,0(sp)
  81632c:	da000117 	ldw	r8,4(sp)
  816330:	103fc21e 	bne	r2,zero,81623c <__alt_data_end+0xff81623c>
  816334:	182d883a 	mov	r22,r3
  816338:	9da7c83a 	sub	r19,r19,r22
  81633c:	983fe11e 	bne	r19,zero,8162c4 <__alt_data_end+0xff8162c4>
  816340:	a009883a 	mov	r4,r20
  816344:	800b883a 	mov	r5,r16
  816348:	081272c0 	call	81272c <_fflush_r>
  81634c:	103fbb1e 	bne	r2,zero,81623c <__alt_data_end+0xff81623c>
  816350:	0011883a 	mov	r8,zero
  816354:	003fdb06 	br	8162c4 <__alt_data_end+0xff8162c4>
  816358:	81000017 	ldw	r4,0(r16)
  81635c:	80800417 	ldw	r2,16(r16)
  816360:	11000236 	bltu	r2,r4,81636c <__sfvwrite_r+0x314>
  816364:	84c00517 	ldw	r19,20(r16)
  816368:	94ffa62e 	bgeu	r18,r19,816204 <__alt_data_end+0xff816204>
  81636c:	9027883a 	mov	r19,r18
  816370:	b480012e 	bgeu	r22,r18,816378 <__sfvwrite_r+0x320>
  816374:	b027883a 	mov	r19,r22
  816378:	e00b883a 	mov	r5,fp
  81637c:	980d883a 	mov	r6,r19
  816380:	08165180 	call	816518 <memmove>
  816384:	80800217 	ldw	r2,8(r16)
  816388:	80c00017 	ldw	r3,0(r16)
  81638c:	14c5c83a 	sub	r2,r2,r19
  816390:	1cc7883a 	add	r3,r3,r19
  816394:	80800215 	stw	r2,8(r16)
  816398:	80c00015 	stw	r3,0(r16)
  81639c:	10004326 	beq	r2,zero,8164ac <__sfvwrite_r+0x454>
  8163a0:	9805883a 	mov	r2,r19
  8163a4:	003f8506 	br	8161bc <__alt_data_end+0xff8161bc>
  8163a8:	a80d883a 	mov	r6,r21
  8163ac:	e00b883a 	mov	r5,fp
  8163b0:	da000115 	stw	r8,4(sp)
  8163b4:	08165180 	call	816518 <memmove>
  8163b8:	80800217 	ldw	r2,8(r16)
  8163bc:	80c00017 	ldw	r3,0(r16)
  8163c0:	da000117 	ldw	r8,4(sp)
  8163c4:	1545c83a 	sub	r2,r2,r21
  8163c8:	1d6b883a 	add	r21,r3,r21
  8163cc:	80800215 	stw	r2,8(r16)
  8163d0:	85400015 	stw	r21,0(r16)
  8163d4:	003fb906 	br	8162bc <__alt_data_end+0xff8162bc>
  8163d8:	81000017 	ldw	r4,0(r16)
  8163dc:	902d883a 	mov	r22,r18
  8163e0:	9027883a 	mov	r19,r18
  8163e4:	003f6b06 	br	816194 <__alt_data_end+0xff816194>
  8163e8:	e009883a 	mov	r4,fp
  8163ec:	01400284 	movi	r5,10
  8163f0:	900d883a 	mov	r6,r18
  8163f4:	08133300 	call	813330 <memchr>
  8163f8:	10003e26 	beq	r2,zero,8164f4 <__sfvwrite_r+0x49c>
  8163fc:	10800044 	addi	r2,r2,1
  816400:	1727c83a 	sub	r19,r2,fp
  816404:	02000044 	movi	r8,1
  816408:	003f9706 	br	816268 <__alt_data_end+0xff816268>
  81640c:	80800517 	ldw	r2,20(r16)
  816410:	81400417 	ldw	r5,16(r16)
  816414:	80c00017 	ldw	r3,0(r16)
  816418:	10a7883a 	add	r19,r2,r2
  81641c:	9885883a 	add	r2,r19,r2
  816420:	1026d7fa 	srli	r19,r2,31
  816424:	196bc83a 	sub	r21,r3,r5
  816428:	a9800044 	addi	r6,r21,1
  81642c:	9885883a 	add	r2,r19,r2
  816430:	1027d07a 	srai	r19,r2,1
  816434:	3485883a 	add	r2,r6,r18
  816438:	980d883a 	mov	r6,r19
  81643c:	9880022e 	bgeu	r19,r2,816448 <__sfvwrite_r+0x3f0>
  816440:	1027883a 	mov	r19,r2
  816444:	100d883a 	mov	r6,r2
  816448:	2101000c 	andi	r4,r4,1024
  81644c:	20001c26 	beq	r4,zero,8164c0 <__sfvwrite_r+0x468>
  816450:	a009883a 	mov	r4,r20
  816454:	300b883a 	mov	r5,r6
  816458:	080cf300 	call	80cf30 <_malloc_r>
  81645c:	102d883a 	mov	r22,r2
  816460:	10002926 	beq	r2,zero,816508 <__sfvwrite_r+0x4b0>
  816464:	81400417 	ldw	r5,16(r16)
  816468:	1009883a 	mov	r4,r2
  81646c:	a80d883a 	mov	r6,r21
  816470:	080d6d80 	call	80d6d8 <memcpy>
  816474:	8080030b 	ldhu	r2,12(r16)
  816478:	00fedfc4 	movi	r3,-1153
  81647c:	10c4703a 	and	r2,r2,r3
  816480:	10802014 	ori	r2,r2,128
  816484:	8080030d 	sth	r2,12(r16)
  816488:	b549883a 	add	r4,r22,r21
  81648c:	9d4bc83a 	sub	r5,r19,r21
  816490:	85800415 	stw	r22,16(r16)
  816494:	84c00515 	stw	r19,20(r16)
  816498:	81000015 	stw	r4,0(r16)
  81649c:	902d883a 	mov	r22,r18
  8164a0:	81400215 	stw	r5,8(r16)
  8164a4:	9027883a 	mov	r19,r18
  8164a8:	003f3a06 	br	816194 <__alt_data_end+0xff816194>
  8164ac:	a009883a 	mov	r4,r20
  8164b0:	800b883a 	mov	r5,r16
  8164b4:	081272c0 	call	81272c <_fflush_r>
  8164b8:	103fb926 	beq	r2,zero,8163a0 <__alt_data_end+0xff8163a0>
  8164bc:	003f5f06 	br	81623c <__alt_data_end+0xff81623c>
  8164c0:	a009883a 	mov	r4,r20
  8164c4:	08166740 	call	816674 <_realloc_r>
  8164c8:	102d883a 	mov	r22,r2
  8164cc:	103fee1e 	bne	r2,zero,816488 <__alt_data_end+0xff816488>
  8164d0:	81400417 	ldw	r5,16(r16)
  8164d4:	a009883a 	mov	r4,r20
  8164d8:	0812d280 	call	812d28 <_free_r>
  8164dc:	8080030b 	ldhu	r2,12(r16)
  8164e0:	00ffdfc4 	movi	r3,-129
  8164e4:	1884703a 	and	r2,r3,r2
  8164e8:	00c00304 	movi	r3,12
  8164ec:	a0c00015 	stw	r3,0(r20)
  8164f0:	003f5306 	br	816240 <__alt_data_end+0xff816240>
  8164f4:	94c00044 	addi	r19,r18,1
  8164f8:	02000044 	movi	r8,1
  8164fc:	003f5a06 	br	816268 <__alt_data_end+0xff816268>
  816500:	00bfffc4 	movi	r2,-1
  816504:	003f0206 	br	816110 <__alt_data_end+0xff816110>
  816508:	00800304 	movi	r2,12
  81650c:	a0800015 	stw	r2,0(r20)
  816510:	8080030b 	ldhu	r2,12(r16)
  816514:	003f4a06 	br	816240 <__alt_data_end+0xff816240>

00816518 <memmove>:
  816518:	2005883a 	mov	r2,r4
  81651c:	29000b2e 	bgeu	r5,r4,81654c <memmove+0x34>
  816520:	298f883a 	add	r7,r5,r6
  816524:	21c0092e 	bgeu	r4,r7,81654c <memmove+0x34>
  816528:	2187883a 	add	r3,r4,r6
  81652c:	198bc83a 	sub	r5,r3,r6
  816530:	30004b26 	beq	r6,zero,816660 <memmove+0x148>
  816534:	39ffffc4 	addi	r7,r7,-1
  816538:	39000003 	ldbu	r4,0(r7)
  81653c:	18ffffc4 	addi	r3,r3,-1
  816540:	19000005 	stb	r4,0(r3)
  816544:	197ffb1e 	bne	r3,r5,816534 <__alt_data_end+0xff816534>
  816548:	f800283a 	ret
  81654c:	00c003c4 	movi	r3,15
  816550:	1980412e 	bgeu	r3,r6,816658 <memmove+0x140>
  816554:	1146b03a 	or	r3,r2,r5
  816558:	18c000cc 	andi	r3,r3,3
  81655c:	1800411e 	bne	r3,zero,816664 <memmove+0x14c>
  816560:	33fffc04 	addi	r15,r6,-16
  816564:	781ed13a 	srli	r15,r15,4
  816568:	28c00104 	addi	r3,r5,4
  81656c:	13400104 	addi	r13,r2,4
  816570:	781c913a 	slli	r14,r15,4
  816574:	2b000204 	addi	r12,r5,8
  816578:	12c00204 	addi	r11,r2,8
  81657c:	73800504 	addi	r14,r14,20
  816580:	2a800304 	addi	r10,r5,12
  816584:	12400304 	addi	r9,r2,12
  816588:	2b9d883a 	add	r14,r5,r14
  81658c:	2811883a 	mov	r8,r5
  816590:	100f883a 	mov	r7,r2
  816594:	41000017 	ldw	r4,0(r8)
  816598:	39c00404 	addi	r7,r7,16
  81659c:	18c00404 	addi	r3,r3,16
  8165a0:	393ffc15 	stw	r4,-16(r7)
  8165a4:	193ffc17 	ldw	r4,-16(r3)
  8165a8:	6b400404 	addi	r13,r13,16
  8165ac:	5ac00404 	addi	r11,r11,16
  8165b0:	693ffc15 	stw	r4,-16(r13)
  8165b4:	61000017 	ldw	r4,0(r12)
  8165b8:	4a400404 	addi	r9,r9,16
  8165bc:	42000404 	addi	r8,r8,16
  8165c0:	593ffc15 	stw	r4,-16(r11)
  8165c4:	51000017 	ldw	r4,0(r10)
  8165c8:	63000404 	addi	r12,r12,16
  8165cc:	52800404 	addi	r10,r10,16
  8165d0:	493ffc15 	stw	r4,-16(r9)
  8165d4:	1bbfef1e 	bne	r3,r14,816594 <__alt_data_end+0xff816594>
  8165d8:	79000044 	addi	r4,r15,1
  8165dc:	2008913a 	slli	r4,r4,4
  8165e0:	328003cc 	andi	r10,r6,15
  8165e4:	02c000c4 	movi	r11,3
  8165e8:	1107883a 	add	r3,r2,r4
  8165ec:	290b883a 	add	r5,r5,r4
  8165f0:	5a801e2e 	bgeu	r11,r10,81666c <memmove+0x154>
  8165f4:	1813883a 	mov	r9,r3
  8165f8:	2811883a 	mov	r8,r5
  8165fc:	500f883a 	mov	r7,r10
  816600:	41000017 	ldw	r4,0(r8)
  816604:	4a400104 	addi	r9,r9,4
  816608:	39ffff04 	addi	r7,r7,-4
  81660c:	493fff15 	stw	r4,-4(r9)
  816610:	42000104 	addi	r8,r8,4
  816614:	59fffa36 	bltu	r11,r7,816600 <__alt_data_end+0xff816600>
  816618:	513fff04 	addi	r4,r10,-4
  81661c:	2008d0ba 	srli	r4,r4,2
  816620:	318000cc 	andi	r6,r6,3
  816624:	21000044 	addi	r4,r4,1
  816628:	2109883a 	add	r4,r4,r4
  81662c:	2109883a 	add	r4,r4,r4
  816630:	1907883a 	add	r3,r3,r4
  816634:	290b883a 	add	r5,r5,r4
  816638:	30000926 	beq	r6,zero,816660 <memmove+0x148>
  81663c:	198d883a 	add	r6,r3,r6
  816640:	29c00003 	ldbu	r7,0(r5)
  816644:	18c00044 	addi	r3,r3,1
  816648:	29400044 	addi	r5,r5,1
  81664c:	19ffffc5 	stb	r7,-1(r3)
  816650:	19bffb1e 	bne	r3,r6,816640 <__alt_data_end+0xff816640>
  816654:	f800283a 	ret
  816658:	1007883a 	mov	r3,r2
  81665c:	003ff606 	br	816638 <__alt_data_end+0xff816638>
  816660:	f800283a 	ret
  816664:	1007883a 	mov	r3,r2
  816668:	003ff406 	br	81663c <__alt_data_end+0xff81663c>
  81666c:	500d883a 	mov	r6,r10
  816670:	003ff106 	br	816638 <__alt_data_end+0xff816638>

00816674 <_realloc_r>:
  816674:	defff604 	addi	sp,sp,-40
  816678:	dd000415 	stw	r20,16(sp)
  81667c:	dc400115 	stw	r17,4(sp)
  816680:	dfc00915 	stw	ra,36(sp)
  816684:	df000815 	stw	fp,32(sp)
  816688:	ddc00715 	stw	r23,28(sp)
  81668c:	dd800615 	stw	r22,24(sp)
  816690:	dd400515 	stw	r21,20(sp)
  816694:	dcc00315 	stw	r19,12(sp)
  816698:	dc800215 	stw	r18,8(sp)
  81669c:	dc000015 	stw	r16,0(sp)
  8166a0:	2829883a 	mov	r20,r5
  8166a4:	3023883a 	mov	r17,r6
  8166a8:	2800ad26 	beq	r5,zero,816960 <_realloc_r+0x2ec>
  8166ac:	2025883a 	mov	r18,r4
  8166b0:	081a8540 	call	81a854 <__malloc_lock>
  8166b4:	a0ffff17 	ldw	r3,-4(r20)
  8166b8:	043fff04 	movi	r16,-4
  8166bc:	890002c4 	addi	r4,r17,11
  8166c0:	01c00584 	movi	r7,22
  8166c4:	a57ffe04 	addi	r21,r20,-8
  8166c8:	1c20703a 	and	r16,r3,r16
  8166cc:	39001d2e 	bgeu	r7,r4,816744 <_realloc_r+0xd0>
  8166d0:	05bffe04 	movi	r22,-8
  8166d4:	25ac703a 	and	r22,r4,r22
  8166d8:	b00f883a 	mov	r7,r22
  8166dc:	b0006516 	blt	r22,zero,816874 <_realloc_r+0x200>
  8166e0:	b4406436 	bltu	r22,r17,816874 <_realloc_r+0x200>
  8166e4:	81c01a0e 	bge	r16,r7,816750 <_realloc_r+0xdc>
  8166e8:	070020b4 	movhi	fp,130
  8166ec:	e7320604 	addi	fp,fp,-14312
  8166f0:	e1400217 	ldw	r5,8(fp)
  8166f4:	ac11883a 	add	r8,r21,r16
  8166f8:	2a006226 	beq	r5,r8,816884 <_realloc_r+0x210>
  8166fc:	41800117 	ldw	r6,4(r8)
  816700:	027fff84 	movi	r9,-2
  816704:	3252703a 	and	r9,r6,r9
  816708:	4253883a 	add	r9,r8,r9
  81670c:	49000117 	ldw	r4,4(r9)
  816710:	2100004c 	andi	r4,r4,1
  816714:	2000281e 	bne	r4,zero,8167b8 <_realloc_r+0x144>
  816718:	00bfff04 	movi	r2,-4
  81671c:	3084703a 	and	r2,r6,r2
  816720:	1409883a 	add	r4,r2,r16
  816724:	21c05e16 	blt	r4,r7,8168a0 <_realloc_r+0x22c>
  816728:	40800317 	ldw	r2,12(r8)
  81672c:	41400217 	ldw	r5,8(r8)
  816730:	a023883a 	mov	r17,r20
  816734:	2021883a 	mov	r16,r4
  816738:	28800315 	stw	r2,12(r5)
  81673c:	11400215 	stw	r5,8(r2)
  816740:	00000406 	br	816754 <_realloc_r+0xe0>
  816744:	01c00404 	movi	r7,16
  816748:	382d883a 	mov	r22,r7
  81674c:	003fe406 	br	8166e0 <__alt_data_end+0xff8166e0>
  816750:	a023883a 	mov	r17,r20
  816754:	858fc83a 	sub	r7,r16,r22
  816758:	008003c4 	movi	r2,15
  81675c:	18c0004c 	andi	r3,r3,1
  816760:	11c07236 	bltu	r2,r7,81692c <_realloc_r+0x2b8>
  816764:	1c06b03a 	or	r3,r3,r16
  816768:	a8c00115 	stw	r3,4(r21)
  81676c:	ac21883a 	add	r16,r21,r16
  816770:	80800117 	ldw	r2,4(r16)
  816774:	10800054 	ori	r2,r2,1
  816778:	80800115 	stw	r2,4(r16)
  81677c:	9009883a 	mov	r4,r18
  816780:	081a8740 	call	81a874 <__malloc_unlock>
  816784:	8805883a 	mov	r2,r17
  816788:	dfc00917 	ldw	ra,36(sp)
  81678c:	df000817 	ldw	fp,32(sp)
  816790:	ddc00717 	ldw	r23,28(sp)
  816794:	dd800617 	ldw	r22,24(sp)
  816798:	dd400517 	ldw	r21,20(sp)
  81679c:	dd000417 	ldw	r20,16(sp)
  8167a0:	dcc00317 	ldw	r19,12(sp)
  8167a4:	dc800217 	ldw	r18,8(sp)
  8167a8:	dc400117 	ldw	r17,4(sp)
  8167ac:	dc000017 	ldw	r16,0(sp)
  8167b0:	dec00a04 	addi	sp,sp,40
  8167b4:	f800283a 	ret
  8167b8:	18c0004c 	andi	r3,r3,1
  8167bc:	1800081e 	bne	r3,zero,8167e0 <_realloc_r+0x16c>
  8167c0:	a4fffe17 	ldw	r19,-8(r20)
  8167c4:	00bfff04 	movi	r2,-4
  8167c8:	ace7c83a 	sub	r19,r21,r19
  8167cc:	98c00117 	ldw	r3,4(r19)
  8167d0:	1886703a 	and	r3,r3,r2
  8167d4:	98000226 	beq	r19,zero,8167e0 <_realloc_r+0x16c>
  8167d8:	1c2f883a 	add	r23,r3,r16
  8167dc:	b9c06d0e 	bge	r23,r7,816994 <_realloc_r+0x320>
  8167e0:	880b883a 	mov	r5,r17
  8167e4:	9009883a 	mov	r4,r18
  8167e8:	080cf300 	call	80cf30 <_malloc_r>
  8167ec:	1023883a 	mov	r17,r2
  8167f0:	1000ef26 	beq	r2,zero,816bb0 <_realloc_r+0x53c>
  8167f4:	a0ffff17 	ldw	r3,-4(r20)
  8167f8:	113ffe04 	addi	r4,r2,-8
  8167fc:	00bfff84 	movi	r2,-2
  816800:	1884703a 	and	r2,r3,r2
  816804:	a885883a 	add	r2,r21,r2
  816808:	2080bf26 	beq	r4,r2,816b08 <_realloc_r+0x494>
  81680c:	81bfff04 	addi	r6,r16,-4
  816810:	00800904 	movi	r2,36
  816814:	11808936 	bltu	r2,r6,816a3c <_realloc_r+0x3c8>
  816818:	00c004c4 	movi	r3,19
  81681c:	19806c2e 	bgeu	r3,r6,8169d0 <_realloc_r+0x35c>
  816820:	a0c00017 	ldw	r3,0(r20)
  816824:	88c00015 	stw	r3,0(r17)
  816828:	a0c00117 	ldw	r3,4(r20)
  81682c:	88c00115 	stw	r3,4(r17)
  816830:	00c006c4 	movi	r3,27
  816834:	1980ac36 	bltu	r3,r6,816ae8 <_realloc_r+0x474>
  816838:	88800204 	addi	r2,r17,8
  81683c:	a0c00204 	addi	r3,r20,8
  816840:	19000017 	ldw	r4,0(r3)
  816844:	11000015 	stw	r4,0(r2)
  816848:	19000117 	ldw	r4,4(r3)
  81684c:	11000115 	stw	r4,4(r2)
  816850:	18c00217 	ldw	r3,8(r3)
  816854:	10c00215 	stw	r3,8(r2)
  816858:	a00b883a 	mov	r5,r20
  81685c:	9009883a 	mov	r4,r18
  816860:	0812d280 	call	812d28 <_free_r>
  816864:	9009883a 	mov	r4,r18
  816868:	081a8740 	call	81a874 <__malloc_unlock>
  81686c:	8805883a 	mov	r2,r17
  816870:	003fc506 	br	816788 <__alt_data_end+0xff816788>
  816874:	00800304 	movi	r2,12
  816878:	90800015 	stw	r2,0(r18)
  81687c:	0005883a 	mov	r2,zero
  816880:	003fc106 	br	816788 <__alt_data_end+0xff816788>
  816884:	29800117 	ldw	r6,4(r5)
  816888:	00bfff04 	movi	r2,-4
  81688c:	b1000404 	addi	r4,r22,16
  816890:	3084703a 	and	r2,r6,r2
  816894:	140d883a 	add	r6,r2,r16
  816898:	31005b0e 	bge	r6,r4,816a08 <_realloc_r+0x394>
  81689c:	2811883a 	mov	r8,r5
  8168a0:	18c0004c 	andi	r3,r3,1
  8168a4:	183fce1e 	bne	r3,zero,8167e0 <__alt_data_end+0xff8167e0>
  8168a8:	a4fffe17 	ldw	r19,-8(r20)
  8168ac:	00ffff04 	movi	r3,-4
  8168b0:	ace7c83a 	sub	r19,r21,r19
  8168b4:	99000117 	ldw	r4,4(r19)
  8168b8:	20c6703a 	and	r3,r4,r3
  8168bc:	403fc526 	beq	r8,zero,8167d4 <__alt_data_end+0xff8167d4>
  8168c0:	1c2f883a 	add	r23,r3,r16
  8168c4:	b8af883a 	add	r23,r23,r2
  8168c8:	41406026 	beq	r8,r5,816a4c <_realloc_r+0x3d8>
  8168cc:	b9ffc116 	blt	r23,r7,8167d4 <__alt_data_end+0xff8167d4>
  8168d0:	40c00217 	ldw	r3,8(r8)
  8168d4:	40800317 	ldw	r2,12(r8)
  8168d8:	81bfff04 	addi	r6,r16,-4
  8168dc:	01000904 	movi	r4,36
  8168e0:	18800315 	stw	r2,12(r3)
  8168e4:	10c00215 	stw	r3,8(r2)
  8168e8:	99400217 	ldw	r5,8(r19)
  8168ec:	98c00317 	ldw	r3,12(r19)
  8168f0:	9c400204 	addi	r17,r19,8
  8168f4:	28c00315 	stw	r3,12(r5)
  8168f8:	19400215 	stw	r5,8(r3)
  8168fc:	21802d36 	bltu	r4,r6,8169b4 <_realloc_r+0x340>
  816900:	008004c4 	movi	r2,19
  816904:	1180352e 	bgeu	r2,r6,8169dc <_realloc_r+0x368>
  816908:	a0800017 	ldw	r2,0(r20)
  81690c:	98800215 	stw	r2,8(r19)
  816910:	a0800117 	ldw	r2,4(r20)
  816914:	98800315 	stw	r2,12(r19)
  816918:	008006c4 	movi	r2,27
  81691c:	11808036 	bltu	r2,r6,816b20 <_realloc_r+0x4ac>
  816920:	98c00404 	addi	r3,r19,16
  816924:	a5000204 	addi	r20,r20,8
  816928:	00002d06 	br	8169e0 <_realloc_r+0x36c>
  81692c:	1d86b03a 	or	r3,r3,r22
  816930:	ad8b883a 	add	r5,r21,r22
  816934:	a8c00115 	stw	r3,4(r21)
  816938:	38800054 	ori	r2,r7,1
  81693c:	28800115 	stw	r2,4(r5)
  816940:	29cf883a 	add	r7,r5,r7
  816944:	38800117 	ldw	r2,4(r7)
  816948:	9009883a 	mov	r4,r18
  81694c:	29400204 	addi	r5,r5,8
  816950:	10800054 	ori	r2,r2,1
  816954:	38800115 	stw	r2,4(r7)
  816958:	0812d280 	call	812d28 <_free_r>
  81695c:	003f8706 	br	81677c <__alt_data_end+0xff81677c>
  816960:	300b883a 	mov	r5,r6
  816964:	dfc00917 	ldw	ra,36(sp)
  816968:	df000817 	ldw	fp,32(sp)
  81696c:	ddc00717 	ldw	r23,28(sp)
  816970:	dd800617 	ldw	r22,24(sp)
  816974:	dd400517 	ldw	r21,20(sp)
  816978:	dd000417 	ldw	r20,16(sp)
  81697c:	dcc00317 	ldw	r19,12(sp)
  816980:	dc800217 	ldw	r18,8(sp)
  816984:	dc400117 	ldw	r17,4(sp)
  816988:	dc000017 	ldw	r16,0(sp)
  81698c:	dec00a04 	addi	sp,sp,40
  816990:	080cf301 	jmpi	80cf30 <_malloc_r>
  816994:	98800317 	ldw	r2,12(r19)
  816998:	98c00217 	ldw	r3,8(r19)
  81699c:	81bfff04 	addi	r6,r16,-4
  8169a0:	01000904 	movi	r4,36
  8169a4:	18800315 	stw	r2,12(r3)
  8169a8:	10c00215 	stw	r3,8(r2)
  8169ac:	9c400204 	addi	r17,r19,8
  8169b0:	21bfd32e 	bgeu	r4,r6,816900 <__alt_data_end+0xff816900>
  8169b4:	8809883a 	mov	r4,r17
  8169b8:	a00b883a 	mov	r5,r20
  8169bc:	08165180 	call	816518 <memmove>
  8169c0:	98c00117 	ldw	r3,4(r19)
  8169c4:	b821883a 	mov	r16,r23
  8169c8:	982b883a 	mov	r21,r19
  8169cc:	003f6106 	br	816754 <__alt_data_end+0xff816754>
  8169d0:	8805883a 	mov	r2,r17
  8169d4:	a007883a 	mov	r3,r20
  8169d8:	003f9906 	br	816840 <__alt_data_end+0xff816840>
  8169dc:	8807883a 	mov	r3,r17
  8169e0:	a0800017 	ldw	r2,0(r20)
  8169e4:	b821883a 	mov	r16,r23
  8169e8:	982b883a 	mov	r21,r19
  8169ec:	18800015 	stw	r2,0(r3)
  8169f0:	a0800117 	ldw	r2,4(r20)
  8169f4:	18800115 	stw	r2,4(r3)
  8169f8:	a0800217 	ldw	r2,8(r20)
  8169fc:	18800215 	stw	r2,8(r3)
  816a00:	98c00117 	ldw	r3,4(r19)
  816a04:	003f5306 	br	816754 <__alt_data_end+0xff816754>
  816a08:	adab883a 	add	r21,r21,r22
  816a0c:	3585c83a 	sub	r2,r6,r22
  816a10:	e5400215 	stw	r21,8(fp)
  816a14:	10800054 	ori	r2,r2,1
  816a18:	a8800115 	stw	r2,4(r21)
  816a1c:	a0bfff17 	ldw	r2,-4(r20)
  816a20:	9009883a 	mov	r4,r18
  816a24:	1080004c 	andi	r2,r2,1
  816a28:	b0acb03a 	or	r22,r22,r2
  816a2c:	a5bfff15 	stw	r22,-4(r20)
  816a30:	081a8740 	call	81a874 <__malloc_unlock>
  816a34:	a005883a 	mov	r2,r20
  816a38:	003f5306 	br	816788 <__alt_data_end+0xff816788>
  816a3c:	8809883a 	mov	r4,r17
  816a40:	a00b883a 	mov	r5,r20
  816a44:	08165180 	call	816518 <memmove>
  816a48:	003f8306 	br	816858 <__alt_data_end+0xff816858>
  816a4c:	b0800404 	addi	r2,r22,16
  816a50:	b8bf6016 	blt	r23,r2,8167d4 <__alt_data_end+0xff8167d4>
  816a54:	98800317 	ldw	r2,12(r19)
  816a58:	98c00217 	ldw	r3,8(r19)
  816a5c:	81bfff04 	addi	r6,r16,-4
  816a60:	01000904 	movi	r4,36
  816a64:	18800315 	stw	r2,12(r3)
  816a68:	10c00215 	stw	r3,8(r2)
  816a6c:	9c400204 	addi	r17,r19,8
  816a70:	21804336 	bltu	r4,r6,816b80 <_realloc_r+0x50c>
  816a74:	008004c4 	movi	r2,19
  816a78:	11803f2e 	bgeu	r2,r6,816b78 <_realloc_r+0x504>
  816a7c:	a0800017 	ldw	r2,0(r20)
  816a80:	98800215 	stw	r2,8(r19)
  816a84:	a0800117 	ldw	r2,4(r20)
  816a88:	98800315 	stw	r2,12(r19)
  816a8c:	008006c4 	movi	r2,27
  816a90:	11803f36 	bltu	r2,r6,816b90 <_realloc_r+0x51c>
  816a94:	98800404 	addi	r2,r19,16
  816a98:	a5000204 	addi	r20,r20,8
  816a9c:	a0c00017 	ldw	r3,0(r20)
  816aa0:	10c00015 	stw	r3,0(r2)
  816aa4:	a0c00117 	ldw	r3,4(r20)
  816aa8:	10c00115 	stw	r3,4(r2)
  816aac:	a0c00217 	ldw	r3,8(r20)
  816ab0:	10c00215 	stw	r3,8(r2)
  816ab4:	9d87883a 	add	r3,r19,r22
  816ab8:	bd85c83a 	sub	r2,r23,r22
  816abc:	e0c00215 	stw	r3,8(fp)
  816ac0:	10800054 	ori	r2,r2,1
  816ac4:	18800115 	stw	r2,4(r3)
  816ac8:	98800117 	ldw	r2,4(r19)
  816acc:	9009883a 	mov	r4,r18
  816ad0:	1080004c 	andi	r2,r2,1
  816ad4:	b0acb03a 	or	r22,r22,r2
  816ad8:	9d800115 	stw	r22,4(r19)
  816adc:	081a8740 	call	81a874 <__malloc_unlock>
  816ae0:	8805883a 	mov	r2,r17
  816ae4:	003f2806 	br	816788 <__alt_data_end+0xff816788>
  816ae8:	a0c00217 	ldw	r3,8(r20)
  816aec:	88c00215 	stw	r3,8(r17)
  816af0:	a0c00317 	ldw	r3,12(r20)
  816af4:	88c00315 	stw	r3,12(r17)
  816af8:	30801126 	beq	r6,r2,816b40 <_realloc_r+0x4cc>
  816afc:	88800404 	addi	r2,r17,16
  816b00:	a0c00404 	addi	r3,r20,16
  816b04:	003f4e06 	br	816840 <__alt_data_end+0xff816840>
  816b08:	893fff17 	ldw	r4,-4(r17)
  816b0c:	00bfff04 	movi	r2,-4
  816b10:	a023883a 	mov	r17,r20
  816b14:	2084703a 	and	r2,r4,r2
  816b18:	80a1883a 	add	r16,r16,r2
  816b1c:	003f0d06 	br	816754 <__alt_data_end+0xff816754>
  816b20:	a0800217 	ldw	r2,8(r20)
  816b24:	98800415 	stw	r2,16(r19)
  816b28:	a0800317 	ldw	r2,12(r20)
  816b2c:	98800515 	stw	r2,20(r19)
  816b30:	31000a26 	beq	r6,r4,816b5c <_realloc_r+0x4e8>
  816b34:	98c00604 	addi	r3,r19,24
  816b38:	a5000404 	addi	r20,r20,16
  816b3c:	003fa806 	br	8169e0 <__alt_data_end+0xff8169e0>
  816b40:	a1000417 	ldw	r4,16(r20)
  816b44:	88800604 	addi	r2,r17,24
  816b48:	a0c00604 	addi	r3,r20,24
  816b4c:	89000415 	stw	r4,16(r17)
  816b50:	a1000517 	ldw	r4,20(r20)
  816b54:	89000515 	stw	r4,20(r17)
  816b58:	003f3906 	br	816840 <__alt_data_end+0xff816840>
  816b5c:	a0800417 	ldw	r2,16(r20)
  816b60:	a5000604 	addi	r20,r20,24
  816b64:	98c00804 	addi	r3,r19,32
  816b68:	98800615 	stw	r2,24(r19)
  816b6c:	a0bfff17 	ldw	r2,-4(r20)
  816b70:	98800715 	stw	r2,28(r19)
  816b74:	003f9a06 	br	8169e0 <__alt_data_end+0xff8169e0>
  816b78:	8805883a 	mov	r2,r17
  816b7c:	003fc706 	br	816a9c <__alt_data_end+0xff816a9c>
  816b80:	8809883a 	mov	r4,r17
  816b84:	a00b883a 	mov	r5,r20
  816b88:	08165180 	call	816518 <memmove>
  816b8c:	003fc906 	br	816ab4 <__alt_data_end+0xff816ab4>
  816b90:	a0800217 	ldw	r2,8(r20)
  816b94:	98800415 	stw	r2,16(r19)
  816b98:	a0800317 	ldw	r2,12(r20)
  816b9c:	98800515 	stw	r2,20(r19)
  816ba0:	31000726 	beq	r6,r4,816bc0 <_realloc_r+0x54c>
  816ba4:	98800604 	addi	r2,r19,24
  816ba8:	a5000404 	addi	r20,r20,16
  816bac:	003fbb06 	br	816a9c <__alt_data_end+0xff816a9c>
  816bb0:	9009883a 	mov	r4,r18
  816bb4:	081a8740 	call	81a874 <__malloc_unlock>
  816bb8:	0005883a 	mov	r2,zero
  816bbc:	003ef206 	br	816788 <__alt_data_end+0xff816788>
  816bc0:	a0c00417 	ldw	r3,16(r20)
  816bc4:	a5000604 	addi	r20,r20,24
  816bc8:	98800804 	addi	r2,r19,32
  816bcc:	98c00615 	stw	r3,24(r19)
  816bd0:	a0ffff17 	ldw	r3,-4(r20)
  816bd4:	98c00715 	stw	r3,28(r19)
  816bd8:	003fb006 	br	816a9c <__alt_data_end+0xff816a9c>

00816bdc <_wcrtomb_r>:
  816bdc:	defff604 	addi	sp,sp,-40
  816be0:	008020b4 	movhi	r2,130
  816be4:	dc800815 	stw	r18,32(sp)
  816be8:	dc400715 	stw	r17,28(sp)
  816bec:	dc000615 	stw	r16,24(sp)
  816bf0:	10b84304 	addi	r2,r2,-7924
  816bf4:	dfc00915 	stw	ra,36(sp)
  816bf8:	2021883a 	mov	r16,r4
  816bfc:	3823883a 	mov	r17,r7
  816c00:	14800017 	ldw	r18,0(r2)
  816c04:	28001426 	beq	r5,zero,816c58 <_wcrtomb_r+0x7c>
  816c08:	d9400415 	stw	r5,16(sp)
  816c0c:	d9800515 	stw	r6,20(sp)
  816c10:	08132700 	call	813270 <__locale_charset>
  816c14:	d9400417 	ldw	r5,16(sp)
  816c18:	d9800517 	ldw	r6,20(sp)
  816c1c:	8009883a 	mov	r4,r16
  816c20:	dc400015 	stw	r17,0(sp)
  816c24:	100f883a 	mov	r7,r2
  816c28:	903ee83a 	callr	r18
  816c2c:	00ffffc4 	movi	r3,-1
  816c30:	10c0031e 	bne	r2,r3,816c40 <_wcrtomb_r+0x64>
  816c34:	88000015 	stw	zero,0(r17)
  816c38:	00c02284 	movi	r3,138
  816c3c:	80c00015 	stw	r3,0(r16)
  816c40:	dfc00917 	ldw	ra,36(sp)
  816c44:	dc800817 	ldw	r18,32(sp)
  816c48:	dc400717 	ldw	r17,28(sp)
  816c4c:	dc000617 	ldw	r16,24(sp)
  816c50:	dec00a04 	addi	sp,sp,40
  816c54:	f800283a 	ret
  816c58:	08132700 	call	813270 <__locale_charset>
  816c5c:	8009883a 	mov	r4,r16
  816c60:	dc400015 	stw	r17,0(sp)
  816c64:	d9400104 	addi	r5,sp,4
  816c68:	000d883a 	mov	r6,zero
  816c6c:	100f883a 	mov	r7,r2
  816c70:	903ee83a 	callr	r18
  816c74:	003fed06 	br	816c2c <__alt_data_end+0xff816c2c>

00816c78 <wcrtomb>:
  816c78:	defff604 	addi	sp,sp,-40
  816c7c:	008020b4 	movhi	r2,130
  816c80:	dc800615 	stw	r18,24(sp)
  816c84:	dc400515 	stw	r17,20(sp)
  816c88:	dc000415 	stw	r16,16(sp)
  816c8c:	10b83f04 	addi	r2,r2,-7940
  816c90:	dfc00915 	stw	ra,36(sp)
  816c94:	dd000815 	stw	r20,32(sp)
  816c98:	dcc00715 	stw	r19,28(sp)
  816c9c:	2021883a 	mov	r16,r4
  816ca0:	3025883a 	mov	r18,r6
  816ca4:	14400017 	ldw	r17,0(r2)
  816ca8:	20001826 	beq	r4,zero,816d0c <wcrtomb+0x94>
  816cac:	008020b4 	movhi	r2,130
  816cb0:	10b84304 	addi	r2,r2,-7924
  816cb4:	15000017 	ldw	r20,0(r2)
  816cb8:	2827883a 	mov	r19,r5
  816cbc:	08132700 	call	813270 <__locale_charset>
  816cc0:	8809883a 	mov	r4,r17
  816cc4:	dc800015 	stw	r18,0(sp)
  816cc8:	800b883a 	mov	r5,r16
  816ccc:	980d883a 	mov	r6,r19
  816cd0:	100f883a 	mov	r7,r2
  816cd4:	a03ee83a 	callr	r20
  816cd8:	00ffffc4 	movi	r3,-1
  816cdc:	10c0031e 	bne	r2,r3,816cec <wcrtomb+0x74>
  816ce0:	90000015 	stw	zero,0(r18)
  816ce4:	00c02284 	movi	r3,138
  816ce8:	88c00015 	stw	r3,0(r17)
  816cec:	dfc00917 	ldw	ra,36(sp)
  816cf0:	dd000817 	ldw	r20,32(sp)
  816cf4:	dcc00717 	ldw	r19,28(sp)
  816cf8:	dc800617 	ldw	r18,24(sp)
  816cfc:	dc400517 	ldw	r17,20(sp)
  816d00:	dc000417 	ldw	r16,16(sp)
  816d04:	dec00a04 	addi	sp,sp,40
  816d08:	f800283a 	ret
  816d0c:	008020b4 	movhi	r2,130
  816d10:	10b84304 	addi	r2,r2,-7924
  816d14:	14000017 	ldw	r16,0(r2)
  816d18:	08132700 	call	813270 <__locale_charset>
  816d1c:	8809883a 	mov	r4,r17
  816d20:	dc800015 	stw	r18,0(sp)
  816d24:	d9400104 	addi	r5,sp,4
  816d28:	000d883a 	mov	r6,zero
  816d2c:	100f883a 	mov	r7,r2
  816d30:	803ee83a 	callr	r16
  816d34:	003fe806 	br	816cd8 <__alt_data_end+0xff816cd8>

00816d38 <__ascii_wctomb>:
  816d38:	28000526 	beq	r5,zero,816d50 <__ascii_wctomb+0x18>
  816d3c:	00803fc4 	movi	r2,255
  816d40:	11800536 	bltu	r2,r6,816d58 <__ascii_wctomb+0x20>
  816d44:	29800005 	stb	r6,0(r5)
  816d48:	00800044 	movi	r2,1
  816d4c:	f800283a 	ret
  816d50:	0005883a 	mov	r2,zero
  816d54:	f800283a 	ret
  816d58:	00802284 	movi	r2,138
  816d5c:	20800015 	stw	r2,0(r4)
  816d60:	00bfffc4 	movi	r2,-1
  816d64:	f800283a 	ret

00816d68 <_wctomb_r>:
  816d68:	008020b4 	movhi	r2,130
  816d6c:	defff904 	addi	sp,sp,-28
  816d70:	10b84304 	addi	r2,r2,-7924
  816d74:	dfc00615 	stw	ra,24(sp)
  816d78:	dc400515 	stw	r17,20(sp)
  816d7c:	dc000415 	stw	r16,16(sp)
  816d80:	3823883a 	mov	r17,r7
  816d84:	14000017 	ldw	r16,0(r2)
  816d88:	d9000115 	stw	r4,4(sp)
  816d8c:	d9400215 	stw	r5,8(sp)
  816d90:	d9800315 	stw	r6,12(sp)
  816d94:	08132700 	call	813270 <__locale_charset>
  816d98:	d9000117 	ldw	r4,4(sp)
  816d9c:	d9400217 	ldw	r5,8(sp)
  816da0:	d9800317 	ldw	r6,12(sp)
  816da4:	dc400015 	stw	r17,0(sp)
  816da8:	100f883a 	mov	r7,r2
  816dac:	803ee83a 	callr	r16
  816db0:	dfc00617 	ldw	ra,24(sp)
  816db4:	dc400517 	ldw	r17,20(sp)
  816db8:	dc000417 	ldw	r16,16(sp)
  816dbc:	dec00704 	addi	sp,sp,28
  816dc0:	f800283a 	ret

00816dc4 <__udivdi3>:
  816dc4:	defff504 	addi	sp,sp,-44
  816dc8:	dcc00415 	stw	r19,16(sp)
  816dcc:	dc000115 	stw	r16,4(sp)
  816dd0:	dfc00a15 	stw	ra,40(sp)
  816dd4:	df000915 	stw	fp,36(sp)
  816dd8:	ddc00815 	stw	r23,32(sp)
  816ddc:	dd800715 	stw	r22,28(sp)
  816de0:	dd400615 	stw	r21,24(sp)
  816de4:	dd000515 	stw	r20,20(sp)
  816de8:	dc800315 	stw	r18,12(sp)
  816dec:	dc400215 	stw	r17,8(sp)
  816df0:	2027883a 	mov	r19,r4
  816df4:	2821883a 	mov	r16,r5
  816df8:	3800421e 	bne	r7,zero,816f04 <__udivdi3+0x140>
  816dfc:	3025883a 	mov	r18,r6
  816e00:	2023883a 	mov	r17,r4
  816e04:	2980542e 	bgeu	r5,r6,816f58 <__udivdi3+0x194>
  816e08:	00bfffd4 	movui	r2,65535
  816e0c:	282d883a 	mov	r22,r5
  816e10:	1180a836 	bltu	r2,r6,8170b4 <__udivdi3+0x2f0>
  816e14:	00803fc4 	movi	r2,255
  816e18:	1181422e 	bgeu	r2,r6,817324 <__udivdi3+0x560>
  816e1c:	00800204 	movi	r2,8
  816e20:	1007883a 	mov	r3,r2
  816e24:	3084d83a 	srl	r2,r6,r2
  816e28:	010020b4 	movhi	r4,130
  816e2c:	21309f04 	addi	r4,r4,-15748
  816e30:	2085883a 	add	r2,r4,r2
  816e34:	10800003 	ldbu	r2,0(r2)
  816e38:	10c7883a 	add	r3,r2,r3
  816e3c:	00800804 	movi	r2,32
  816e40:	10c5c83a 	sub	r2,r2,r3
  816e44:	10000526 	beq	r2,zero,816e5c <__udivdi3+0x98>
  816e48:	80a0983a 	sll	r16,r16,r2
  816e4c:	98c6d83a 	srl	r3,r19,r3
  816e50:	30a4983a 	sll	r18,r6,r2
  816e54:	98a2983a 	sll	r17,r19,r2
  816e58:	80ecb03a 	or	r22,r16,r3
  816e5c:	902ad43a 	srli	r21,r18,16
  816e60:	b009883a 	mov	r4,r22
  816e64:	953fffcc 	andi	r20,r18,65535
  816e68:	a80b883a 	mov	r5,r21
  816e6c:	080c6380 	call	80c638 <__umodsi3>
  816e70:	b009883a 	mov	r4,r22
  816e74:	a80b883a 	mov	r5,r21
  816e78:	1027883a 	mov	r19,r2
  816e7c:	080c6300 	call	80c630 <__udivsi3>
  816e80:	1021883a 	mov	r16,r2
  816e84:	8806d43a 	srli	r3,r17,16
  816e88:	9804943a 	slli	r2,r19,16
  816e8c:	8527383a 	mul	r19,r16,r20
  816e90:	10c4b03a 	or	r2,r2,r3
  816e94:	14c0052e 	bgeu	r2,r19,816eac <__udivdi3+0xe8>
  816e98:	1485883a 	add	r2,r2,r18
  816e9c:	80ffffc4 	addi	r3,r16,-1
  816ea0:	14800136 	bltu	r2,r18,816ea8 <__udivdi3+0xe4>
  816ea4:	14c13436 	bltu	r2,r19,817378 <__udivdi3+0x5b4>
  816ea8:	1821883a 	mov	r16,r3
  816eac:	14e7c83a 	sub	r19,r2,r19
  816eb0:	9809883a 	mov	r4,r19
  816eb4:	a80b883a 	mov	r5,r21
  816eb8:	080c6380 	call	80c638 <__umodsi3>
  816ebc:	102d883a 	mov	r22,r2
  816ec0:	9809883a 	mov	r4,r19
  816ec4:	a80b883a 	mov	r5,r21
  816ec8:	080c6300 	call	80c630 <__udivsi3>
  816ecc:	b02c943a 	slli	r22,r22,16
  816ed0:	1529383a 	mul	r20,r2,r20
  816ed4:	8c7fffcc 	andi	r17,r17,65535
  816ed8:	b462b03a 	or	r17,r22,r17
  816edc:	8d00052e 	bgeu	r17,r20,816ef4 <__udivdi3+0x130>
  816ee0:	8ca3883a 	add	r17,r17,r18
  816ee4:	10ffffc4 	addi	r3,r2,-1
  816ee8:	8c80f636 	bltu	r17,r18,8172c4 <__udivdi3+0x500>
  816eec:	8d00f52e 	bgeu	r17,r20,8172c4 <__udivdi3+0x500>
  816ef0:	10bfff84 	addi	r2,r2,-2
  816ef4:	8020943a 	slli	r16,r16,16
  816ef8:	0007883a 	mov	r3,zero
  816efc:	1404b03a 	or	r2,r2,r16
  816f00:	00005b06 	br	817070 <__udivdi3+0x2ac>
  816f04:	29c05836 	bltu	r5,r7,817068 <__udivdi3+0x2a4>
  816f08:	00bfffd4 	movui	r2,65535
  816f0c:	11c0642e 	bgeu	r2,r7,8170a0 <__udivdi3+0x2dc>
  816f10:	00804034 	movhi	r2,256
  816f14:	10bfffc4 	addi	r2,r2,-1
  816f18:	11c0f32e 	bgeu	r2,r7,8172e8 <__udivdi3+0x524>
  816f1c:	00c00604 	movi	r3,24
  816f20:	180b883a 	mov	r5,r3
  816f24:	38c6d83a 	srl	r3,r7,r3
  816f28:	008020b4 	movhi	r2,130
  816f2c:	10b09f04 	addi	r2,r2,-15748
  816f30:	10c7883a 	add	r3,r2,r3
  816f34:	18c00003 	ldbu	r3,0(r3)
  816f38:	01000804 	movi	r4,32
  816f3c:	1947883a 	add	r3,r3,r5
  816f40:	20e5c83a 	sub	r18,r4,r3
  816f44:	9000661e 	bne	r18,zero,8170e0 <__udivdi3+0x31c>
  816f48:	3c00f936 	bltu	r7,r16,817330 <__udivdi3+0x56c>
  816f4c:	9985403a 	cmpgeu	r2,r19,r6
  816f50:	0007883a 	mov	r3,zero
  816f54:	00004606 	br	817070 <__udivdi3+0x2ac>
  816f58:	3000041e 	bne	r6,zero,816f6c <__udivdi3+0x1a8>
  816f5c:	01000044 	movi	r4,1
  816f60:	000b883a 	mov	r5,zero
  816f64:	080c6300 	call	80c630 <__udivsi3>
  816f68:	1025883a 	mov	r18,r2
  816f6c:	00bfffd4 	movui	r2,65535
  816f70:	1480562e 	bgeu	r2,r18,8170cc <__udivdi3+0x308>
  816f74:	00804034 	movhi	r2,256
  816f78:	10bfffc4 	addi	r2,r2,-1
  816f7c:	1480e32e 	bgeu	r2,r18,81730c <__udivdi3+0x548>
  816f80:	00800604 	movi	r2,24
  816f84:	1007883a 	mov	r3,r2
  816f88:	9084d83a 	srl	r2,r18,r2
  816f8c:	010020b4 	movhi	r4,130
  816f90:	21309f04 	addi	r4,r4,-15748
  816f94:	2085883a 	add	r2,r4,r2
  816f98:	10800003 	ldbu	r2,0(r2)
  816f9c:	10c5883a 	add	r2,r2,r3
  816fa0:	00c00804 	movi	r3,32
  816fa4:	1887c83a 	sub	r3,r3,r2
  816fa8:	1800911e 	bne	r3,zero,8171f0 <__udivdi3+0x42c>
  816fac:	9028d43a 	srli	r20,r18,16
  816fb0:	84a1c83a 	sub	r16,r16,r18
  816fb4:	957fffcc 	andi	r21,r18,65535
  816fb8:	00c00044 	movi	r3,1
  816fbc:	8009883a 	mov	r4,r16
  816fc0:	a00b883a 	mov	r5,r20
  816fc4:	d8c00015 	stw	r3,0(sp)
  816fc8:	080c6380 	call	80c638 <__umodsi3>
  816fcc:	8009883a 	mov	r4,r16
  816fd0:	a00b883a 	mov	r5,r20
  816fd4:	1027883a 	mov	r19,r2
  816fd8:	080c6300 	call	80c630 <__udivsi3>
  816fdc:	1021883a 	mov	r16,r2
  816fe0:	880cd43a 	srli	r6,r17,16
  816fe4:	9804943a 	slli	r2,r19,16
  816fe8:	8567383a 	mul	r19,r16,r21
  816fec:	d8c00017 	ldw	r3,0(sp)
  816ff0:	1188b03a 	or	r4,r2,r6
  816ff4:	24c0052e 	bgeu	r4,r19,81700c <__udivdi3+0x248>
  816ff8:	2489883a 	add	r4,r4,r18
  816ffc:	80bfffc4 	addi	r2,r16,-1
  817000:	24800136 	bltu	r4,r18,817008 <__udivdi3+0x244>
  817004:	24c0d936 	bltu	r4,r19,81736c <__udivdi3+0x5a8>
  817008:	1021883a 	mov	r16,r2
  81700c:	24e7c83a 	sub	r19,r4,r19
  817010:	9809883a 	mov	r4,r19
  817014:	a00b883a 	mov	r5,r20
  817018:	d8c00015 	stw	r3,0(sp)
  81701c:	080c6380 	call	80c638 <__umodsi3>
  817020:	102d883a 	mov	r22,r2
  817024:	9809883a 	mov	r4,r19
  817028:	a00b883a 	mov	r5,r20
  81702c:	080c6300 	call	80c630 <__udivsi3>
  817030:	b02c943a 	slli	r22,r22,16
  817034:	156b383a 	mul	r21,r2,r21
  817038:	8c7fffcc 	andi	r17,r17,65535
  81703c:	b462b03a 	or	r17,r22,r17
  817040:	d8c00017 	ldw	r3,0(sp)
  817044:	8d40052e 	bgeu	r17,r21,81705c <__udivdi3+0x298>
  817048:	8ca3883a 	add	r17,r17,r18
  81704c:	113fffc4 	addi	r4,r2,-1
  817050:	8c809a36 	bltu	r17,r18,8172bc <__udivdi3+0x4f8>
  817054:	8d40992e 	bgeu	r17,r21,8172bc <__udivdi3+0x4f8>
  817058:	10bfff84 	addi	r2,r2,-2
  81705c:	8020943a 	slli	r16,r16,16
  817060:	1404b03a 	or	r2,r2,r16
  817064:	00000206 	br	817070 <__udivdi3+0x2ac>
  817068:	0007883a 	mov	r3,zero
  81706c:	0005883a 	mov	r2,zero
  817070:	dfc00a17 	ldw	ra,40(sp)
  817074:	df000917 	ldw	fp,36(sp)
  817078:	ddc00817 	ldw	r23,32(sp)
  81707c:	dd800717 	ldw	r22,28(sp)
  817080:	dd400617 	ldw	r21,24(sp)
  817084:	dd000517 	ldw	r20,20(sp)
  817088:	dcc00417 	ldw	r19,16(sp)
  81708c:	dc800317 	ldw	r18,12(sp)
  817090:	dc400217 	ldw	r17,8(sp)
  817094:	dc000117 	ldw	r16,4(sp)
  817098:	dec00b04 	addi	sp,sp,44
  81709c:	f800283a 	ret
  8170a0:	00803fc4 	movi	r2,255
  8170a4:	11c0932e 	bgeu	r2,r7,8172f4 <__udivdi3+0x530>
  8170a8:	00c00204 	movi	r3,8
  8170ac:	180b883a 	mov	r5,r3
  8170b0:	003f9c06 	br	816f24 <__alt_data_end+0xff816f24>
  8170b4:	00804034 	movhi	r2,256
  8170b8:	10bfffc4 	addi	r2,r2,-1
  8170bc:	1180902e 	bgeu	r2,r6,817300 <__udivdi3+0x53c>
  8170c0:	00800604 	movi	r2,24
  8170c4:	1007883a 	mov	r3,r2
  8170c8:	003f5606 	br	816e24 <__alt_data_end+0xff816e24>
  8170cc:	00803fc4 	movi	r2,255
  8170d0:	1480912e 	bgeu	r2,r18,817318 <__udivdi3+0x554>
  8170d4:	00800204 	movi	r2,8
  8170d8:	1007883a 	mov	r3,r2
  8170dc:	003faa06 	br	816f88 <__alt_data_end+0xff816f88>
  8170e0:	30eed83a 	srl	r23,r6,r3
  8170e4:	3c8e983a 	sll	r7,r7,r18
  8170e8:	80f8d83a 	srl	fp,r16,r3
  8170ec:	98c6d83a 	srl	r3,r19,r3
  8170f0:	3deeb03a 	or	r23,r7,r23
  8170f4:	b828d43a 	srli	r20,r23,16
  8170f8:	84a0983a 	sll	r16,r16,r18
  8170fc:	e009883a 	mov	r4,fp
  817100:	a00b883a 	mov	r5,r20
  817104:	80e2b03a 	or	r17,r16,r3
  817108:	34aa983a 	sll	r21,r6,r18
  81710c:	080c6380 	call	80c638 <__umodsi3>
  817110:	e009883a 	mov	r4,fp
  817114:	a00b883a 	mov	r5,r20
  817118:	102d883a 	mov	r22,r2
  81711c:	080c6300 	call	80c630 <__udivsi3>
  817120:	1021883a 	mov	r16,r2
  817124:	bf3fffcc 	andi	fp,r23,65535
  817128:	b004943a 	slli	r2,r22,16
  81712c:	8808d43a 	srli	r4,r17,16
  817130:	872d383a 	mul	r22,r16,fp
  817134:	1104b03a 	or	r2,r2,r4
  817138:	1580042e 	bgeu	r2,r22,81714c <__udivdi3+0x388>
  81713c:	15c5883a 	add	r2,r2,r23
  817140:	80ffffc4 	addi	r3,r16,-1
  817144:	15c0812e 	bgeu	r2,r23,81734c <__udivdi3+0x588>
  817148:	1821883a 	mov	r16,r3
  81714c:	15adc83a 	sub	r22,r2,r22
  817150:	b009883a 	mov	r4,r22
  817154:	a00b883a 	mov	r5,r20
  817158:	080c6380 	call	80c638 <__umodsi3>
  81715c:	a00b883a 	mov	r5,r20
  817160:	b009883a 	mov	r4,r22
  817164:	d8800015 	stw	r2,0(sp)
  817168:	080c6300 	call	80c630 <__udivsi3>
  81716c:	d8c00017 	ldw	r3,0(sp)
  817170:	170b383a 	mul	r5,r2,fp
  817174:	8c7fffcc 	andi	r17,r17,65535
  817178:	1806943a 	slli	r3,r3,16
  81717c:	1c46b03a 	or	r3,r3,r17
  817180:	1940042e 	bgeu	r3,r5,817194 <__udivdi3+0x3d0>
  817184:	1dc7883a 	add	r3,r3,r23
  817188:	113fffc4 	addi	r4,r2,-1
  81718c:	1dc06b2e 	bgeu	r3,r23,81733c <__udivdi3+0x578>
  817190:	2005883a 	mov	r2,r4
  817194:	8020943a 	slli	r16,r16,16
  817198:	a9ffffcc 	andi	r7,r21,65535
  81719c:	a82ad43a 	srli	r21,r21,16
  8171a0:	1404b03a 	or	r2,r2,r16
  8171a4:	113fffcc 	andi	r4,r2,65535
  8171a8:	100cd43a 	srli	r6,r2,16
  8171ac:	21d3383a 	mul	r9,r4,r7
  8171b0:	2549383a 	mul	r4,r4,r21
  8171b4:	31cf383a 	mul	r7,r6,r7
  8171b8:	4810d43a 	srli	r8,r9,16
  8171bc:	1947c83a 	sub	r3,r3,r5
  8171c0:	3909883a 	add	r4,r7,r4
  8171c4:	2209883a 	add	r4,r4,r8
  8171c8:	354d383a 	mul	r6,r6,r21
  8171cc:	21c0022e 	bgeu	r4,r7,8171d8 <__udivdi3+0x414>
  8171d0:	01400074 	movhi	r5,1
  8171d4:	314d883a 	add	r6,r6,r5
  8171d8:	202ad43a 	srli	r21,r4,16
  8171dc:	354d883a 	add	r6,r6,r21
  8171e0:	19803f36 	bltu	r3,r6,8172e0 <__udivdi3+0x51c>
  8171e4:	19803926 	beq	r3,r6,8172cc <__udivdi3+0x508>
  8171e8:	0007883a 	mov	r3,zero
  8171ec:	003fa006 	br	817070 <__alt_data_end+0xff817070>
  8171f0:	90e4983a 	sll	r18,r18,r3
  8171f4:	80aad83a 	srl	r21,r16,r2
  8171f8:	80e0983a 	sll	r16,r16,r3
  8171fc:	9028d43a 	srli	r20,r18,16
  817200:	9884d83a 	srl	r2,r19,r2
  817204:	a809883a 	mov	r4,r21
  817208:	a00b883a 	mov	r5,r20
  81720c:	80acb03a 	or	r22,r16,r2
  817210:	98e2983a 	sll	r17,r19,r3
  817214:	080c6380 	call	80c638 <__umodsi3>
  817218:	a809883a 	mov	r4,r21
  81721c:	a00b883a 	mov	r5,r20
  817220:	1021883a 	mov	r16,r2
  817224:	080c6300 	call	80c630 <__udivsi3>
  817228:	957fffcc 	andi	r21,r18,65535
  81722c:	8020943a 	slli	r16,r16,16
  817230:	b00ad43a 	srli	r5,r22,16
  817234:	1567383a 	mul	r19,r2,r21
  817238:	102f883a 	mov	r23,r2
  81723c:	8148b03a 	or	r4,r16,r5
  817240:	24c0062e 	bgeu	r4,r19,81725c <__udivdi3+0x498>
  817244:	2489883a 	add	r4,r4,r18
  817248:	10bfffc4 	addi	r2,r2,-1
  81724c:	24804536 	bltu	r4,r18,817364 <__udivdi3+0x5a0>
  817250:	24c0442e 	bgeu	r4,r19,817364 <__udivdi3+0x5a0>
  817254:	bdffff84 	addi	r23,r23,-2
  817258:	2489883a 	add	r4,r4,r18
  81725c:	24e7c83a 	sub	r19,r4,r19
  817260:	9809883a 	mov	r4,r19
  817264:	a00b883a 	mov	r5,r20
  817268:	080c6380 	call	80c638 <__umodsi3>
  81726c:	1021883a 	mov	r16,r2
  817270:	9809883a 	mov	r4,r19
  817274:	a00b883a 	mov	r5,r20
  817278:	080c6300 	call	80c630 <__udivsi3>
  81727c:	8020943a 	slli	r16,r16,16
  817280:	1007883a 	mov	r3,r2
  817284:	1545383a 	mul	r2,r2,r21
  817288:	b13fffcc 	andi	r4,r22,65535
  81728c:	8108b03a 	or	r4,r16,r4
  817290:	2080062e 	bgeu	r4,r2,8172ac <__udivdi3+0x4e8>
  817294:	2489883a 	add	r4,r4,r18
  817298:	197fffc4 	addi	r5,r3,-1
  81729c:	24802f36 	bltu	r4,r18,81735c <__udivdi3+0x598>
  8172a0:	20802e2e 	bgeu	r4,r2,81735c <__udivdi3+0x598>
  8172a4:	18ffff84 	addi	r3,r3,-2
  8172a8:	2489883a 	add	r4,r4,r18
  8172ac:	b82e943a 	slli	r23,r23,16
  8172b0:	20a1c83a 	sub	r16,r4,r2
  8172b4:	1dc6b03a 	or	r3,r3,r23
  8172b8:	003f4006 	br	816fbc <__alt_data_end+0xff816fbc>
  8172bc:	2005883a 	mov	r2,r4
  8172c0:	003f6606 	br	81705c <__alt_data_end+0xff81705c>
  8172c4:	1805883a 	mov	r2,r3
  8172c8:	003f0a06 	br	816ef4 <__alt_data_end+0xff816ef4>
  8172cc:	2006943a 	slli	r3,r4,16
  8172d0:	9c88983a 	sll	r4,r19,r18
  8172d4:	4a7fffcc 	andi	r9,r9,65535
  8172d8:	1a47883a 	add	r3,r3,r9
  8172dc:	20ffc22e 	bgeu	r4,r3,8171e8 <__alt_data_end+0xff8171e8>
  8172e0:	10bfffc4 	addi	r2,r2,-1
  8172e4:	003fc006 	br	8171e8 <__alt_data_end+0xff8171e8>
  8172e8:	00c00404 	movi	r3,16
  8172ec:	180b883a 	mov	r5,r3
  8172f0:	003f0c06 	br	816f24 <__alt_data_end+0xff816f24>
  8172f4:	0007883a 	mov	r3,zero
  8172f8:	000b883a 	mov	r5,zero
  8172fc:	003f0906 	br	816f24 <__alt_data_end+0xff816f24>
  817300:	00800404 	movi	r2,16
  817304:	1007883a 	mov	r3,r2
  817308:	003ec606 	br	816e24 <__alt_data_end+0xff816e24>
  81730c:	00800404 	movi	r2,16
  817310:	1007883a 	mov	r3,r2
  817314:	003f1c06 	br	816f88 <__alt_data_end+0xff816f88>
  817318:	0005883a 	mov	r2,zero
  81731c:	0007883a 	mov	r3,zero
  817320:	003f1906 	br	816f88 <__alt_data_end+0xff816f88>
  817324:	0005883a 	mov	r2,zero
  817328:	0007883a 	mov	r3,zero
  81732c:	003ebd06 	br	816e24 <__alt_data_end+0xff816e24>
  817330:	0007883a 	mov	r3,zero
  817334:	00800044 	movi	r2,1
  817338:	003f4d06 	br	817070 <__alt_data_end+0xff817070>
  81733c:	197f942e 	bgeu	r3,r5,817190 <__alt_data_end+0xff817190>
  817340:	10bfff84 	addi	r2,r2,-2
  817344:	1dc7883a 	add	r3,r3,r23
  817348:	003f9206 	br	817194 <__alt_data_end+0xff817194>
  81734c:	15bf7e2e 	bgeu	r2,r22,817148 <__alt_data_end+0xff817148>
  817350:	843fff84 	addi	r16,r16,-2
  817354:	15c5883a 	add	r2,r2,r23
  817358:	003f7c06 	br	81714c <__alt_data_end+0xff81714c>
  81735c:	2807883a 	mov	r3,r5
  817360:	003fd206 	br	8172ac <__alt_data_end+0xff8172ac>
  817364:	102f883a 	mov	r23,r2
  817368:	003fbc06 	br	81725c <__alt_data_end+0xff81725c>
  81736c:	843fff84 	addi	r16,r16,-2
  817370:	2489883a 	add	r4,r4,r18
  817374:	003f2506 	br	81700c <__alt_data_end+0xff81700c>
  817378:	843fff84 	addi	r16,r16,-2
  81737c:	1485883a 	add	r2,r2,r18
  817380:	003eca06 	br	816eac <__alt_data_end+0xff816eac>

00817384 <__umoddi3>:
  817384:	defff404 	addi	sp,sp,-48
  817388:	ddc00915 	stw	r23,36(sp)
  81738c:	dc400315 	stw	r17,12(sp)
  817390:	dc000215 	stw	r16,8(sp)
  817394:	dfc00b15 	stw	ra,44(sp)
  817398:	df000a15 	stw	fp,40(sp)
  81739c:	dd800815 	stw	r22,32(sp)
  8173a0:	dd400715 	stw	r21,28(sp)
  8173a4:	dd000615 	stw	r20,24(sp)
  8173a8:	dcc00515 	stw	r19,20(sp)
  8173ac:	dc800415 	stw	r18,16(sp)
  8173b0:	2021883a 	mov	r16,r4
  8173b4:	2823883a 	mov	r17,r5
  8173b8:	282f883a 	mov	r23,r5
  8173bc:	3800381e 	bne	r7,zero,8174a0 <__umoddi3+0x11c>
  8173c0:	3027883a 	mov	r19,r6
  8173c4:	2029883a 	mov	r20,r4
  8173c8:	29804e2e 	bgeu	r5,r6,817504 <__umoddi3+0x180>
  8173cc:	00bfffd4 	movui	r2,65535
  8173d0:	11809c36 	bltu	r2,r6,817644 <__umoddi3+0x2c0>
  8173d4:	00803fc4 	movi	r2,255
  8173d8:	11813b2e 	bgeu	r2,r6,8178c8 <__umoddi3+0x544>
  8173dc:	01400204 	movi	r5,8
  8173e0:	2805883a 	mov	r2,r5
  8173e4:	314ad83a 	srl	r5,r6,r5
  8173e8:	00c020b4 	movhi	r3,130
  8173ec:	18f09f04 	addi	r3,r3,-15748
  8173f0:	194b883a 	add	r5,r3,r5
  8173f4:	29000003 	ldbu	r4,0(r5)
  8173f8:	2089883a 	add	r4,r4,r2
  8173fc:	00800804 	movi	r2,32
  817400:	1105c83a 	sub	r2,r2,r4
  817404:	1000ec26 	beq	r2,zero,8177b8 <__umoddi3+0x434>
  817408:	88a2983a 	sll	r17,r17,r2
  81740c:	8108d83a 	srl	r4,r16,r4
  817410:	30a6983a 	sll	r19,r6,r2
  817414:	80a8983a 	sll	r20,r16,r2
  817418:	1025883a 	mov	r18,r2
  81741c:	892eb03a 	or	r23,r17,r4
  817420:	982cd43a 	srli	r22,r19,16
  817424:	b809883a 	mov	r4,r23
  817428:	9d7fffcc 	andi	r21,r19,65535
  81742c:	b00b883a 	mov	r5,r22
  817430:	080c6380 	call	80c638 <__umodsi3>
  817434:	b809883a 	mov	r4,r23
  817438:	b00b883a 	mov	r5,r22
  81743c:	1021883a 	mov	r16,r2
  817440:	080c6300 	call	80c630 <__udivsi3>
  817444:	8020943a 	slli	r16,r16,16
  817448:	a00cd43a 	srli	r6,r20,16
  81744c:	1545383a 	mul	r2,r2,r21
  817450:	8188b03a 	or	r4,r16,r6
  817454:	2080042e 	bgeu	r4,r2,817468 <__umoddi3+0xe4>
  817458:	24c9883a 	add	r4,r4,r19
  81745c:	24c00236 	bltu	r4,r19,817468 <__umoddi3+0xe4>
  817460:	2080012e 	bgeu	r4,r2,817468 <__umoddi3+0xe4>
  817464:	24c9883a 	add	r4,r4,r19
  817468:	20a3c83a 	sub	r17,r4,r2
  81746c:	8809883a 	mov	r4,r17
  817470:	b00b883a 	mov	r5,r22
  817474:	080c6380 	call	80c638 <__umodsi3>
  817478:	8809883a 	mov	r4,r17
  81747c:	b00b883a 	mov	r5,r22
  817480:	1021883a 	mov	r16,r2
  817484:	080c6300 	call	80c630 <__udivsi3>
  817488:	8006943a 	slli	r3,r16,16
  81748c:	1545383a 	mul	r2,r2,r21
  817490:	a13fffcc 	andi	r4,r20,65535
  817494:	1906b03a 	or	r3,r3,r4
  817498:	1880532e 	bgeu	r3,r2,8175e8 <__umoddi3+0x264>
  81749c:	00004e06 	br	8175d8 <__umoddi3+0x254>
  8174a0:	29c05536 	bltu	r5,r7,8175f8 <__umoddi3+0x274>
  8174a4:	00bfffd4 	movui	r2,65535
  8174a8:	11c0612e 	bgeu	r2,r7,817630 <__umoddi3+0x2ac>
  8174ac:	00804034 	movhi	r2,256
  8174b0:	10bfffc4 	addi	r2,r2,-1
  8174b4:	11c0f82e 	bgeu	r2,r7,817898 <__umoddi3+0x514>
  8174b8:	01400604 	movi	r5,24
  8174bc:	282b883a 	mov	r21,r5
  8174c0:	394ad83a 	srl	r5,r7,r5
  8174c4:	00c020b4 	movhi	r3,130
  8174c8:	18f09f04 	addi	r3,r3,-15748
  8174cc:	194b883a 	add	r5,r3,r5
  8174d0:	28800003 	ldbu	r2,0(r5)
  8174d4:	00c00804 	movi	r3,32
  8174d8:	156b883a 	add	r21,r2,r21
  8174dc:	1d69c83a 	sub	r20,r3,r21
  8174e0:	a000631e 	bne	r20,zero,817670 <__umoddi3+0x2ec>
  8174e4:	3c400136 	bltu	r7,r17,8174ec <__umoddi3+0x168>
  8174e8:	81810436 	bltu	r16,r6,8178fc <__umoddi3+0x578>
  8174ec:	8185c83a 	sub	r2,r16,r6
  8174f0:	89e3c83a 	sub	r17,r17,r7
  8174f4:	8087803a 	cmpltu	r3,r16,r2
  8174f8:	88efc83a 	sub	r23,r17,r3
  8174fc:	b807883a 	mov	r3,r23
  817500:	00003f06 	br	817600 <__umoddi3+0x27c>
  817504:	3000041e 	bne	r6,zero,817518 <__umoddi3+0x194>
  817508:	01000044 	movi	r4,1
  81750c:	000b883a 	mov	r5,zero
  817510:	080c6300 	call	80c630 <__udivsi3>
  817514:	1027883a 	mov	r19,r2
  817518:	00bfffd4 	movui	r2,65535
  81751c:	14c04f2e 	bgeu	r2,r19,81765c <__umoddi3+0x2d8>
  817520:	00804034 	movhi	r2,256
  817524:	10bfffc4 	addi	r2,r2,-1
  817528:	14c0e42e 	bgeu	r2,r19,8178bc <__umoddi3+0x538>
  81752c:	00800604 	movi	r2,24
  817530:	1007883a 	mov	r3,r2
  817534:	9884d83a 	srl	r2,r19,r2
  817538:	010020b4 	movhi	r4,130
  81753c:	21309f04 	addi	r4,r4,-15748
  817540:	2085883a 	add	r2,r4,r2
  817544:	11000003 	ldbu	r4,0(r2)
  817548:	00800804 	movi	r2,32
  81754c:	20c7883a 	add	r3,r4,r3
  817550:	10c5c83a 	sub	r2,r2,r3
  817554:	10009a1e 	bne	r2,zero,8177c0 <__umoddi3+0x43c>
  817558:	982cd43a 	srli	r22,r19,16
  81755c:	8ce3c83a 	sub	r17,r17,r19
  817560:	9c3fffcc 	andi	r16,r19,65535
  817564:	0025883a 	mov	r18,zero
  817568:	8809883a 	mov	r4,r17
  81756c:	b00b883a 	mov	r5,r22
  817570:	080c6380 	call	80c638 <__umodsi3>
  817574:	8809883a 	mov	r4,r17
  817578:	b00b883a 	mov	r5,r22
  81757c:	102b883a 	mov	r21,r2
  817580:	080c6300 	call	80c630 <__udivsi3>
  817584:	a806943a 	slli	r3,r21,16
  817588:	a008d43a 	srli	r4,r20,16
  81758c:	1405383a 	mul	r2,r2,r16
  817590:	190cb03a 	or	r6,r3,r4
  817594:	3080032e 	bgeu	r6,r2,8175a4 <__umoddi3+0x220>
  817598:	34cd883a 	add	r6,r6,r19
  81759c:	34c00136 	bltu	r6,r19,8175a4 <__umoddi3+0x220>
  8175a0:	3080d436 	bltu	r6,r2,8178f4 <__umoddi3+0x570>
  8175a4:	30abc83a 	sub	r21,r6,r2
  8175a8:	a809883a 	mov	r4,r21
  8175ac:	b00b883a 	mov	r5,r22
  8175b0:	080c6380 	call	80c638 <__umodsi3>
  8175b4:	1023883a 	mov	r17,r2
  8175b8:	a809883a 	mov	r4,r21
  8175bc:	b00b883a 	mov	r5,r22
  8175c0:	080c6300 	call	80c630 <__udivsi3>
  8175c4:	8822943a 	slli	r17,r17,16
  8175c8:	1405383a 	mul	r2,r2,r16
  8175cc:	a13fffcc 	andi	r4,r20,65535
  8175d0:	8906b03a 	or	r3,r17,r4
  8175d4:	1880042e 	bgeu	r3,r2,8175e8 <__umoddi3+0x264>
  8175d8:	1cc7883a 	add	r3,r3,r19
  8175dc:	1cc00236 	bltu	r3,r19,8175e8 <__umoddi3+0x264>
  8175e0:	1880012e 	bgeu	r3,r2,8175e8 <__umoddi3+0x264>
  8175e4:	1cc7883a 	add	r3,r3,r19
  8175e8:	1887c83a 	sub	r3,r3,r2
  8175ec:	1c84d83a 	srl	r2,r3,r18
  8175f0:	0007883a 	mov	r3,zero
  8175f4:	00000206 	br	817600 <__umoddi3+0x27c>
  8175f8:	2005883a 	mov	r2,r4
  8175fc:	2807883a 	mov	r3,r5
  817600:	dfc00b17 	ldw	ra,44(sp)
  817604:	df000a17 	ldw	fp,40(sp)
  817608:	ddc00917 	ldw	r23,36(sp)
  81760c:	dd800817 	ldw	r22,32(sp)
  817610:	dd400717 	ldw	r21,28(sp)
  817614:	dd000617 	ldw	r20,24(sp)
  817618:	dcc00517 	ldw	r19,20(sp)
  81761c:	dc800417 	ldw	r18,16(sp)
  817620:	dc400317 	ldw	r17,12(sp)
  817624:	dc000217 	ldw	r16,8(sp)
  817628:	dec00c04 	addi	sp,sp,48
  81762c:	f800283a 	ret
  817630:	00803fc4 	movi	r2,255
  817634:	11c0952e 	bgeu	r2,r7,81788c <__umoddi3+0x508>
  817638:	01400204 	movi	r5,8
  81763c:	282b883a 	mov	r21,r5
  817640:	003f9f06 	br	8174c0 <__alt_data_end+0xff8174c0>
  817644:	00804034 	movhi	r2,256
  817648:	10bfffc4 	addi	r2,r2,-1
  81764c:	1180952e 	bgeu	r2,r6,8178a4 <__umoddi3+0x520>
  817650:	01400604 	movi	r5,24
  817654:	2805883a 	mov	r2,r5
  817658:	003f6206 	br	8173e4 <__alt_data_end+0xff8173e4>
  81765c:	00803fc4 	movi	r2,255
  817660:	14c0932e 	bgeu	r2,r19,8178b0 <__umoddi3+0x52c>
  817664:	00800204 	movi	r2,8
  817668:	1007883a 	mov	r3,r2
  81766c:	003fb106 	br	817534 <__alt_data_end+0xff817534>
  817670:	3548d83a 	srl	r4,r6,r21
  817674:	3d0e983a 	sll	r7,r7,r20
  817678:	8d10983a 	sll	r8,r17,r20
  81767c:	8d6cd83a 	srl	r22,r17,r21
  817680:	3922b03a 	or	r17,r7,r4
  817684:	882ed43a 	srli	r23,r17,16
  817688:	8564d83a 	srl	r18,r16,r21
  81768c:	b009883a 	mov	r4,r22
  817690:	b80b883a 	mov	r5,r23
  817694:	44a4b03a 	or	r18,r8,r18
  817698:	3526983a 	sll	r19,r6,r20
  81769c:	080c6380 	call	80c638 <__umodsi3>
  8176a0:	b009883a 	mov	r4,r22
  8176a4:	b80b883a 	mov	r5,r23
  8176a8:	1039883a 	mov	fp,r2
  8176ac:	080c6300 	call	80c630 <__udivsi3>
  8176b0:	102d883a 	mov	r22,r2
  8176b4:	8a3fffcc 	andi	r8,r17,65535
  8176b8:	e004943a 	slli	r2,fp,16
  8176bc:	900cd43a 	srli	r6,r18,16
  8176c0:	b239383a 	mul	fp,r22,r8
  8176c4:	8520983a 	sll	r16,r16,r20
  8176c8:	118ab03a 	or	r5,r2,r6
  8176cc:	2f00042e 	bgeu	r5,fp,8176e0 <__umoddi3+0x35c>
  8176d0:	2c4b883a 	add	r5,r5,r17
  8176d4:	b0bfffc4 	addi	r2,r22,-1
  8176d8:	2c40822e 	bgeu	r5,r17,8178e4 <__umoddi3+0x560>
  8176dc:	102d883a 	mov	r22,r2
  8176e0:	2f39c83a 	sub	fp,r5,fp
  8176e4:	e009883a 	mov	r4,fp
  8176e8:	b80b883a 	mov	r5,r23
  8176ec:	da000115 	stw	r8,4(sp)
  8176f0:	080c6380 	call	80c638 <__umodsi3>
  8176f4:	e009883a 	mov	r4,fp
  8176f8:	b80b883a 	mov	r5,r23
  8176fc:	d8800015 	stw	r2,0(sp)
  817700:	080c6300 	call	80c630 <__udivsi3>
  817704:	d9800017 	ldw	r6,0(sp)
  817708:	da000117 	ldw	r8,4(sp)
  81770c:	94bfffcc 	andi	r18,r18,65535
  817710:	300c943a 	slli	r6,r6,16
  817714:	1209383a 	mul	r4,r2,r8
  817718:	3490b03a 	or	r8,r6,r18
  81771c:	4100042e 	bgeu	r8,r4,817730 <__umoddi3+0x3ac>
  817720:	4451883a 	add	r8,r8,r17
  817724:	10ffffc4 	addi	r3,r2,-1
  817728:	44406a2e 	bgeu	r8,r17,8178d4 <__umoddi3+0x550>
  81772c:	1805883a 	mov	r2,r3
  817730:	b012943a 	slli	r9,r22,16
  817734:	9abfffcc 	andi	r10,r19,65535
  817738:	980ed43a 	srli	r7,r19,16
  81773c:	124ab03a 	or	r5,r2,r9
  817740:	2a7fffcc 	andi	r9,r5,65535
  817744:	280ad43a 	srli	r5,r5,16
  817748:	4a8d383a 	mul	r6,r9,r10
  81774c:	49d3383a 	mul	r9,r9,r7
  817750:	2a95383a 	mul	r10,r5,r10
  817754:	3004d43a 	srli	r2,r6,16
  817758:	4111c83a 	sub	r8,r8,r4
  81775c:	5253883a 	add	r9,r10,r9
  817760:	4893883a 	add	r9,r9,r2
  817764:	29cb383a 	mul	r5,r5,r7
  817768:	4a80022e 	bgeu	r9,r10,817774 <__umoddi3+0x3f0>
  81776c:	00800074 	movhi	r2,1
  817770:	288b883a 	add	r5,r5,r2
  817774:	4808d43a 	srli	r4,r9,16
  817778:	4812943a 	slli	r9,r9,16
  81777c:	31bfffcc 	andi	r6,r6,65535
  817780:	290b883a 	add	r5,r5,r4
  817784:	498d883a 	add	r6,r9,r6
  817788:	41403a36 	bltu	r8,r5,817874 <__umoddi3+0x4f0>
  81778c:	41405d26 	beq	r8,r5,817904 <__umoddi3+0x580>
  817790:	4149c83a 	sub	r4,r8,r5
  817794:	300f883a 	mov	r7,r6
  817798:	81cfc83a 	sub	r7,r16,r7
  81779c:	81c7803a 	cmpltu	r3,r16,r7
  8177a0:	20c7c83a 	sub	r3,r4,r3
  8177a4:	1d44983a 	sll	r2,r3,r21
  8177a8:	3d0ed83a 	srl	r7,r7,r20
  8177ac:	1d06d83a 	srl	r3,r3,r20
  8177b0:	11c4b03a 	or	r2,r2,r7
  8177b4:	003f9206 	br	817600 <__alt_data_end+0xff817600>
  8177b8:	0025883a 	mov	r18,zero
  8177bc:	003f1806 	br	817420 <__alt_data_end+0xff817420>
  8177c0:	98a6983a 	sll	r19,r19,r2
  8177c4:	88e8d83a 	srl	r20,r17,r3
  8177c8:	80c6d83a 	srl	r3,r16,r3
  8177cc:	982cd43a 	srli	r22,r19,16
  8177d0:	88a2983a 	sll	r17,r17,r2
  8177d4:	a009883a 	mov	r4,r20
  8177d8:	b00b883a 	mov	r5,r22
  8177dc:	88eab03a 	or	r21,r17,r3
  8177e0:	1025883a 	mov	r18,r2
  8177e4:	080c6380 	call	80c638 <__umodsi3>
  8177e8:	a009883a 	mov	r4,r20
  8177ec:	b00b883a 	mov	r5,r22
  8177f0:	1023883a 	mov	r17,r2
  8177f4:	080c6300 	call	80c630 <__udivsi3>
  8177f8:	9f3fffcc 	andi	fp,r19,65535
  8177fc:	8822943a 	slli	r17,r17,16
  817800:	a80ad43a 	srli	r5,r21,16
  817804:	1705383a 	mul	r2,r2,fp
  817808:	84a8983a 	sll	r20,r16,r18
  81780c:	8948b03a 	or	r4,r17,r5
  817810:	2080042e 	bgeu	r4,r2,817824 <__umoddi3+0x4a0>
  817814:	24c9883a 	add	r4,r4,r19
  817818:	24c00236 	bltu	r4,r19,817824 <__umoddi3+0x4a0>
  81781c:	2080012e 	bgeu	r4,r2,817824 <__umoddi3+0x4a0>
  817820:	24c9883a 	add	r4,r4,r19
  817824:	20afc83a 	sub	r23,r4,r2
  817828:	b809883a 	mov	r4,r23
  81782c:	b00b883a 	mov	r5,r22
  817830:	080c6380 	call	80c638 <__umodsi3>
  817834:	1023883a 	mov	r17,r2
  817838:	b809883a 	mov	r4,r23
  81783c:	b00b883a 	mov	r5,r22
  817840:	080c6300 	call	80c630 <__udivsi3>
  817844:	8822943a 	slli	r17,r17,16
  817848:	1705383a 	mul	r2,r2,fp
  81784c:	a93fffcc 	andi	r4,r21,65535
  817850:	8908b03a 	or	r4,r17,r4
  817854:	2080042e 	bgeu	r4,r2,817868 <__umoddi3+0x4e4>
  817858:	24c9883a 	add	r4,r4,r19
  81785c:	24c00236 	bltu	r4,r19,817868 <__umoddi3+0x4e4>
  817860:	2080012e 	bgeu	r4,r2,817868 <__umoddi3+0x4e4>
  817864:	24c9883a 	add	r4,r4,r19
  817868:	20a3c83a 	sub	r17,r4,r2
  81786c:	e021883a 	mov	r16,fp
  817870:	003f3d06 	br	817568 <__alt_data_end+0xff817568>
  817874:	34cfc83a 	sub	r7,r6,r19
  817878:	2c4bc83a 	sub	r5,r5,r17
  81787c:	31cd803a 	cmpltu	r6,r6,r7
  817880:	298dc83a 	sub	r6,r5,r6
  817884:	4189c83a 	sub	r4,r8,r6
  817888:	003fc306 	br	817798 <__alt_data_end+0xff817798>
  81788c:	000b883a 	mov	r5,zero
  817890:	002b883a 	mov	r21,zero
  817894:	003f0a06 	br	8174c0 <__alt_data_end+0xff8174c0>
  817898:	01400404 	movi	r5,16
  81789c:	282b883a 	mov	r21,r5
  8178a0:	003f0706 	br	8174c0 <__alt_data_end+0xff8174c0>
  8178a4:	01400404 	movi	r5,16
  8178a8:	2805883a 	mov	r2,r5
  8178ac:	003ecd06 	br	8173e4 <__alt_data_end+0xff8173e4>
  8178b0:	0005883a 	mov	r2,zero
  8178b4:	0007883a 	mov	r3,zero
  8178b8:	003f1e06 	br	817534 <__alt_data_end+0xff817534>
  8178bc:	00800404 	movi	r2,16
  8178c0:	1007883a 	mov	r3,r2
  8178c4:	003f1b06 	br	817534 <__alt_data_end+0xff817534>
  8178c8:	000b883a 	mov	r5,zero
  8178cc:	0005883a 	mov	r2,zero
  8178d0:	003ec406 	br	8173e4 <__alt_data_end+0xff8173e4>
  8178d4:	413f952e 	bgeu	r8,r4,81772c <__alt_data_end+0xff81772c>
  8178d8:	10bfff84 	addi	r2,r2,-2
  8178dc:	4451883a 	add	r8,r8,r17
  8178e0:	003f9306 	br	817730 <__alt_data_end+0xff817730>
  8178e4:	2f3f7d2e 	bgeu	r5,fp,8176dc <__alt_data_end+0xff8176dc>
  8178e8:	b5bfff84 	addi	r22,r22,-2
  8178ec:	2c4b883a 	add	r5,r5,r17
  8178f0:	003f7b06 	br	8176e0 <__alt_data_end+0xff8176e0>
  8178f4:	34cd883a 	add	r6,r6,r19
  8178f8:	003f2a06 	br	8175a4 <__alt_data_end+0xff8175a4>
  8178fc:	8005883a 	mov	r2,r16
  817900:	003efe06 	br	8174fc <__alt_data_end+0xff8174fc>
  817904:	81bfdb36 	bltu	r16,r6,817874 <__alt_data_end+0xff817874>
  817908:	300f883a 	mov	r7,r6
  81790c:	0009883a 	mov	r4,zero
  817910:	003fa106 	br	817798 <__alt_data_end+0xff817798>

00817914 <__adddf3>:
  817914:	02000434 	movhi	r8,16
  817918:	423fffc4 	addi	r8,r8,-1
  81791c:	defffb04 	addi	sp,sp,-20
  817920:	2a12703a 	and	r9,r5,r8
  817924:	2806d7fa 	srli	r3,r5,31
  817928:	3a10703a 	and	r8,r7,r8
  81792c:	3804d53a 	srli	r2,r7,20
  817930:	3014d77a 	srli	r10,r6,29
  817934:	dc000015 	stw	r16,0(sp)
  817938:	481290fa 	slli	r9,r9,3
  81793c:	2820d53a 	srli	r16,r5,20
  817940:	401090fa 	slli	r8,r8,3
  817944:	200ad77a 	srli	r5,r4,29
  817948:	380ed7fa 	srli	r7,r7,31
  81794c:	dc800215 	stw	r18,8(sp)
  817950:	dc400115 	stw	r17,4(sp)
  817954:	dfc00415 	stw	ra,16(sp)
  817958:	dcc00315 	stw	r19,12(sp)
  81795c:	1c803fcc 	andi	r18,r3,255
  817960:	8401ffcc 	andi	r16,r16,2047
  817964:	494ab03a 	or	r5,r9,r5
  817968:	202290fa 	slli	r17,r4,3
  81796c:	1081ffcc 	andi	r2,r2,2047
  817970:	4290b03a 	or	r8,r8,r10
  817974:	300c90fa 	slli	r6,r6,3
  817978:	91c07026 	beq	r18,r7,817b3c <__adddf3+0x228>
  81797c:	8087c83a 	sub	r3,r16,r2
  817980:	00c0b30e 	bge	zero,r3,817c50 <__adddf3+0x33c>
  817984:	10002a1e 	bne	r2,zero,817a30 <__adddf3+0x11c>
  817988:	4184b03a 	or	r2,r8,r6
  81798c:	1000991e 	bne	r2,zero,817bf4 <__adddf3+0x2e0>
  817990:	888001cc 	andi	r2,r17,7
  817994:	10005b26 	beq	r2,zero,817b04 <__adddf3+0x1f0>
  817998:	88c003cc 	andi	r3,r17,15
  81799c:	00800104 	movi	r2,4
  8179a0:	18805826 	beq	r3,r2,817b04 <__adddf3+0x1f0>
  8179a4:	89800104 	addi	r6,r17,4
  8179a8:	3463803a 	cmpltu	r17,r6,r17
  8179ac:	2c4b883a 	add	r5,r5,r17
  8179b0:	2880202c 	andhi	r2,r5,128
  8179b4:	9007883a 	mov	r3,r18
  8179b8:	3023883a 	mov	r17,r6
  8179bc:	10005426 	beq	r2,zero,817b10 <__adddf3+0x1fc>
  8179c0:	84000044 	addi	r16,r16,1
  8179c4:	0081ffc4 	movi	r2,2047
  8179c8:	8080c126 	beq	r16,r2,817cd0 <__adddf3+0x3bc>
  8179cc:	013fe034 	movhi	r4,65408
  8179d0:	213fffc4 	addi	r4,r4,-1
  8179d4:	290a703a 	and	r5,r5,r4
  8179d8:	2804977a 	slli	r2,r5,29
  8179dc:	280a927a 	slli	r5,r5,9
  8179e0:	8822d0fa 	srli	r17,r17,3
  8179e4:	8401ffcc 	andi	r16,r16,2047
  8179e8:	2808d33a 	srli	r4,r5,12
  8179ec:	1444b03a 	or	r2,r2,r17
  8179f0:	8401ffcc 	andi	r16,r16,2047
  8179f4:	800a953a 	slli	r5,r16,20
  8179f8:	18c03fcc 	andi	r3,r3,255
  8179fc:	04000434 	movhi	r16,16
  817a00:	180697fa 	slli	r3,r3,31
  817a04:	843fffc4 	addi	r16,r16,-1
  817a08:	2420703a 	and	r16,r4,r16
  817a0c:	8160b03a 	or	r16,r16,r5
  817a10:	80c6b03a 	or	r3,r16,r3
  817a14:	dfc00417 	ldw	ra,16(sp)
  817a18:	dcc00317 	ldw	r19,12(sp)
  817a1c:	dc800217 	ldw	r18,8(sp)
  817a20:	dc400117 	ldw	r17,4(sp)
  817a24:	dc000017 	ldw	r16,0(sp)
  817a28:	dec00504 	addi	sp,sp,20
  817a2c:	f800283a 	ret
  817a30:	0081ffc4 	movi	r2,2047
  817a34:	80bfd626 	beq	r16,r2,817990 <__alt_data_end+0xff817990>
  817a38:	42002034 	orhi	r8,r8,128
  817a3c:	00800e04 	movi	r2,56
  817a40:	10c0a616 	blt	r2,r3,817cdc <__adddf3+0x3c8>
  817a44:	008007c4 	movi	r2,31
  817a48:	10c0c916 	blt	r2,r3,817d70 <__adddf3+0x45c>
  817a4c:	00800804 	movi	r2,32
  817a50:	10c5c83a 	sub	r2,r2,r3
  817a54:	408e983a 	sll	r7,r8,r2
  817a58:	30c8d83a 	srl	r4,r6,r3
  817a5c:	3084983a 	sll	r2,r6,r2
  817a60:	40c6d83a 	srl	r3,r8,r3
  817a64:	390cb03a 	or	r6,r7,r4
  817a68:	1004c03a 	cmpne	r2,r2,zero
  817a6c:	308cb03a 	or	r6,r6,r2
  817a70:	898dc83a 	sub	r6,r17,r6
  817a74:	89a3803a 	cmpltu	r17,r17,r6
  817a78:	28cbc83a 	sub	r5,r5,r3
  817a7c:	2c4bc83a 	sub	r5,r5,r17
  817a80:	3023883a 	mov	r17,r6
  817a84:	2880202c 	andhi	r2,r5,128
  817a88:	10006d26 	beq	r2,zero,817c40 <__adddf3+0x32c>
  817a8c:	04c02034 	movhi	r19,128
  817a90:	9cffffc4 	addi	r19,r19,-1
  817a94:	2ce6703a 	and	r19,r5,r19
  817a98:	98007e26 	beq	r19,zero,817c94 <__adddf3+0x380>
  817a9c:	9809883a 	mov	r4,r19
  817aa0:	0819eb00 	call	819eb0 <__clzsi2>
  817aa4:	10fffe04 	addi	r3,r2,-8
  817aa8:	010007c4 	movi	r4,31
  817aac:	20c07f16 	blt	r4,r3,817cac <__adddf3+0x398>
  817ab0:	01400a04 	movi	r5,40
  817ab4:	2885c83a 	sub	r2,r5,r2
  817ab8:	888ad83a 	srl	r5,r17,r2
  817abc:	98e6983a 	sll	r19,r19,r3
  817ac0:	88e2983a 	sll	r17,r17,r3
  817ac4:	2ce6b03a 	or	r19,r5,r19
  817ac8:	1c007c16 	blt	r3,r16,817cbc <__adddf3+0x3a8>
  817acc:	1c21c83a 	sub	r16,r3,r16
  817ad0:	81400044 	addi	r5,r16,1
  817ad4:	00c007c4 	movi	r3,31
  817ad8:	19409816 	blt	r3,r5,817d3c <__adddf3+0x428>
  817adc:	1c21c83a 	sub	r16,r3,r16
  817ae0:	8c08983a 	sll	r4,r17,r16
  817ae4:	8946d83a 	srl	r3,r17,r5
  817ae8:	9c20983a 	sll	r16,r19,r16
  817aec:	2008c03a 	cmpne	r4,r4,zero
  817af0:	994ad83a 	srl	r5,r19,r5
  817af4:	1c06b03a 	or	r3,r3,r16
  817af8:	1922b03a 	or	r17,r3,r4
  817afc:	0021883a 	mov	r16,zero
  817b00:	003fa306 	br	817990 <__alt_data_end+0xff817990>
  817b04:	2880202c 	andhi	r2,r5,128
  817b08:	9007883a 	mov	r3,r18
  817b0c:	103fac1e 	bne	r2,zero,8179c0 <__alt_data_end+0xff8179c0>
  817b10:	2804977a 	slli	r2,r5,29
  817b14:	8822d0fa 	srli	r17,r17,3
  817b18:	0101ffc4 	movi	r4,2047
  817b1c:	280ad0fa 	srli	r5,r5,3
  817b20:	1444b03a 	or	r2,r2,r17
  817b24:	81002c26 	beq	r16,r4,817bd8 <__adddf3+0x2c4>
  817b28:	8120703a 	and	r16,r16,r4
  817b2c:	01000434 	movhi	r4,16
  817b30:	213fffc4 	addi	r4,r4,-1
  817b34:	2908703a 	and	r4,r5,r4
  817b38:	003fad06 	br	8179f0 <__alt_data_end+0xff8179f0>
  817b3c:	8089c83a 	sub	r4,r16,r2
  817b40:	01006a0e 	bge	zero,r4,817cec <__adddf3+0x3d8>
  817b44:	10003326 	beq	r2,zero,817c14 <__adddf3+0x300>
  817b48:	0081ffc4 	movi	r2,2047
  817b4c:	80bf9026 	beq	r16,r2,817990 <__alt_data_end+0xff817990>
  817b50:	42002034 	orhi	r8,r8,128
  817b54:	00800e04 	movi	r2,56
  817b58:	1100b116 	blt	r2,r4,817e20 <__adddf3+0x50c>
  817b5c:	008007c4 	movi	r2,31
  817b60:	1100e216 	blt	r2,r4,817eec <__adddf3+0x5d8>
  817b64:	00800804 	movi	r2,32
  817b68:	1105c83a 	sub	r2,r2,r4
  817b6c:	4092983a 	sll	r9,r8,r2
  817b70:	310ed83a 	srl	r7,r6,r4
  817b74:	3084983a 	sll	r2,r6,r2
  817b78:	4110d83a 	srl	r8,r8,r4
  817b7c:	49ccb03a 	or	r6,r9,r7
  817b80:	1004c03a 	cmpne	r2,r2,zero
  817b84:	308cb03a 	or	r6,r6,r2
  817b88:	344d883a 	add	r6,r6,r17
  817b8c:	3463803a 	cmpltu	r17,r6,r17
  817b90:	414b883a 	add	r5,r8,r5
  817b94:	2c4b883a 	add	r5,r5,r17
  817b98:	3023883a 	mov	r17,r6
  817b9c:	2880202c 	andhi	r2,r5,128
  817ba0:	10002726 	beq	r2,zero,817c40 <__adddf3+0x32c>
  817ba4:	84000044 	addi	r16,r16,1
  817ba8:	0081ffc4 	movi	r2,2047
  817bac:	8080ae26 	beq	r16,r2,817e68 <__adddf3+0x554>
  817bb0:	00bfe034 	movhi	r2,65408
  817bb4:	10bfffc4 	addi	r2,r2,-1
  817bb8:	288a703a 	and	r5,r5,r2
  817bbc:	880cd07a 	srli	r6,r17,1
  817bc0:	280897fa 	slli	r4,r5,31
  817bc4:	88c0004c 	andi	r3,r17,1
  817bc8:	30e2b03a 	or	r17,r6,r3
  817bcc:	280ad07a 	srli	r5,r5,1
  817bd0:	8922b03a 	or	r17,r17,r4
  817bd4:	003f6e06 	br	817990 <__alt_data_end+0xff817990>
  817bd8:	1148b03a 	or	r4,r2,r5
  817bdc:	20003c26 	beq	r4,zero,817cd0 <__adddf3+0x3bc>
  817be0:	29000234 	orhi	r4,r5,8
  817be4:	01400434 	movhi	r5,16
  817be8:	297fffc4 	addi	r5,r5,-1
  817bec:	2148703a 	and	r4,r4,r5
  817bf0:	003f7f06 	br	8179f0 <__alt_data_end+0xff8179f0>
  817bf4:	18ffffc4 	addi	r3,r3,-1
  817bf8:	18004d1e 	bne	r3,zero,817d30 <__adddf3+0x41c>
  817bfc:	898dc83a 	sub	r6,r17,r6
  817c00:	89a3803a 	cmpltu	r17,r17,r6
  817c04:	2a0bc83a 	sub	r5,r5,r8
  817c08:	2c4bc83a 	sub	r5,r5,r17
  817c0c:	3023883a 	mov	r17,r6
  817c10:	003f9c06 	br	817a84 <__alt_data_end+0xff817a84>
  817c14:	4184b03a 	or	r2,r8,r6
  817c18:	103f5d26 	beq	r2,zero,817990 <__alt_data_end+0xff817990>
  817c1c:	213fffc4 	addi	r4,r4,-1
  817c20:	203fd926 	beq	r4,zero,817b88 <__alt_data_end+0xff817b88>
  817c24:	0081ffc4 	movi	r2,2047
  817c28:	80bfca1e 	bne	r16,r2,817b54 <__alt_data_end+0xff817b54>
  817c2c:	003f5806 	br	817990 <__alt_data_end+0xff817990>
  817c30:	10c8b03a 	or	r4,r2,r3
  817c34:	20008b26 	beq	r4,zero,817e64 <__adddf3+0x550>
  817c38:	100b883a 	mov	r5,r2
  817c3c:	1823883a 	mov	r17,r3
  817c40:	888001cc 	andi	r2,r17,7
  817c44:	103f541e 	bne	r2,zero,817998 <__alt_data_end+0xff817998>
  817c48:	9007883a 	mov	r3,r18
  817c4c:	003fb006 	br	817b10 <__alt_data_end+0xff817b10>
  817c50:	1800531e 	bne	r3,zero,817da0 <__adddf3+0x48c>
  817c54:	80800044 	addi	r2,r16,1
  817c58:	1081ffcc 	andi	r2,r2,2047
  817c5c:	00c00044 	movi	r3,1
  817c60:	1880990e 	bge	r3,r2,817ec8 <__adddf3+0x5b4>
  817c64:	8985c83a 	sub	r2,r17,r6
  817c68:	8887803a 	cmpltu	r3,r17,r2
  817c6c:	2a27c83a 	sub	r19,r5,r8
  817c70:	98e7c83a 	sub	r19,r19,r3
  817c74:	98c0202c 	andhi	r3,r19,128
  817c78:	18006226 	beq	r3,zero,817e04 <__adddf3+0x4f0>
  817c7c:	3463c83a 	sub	r17,r6,r17
  817c80:	4151c83a 	sub	r8,r8,r5
  817c84:	344d803a 	cmpltu	r6,r6,r17
  817c88:	41a7c83a 	sub	r19,r8,r6
  817c8c:	3825883a 	mov	r18,r7
  817c90:	983f821e 	bne	r19,zero,817a9c <__alt_data_end+0xff817a9c>
  817c94:	8809883a 	mov	r4,r17
  817c98:	0819eb00 	call	819eb0 <__clzsi2>
  817c9c:	10800804 	addi	r2,r2,32
  817ca0:	10fffe04 	addi	r3,r2,-8
  817ca4:	010007c4 	movi	r4,31
  817ca8:	20ff810e 	bge	r4,r3,817ab0 <__alt_data_end+0xff817ab0>
  817cac:	14fff604 	addi	r19,r2,-40
  817cb0:	8ce6983a 	sll	r19,r17,r19
  817cb4:	0023883a 	mov	r17,zero
  817cb8:	1c3f840e 	bge	r3,r16,817acc <__alt_data_end+0xff817acc>
  817cbc:	017fe034 	movhi	r5,65408
  817cc0:	297fffc4 	addi	r5,r5,-1
  817cc4:	80e1c83a 	sub	r16,r16,r3
  817cc8:	994a703a 	and	r5,r19,r5
  817ccc:	003f3006 	br	817990 <__alt_data_end+0xff817990>
  817cd0:	0009883a 	mov	r4,zero
  817cd4:	0005883a 	mov	r2,zero
  817cd8:	003f4506 	br	8179f0 <__alt_data_end+0xff8179f0>
  817cdc:	418cb03a 	or	r6,r8,r6
  817ce0:	300cc03a 	cmpne	r6,r6,zero
  817ce4:	0007883a 	mov	r3,zero
  817ce8:	003f6106 	br	817a70 <__alt_data_end+0xff817a70>
  817cec:	2000921e 	bne	r4,zero,817f38 <__adddf3+0x624>
  817cf0:	80800044 	addi	r2,r16,1
  817cf4:	11c1ffcc 	andi	r7,r2,2047
  817cf8:	01000044 	movi	r4,1
  817cfc:	21c0610e 	bge	r4,r7,817e84 <__adddf3+0x570>
  817d00:	0101ffc4 	movi	r4,2047
  817d04:	1100a326 	beq	r2,r4,817f94 <__adddf3+0x680>
  817d08:	344d883a 	add	r6,r6,r17
  817d0c:	3463803a 	cmpltu	r17,r6,r17
  817d10:	414b883a 	add	r5,r8,r5
  817d14:	2c4b883a 	add	r5,r5,r17
  817d18:	282297fa 	slli	r17,r5,31
  817d1c:	300cd07a 	srli	r6,r6,1
  817d20:	280ad07a 	srli	r5,r5,1
  817d24:	1021883a 	mov	r16,r2
  817d28:	89a2b03a 	or	r17,r17,r6
  817d2c:	003f1806 	br	817990 <__alt_data_end+0xff817990>
  817d30:	0081ffc4 	movi	r2,2047
  817d34:	80bf411e 	bne	r16,r2,817a3c <__alt_data_end+0xff817a3c>
  817d38:	003f1506 	br	817990 <__alt_data_end+0xff817990>
  817d3c:	80bff844 	addi	r2,r16,-31
  817d40:	00c00804 	movi	r3,32
  817d44:	9884d83a 	srl	r2,r19,r2
  817d48:	28c04a26 	beq	r5,r3,817e74 <__adddf3+0x560>
  817d4c:	00c00fc4 	movi	r3,63
  817d50:	1c21c83a 	sub	r16,r3,r16
  817d54:	9c26983a 	sll	r19,r19,r16
  817d58:	9c62b03a 	or	r17,r19,r17
  817d5c:	8822c03a 	cmpne	r17,r17,zero
  817d60:	88a2b03a 	or	r17,r17,r2
  817d64:	000b883a 	mov	r5,zero
  817d68:	0021883a 	mov	r16,zero
  817d6c:	003fb406 	br	817c40 <__alt_data_end+0xff817c40>
  817d70:	18bff804 	addi	r2,r3,-32
  817d74:	01000804 	movi	r4,32
  817d78:	4084d83a 	srl	r2,r8,r2
  817d7c:	19003f26 	beq	r3,r4,817e7c <__adddf3+0x568>
  817d80:	01001004 	movi	r4,64
  817d84:	20c7c83a 	sub	r3,r4,r3
  817d88:	40d0983a 	sll	r8,r8,r3
  817d8c:	418cb03a 	or	r6,r8,r6
  817d90:	300cc03a 	cmpne	r6,r6,zero
  817d94:	308cb03a 	or	r6,r6,r2
  817d98:	0007883a 	mov	r3,zero
  817d9c:	003f3406 	br	817a70 <__alt_data_end+0xff817a70>
  817da0:	80002326 	beq	r16,zero,817e30 <__adddf3+0x51c>
  817da4:	0101ffc4 	movi	r4,2047
  817da8:	11005e26 	beq	r2,r4,817f24 <__adddf3+0x610>
  817dac:	00c7c83a 	sub	r3,zero,r3
  817db0:	29402034 	orhi	r5,r5,128
  817db4:	01000e04 	movi	r4,56
  817db8:	20c07216 	blt	r4,r3,817f84 <__adddf3+0x670>
  817dbc:	010007c4 	movi	r4,31
  817dc0:	20c0ce16 	blt	r4,r3,8180fc <__adddf3+0x7e8>
  817dc4:	01000804 	movi	r4,32
  817dc8:	20c9c83a 	sub	r4,r4,r3
  817dcc:	2914983a 	sll	r10,r5,r4
  817dd0:	88d2d83a 	srl	r9,r17,r3
  817dd4:	8908983a 	sll	r4,r17,r4
  817dd8:	28c6d83a 	srl	r3,r5,r3
  817ddc:	5262b03a 	or	r17,r10,r9
  817de0:	2008c03a 	cmpne	r4,r4,zero
  817de4:	8922b03a 	or	r17,r17,r4
  817de8:	3463c83a 	sub	r17,r6,r17
  817dec:	40c7c83a 	sub	r3,r8,r3
  817df0:	344d803a 	cmpltu	r6,r6,r17
  817df4:	198bc83a 	sub	r5,r3,r6
  817df8:	1021883a 	mov	r16,r2
  817dfc:	3825883a 	mov	r18,r7
  817e00:	003f2006 	br	817a84 <__alt_data_end+0xff817a84>
  817e04:	9886b03a 	or	r3,r19,r2
  817e08:	1800141e 	bne	r3,zero,817e5c <__adddf3+0x548>
  817e0c:	0007883a 	mov	r3,zero
  817e10:	000b883a 	mov	r5,zero
  817e14:	0023883a 	mov	r17,zero
  817e18:	0021883a 	mov	r16,zero
  817e1c:	003f3c06 	br	817b10 <__alt_data_end+0xff817b10>
  817e20:	418cb03a 	or	r6,r8,r6
  817e24:	300cc03a 	cmpne	r6,r6,zero
  817e28:	0011883a 	mov	r8,zero
  817e2c:	003f5606 	br	817b88 <__alt_data_end+0xff817b88>
  817e30:	2c48b03a 	or	r4,r5,r17
  817e34:	20003b26 	beq	r4,zero,817f24 <__adddf3+0x610>
  817e38:	00c6303a 	nor	r3,zero,r3
  817e3c:	1800371e 	bne	r3,zero,817f1c <__adddf3+0x608>
  817e40:	3463c83a 	sub	r17,r6,r17
  817e44:	414bc83a 	sub	r5,r8,r5
  817e48:	344d803a 	cmpltu	r6,r6,r17
  817e4c:	298bc83a 	sub	r5,r5,r6
  817e50:	1021883a 	mov	r16,r2
  817e54:	3825883a 	mov	r18,r7
  817e58:	003f0a06 	br	817a84 <__alt_data_end+0xff817a84>
  817e5c:	1023883a 	mov	r17,r2
  817e60:	003f0d06 	br	817a98 <__alt_data_end+0xff817a98>
  817e64:	0007883a 	mov	r3,zero
  817e68:	000b883a 	mov	r5,zero
  817e6c:	0023883a 	mov	r17,zero
  817e70:	003f2706 	br	817b10 <__alt_data_end+0xff817b10>
  817e74:	0027883a 	mov	r19,zero
  817e78:	003fb706 	br	817d58 <__alt_data_end+0xff817d58>
  817e7c:	0011883a 	mov	r8,zero
  817e80:	003fc206 	br	817d8c <__alt_data_end+0xff817d8c>
  817e84:	2c44b03a 	or	r2,r5,r17
  817e88:	8000871e 	bne	r16,zero,8180a8 <__adddf3+0x794>
  817e8c:	1000b126 	beq	r2,zero,818154 <__adddf3+0x840>
  817e90:	4184b03a 	or	r2,r8,r6
  817e94:	103ebe26 	beq	r2,zero,817990 <__alt_data_end+0xff817990>
  817e98:	3445883a 	add	r2,r6,r17
  817e9c:	1463803a 	cmpltu	r17,r2,r17
  817ea0:	414b883a 	add	r5,r8,r5
  817ea4:	2c4b883a 	add	r5,r5,r17
  817ea8:	28c0202c 	andhi	r3,r5,128
  817eac:	1023883a 	mov	r17,r2
  817eb0:	183f6326 	beq	r3,zero,817c40 <__alt_data_end+0xff817c40>
  817eb4:	00bfe034 	movhi	r2,65408
  817eb8:	10bfffc4 	addi	r2,r2,-1
  817ebc:	2021883a 	mov	r16,r4
  817ec0:	288a703a 	and	r5,r5,r2
  817ec4:	003eb206 	br	817990 <__alt_data_end+0xff817990>
  817ec8:	2c44b03a 	or	r2,r5,r17
  817ecc:	8000251e 	bne	r16,zero,817f64 <__adddf3+0x650>
  817ed0:	10004b1e 	bne	r2,zero,818000 <__adddf3+0x6ec>
  817ed4:	4184b03a 	or	r2,r8,r6
  817ed8:	103fe226 	beq	r2,zero,817e64 <__alt_data_end+0xff817e64>
  817edc:	400b883a 	mov	r5,r8
  817ee0:	3023883a 	mov	r17,r6
  817ee4:	3825883a 	mov	r18,r7
  817ee8:	003ea906 	br	817990 <__alt_data_end+0xff817990>
  817eec:	20bff804 	addi	r2,r4,-32
  817ef0:	01c00804 	movi	r7,32
  817ef4:	4084d83a 	srl	r2,r8,r2
  817ef8:	21c07e26 	beq	r4,r7,8180f4 <__adddf3+0x7e0>
  817efc:	01c01004 	movi	r7,64
  817f00:	3909c83a 	sub	r4,r7,r4
  817f04:	4110983a 	sll	r8,r8,r4
  817f08:	418cb03a 	or	r6,r8,r6
  817f0c:	300cc03a 	cmpne	r6,r6,zero
  817f10:	308cb03a 	or	r6,r6,r2
  817f14:	0011883a 	mov	r8,zero
  817f18:	003f1b06 	br	817b88 <__alt_data_end+0xff817b88>
  817f1c:	0101ffc4 	movi	r4,2047
  817f20:	113fa41e 	bne	r2,r4,817db4 <__alt_data_end+0xff817db4>
  817f24:	400b883a 	mov	r5,r8
  817f28:	3023883a 	mov	r17,r6
  817f2c:	1021883a 	mov	r16,r2
  817f30:	3825883a 	mov	r18,r7
  817f34:	003e9606 	br	817990 <__alt_data_end+0xff817990>
  817f38:	80001a1e 	bne	r16,zero,817fa4 <__adddf3+0x690>
  817f3c:	2c4eb03a 	or	r7,r5,r17
  817f40:	38005526 	beq	r7,zero,818098 <__adddf3+0x784>
  817f44:	0108303a 	nor	r4,zero,r4
  817f48:	2000511e 	bne	r4,zero,818090 <__adddf3+0x77c>
  817f4c:	89a3883a 	add	r17,r17,r6
  817f50:	414b883a 	add	r5,r8,r5
  817f54:	898d803a 	cmpltu	r6,r17,r6
  817f58:	298b883a 	add	r5,r5,r6
  817f5c:	1021883a 	mov	r16,r2
  817f60:	003f0e06 	br	817b9c <__alt_data_end+0xff817b9c>
  817f64:	1000341e 	bne	r2,zero,818038 <__adddf3+0x724>
  817f68:	4184b03a 	or	r2,r8,r6
  817f6c:	10006f26 	beq	r2,zero,81812c <__adddf3+0x818>
  817f70:	400b883a 	mov	r5,r8
  817f74:	3023883a 	mov	r17,r6
  817f78:	3825883a 	mov	r18,r7
  817f7c:	0401ffc4 	movi	r16,2047
  817f80:	003e8306 	br	817990 <__alt_data_end+0xff817990>
  817f84:	2c62b03a 	or	r17,r5,r17
  817f88:	8822c03a 	cmpne	r17,r17,zero
  817f8c:	0007883a 	mov	r3,zero
  817f90:	003f9506 	br	817de8 <__alt_data_end+0xff817de8>
  817f94:	1021883a 	mov	r16,r2
  817f98:	000b883a 	mov	r5,zero
  817f9c:	0023883a 	mov	r17,zero
  817fa0:	003edb06 	br	817b10 <__alt_data_end+0xff817b10>
  817fa4:	01c1ffc4 	movi	r7,2047
  817fa8:	11c03b26 	beq	r2,r7,818098 <__adddf3+0x784>
  817fac:	0109c83a 	sub	r4,zero,r4
  817fb0:	29402034 	orhi	r5,r5,128
  817fb4:	01c00e04 	movi	r7,56
  817fb8:	39006216 	blt	r7,r4,818144 <__adddf3+0x830>
  817fbc:	01c007c4 	movi	r7,31
  817fc0:	39006b16 	blt	r7,r4,818170 <__adddf3+0x85c>
  817fc4:	01c00804 	movi	r7,32
  817fc8:	390fc83a 	sub	r7,r7,r4
  817fcc:	29d4983a 	sll	r10,r5,r7
  817fd0:	8912d83a 	srl	r9,r17,r4
  817fd4:	89ce983a 	sll	r7,r17,r7
  817fd8:	2908d83a 	srl	r4,r5,r4
  817fdc:	5262b03a 	or	r17,r10,r9
  817fe0:	380ac03a 	cmpne	r5,r7,zero
  817fe4:	8962b03a 	or	r17,r17,r5
  817fe8:	89a3883a 	add	r17,r17,r6
  817fec:	2211883a 	add	r8,r4,r8
  817ff0:	898d803a 	cmpltu	r6,r17,r6
  817ff4:	418b883a 	add	r5,r8,r6
  817ff8:	1021883a 	mov	r16,r2
  817ffc:	003ee706 	br	817b9c <__alt_data_end+0xff817b9c>
  818000:	4184b03a 	or	r2,r8,r6
  818004:	103e6226 	beq	r2,zero,817990 <__alt_data_end+0xff817990>
  818008:	8987c83a 	sub	r3,r17,r6
  81800c:	88c9803a 	cmpltu	r4,r17,r3
  818010:	2a05c83a 	sub	r2,r5,r8
  818014:	1105c83a 	sub	r2,r2,r4
  818018:	1100202c 	andhi	r4,r2,128
  81801c:	203f0426 	beq	r4,zero,817c30 <__alt_data_end+0xff817c30>
  818020:	3463c83a 	sub	r17,r6,r17
  818024:	414bc83a 	sub	r5,r8,r5
  818028:	344d803a 	cmpltu	r6,r6,r17
  81802c:	298bc83a 	sub	r5,r5,r6
  818030:	3825883a 	mov	r18,r7
  818034:	003e5606 	br	817990 <__alt_data_end+0xff817990>
  818038:	4184b03a 	or	r2,r8,r6
  81803c:	10002b26 	beq	r2,zero,8180ec <__adddf3+0x7d8>
  818040:	2804d0fa 	srli	r2,r5,3
  818044:	8822d0fa 	srli	r17,r17,3
  818048:	280a977a 	slli	r5,r5,29
  81804c:	10c0022c 	andhi	r3,r2,8
  818050:	2c62b03a 	or	r17,r5,r17
  818054:	18000826 	beq	r3,zero,818078 <__adddf3+0x764>
  818058:	4008d0fa 	srli	r4,r8,3
  81805c:	20c0022c 	andhi	r3,r4,8
  818060:	1800051e 	bne	r3,zero,818078 <__adddf3+0x764>
  818064:	300cd0fa 	srli	r6,r6,3
  818068:	4010977a 	slli	r8,r8,29
  81806c:	2005883a 	mov	r2,r4
  818070:	3825883a 	mov	r18,r7
  818074:	41a2b03a 	or	r17,r8,r6
  818078:	880ad77a 	srli	r5,r17,29
  81807c:	100490fa 	slli	r2,r2,3
  818080:	882290fa 	slli	r17,r17,3
  818084:	0401ffc4 	movi	r16,2047
  818088:	288ab03a 	or	r5,r5,r2
  81808c:	003e4006 	br	817990 <__alt_data_end+0xff817990>
  818090:	01c1ffc4 	movi	r7,2047
  818094:	11ffc71e 	bne	r2,r7,817fb4 <__alt_data_end+0xff817fb4>
  818098:	400b883a 	mov	r5,r8
  81809c:	3023883a 	mov	r17,r6
  8180a0:	1021883a 	mov	r16,r2
  8180a4:	003e3a06 	br	817990 <__alt_data_end+0xff817990>
  8180a8:	10002d26 	beq	r2,zero,818160 <__adddf3+0x84c>
  8180ac:	4184b03a 	or	r2,r8,r6
  8180b0:	10000e26 	beq	r2,zero,8180ec <__adddf3+0x7d8>
  8180b4:	2804d0fa 	srli	r2,r5,3
  8180b8:	8822d0fa 	srli	r17,r17,3
  8180bc:	280a977a 	slli	r5,r5,29
  8180c0:	10c0022c 	andhi	r3,r2,8
  8180c4:	2c62b03a 	or	r17,r5,r17
  8180c8:	183feb26 	beq	r3,zero,818078 <__alt_data_end+0xff818078>
  8180cc:	4008d0fa 	srli	r4,r8,3
  8180d0:	20c0022c 	andhi	r3,r4,8
  8180d4:	183fe81e 	bne	r3,zero,818078 <__alt_data_end+0xff818078>
  8180d8:	300cd0fa 	srli	r6,r6,3
  8180dc:	4010977a 	slli	r8,r8,29
  8180e0:	2005883a 	mov	r2,r4
  8180e4:	41a2b03a 	or	r17,r8,r6
  8180e8:	003fe306 	br	818078 <__alt_data_end+0xff818078>
  8180ec:	0401ffc4 	movi	r16,2047
  8180f0:	003e2706 	br	817990 <__alt_data_end+0xff817990>
  8180f4:	0011883a 	mov	r8,zero
  8180f8:	003f8306 	br	817f08 <__alt_data_end+0xff817f08>
  8180fc:	193ff804 	addi	r4,r3,-32
  818100:	02400804 	movi	r9,32
  818104:	2908d83a 	srl	r4,r5,r4
  818108:	1a402526 	beq	r3,r9,8181a0 <__adddf3+0x88c>
  81810c:	02401004 	movi	r9,64
  818110:	48c7c83a 	sub	r3,r9,r3
  818114:	28ca983a 	sll	r5,r5,r3
  818118:	2c62b03a 	or	r17,r5,r17
  81811c:	8822c03a 	cmpne	r17,r17,zero
  818120:	8922b03a 	or	r17,r17,r4
  818124:	0007883a 	mov	r3,zero
  818128:	003f2f06 	br	817de8 <__alt_data_end+0xff817de8>
  81812c:	01402034 	movhi	r5,128
  818130:	0007883a 	mov	r3,zero
  818134:	297fffc4 	addi	r5,r5,-1
  818138:	047ffe04 	movi	r17,-8
  81813c:	0401ffc4 	movi	r16,2047
  818140:	003e7306 	br	817b10 <__alt_data_end+0xff817b10>
  818144:	2c62b03a 	or	r17,r5,r17
  818148:	8822c03a 	cmpne	r17,r17,zero
  81814c:	0009883a 	mov	r4,zero
  818150:	003fa506 	br	817fe8 <__alt_data_end+0xff817fe8>
  818154:	400b883a 	mov	r5,r8
  818158:	3023883a 	mov	r17,r6
  81815c:	003e0c06 	br	817990 <__alt_data_end+0xff817990>
  818160:	400b883a 	mov	r5,r8
  818164:	3023883a 	mov	r17,r6
  818168:	0401ffc4 	movi	r16,2047
  81816c:	003e0806 	br	817990 <__alt_data_end+0xff817990>
  818170:	21fff804 	addi	r7,r4,-32
  818174:	02400804 	movi	r9,32
  818178:	29ced83a 	srl	r7,r5,r7
  81817c:	22400a26 	beq	r4,r9,8181a8 <__adddf3+0x894>
  818180:	02401004 	movi	r9,64
  818184:	4909c83a 	sub	r4,r9,r4
  818188:	290a983a 	sll	r5,r5,r4
  81818c:	2c62b03a 	or	r17,r5,r17
  818190:	8822c03a 	cmpne	r17,r17,zero
  818194:	89e2b03a 	or	r17,r17,r7
  818198:	0009883a 	mov	r4,zero
  81819c:	003f9206 	br	817fe8 <__alt_data_end+0xff817fe8>
  8181a0:	000b883a 	mov	r5,zero
  8181a4:	003fdc06 	br	818118 <__alt_data_end+0xff818118>
  8181a8:	000b883a 	mov	r5,zero
  8181ac:	003ff706 	br	81818c <__alt_data_end+0xff81818c>

008181b0 <__divdf3>:
  8181b0:	defff204 	addi	sp,sp,-56
  8181b4:	dd000815 	stw	r20,32(sp)
  8181b8:	2828d53a 	srli	r20,r5,20
  8181bc:	dd800a15 	stw	r22,40(sp)
  8181c0:	282cd7fa 	srli	r22,r5,31
  8181c4:	dc000415 	stw	r16,16(sp)
  8181c8:	04000434 	movhi	r16,16
  8181cc:	df000c15 	stw	fp,48(sp)
  8181d0:	dcc00715 	stw	r19,28(sp)
  8181d4:	dc800615 	stw	r18,24(sp)
  8181d8:	dc400515 	stw	r17,20(sp)
  8181dc:	843fffc4 	addi	r16,r16,-1
  8181e0:	dfc00d15 	stw	ra,52(sp)
  8181e4:	ddc00b15 	stw	r23,44(sp)
  8181e8:	dd400915 	stw	r21,36(sp)
  8181ec:	a501ffcc 	andi	r20,r20,2047
  8181f0:	2025883a 	mov	r18,r4
  8181f4:	2027883a 	mov	r19,r4
  8181f8:	2c22703a 	and	r17,r5,r16
  8181fc:	b7003fcc 	andi	fp,r22,255
  818200:	a0005e26 	beq	r20,zero,81837c <__divdf3+0x1cc>
  818204:	0081ffc4 	movi	r2,2047
  818208:	a0803526 	beq	r20,r2,8182e0 <__divdf3+0x130>
  81820c:	8c000434 	orhi	r16,r17,16
  818210:	2004d77a 	srli	r2,r4,29
  818214:	802090fa 	slli	r16,r16,3
  818218:	202690fa 	slli	r19,r4,3
  81821c:	a53f0044 	addi	r20,r20,-1023
  818220:	80a2b03a 	or	r17,r16,r2
  818224:	0025883a 	mov	r18,zero
  818228:	0011883a 	mov	r8,zero
  81822c:	380ad53a 	srli	r5,r7,20
  818230:	382ed7fa 	srli	r23,r7,31
  818234:	04000434 	movhi	r16,16
  818238:	843fffc4 	addi	r16,r16,-1
  81823c:	2941ffcc 	andi	r5,r5,2047
  818240:	302b883a 	mov	r21,r6
  818244:	3c20703a 	and	r16,r7,r16
  818248:	ba403fcc 	andi	r9,r23,255
  81824c:	28006726 	beq	r5,zero,8183ec <__divdf3+0x23c>
  818250:	0081ffc4 	movi	r2,2047
  818254:	28805f26 	beq	r5,r2,8183d4 <__divdf3+0x224>
  818258:	84000434 	orhi	r16,r16,16
  81825c:	3004d77a 	srli	r2,r6,29
  818260:	802090fa 	slli	r16,r16,3
  818264:	302a90fa 	slli	r21,r6,3
  818268:	297f0044 	addi	r5,r5,-1023
  81826c:	80a0b03a 	or	r16,r16,r2
  818270:	000f883a 	mov	r7,zero
  818274:	3c86b03a 	or	r3,r7,r18
  818278:	180690ba 	slli	r3,r3,2
  81827c:	008020b4 	movhi	r2,130
  818280:	10a0a804 	addi	r2,r2,-32096
  818284:	1887883a 	add	r3,r3,r2
  818288:	18c00017 	ldw	r3,0(r3)
  81828c:	b5c8f03a 	xor	r4,r22,r23
  818290:	200d883a 	mov	r6,r4
  818294:	24803fcc 	andi	r18,r4,255
  818298:	a169c83a 	sub	r20,r20,r5
  81829c:	1800683a 	jmp	r3
  8182a0:	008184e8 	cmpgeui	r2,zero,1555
  8182a4:	00818318 	cmpnei	r2,zero,1548
  8182a8:	008184ac 	andhi	r2,zero,1554
  8182ac:	008182fc 	xorhi	r2,zero,1547
  8182b0:	008184ac 	andhi	r2,zero,1554
  8182b4:	00818480 	call	81848 <__alt_mem_sdram_0-0x77e7b8>
  8182b8:	008184ac 	andhi	r2,zero,1554
  8182bc:	008182fc 	xorhi	r2,zero,1547
  8182c0:	00818318 	cmpnei	r2,zero,1548
  8182c4:	00818318 	cmpnei	r2,zero,1548
  8182c8:	00818480 	call	81848 <__alt_mem_sdram_0-0x77e7b8>
  8182cc:	008182fc 	xorhi	r2,zero,1547
  8182d0:	0081830c 	andi	r2,zero,1548
  8182d4:	0081830c 	andi	r2,zero,1548
  8182d8:	0081830c 	andi	r2,zero,1548
  8182dc:	008184bc 	xorhi	r2,zero,1554
  8182e0:	8904b03a 	or	r2,r17,r4
  8182e4:	1000631e 	bne	r2,zero,818474 <__divdf3+0x2c4>
  8182e8:	04800204 	movi	r18,8
  8182ec:	0023883a 	mov	r17,zero
  8182f0:	0027883a 	mov	r19,zero
  8182f4:	02000084 	movi	r8,2
  8182f8:	003fcc06 	br	81822c <__alt_data_end+0xff81822c>
  8182fc:	8023883a 	mov	r17,r16
  818300:	a827883a 	mov	r19,r21
  818304:	4839883a 	mov	fp,r9
  818308:	3811883a 	mov	r8,r7
  81830c:	00800084 	movi	r2,2
  818310:	40812a1e 	bne	r8,r2,8187bc <__divdf3+0x60c>
  818314:	e025883a 	mov	r18,fp
  818318:	9180004c 	andi	r6,r18,1
  81831c:	0101ffc4 	movi	r4,2047
  818320:	000b883a 	mov	r5,zero
  818324:	0027883a 	mov	r19,zero
  818328:	2008953a 	slli	r4,r4,20
  81832c:	30c03fcc 	andi	r3,r6,255
  818330:	04000434 	movhi	r16,16
  818334:	180697fa 	slli	r3,r3,31
  818338:	843fffc4 	addi	r16,r16,-1
  81833c:	2c20703a 	and	r16,r5,r16
  818340:	8120b03a 	or	r16,r16,r4
  818344:	80c6b03a 	or	r3,r16,r3
  818348:	9805883a 	mov	r2,r19
  81834c:	dfc00d17 	ldw	ra,52(sp)
  818350:	df000c17 	ldw	fp,48(sp)
  818354:	ddc00b17 	ldw	r23,44(sp)
  818358:	dd800a17 	ldw	r22,40(sp)
  81835c:	dd400917 	ldw	r21,36(sp)
  818360:	dd000817 	ldw	r20,32(sp)
  818364:	dcc00717 	ldw	r19,28(sp)
  818368:	dc800617 	ldw	r18,24(sp)
  81836c:	dc400517 	ldw	r17,20(sp)
  818370:	dc000417 	ldw	r16,16(sp)
  818374:	dec00e04 	addi	sp,sp,56
  818378:	f800283a 	ret
  81837c:	8904b03a 	or	r2,r17,r4
  818380:	10003726 	beq	r2,zero,818460 <__divdf3+0x2b0>
  818384:	88011c26 	beq	r17,zero,8187f8 <__divdf3+0x648>
  818388:	8809883a 	mov	r4,r17
  81838c:	d9800315 	stw	r6,12(sp)
  818390:	d9c00115 	stw	r7,4(sp)
  818394:	0819eb00 	call	819eb0 <__clzsi2>
  818398:	d9800317 	ldw	r6,12(sp)
  81839c:	d9c00117 	ldw	r7,4(sp)
  8183a0:	1007883a 	mov	r3,r2
  8183a4:	01000a04 	movi	r4,40
  8183a8:	1cfffe04 	addi	r19,r3,-8
  8183ac:	20c9c83a 	sub	r4,r4,r3
  8183b0:	8cca983a 	sll	r5,r17,r19
  8183b4:	9108d83a 	srl	r4,r18,r4
  8183b8:	94e6983a 	sll	r19,r18,r19
  8183bc:	2162b03a 	or	r17,r4,r5
  8183c0:	053f0344 	movi	r20,-1011
  8183c4:	a0e9c83a 	sub	r20,r20,r3
  8183c8:	0025883a 	mov	r18,zero
  8183cc:	0011883a 	mov	r8,zero
  8183d0:	003f9606 	br	81822c <__alt_data_end+0xff81822c>
  8183d4:	8184b03a 	or	r2,r16,r6
  8183d8:	10001f1e 	bne	r2,zero,818458 <__divdf3+0x2a8>
  8183dc:	0021883a 	mov	r16,zero
  8183e0:	002b883a 	mov	r21,zero
  8183e4:	01c00084 	movi	r7,2
  8183e8:	003fa206 	br	818274 <__alt_data_end+0xff818274>
  8183ec:	8184b03a 	or	r2,r16,r6
  8183f0:	10001526 	beq	r2,zero,818448 <__divdf3+0x298>
  8183f4:	80010c26 	beq	r16,zero,818828 <__divdf3+0x678>
  8183f8:	8009883a 	mov	r4,r16
  8183fc:	d9800315 	stw	r6,12(sp)
  818400:	da000215 	stw	r8,8(sp)
  818404:	da400015 	stw	r9,0(sp)
  818408:	0819eb00 	call	819eb0 <__clzsi2>
  81840c:	d9800317 	ldw	r6,12(sp)
  818410:	da000217 	ldw	r8,8(sp)
  818414:	da400017 	ldw	r9,0(sp)
  818418:	1007883a 	mov	r3,r2
  81841c:	01000a04 	movi	r4,40
  818420:	1d7ffe04 	addi	r21,r3,-8
  818424:	20c9c83a 	sub	r4,r4,r3
  818428:	8560983a 	sll	r16,r16,r21
  81842c:	3108d83a 	srl	r4,r6,r4
  818430:	356a983a 	sll	r21,r6,r21
  818434:	2420b03a 	or	r16,r4,r16
  818438:	017f0344 	movi	r5,-1011
  81843c:	28cbc83a 	sub	r5,r5,r3
  818440:	000f883a 	mov	r7,zero
  818444:	003f8b06 	br	818274 <__alt_data_end+0xff818274>
  818448:	0021883a 	mov	r16,zero
  81844c:	002b883a 	mov	r21,zero
  818450:	01c00044 	movi	r7,1
  818454:	003f8706 	br	818274 <__alt_data_end+0xff818274>
  818458:	01c000c4 	movi	r7,3
  81845c:	003f8506 	br	818274 <__alt_data_end+0xff818274>
  818460:	04800104 	movi	r18,4
  818464:	0023883a 	mov	r17,zero
  818468:	0027883a 	mov	r19,zero
  81846c:	02000044 	movi	r8,1
  818470:	003f6e06 	br	81822c <__alt_data_end+0xff81822c>
  818474:	04800304 	movi	r18,12
  818478:	020000c4 	movi	r8,3
  81847c:	003f6b06 	br	81822c <__alt_data_end+0xff81822c>
  818480:	01400434 	movhi	r5,16
  818484:	000d883a 	mov	r6,zero
  818488:	297fffc4 	addi	r5,r5,-1
  81848c:	04ffffc4 	movi	r19,-1
  818490:	0101ffc4 	movi	r4,2047
  818494:	003fa406 	br	818328 <__alt_data_end+0xff818328>
  818498:	043f0084 	movi	r16,-1022
  81849c:	8521c83a 	sub	r16,r16,r20
  8184a0:	00800e04 	movi	r2,56
  8184a4:	1401200e 	bge	r2,r16,818928 <__divdf3+0x778>
  8184a8:	9180004c 	andi	r6,r18,1
  8184ac:	0009883a 	mov	r4,zero
  8184b0:	000b883a 	mov	r5,zero
  8184b4:	0027883a 	mov	r19,zero
  8184b8:	003f9b06 	br	818328 <__alt_data_end+0xff818328>
  8184bc:	8880022c 	andhi	r2,r17,8
  8184c0:	1000c726 	beq	r2,zero,8187e0 <__divdf3+0x630>
  8184c4:	8080022c 	andhi	r2,r16,8
  8184c8:	1000c51e 	bne	r2,zero,8187e0 <__divdf3+0x630>
  8184cc:	00800434 	movhi	r2,16
  8184d0:	81400234 	orhi	r5,r16,8
  8184d4:	10bfffc4 	addi	r2,r2,-1
  8184d8:	b80d883a 	mov	r6,r23
  8184dc:	288a703a 	and	r5,r5,r2
  8184e0:	a827883a 	mov	r19,r21
  8184e4:	003fea06 	br	818490 <__alt_data_end+0xff818490>
  8184e8:	8440ea36 	bltu	r16,r17,818894 <__divdf3+0x6e4>
  8184ec:	8c00e826 	beq	r17,r16,818890 <__divdf3+0x6e0>
  8184f0:	a53fffc4 	addi	r20,r20,-1
  8184f4:	882d883a 	mov	r22,r17
  8184f8:	000d883a 	mov	r6,zero
  8184fc:	a804d63a 	srli	r2,r21,24
  818500:	8020923a 	slli	r16,r16,8
  818504:	b009883a 	mov	r4,r22
  818508:	d9800315 	stw	r6,12(sp)
  81850c:	1420b03a 	or	r16,r2,r16
  818510:	802ed43a 	srli	r23,r16,16
  818514:	873fffcc 	andi	fp,r16,65535
  818518:	a82a923a 	slli	r21,r21,8
  81851c:	b80b883a 	mov	r5,r23
  818520:	080c6300 	call	80c630 <__udivsi3>
  818524:	b009883a 	mov	r4,r22
  818528:	b80b883a 	mov	r5,r23
  81852c:	1023883a 	mov	r17,r2
  818530:	080c6380 	call	80c638 <__umodsi3>
  818534:	1004943a 	slli	r2,r2,16
  818538:	9808d43a 	srli	r4,r19,16
  81853c:	8f2d383a 	mul	r22,r17,fp
  818540:	d9800317 	ldw	r6,12(sp)
  818544:	1106b03a 	or	r3,r2,r4
  818548:	1d80062e 	bgeu	r3,r22,818564 <__divdf3+0x3b4>
  81854c:	1c07883a 	add	r3,r3,r16
  818550:	88bfffc4 	addi	r2,r17,-1
  818554:	1c00dc36 	bltu	r3,r16,8188c8 <__divdf3+0x718>
  818558:	1d80db2e 	bgeu	r3,r22,8188c8 <__divdf3+0x718>
  81855c:	8c7fff84 	addi	r17,r17,-2
  818560:	1c07883a 	add	r3,r3,r16
  818564:	1dadc83a 	sub	r22,r3,r22
  818568:	b009883a 	mov	r4,r22
  81856c:	b80b883a 	mov	r5,r23
  818570:	d9800315 	stw	r6,12(sp)
  818574:	080c6300 	call	80c630 <__udivsi3>
  818578:	b009883a 	mov	r4,r22
  81857c:	b80b883a 	mov	r5,r23
  818580:	d8800015 	stw	r2,0(sp)
  818584:	080c6380 	call	80c638 <__umodsi3>
  818588:	da400017 	ldw	r9,0(sp)
  81858c:	1004943a 	slli	r2,r2,16
  818590:	9cffffcc 	andi	r19,r19,65535
  818594:	4f07383a 	mul	r3,r9,fp
  818598:	14c8b03a 	or	r4,r2,r19
  81859c:	d9800317 	ldw	r6,12(sp)
  8185a0:	20c0062e 	bgeu	r4,r3,8185bc <__divdf3+0x40c>
  8185a4:	2409883a 	add	r4,r4,r16
  8185a8:	48bfffc4 	addi	r2,r9,-1
  8185ac:	2400c436 	bltu	r4,r16,8188c0 <__divdf3+0x710>
  8185b0:	20c0c32e 	bgeu	r4,r3,8188c0 <__divdf3+0x710>
  8185b4:	4a7fff84 	addi	r9,r9,-2
  8185b8:	2409883a 	add	r4,r4,r16
  8185bc:	8822943a 	slli	r17,r17,16
  8185c0:	a80ed43a 	srli	r7,r21,16
  8185c4:	aa3fffcc 	andi	r8,r21,65535
  8185c8:	4c62b03a 	or	r17,r9,r17
  8185cc:	8816d43a 	srli	r11,r17,16
  8185d0:	897fffcc 	andi	r5,r17,65535
  8185d4:	2a15383a 	mul	r10,r5,r8
  8185d8:	5a19383a 	mul	r12,r11,r8
  8185dc:	29cb383a 	mul	r5,r5,r7
  8185e0:	5012d43a 	srli	r9,r10,16
  8185e4:	20c5c83a 	sub	r2,r4,r3
  8185e8:	614b883a 	add	r5,r12,r5
  8185ec:	2a4b883a 	add	r5,r5,r9
  8185f0:	59c7383a 	mul	r3,r11,r7
  8185f4:	2b00022e 	bgeu	r5,r12,818600 <__divdf3+0x450>
  8185f8:	01000074 	movhi	r4,1
  8185fc:	1907883a 	add	r3,r3,r4
  818600:	2808d43a 	srli	r4,r5,16
  818604:	280a943a 	slli	r5,r5,16
  818608:	54ffffcc 	andi	r19,r10,65535
  81860c:	1907883a 	add	r3,r3,r4
  818610:	2ccb883a 	add	r5,r5,r19
  818614:	10c09336 	bltu	r2,r3,818864 <__divdf3+0x6b4>
  818618:	10c0ad26 	beq	r2,r3,8188d0 <__divdf3+0x720>
  81861c:	10c7c83a 	sub	r3,r2,r3
  818620:	3167c83a 	sub	r19,r6,r5
  818624:	34ed803a 	cmpltu	r22,r6,r19
  818628:	1dadc83a 	sub	r22,r3,r22
  81862c:	b400b226 	beq	r22,r16,8188f8 <__divdf3+0x748>
  818630:	b009883a 	mov	r4,r22
  818634:	b80b883a 	mov	r5,r23
  818638:	d9c00115 	stw	r7,4(sp)
  81863c:	da000215 	stw	r8,8(sp)
  818640:	080c6300 	call	80c630 <__udivsi3>
  818644:	b009883a 	mov	r4,r22
  818648:	b80b883a 	mov	r5,r23
  81864c:	d8800315 	stw	r2,12(sp)
  818650:	080c6380 	call	80c638 <__umodsi3>
  818654:	d9800317 	ldw	r6,12(sp)
  818658:	1004943a 	slli	r2,r2,16
  81865c:	9808d43a 	srli	r4,r19,16
  818660:	372d383a 	mul	r22,r6,fp
  818664:	d9c00117 	ldw	r7,4(sp)
  818668:	1106b03a 	or	r3,r2,r4
  81866c:	da000217 	ldw	r8,8(sp)
  818670:	1d80062e 	bgeu	r3,r22,81868c <__divdf3+0x4dc>
  818674:	1c07883a 	add	r3,r3,r16
  818678:	30bfffc4 	addi	r2,r6,-1
  81867c:	1c00a036 	bltu	r3,r16,818900 <__divdf3+0x750>
  818680:	1d809f2e 	bgeu	r3,r22,818900 <__divdf3+0x750>
  818684:	31bfff84 	addi	r6,r6,-2
  818688:	1c07883a 	add	r3,r3,r16
  81868c:	1dadc83a 	sub	r22,r3,r22
  818690:	b009883a 	mov	r4,r22
  818694:	b80b883a 	mov	r5,r23
  818698:	d9800315 	stw	r6,12(sp)
  81869c:	d9c00115 	stw	r7,4(sp)
  8186a0:	da000215 	stw	r8,8(sp)
  8186a4:	080c6300 	call	80c630 <__udivsi3>
  8186a8:	b009883a 	mov	r4,r22
  8186ac:	b80b883a 	mov	r5,r23
  8186b0:	d8800015 	stw	r2,0(sp)
  8186b4:	080c6380 	call	80c638 <__umodsi3>
  8186b8:	da400017 	ldw	r9,0(sp)
  8186bc:	1004943a 	slli	r2,r2,16
  8186c0:	993fffcc 	andi	r4,r19,65535
  8186c4:	4f39383a 	mul	fp,r9,fp
  8186c8:	1106b03a 	or	r3,r2,r4
  8186cc:	d9800317 	ldw	r6,12(sp)
  8186d0:	d9c00117 	ldw	r7,4(sp)
  8186d4:	da000217 	ldw	r8,8(sp)
  8186d8:	1f00062e 	bgeu	r3,fp,8186f4 <__divdf3+0x544>
  8186dc:	1c07883a 	add	r3,r3,r16
  8186e0:	48bfffc4 	addi	r2,r9,-1
  8186e4:	1c008836 	bltu	r3,r16,818908 <__divdf3+0x758>
  8186e8:	1f00872e 	bgeu	r3,fp,818908 <__divdf3+0x758>
  8186ec:	4a7fff84 	addi	r9,r9,-2
  8186f0:	1c07883a 	add	r3,r3,r16
  8186f4:	3008943a 	slli	r4,r6,16
  8186f8:	1f07c83a 	sub	r3,r3,fp
  8186fc:	4926b03a 	or	r19,r9,r4
  818700:	993fffcc 	andi	r4,r19,65535
  818704:	980cd43a 	srli	r6,r19,16
  818708:	220b383a 	mul	r5,r4,r8
  81870c:	21c5383a 	mul	r2,r4,r7
  818710:	3211383a 	mul	r8,r6,r8
  818714:	2808d43a 	srli	r4,r5,16
  818718:	31cf383a 	mul	r7,r6,r7
  81871c:	4085883a 	add	r2,r8,r2
  818720:	1105883a 	add	r2,r2,r4
  818724:	1200022e 	bgeu	r2,r8,818730 <__divdf3+0x580>
  818728:	01000074 	movhi	r4,1
  81872c:	390f883a 	add	r7,r7,r4
  818730:	1008d43a 	srli	r4,r2,16
  818734:	1004943a 	slli	r2,r2,16
  818738:	297fffcc 	andi	r5,r5,65535
  81873c:	390f883a 	add	r7,r7,r4
  818740:	1145883a 	add	r2,r2,r5
  818744:	19c06536 	bltu	r3,r7,8188dc <__divdf3+0x72c>
  818748:	19c09f26 	beq	r3,r7,8189c8 <__divdf3+0x818>
  81874c:	9cc00054 	ori	r19,r19,1
  818750:	a100ffc4 	addi	r4,r20,1023
  818754:	013f500e 	bge	zero,r4,818498 <__alt_data_end+0xff818498>
  818758:	988001cc 	andi	r2,r19,7
  81875c:	10000726 	beq	r2,zero,81877c <__divdf3+0x5cc>
  818760:	98c003cc 	andi	r3,r19,15
  818764:	00800104 	movi	r2,4
  818768:	18800426 	beq	r3,r2,81877c <__divdf3+0x5cc>
  81876c:	9885883a 	add	r2,r19,r2
  818770:	14e1803a 	cmpltu	r16,r2,r19
  818774:	8c23883a 	add	r17,r17,r16
  818778:	1027883a 	mov	r19,r2
  81877c:	8880402c 	andhi	r2,r17,256
  818780:	10000426 	beq	r2,zero,818794 <__divdf3+0x5e4>
  818784:	00bfc034 	movhi	r2,65280
  818788:	10bfffc4 	addi	r2,r2,-1
  81878c:	a1010004 	addi	r4,r20,1024
  818790:	88a2703a 	and	r17,r17,r2
  818794:	0081ff84 	movi	r2,2046
  818798:	113edf16 	blt	r2,r4,818318 <__alt_data_end+0xff818318>
  81879c:	9826d0fa 	srli	r19,r19,3
  8187a0:	8804977a 	slli	r2,r17,29
  8187a4:	8820927a 	slli	r16,r17,9
  8187a8:	2101ffcc 	andi	r4,r4,2047
  8187ac:	14e6b03a 	or	r19,r2,r19
  8187b0:	800ad33a 	srli	r5,r16,12
  8187b4:	9180004c 	andi	r6,r18,1
  8187b8:	003edb06 	br	818328 <__alt_data_end+0xff818328>
  8187bc:	008000c4 	movi	r2,3
  8187c0:	4080a826 	beq	r8,r2,818a64 <__divdf3+0x8b4>
  8187c4:	00800044 	movi	r2,1
  8187c8:	4080551e 	bne	r8,r2,818920 <__divdf3+0x770>
  8187cc:	e00d883a 	mov	r6,fp
  8187d0:	0009883a 	mov	r4,zero
  8187d4:	000b883a 	mov	r5,zero
  8187d8:	0027883a 	mov	r19,zero
  8187dc:	003ed206 	br	818328 <__alt_data_end+0xff818328>
  8187e0:	00800434 	movhi	r2,16
  8187e4:	89400234 	orhi	r5,r17,8
  8187e8:	10bfffc4 	addi	r2,r2,-1
  8187ec:	b00d883a 	mov	r6,r22
  8187f0:	288a703a 	and	r5,r5,r2
  8187f4:	003f2606 	br	818490 <__alt_data_end+0xff818490>
  8187f8:	d9800315 	stw	r6,12(sp)
  8187fc:	d9c00115 	stw	r7,4(sp)
  818800:	0819eb00 	call	819eb0 <__clzsi2>
  818804:	10c00804 	addi	r3,r2,32
  818808:	010009c4 	movi	r4,39
  81880c:	d9800317 	ldw	r6,12(sp)
  818810:	d9c00117 	ldw	r7,4(sp)
  818814:	20fee30e 	bge	r4,r3,8183a4 <__alt_data_end+0xff8183a4>
  818818:	117ffe04 	addi	r5,r2,-8
  81881c:	9162983a 	sll	r17,r18,r5
  818820:	0027883a 	mov	r19,zero
  818824:	003ee606 	br	8183c0 <__alt_data_end+0xff8183c0>
  818828:	3009883a 	mov	r4,r6
  81882c:	d9800315 	stw	r6,12(sp)
  818830:	da000215 	stw	r8,8(sp)
  818834:	da400015 	stw	r9,0(sp)
  818838:	0819eb00 	call	819eb0 <__clzsi2>
  81883c:	10c00804 	addi	r3,r2,32
  818840:	010009c4 	movi	r4,39
  818844:	d9800317 	ldw	r6,12(sp)
  818848:	da000217 	ldw	r8,8(sp)
  81884c:	da400017 	ldw	r9,0(sp)
  818850:	20fef20e 	bge	r4,r3,81841c <__alt_data_end+0xff81841c>
  818854:	10bffe04 	addi	r2,r2,-8
  818858:	a8a0983a 	sll	r16,r21,r2
  81885c:	002b883a 	mov	r21,zero
  818860:	003ef506 	br	818438 <__alt_data_end+0xff818438>
  818864:	354d883a 	add	r6,r6,r21
  818868:	3549803a 	cmpltu	r4,r6,r21
  81886c:	2409883a 	add	r4,r4,r16
  818870:	2089883a 	add	r4,r4,r2
  818874:	88bfffc4 	addi	r2,r17,-1
  818878:	81000c2e 	bgeu	r16,r4,8188ac <__divdf3+0x6fc>
  81887c:	20c04436 	bltu	r4,r3,818990 <__divdf3+0x7e0>
  818880:	19006f26 	beq	r3,r4,818a40 <__divdf3+0x890>
  818884:	20c7c83a 	sub	r3,r4,r3
  818888:	1023883a 	mov	r17,r2
  81888c:	003f6406 	br	818620 <__alt_data_end+0xff818620>
  818890:	9d7f1736 	bltu	r19,r21,8184f0 <__alt_data_end+0xff8184f0>
  818894:	9806d07a 	srli	r3,r19,1
  818898:	880497fa 	slli	r2,r17,31
  81889c:	980c97fa 	slli	r6,r19,31
  8188a0:	882cd07a 	srli	r22,r17,1
  8188a4:	18a6b03a 	or	r19,r3,r2
  8188a8:	003f1406 	br	8184fc <__alt_data_end+0xff8184fc>
  8188ac:	243ff51e 	bne	r4,r16,818884 <__alt_data_end+0xff818884>
  8188b0:	357ff22e 	bgeu	r6,r21,81887c <__alt_data_end+0xff81887c>
  8188b4:	80c7c83a 	sub	r3,r16,r3
  8188b8:	1023883a 	mov	r17,r2
  8188bc:	003f5806 	br	818620 <__alt_data_end+0xff818620>
  8188c0:	1013883a 	mov	r9,r2
  8188c4:	003f3d06 	br	8185bc <__alt_data_end+0xff8185bc>
  8188c8:	1023883a 	mov	r17,r2
  8188cc:	003f2506 	br	818564 <__alt_data_end+0xff818564>
  8188d0:	317fe436 	bltu	r6,r5,818864 <__alt_data_end+0xff818864>
  8188d4:	0007883a 	mov	r3,zero
  8188d8:	003f5106 	br	818620 <__alt_data_end+0xff818620>
  8188dc:	1c07883a 	add	r3,r3,r16
  8188e0:	993fffc4 	addi	r4,r19,-1
  8188e4:	1c000a2e 	bgeu	r3,r16,818910 <__divdf3+0x760>
  8188e8:	2027883a 	mov	r19,r4
  8188ec:	19ff971e 	bne	r3,r7,81874c <__alt_data_end+0xff81874c>
  8188f0:	a8bf961e 	bne	r21,r2,81874c <__alt_data_end+0xff81874c>
  8188f4:	003f9606 	br	818750 <__alt_data_end+0xff818750>
  8188f8:	04ffffc4 	movi	r19,-1
  8188fc:	003f9406 	br	818750 <__alt_data_end+0xff818750>
  818900:	100d883a 	mov	r6,r2
  818904:	003f6106 	br	81868c <__alt_data_end+0xff81868c>
  818908:	1013883a 	mov	r9,r2
  81890c:	003f7906 	br	8186f4 <__alt_data_end+0xff8186f4>
  818910:	19c02636 	bltu	r3,r7,8189ac <__divdf3+0x7fc>
  818914:	38c04d26 	beq	r7,r3,818a4c <__divdf3+0x89c>
  818918:	2027883a 	mov	r19,r4
  81891c:	003f8b06 	br	81874c <__alt_data_end+0xff81874c>
  818920:	e025883a 	mov	r18,fp
  818924:	003f8a06 	br	818750 <__alt_data_end+0xff818750>
  818928:	008007c4 	movi	r2,31
  81892c:	14002a16 	blt	r2,r16,8189d8 <__divdf3+0x828>
  818930:	a5010784 	addi	r20,r20,1054
  818934:	8d04983a 	sll	r2,r17,r20
  818938:	9c06d83a 	srl	r3,r19,r16
  81893c:	9d28983a 	sll	r20,r19,r20
  818940:	8c20d83a 	srl	r16,r17,r16
  818944:	1886b03a 	or	r3,r3,r2
  818948:	a004c03a 	cmpne	r2,r20,zero
  81894c:	1884b03a 	or	r2,r3,r2
  818950:	10c001cc 	andi	r3,r2,7
  818954:	18000726 	beq	r3,zero,818974 <__divdf3+0x7c4>
  818958:	110003cc 	andi	r4,r2,15
  81895c:	00c00104 	movi	r3,4
  818960:	20c00426 	beq	r4,r3,818974 <__divdf3+0x7c4>
  818964:	10c00104 	addi	r3,r2,4
  818968:	1885803a 	cmpltu	r2,r3,r2
  81896c:	80a1883a 	add	r16,r16,r2
  818970:	1805883a 	mov	r2,r3
  818974:	80c0202c 	andhi	r3,r16,128
  818978:	18002d26 	beq	r3,zero,818a30 <__divdf3+0x880>
  81897c:	9180004c 	andi	r6,r18,1
  818980:	01000044 	movi	r4,1
  818984:	000b883a 	mov	r5,zero
  818988:	0027883a 	mov	r19,zero
  81898c:	003e6606 	br	818328 <__alt_data_end+0xff818328>
  818990:	354d883a 	add	r6,r6,r21
  818994:	356d803a 	cmpltu	r22,r6,r21
  818998:	b42d883a 	add	r22,r22,r16
  81899c:	b12d883a 	add	r22,r22,r4
  8189a0:	8c7fff84 	addi	r17,r17,-2
  8189a4:	b0c7c83a 	sub	r3,r22,r3
  8189a8:	003f1d06 	br	818620 <__alt_data_end+0xff818620>
  8189ac:	ad4b883a 	add	r5,r21,r21
  8189b0:	2d6b803a 	cmpltu	r21,r5,r21
  8189b4:	ac2b883a 	add	r21,r21,r16
  8189b8:	1d47883a 	add	r3,r3,r21
  8189bc:	993fff84 	addi	r4,r19,-2
  8189c0:	282b883a 	mov	r21,r5
  8189c4:	003fc806 	br	8188e8 <__alt_data_end+0xff8188e8>
  8189c8:	103fc41e 	bne	r2,zero,8188dc <__alt_data_end+0xff8188dc>
  8189cc:	002b883a 	mov	r21,zero
  8189d0:	a8bf5e1e 	bne	r21,r2,81874c <__alt_data_end+0xff81874c>
  8189d4:	003f5e06 	br	818750 <__alt_data_end+0xff818750>
  8189d8:	00bef884 	movi	r2,-1054
  8189dc:	1505c83a 	sub	r2,r2,r20
  8189e0:	00c00804 	movi	r3,32
  8189e4:	8884d83a 	srl	r2,r17,r2
  8189e8:	80c01c26 	beq	r16,r3,818a5c <__divdf3+0x8ac>
  8189ec:	a0c10f84 	addi	r3,r20,1086
  8189f0:	88c6983a 	sll	r3,r17,r3
  8189f4:	1cc6b03a 	or	r3,r3,r19
  8189f8:	1806c03a 	cmpne	r3,r3,zero
  8189fc:	1884b03a 	or	r2,r3,r2
  818a00:	140001cc 	andi	r16,r2,7
  818a04:	8000061e 	bne	r16,zero,818a20 <__divdf3+0x870>
  818a08:	000b883a 	mov	r5,zero
  818a0c:	1004d0fa 	srli	r2,r2,3
  818a10:	9180004c 	andi	r6,r18,1
  818a14:	0009883a 	mov	r4,zero
  818a18:	1426b03a 	or	r19,r2,r16
  818a1c:	003e4206 	br	818328 <__alt_data_end+0xff818328>
  818a20:	110003cc 	andi	r4,r2,15
  818a24:	00c00104 	movi	r3,4
  818a28:	0021883a 	mov	r16,zero
  818a2c:	20ffcd1e 	bne	r4,r3,818964 <__alt_data_end+0xff818964>
  818a30:	800a927a 	slli	r5,r16,9
  818a34:	8020977a 	slli	r16,r16,29
  818a38:	280ad33a 	srli	r5,r5,12
  818a3c:	003ff306 	br	818a0c <__alt_data_end+0xff818a0c>
  818a40:	317fd336 	bltu	r6,r5,818990 <__alt_data_end+0xff818990>
  818a44:	1023883a 	mov	r17,r2
  818a48:	003fa206 	br	8188d4 <__alt_data_end+0xff8188d4>
  818a4c:	a8bfd736 	bltu	r21,r2,8189ac <__alt_data_end+0xff8189ac>
  818a50:	2027883a 	mov	r19,r4
  818a54:	a8bf3d1e 	bne	r21,r2,81874c <__alt_data_end+0xff81874c>
  818a58:	003f3d06 	br	818750 <__alt_data_end+0xff818750>
  818a5c:	0007883a 	mov	r3,zero
  818a60:	003fe406 	br	8189f4 <__alt_data_end+0xff8189f4>
  818a64:	00800434 	movhi	r2,16
  818a68:	89400234 	orhi	r5,r17,8
  818a6c:	10bfffc4 	addi	r2,r2,-1
  818a70:	e00d883a 	mov	r6,fp
  818a74:	288a703a 	and	r5,r5,r2
  818a78:	003e8506 	br	818490 <__alt_data_end+0xff818490>

00818a7c <__eqdf2>:
  818a7c:	2804d53a 	srli	r2,r5,20
  818a80:	3806d53a 	srli	r3,r7,20
  818a84:	02000434 	movhi	r8,16
  818a88:	423fffc4 	addi	r8,r8,-1
  818a8c:	1081ffcc 	andi	r2,r2,2047
  818a90:	0241ffc4 	movi	r9,2047
  818a94:	2a14703a 	and	r10,r5,r8
  818a98:	18c1ffcc 	andi	r3,r3,2047
  818a9c:	3a10703a 	and	r8,r7,r8
  818aa0:	280ad7fa 	srli	r5,r5,31
  818aa4:	380ed7fa 	srli	r7,r7,31
  818aa8:	12400f26 	beq	r2,r9,818ae8 <__eqdf2+0x6c>
  818aac:	0241ffc4 	movi	r9,2047
  818ab0:	1a400326 	beq	r3,r9,818ac0 <__eqdf2+0x44>
  818ab4:	10c00526 	beq	r2,r3,818acc <__eqdf2+0x50>
  818ab8:	00800044 	movi	r2,1
  818abc:	f800283a 	ret
  818ac0:	4192b03a 	or	r9,r8,r6
  818ac4:	483ffc1e 	bne	r9,zero,818ab8 <__alt_data_end+0xff818ab8>
  818ac8:	10fffb1e 	bne	r2,r3,818ab8 <__alt_data_end+0xff818ab8>
  818acc:	523ffa1e 	bne	r10,r8,818ab8 <__alt_data_end+0xff818ab8>
  818ad0:	21bff91e 	bne	r4,r6,818ab8 <__alt_data_end+0xff818ab8>
  818ad4:	29c00826 	beq	r5,r7,818af8 <__eqdf2+0x7c>
  818ad8:	103ff71e 	bne	r2,zero,818ab8 <__alt_data_end+0xff818ab8>
  818adc:	5104b03a 	or	r2,r10,r4
  818ae0:	1004c03a 	cmpne	r2,r2,zero
  818ae4:	f800283a 	ret
  818ae8:	5112b03a 	or	r9,r10,r4
  818aec:	483fef26 	beq	r9,zero,818aac <__alt_data_end+0xff818aac>
  818af0:	00800044 	movi	r2,1
  818af4:	f800283a 	ret
  818af8:	0005883a 	mov	r2,zero
  818afc:	f800283a 	ret

00818b00 <__gedf2>:
  818b00:	2804d53a 	srli	r2,r5,20
  818b04:	3806d53a 	srli	r3,r7,20
  818b08:	02000434 	movhi	r8,16
  818b0c:	423fffc4 	addi	r8,r8,-1
  818b10:	0241ffc4 	movi	r9,2047
  818b14:	1081ffcc 	andi	r2,r2,2047
  818b18:	2a14703a 	and	r10,r5,r8
  818b1c:	1a46703a 	and	r3,r3,r9
  818b20:	3a10703a 	and	r8,r7,r8
  818b24:	280ad7fa 	srli	r5,r5,31
  818b28:	380ed7fa 	srli	r7,r7,31
  818b2c:	12400b26 	beq	r2,r9,818b5c <__gedf2+0x5c>
  818b30:	1a401626 	beq	r3,r9,818b8c <__gedf2+0x8c>
  818b34:	10000c1e 	bne	r2,zero,818b68 <__gedf2+0x68>
  818b38:	5112b03a 	or	r9,r10,r4
  818b3c:	4813003a 	cmpeq	r9,r9,zero
  818b40:	4817883a 	mov	r11,r9
  818b44:	18000c1e 	bne	r3,zero,818b78 <__gedf2+0x78>
  818b48:	4198b03a 	or	r12,r8,r6
  818b4c:	60000a1e 	bne	r12,zero,818b78 <__gedf2+0x78>
  818b50:	48001326 	beq	r9,zero,818ba0 <__gedf2+0xa0>
  818b54:	0005883a 	mov	r2,zero
  818b58:	f800283a 	ret
  818b5c:	5112b03a 	or	r9,r10,r4
  818b60:	4800191e 	bne	r9,zero,818bc8 <__gedf2+0xc8>
  818b64:	18800926 	beq	r3,r2,818b8c <__gedf2+0x8c>
  818b68:	18000b1e 	bne	r3,zero,818b98 <__gedf2+0x98>
  818b6c:	4192b03a 	or	r9,r8,r6
  818b70:	0017883a 	mov	r11,zero
  818b74:	48000a26 	beq	r9,zero,818ba0 <__gedf2+0xa0>
  818b78:	39c03fcc 	andi	r7,r7,255
  818b7c:	58000726 	beq	r11,zero,818b9c <__gedf2+0x9c>
  818b80:	3800081e 	bne	r7,zero,818ba4 <__gedf2+0xa4>
  818b84:	00bfffc4 	movi	r2,-1
  818b88:	f800283a 	ret
  818b8c:	4192b03a 	or	r9,r8,r6
  818b90:	48000d1e 	bne	r9,zero,818bc8 <__gedf2+0xc8>
  818b94:	103fe826 	beq	r2,zero,818b38 <__alt_data_end+0xff818b38>
  818b98:	39c03fcc 	andi	r7,r7,255
  818b9c:	29c00326 	beq	r5,r7,818bac <__gedf2+0xac>
  818ba0:	283ff81e 	bne	r5,zero,818b84 <__alt_data_end+0xff818b84>
  818ba4:	00800044 	movi	r2,1
  818ba8:	f800283a 	ret
  818bac:	18bffc16 	blt	r3,r2,818ba0 <__alt_data_end+0xff818ba0>
  818bb0:	10c00316 	blt	r2,r3,818bc0 <__gedf2+0xc0>
  818bb4:	42bffa36 	bltu	r8,r10,818ba0 <__alt_data_end+0xff818ba0>
  818bb8:	52000526 	beq	r10,r8,818bd0 <__gedf2+0xd0>
  818bbc:	523fe52e 	bgeu	r10,r8,818b54 <__alt_data_end+0xff818b54>
  818bc0:	283ff026 	beq	r5,zero,818b84 <__alt_data_end+0xff818b84>
  818bc4:	003ff706 	br	818ba4 <__alt_data_end+0xff818ba4>
  818bc8:	00bfff84 	movi	r2,-2
  818bcc:	f800283a 	ret
  818bd0:	313ff336 	bltu	r6,r4,818ba0 <__alt_data_end+0xff818ba0>
  818bd4:	21bfdf2e 	bgeu	r4,r6,818b54 <__alt_data_end+0xff818b54>
  818bd8:	283fea26 	beq	r5,zero,818b84 <__alt_data_end+0xff818b84>
  818bdc:	003ff106 	br	818ba4 <__alt_data_end+0xff818ba4>

00818be0 <__ledf2>:
  818be0:	2804d53a 	srli	r2,r5,20
  818be4:	3810d53a 	srli	r8,r7,20
  818be8:	00c00434 	movhi	r3,16
  818bec:	18ffffc4 	addi	r3,r3,-1
  818bf0:	0241ffc4 	movi	r9,2047
  818bf4:	1081ffcc 	andi	r2,r2,2047
  818bf8:	28d4703a 	and	r10,r5,r3
  818bfc:	4250703a 	and	r8,r8,r9
  818c00:	38c6703a 	and	r3,r7,r3
  818c04:	280ad7fa 	srli	r5,r5,31
  818c08:	380ed7fa 	srli	r7,r7,31
  818c0c:	12400b26 	beq	r2,r9,818c3c <__ledf2+0x5c>
  818c10:	42401926 	beq	r8,r9,818c78 <__ledf2+0x98>
  818c14:	10000c1e 	bne	r2,zero,818c48 <__ledf2+0x68>
  818c18:	5112b03a 	or	r9,r10,r4
  818c1c:	4813003a 	cmpeq	r9,r9,zero
  818c20:	4817883a 	mov	r11,r9
  818c24:	40000f26 	beq	r8,zero,818c64 <__ledf2+0x84>
  818c28:	39c03fcc 	andi	r7,r7,255
  818c2c:	58001826 	beq	r11,zero,818c90 <__ledf2+0xb0>
  818c30:	38000a1e 	bne	r7,zero,818c5c <__ledf2+0x7c>
  818c34:	00bfffc4 	movi	r2,-1
  818c38:	f800283a 	ret
  818c3c:	5112b03a 	or	r9,r10,r4
  818c40:	48000f1e 	bne	r9,zero,818c80 <__ledf2+0xa0>
  818c44:	40800c26 	beq	r8,r2,818c78 <__ledf2+0x98>
  818c48:	4000101e 	bne	r8,zero,818c8c <__ledf2+0xac>
  818c4c:	1992b03a 	or	r9,r3,r6
  818c50:	0017883a 	mov	r11,zero
  818c54:	483ff41e 	bne	r9,zero,818c28 <__alt_data_end+0xff818c28>
  818c58:	283ff61e 	bne	r5,zero,818c34 <__alt_data_end+0xff818c34>
  818c5c:	00800044 	movi	r2,1
  818c60:	f800283a 	ret
  818c64:	1998b03a 	or	r12,r3,r6
  818c68:	603fef1e 	bne	r12,zero,818c28 <__alt_data_end+0xff818c28>
  818c6c:	483ffa26 	beq	r9,zero,818c58 <__alt_data_end+0xff818c58>
  818c70:	0005883a 	mov	r2,zero
  818c74:	f800283a 	ret
  818c78:	1992b03a 	or	r9,r3,r6
  818c7c:	48000226 	beq	r9,zero,818c88 <__ledf2+0xa8>
  818c80:	00800084 	movi	r2,2
  818c84:	f800283a 	ret
  818c88:	103fe326 	beq	r2,zero,818c18 <__alt_data_end+0xff818c18>
  818c8c:	39c03fcc 	andi	r7,r7,255
  818c90:	29fff11e 	bne	r5,r7,818c58 <__alt_data_end+0xff818c58>
  818c94:	40bff016 	blt	r8,r2,818c58 <__alt_data_end+0xff818c58>
  818c98:	12000316 	blt	r2,r8,818ca8 <__ledf2+0xc8>
  818c9c:	1abfee36 	bltu	r3,r10,818c58 <__alt_data_end+0xff818c58>
  818ca0:	50c00326 	beq	r10,r3,818cb0 <__ledf2+0xd0>
  818ca4:	50fff22e 	bgeu	r10,r3,818c70 <__alt_data_end+0xff818c70>
  818ca8:	283fe226 	beq	r5,zero,818c34 <__alt_data_end+0xff818c34>
  818cac:	003feb06 	br	818c5c <__alt_data_end+0xff818c5c>
  818cb0:	313fe936 	bltu	r6,r4,818c58 <__alt_data_end+0xff818c58>
  818cb4:	21bfee2e 	bgeu	r4,r6,818c70 <__alt_data_end+0xff818c70>
  818cb8:	283fde26 	beq	r5,zero,818c34 <__alt_data_end+0xff818c34>
  818cbc:	003fe706 	br	818c5c <__alt_data_end+0xff818c5c>

00818cc0 <__muldf3>:
  818cc0:	defff204 	addi	sp,sp,-56
  818cc4:	2804d53a 	srli	r2,r5,20
  818cc8:	dd800a15 	stw	r22,40(sp)
  818ccc:	282cd7fa 	srli	r22,r5,31
  818cd0:	dc000415 	stw	r16,16(sp)
  818cd4:	04000434 	movhi	r16,16
  818cd8:	df000c15 	stw	fp,48(sp)
  818cdc:	dd000815 	stw	r20,32(sp)
  818ce0:	dcc00715 	stw	r19,28(sp)
  818ce4:	dc800615 	stw	r18,24(sp)
  818ce8:	dc400515 	stw	r17,20(sp)
  818cec:	843fffc4 	addi	r16,r16,-1
  818cf0:	dfc00d15 	stw	ra,52(sp)
  818cf4:	ddc00b15 	stw	r23,44(sp)
  818cf8:	dd400915 	stw	r21,36(sp)
  818cfc:	1501ffcc 	andi	r20,r2,2047
  818d00:	2023883a 	mov	r17,r4
  818d04:	2025883a 	mov	r18,r4
  818d08:	2c20703a 	and	r16,r5,r16
  818d0c:	b027883a 	mov	r19,r22
  818d10:	b7003fcc 	andi	fp,r22,255
  818d14:	a0005926 	beq	r20,zero,818e7c <__muldf3+0x1bc>
  818d18:	0081ffc4 	movi	r2,2047
  818d1c:	a0803426 	beq	r20,r2,818df0 <__muldf3+0x130>
  818d20:	84000434 	orhi	r16,r16,16
  818d24:	2004d77a 	srli	r2,r4,29
  818d28:	802090fa 	slli	r16,r16,3
  818d2c:	202490fa 	slli	r18,r4,3
  818d30:	a53f0044 	addi	r20,r20,-1023
  818d34:	80a0b03a 	or	r16,r16,r2
  818d38:	002b883a 	mov	r21,zero
  818d3c:	0015883a 	mov	r10,zero
  818d40:	3812d53a 	srli	r9,r7,20
  818d44:	3806d7fa 	srli	r3,r7,31
  818d48:	02000434 	movhi	r8,16
  818d4c:	423fffc4 	addi	r8,r8,-1
  818d50:	4941ffcc 	andi	r5,r9,2047
  818d54:	302f883a 	mov	r23,r6
  818d58:	3a22703a 	and	r17,r7,r8
  818d5c:	1ac03fcc 	andi	r11,r3,255
  818d60:	28006226 	beq	r5,zero,818eec <__muldf3+0x22c>
  818d64:	0081ffc4 	movi	r2,2047
  818d68:	28805a26 	beq	r5,r2,818ed4 <__muldf3+0x214>
  818d6c:	8a000434 	orhi	r8,r17,16
  818d70:	3004d77a 	srli	r2,r6,29
  818d74:	401090fa 	slli	r8,r8,3
  818d78:	302e90fa 	slli	r23,r6,3
  818d7c:	297f0044 	addi	r5,r5,-1023
  818d80:	40a2b03a 	or	r17,r8,r2
  818d84:	0013883a 	mov	r9,zero
  818d88:	4d4cb03a 	or	r6,r9,r21
  818d8c:	300c90ba 	slli	r6,r6,2
  818d90:	020020b4 	movhi	r8,130
  818d94:	42236c04 	addi	r8,r8,-29264
  818d98:	320d883a 	add	r6,r6,r8
  818d9c:	31800017 	ldw	r6,0(r6)
  818da0:	a14b883a 	add	r5,r20,r5
  818da4:	1dacf03a 	xor	r22,r3,r22
  818da8:	2b000044 	addi	r12,r5,1
  818dac:	3000683a 	jmp	r6
  818db0:	00818fec 	andhi	r2,zero,1599
  818db4:	00818fd8 	cmpnei	r2,zero,1599
  818db8:	00818fd8 	cmpnei	r2,zero,1599
  818dbc:	00818fc4 	movi	r2,1599
  818dc0:	00818e0c 	andi	r2,zero,1592
  818dc4:	00818e0c 	andi	r2,zero,1592
  818dc8:	00818fac 	andhi	r2,zero,1598
  818dcc:	00818fc4 	movi	r2,1599
  818dd0:	00818e0c 	andi	r2,zero,1592
  818dd4:	00818fac 	andhi	r2,zero,1598
  818dd8:	00818e0c 	andi	r2,zero,1592
  818ddc:	00818fc4 	movi	r2,1599
  818de0:	00818e10 	cmplti	r2,zero,1592
  818de4:	00818e10 	cmplti	r2,zero,1592
  818de8:	00818e10 	cmplti	r2,zero,1592
  818dec:	008191e8 	cmpgeui	r2,zero,1607
  818df0:	8104b03a 	or	r2,r16,r4
  818df4:	10006a1e 	bne	r2,zero,818fa0 <__muldf3+0x2e0>
  818df8:	05400204 	movi	r21,8
  818dfc:	0021883a 	mov	r16,zero
  818e00:	0025883a 	mov	r18,zero
  818e04:	02800084 	movi	r10,2
  818e08:	003fcd06 	br	818d40 <__alt_data_end+0xff818d40>
  818e0c:	b039883a 	mov	fp,r22
  818e10:	00800084 	movi	r2,2
  818e14:	50804e1e 	bne	r10,r2,818f50 <__muldf3+0x290>
  818e18:	e4c0004c 	andi	r19,fp,1
  818e1c:	0101ffc4 	movi	r4,2047
  818e20:	0021883a 	mov	r16,zero
  818e24:	0025883a 	mov	r18,zero
  818e28:	2008953a 	slli	r4,r4,20
  818e2c:	98c03fcc 	andi	r3,r19,255
  818e30:	01400434 	movhi	r5,16
  818e34:	297fffc4 	addi	r5,r5,-1
  818e38:	180697fa 	slli	r3,r3,31
  818e3c:	8160703a 	and	r16,r16,r5
  818e40:	8120b03a 	or	r16,r16,r4
  818e44:	80c6b03a 	or	r3,r16,r3
  818e48:	9005883a 	mov	r2,r18
  818e4c:	dfc00d17 	ldw	ra,52(sp)
  818e50:	df000c17 	ldw	fp,48(sp)
  818e54:	ddc00b17 	ldw	r23,44(sp)
  818e58:	dd800a17 	ldw	r22,40(sp)
  818e5c:	dd400917 	ldw	r21,36(sp)
  818e60:	dd000817 	ldw	r20,32(sp)
  818e64:	dcc00717 	ldw	r19,28(sp)
  818e68:	dc800617 	ldw	r18,24(sp)
  818e6c:	dc400517 	ldw	r17,20(sp)
  818e70:	dc000417 	ldw	r16,16(sp)
  818e74:	dec00e04 	addi	sp,sp,56
  818e78:	f800283a 	ret
  818e7c:	8104b03a 	or	r2,r16,r4
  818e80:	10004226 	beq	r2,zero,818f8c <__muldf3+0x2cc>
  818e84:	8000f926 	beq	r16,zero,81926c <__muldf3+0x5ac>
  818e88:	8009883a 	mov	r4,r16
  818e8c:	d9800315 	stw	r6,12(sp)
  818e90:	d9c00015 	stw	r7,0(sp)
  818e94:	0819eb00 	call	819eb0 <__clzsi2>
  818e98:	d9800317 	ldw	r6,12(sp)
  818e9c:	d9c00017 	ldw	r7,0(sp)
  818ea0:	1007883a 	mov	r3,r2
  818ea4:	01000a04 	movi	r4,40
  818ea8:	18bffe04 	addi	r2,r3,-8
  818eac:	20c9c83a 	sub	r4,r4,r3
  818eb0:	80a0983a 	sll	r16,r16,r2
  818eb4:	8908d83a 	srl	r4,r17,r4
  818eb8:	88a4983a 	sll	r18,r17,r2
  818ebc:	2420b03a 	or	r16,r4,r16
  818ec0:	017f0344 	movi	r5,-1011
  818ec4:	28e9c83a 	sub	r20,r5,r3
  818ec8:	002b883a 	mov	r21,zero
  818ecc:	0015883a 	mov	r10,zero
  818ed0:	003f9b06 	br	818d40 <__alt_data_end+0xff818d40>
  818ed4:	8984b03a 	or	r2,r17,r6
  818ed8:	10002a1e 	bne	r2,zero,818f84 <__muldf3+0x2c4>
  818edc:	0023883a 	mov	r17,zero
  818ee0:	002f883a 	mov	r23,zero
  818ee4:	02400084 	movi	r9,2
  818ee8:	003fa706 	br	818d88 <__alt_data_end+0xff818d88>
  818eec:	8984b03a 	or	r2,r17,r6
  818ef0:	10002026 	beq	r2,zero,818f74 <__muldf3+0x2b4>
  818ef4:	8800cc26 	beq	r17,zero,819228 <__muldf3+0x568>
  818ef8:	8809883a 	mov	r4,r17
  818efc:	d8c00215 	stw	r3,8(sp)
  818f00:	d9800315 	stw	r6,12(sp)
  818f04:	da800015 	stw	r10,0(sp)
  818f08:	dac00115 	stw	r11,4(sp)
  818f0c:	0819eb00 	call	819eb0 <__clzsi2>
  818f10:	d8c00217 	ldw	r3,8(sp)
  818f14:	d9800317 	ldw	r6,12(sp)
  818f18:	da800017 	ldw	r10,0(sp)
  818f1c:	dac00117 	ldw	r11,4(sp)
  818f20:	1009883a 	mov	r4,r2
  818f24:	01400a04 	movi	r5,40
  818f28:	25fffe04 	addi	r23,r4,-8
  818f2c:	290bc83a 	sub	r5,r5,r4
  818f30:	8dd0983a 	sll	r8,r17,r23
  818f34:	314ad83a 	srl	r5,r6,r5
  818f38:	35ee983a 	sll	r23,r6,r23
  818f3c:	2a22b03a 	or	r17,r5,r8
  818f40:	017f0344 	movi	r5,-1011
  818f44:	290bc83a 	sub	r5,r5,r4
  818f48:	0013883a 	mov	r9,zero
  818f4c:	003f8e06 	br	818d88 <__alt_data_end+0xff818d88>
  818f50:	008000c4 	movi	r2,3
  818f54:	50811d26 	beq	r10,r2,8193cc <__muldf3+0x70c>
  818f58:	00800044 	movi	r2,1
  818f5c:	5080e01e 	bne	r10,r2,8192e0 <__muldf3+0x620>
  818f60:	e0a6703a 	and	r19,fp,r2
  818f64:	0009883a 	mov	r4,zero
  818f68:	0021883a 	mov	r16,zero
  818f6c:	0025883a 	mov	r18,zero
  818f70:	003fad06 	br	818e28 <__alt_data_end+0xff818e28>
  818f74:	0023883a 	mov	r17,zero
  818f78:	002f883a 	mov	r23,zero
  818f7c:	02400044 	movi	r9,1
  818f80:	003f8106 	br	818d88 <__alt_data_end+0xff818d88>
  818f84:	024000c4 	movi	r9,3
  818f88:	003f7f06 	br	818d88 <__alt_data_end+0xff818d88>
  818f8c:	05400104 	movi	r21,4
  818f90:	0021883a 	mov	r16,zero
  818f94:	0025883a 	mov	r18,zero
  818f98:	02800044 	movi	r10,1
  818f9c:	003f6806 	br	818d40 <__alt_data_end+0xff818d40>
  818fa0:	05400304 	movi	r21,12
  818fa4:	028000c4 	movi	r10,3
  818fa8:	003f6506 	br	818d40 <__alt_data_end+0xff818d40>
  818fac:	04000434 	movhi	r16,16
  818fb0:	0027883a 	mov	r19,zero
  818fb4:	843fffc4 	addi	r16,r16,-1
  818fb8:	04bfffc4 	movi	r18,-1
  818fbc:	0101ffc4 	movi	r4,2047
  818fc0:	003f9906 	br	818e28 <__alt_data_end+0xff818e28>
  818fc4:	8821883a 	mov	r16,r17
  818fc8:	b825883a 	mov	r18,r23
  818fcc:	5839883a 	mov	fp,r11
  818fd0:	4815883a 	mov	r10,r9
  818fd4:	003f8e06 	br	818e10 <__alt_data_end+0xff818e10>
  818fd8:	8821883a 	mov	r16,r17
  818fdc:	b825883a 	mov	r18,r23
  818fe0:	b039883a 	mov	fp,r22
  818fe4:	4815883a 	mov	r10,r9
  818fe8:	003f8906 	br	818e10 <__alt_data_end+0xff818e10>
  818fec:	b80cd43a 	srli	r6,r23,16
  818ff0:	9006d43a 	srli	r3,r18,16
  818ff4:	90bfffcc 	andi	r2,r18,65535
  818ff8:	bdffffcc 	andi	r23,r23,65535
  818ffc:	b891383a 	mul	r8,r23,r2
  819000:	b8c9383a 	mul	r4,r23,r3
  819004:	309b383a 	mul	r13,r6,r2
  819008:	400ed43a 	srli	r7,r8,16
  81900c:	30df383a 	mul	r15,r6,r3
  819010:	235b883a 	add	r13,r4,r13
  819014:	69db883a 	add	r13,r13,r7
  819018:	6900022e 	bgeu	r13,r4,819024 <__muldf3+0x364>
  81901c:	01000074 	movhi	r4,1
  819020:	791f883a 	add	r15,r15,r4
  819024:	8828d43a 	srli	r20,r17,16
  819028:	8c7fffcc 	andi	r17,r17,65535
  81902c:	888f383a 	mul	r7,r17,r2
  819030:	88d3383a 	mul	r9,r17,r3
  819034:	a0a5383a 	mul	r18,r20,r2
  819038:	3816d43a 	srli	r11,r7,16
  81903c:	6814943a 	slli	r10,r13,16
  819040:	4ca5883a 	add	r18,r9,r18
  819044:	423fffcc 	andi	r8,r8,65535
  819048:	92e5883a 	add	r18,r18,r11
  81904c:	6808d43a 	srli	r4,r13,16
  819050:	5215883a 	add	r10,r10,r8
  819054:	a0c7383a 	mul	r3,r20,r3
  819058:	9240022e 	bgeu	r18,r9,819064 <__muldf3+0x3a4>
  81905c:	00800074 	movhi	r2,1
  819060:	1887883a 	add	r3,r3,r2
  819064:	802ad43a 	srli	r21,r16,16
  819068:	80bfffcc 	andi	r2,r16,65535
  81906c:	b893383a 	mul	r9,r23,r2
  819070:	3091383a 	mul	r8,r6,r2
  819074:	bd6f383a 	mul	r23,r23,r21
  819078:	9026943a 	slli	r19,r18,16
  81907c:	481ad43a 	srli	r13,r9,16
  819080:	9024d43a 	srli	r18,r18,16
  819084:	39ffffcc 	andi	r7,r7,65535
  819088:	ba11883a 	add	r8,r23,r8
  81908c:	99e7883a 	add	r19,r19,r7
  819090:	4351883a 	add	r8,r8,r13
  819094:	1c97883a 	add	r11,r3,r18
  819098:	354d383a 	mul	r6,r6,r21
  81909c:	9925883a 	add	r18,r19,r4
  8190a0:	45c0022e 	bgeu	r8,r23,8190ac <__muldf3+0x3ec>
  8190a4:	00c00074 	movhi	r3,1
  8190a8:	30cd883a 	add	r6,r6,r3
  8190ac:	8889383a 	mul	r4,r17,r2
  8190b0:	8d63383a 	mul	r17,r17,r21
  8190b4:	a085383a 	mul	r2,r20,r2
  8190b8:	200ed43a 	srli	r7,r4,16
  8190bc:	401cd43a 	srli	r14,r8,16
  8190c0:	401a943a 	slli	r13,r8,16
  8190c4:	8885883a 	add	r2,r17,r2
  8190c8:	4a3fffcc 	andi	r8,r9,65535
  8190cc:	11c5883a 	add	r2,r2,r7
  8190d0:	339d883a 	add	r14,r6,r14
  8190d4:	6a11883a 	add	r8,r13,r8
  8190d8:	a561383a 	mul	r16,r20,r21
  8190dc:	1440022e 	bgeu	r2,r17,8190e8 <__muldf3+0x428>
  8190e0:	00c00074 	movhi	r3,1
  8190e4:	80e1883a 	add	r16,r16,r3
  8190e8:	1006943a 	slli	r3,r2,16
  8190ec:	213fffcc 	andi	r4,r4,65535
  8190f0:	93db883a 	add	r13,r18,r15
  8190f4:	1909883a 	add	r4,r3,r4
  8190f8:	22c7883a 	add	r3,r4,r11
  8190fc:	6cd3803a 	cmpltu	r9,r13,r19
  819100:	6a09883a 	add	r4,r13,r8
  819104:	1a5b883a 	add	r13,r3,r9
  819108:	2211803a 	cmpltu	r8,r4,r8
  81910c:	734d883a 	add	r6,r14,r13
  819110:	100ed43a 	srli	r7,r2,16
  819114:	6a53803a 	cmpltu	r9,r13,r9
  819118:	3205883a 	add	r2,r6,r8
  81911c:	1ac7803a 	cmpltu	r3,r3,r11
  819120:	1211803a 	cmpltu	r8,r2,r8
  819124:	48c6b03a 	or	r3,r9,r3
  819128:	338d803a 	cmpltu	r6,r6,r14
  81912c:	19c7883a 	add	r3,r3,r7
  819130:	418cb03a 	or	r6,r8,r6
  819134:	1987883a 	add	r3,r3,r6
  819138:	2024927a 	slli	r18,r4,9
  81913c:	1c07883a 	add	r3,r3,r16
  819140:	1806927a 	slli	r3,r3,9
  819144:	1020d5fa 	srli	r16,r2,23
  819148:	2008d5fa 	srli	r4,r4,23
  81914c:	9294b03a 	or	r10,r18,r10
  819150:	1004927a 	slli	r2,r2,9
  819154:	5024c03a 	cmpne	r18,r10,zero
  819158:	1c20b03a 	or	r16,r3,r16
  81915c:	9108b03a 	or	r4,r18,r4
  819160:	80c0402c 	andhi	r3,r16,256
  819164:	20a4b03a 	or	r18,r4,r2
  819168:	18000726 	beq	r3,zero,819188 <__muldf3+0x4c8>
  81916c:	9006d07a 	srli	r3,r18,1
  819170:	800897fa 	slli	r4,r16,31
  819174:	9080004c 	andi	r2,r18,1
  819178:	8020d07a 	srli	r16,r16,1
  81917c:	10c4b03a 	or	r2,r2,r3
  819180:	1124b03a 	or	r18,r2,r4
  819184:	600b883a 	mov	r5,r12
  819188:	2900ffc4 	addi	r4,r5,1023
  81918c:	01004b0e 	bge	zero,r4,8192bc <__muldf3+0x5fc>
  819190:	908001cc 	andi	r2,r18,7
  819194:	10000726 	beq	r2,zero,8191b4 <__muldf3+0x4f4>
  819198:	90c003cc 	andi	r3,r18,15
  81919c:	00800104 	movi	r2,4
  8191a0:	18800426 	beq	r3,r2,8191b4 <__muldf3+0x4f4>
  8191a4:	9087883a 	add	r3,r18,r2
  8191a8:	1c85803a 	cmpltu	r2,r3,r18
  8191ac:	80a1883a 	add	r16,r16,r2
  8191b0:	1825883a 	mov	r18,r3
  8191b4:	8080402c 	andhi	r2,r16,256
  8191b8:	10000426 	beq	r2,zero,8191cc <__muldf3+0x50c>
  8191bc:	00bfc034 	movhi	r2,65280
  8191c0:	10bfffc4 	addi	r2,r2,-1
  8191c4:	29010004 	addi	r4,r5,1024
  8191c8:	80a0703a 	and	r16,r16,r2
  8191cc:	0081ff84 	movi	r2,2046
  8191d0:	1100320e 	bge	r2,r4,81929c <__muldf3+0x5dc>
  8191d4:	b4c0004c 	andi	r19,r22,1
  8191d8:	0101ffc4 	movi	r4,2047
  8191dc:	0021883a 	mov	r16,zero
  8191e0:	0025883a 	mov	r18,zero
  8191e4:	003f1006 	br	818e28 <__alt_data_end+0xff818e28>
  8191e8:	8080022c 	andhi	r2,r16,8
  8191ec:	10000926 	beq	r2,zero,819214 <__muldf3+0x554>
  8191f0:	8880022c 	andhi	r2,r17,8
  8191f4:	1000071e 	bne	r2,zero,819214 <__muldf3+0x554>
  8191f8:	00800434 	movhi	r2,16
  8191fc:	8c000234 	orhi	r16,r17,8
  819200:	10bfffc4 	addi	r2,r2,-1
  819204:	1827883a 	mov	r19,r3
  819208:	80a0703a 	and	r16,r16,r2
  81920c:	b825883a 	mov	r18,r23
  819210:	003f6a06 	br	818fbc <__alt_data_end+0xff818fbc>
  819214:	00800434 	movhi	r2,16
  819218:	84000234 	orhi	r16,r16,8
  81921c:	10bfffc4 	addi	r2,r2,-1
  819220:	80a0703a 	and	r16,r16,r2
  819224:	003f6506 	br	818fbc <__alt_data_end+0xff818fbc>
  819228:	3009883a 	mov	r4,r6
  81922c:	d8c00215 	stw	r3,8(sp)
  819230:	d9800315 	stw	r6,12(sp)
  819234:	da800015 	stw	r10,0(sp)
  819238:	dac00115 	stw	r11,4(sp)
  81923c:	0819eb00 	call	819eb0 <__clzsi2>
  819240:	11000804 	addi	r4,r2,32
  819244:	014009c4 	movi	r5,39
  819248:	d8c00217 	ldw	r3,8(sp)
  81924c:	d9800317 	ldw	r6,12(sp)
  819250:	da800017 	ldw	r10,0(sp)
  819254:	dac00117 	ldw	r11,4(sp)
  819258:	293f320e 	bge	r5,r4,818f24 <__alt_data_end+0xff818f24>
  81925c:	10bffe04 	addi	r2,r2,-8
  819260:	b8a2983a 	sll	r17,r23,r2
  819264:	002f883a 	mov	r23,zero
  819268:	003f3506 	br	818f40 <__alt_data_end+0xff818f40>
  81926c:	d9800315 	stw	r6,12(sp)
  819270:	d9c00015 	stw	r7,0(sp)
  819274:	0819eb00 	call	819eb0 <__clzsi2>
  819278:	10c00804 	addi	r3,r2,32
  81927c:	010009c4 	movi	r4,39
  819280:	d9800317 	ldw	r6,12(sp)
  819284:	d9c00017 	ldw	r7,0(sp)
  819288:	20ff060e 	bge	r4,r3,818ea4 <__alt_data_end+0xff818ea4>
  81928c:	10bffe04 	addi	r2,r2,-8
  819290:	88a0983a 	sll	r16,r17,r2
  819294:	0025883a 	mov	r18,zero
  819298:	003f0906 	br	818ec0 <__alt_data_end+0xff818ec0>
  81929c:	9004d0fa 	srli	r2,r18,3
  8192a0:	8024977a 	slli	r18,r16,29
  8192a4:	8020927a 	slli	r16,r16,9
  8192a8:	2101ffcc 	andi	r4,r4,2047
  8192ac:	90a4b03a 	or	r18,r18,r2
  8192b0:	8020d33a 	srli	r16,r16,12
  8192b4:	b4c0004c 	andi	r19,r22,1
  8192b8:	003edb06 	br	818e28 <__alt_data_end+0xff818e28>
  8192bc:	00ff0084 	movi	r3,-1022
  8192c0:	1947c83a 	sub	r3,r3,r5
  8192c4:	00800e04 	movi	r2,56
  8192c8:	10c0080e 	bge	r2,r3,8192ec <__muldf3+0x62c>
  8192cc:	b4c0004c 	andi	r19,r22,1
  8192d0:	0009883a 	mov	r4,zero
  8192d4:	0021883a 	mov	r16,zero
  8192d8:	0025883a 	mov	r18,zero
  8192dc:	003ed206 	br	818e28 <__alt_data_end+0xff818e28>
  8192e0:	600b883a 	mov	r5,r12
  8192e4:	e02d883a 	mov	r22,fp
  8192e8:	003fa706 	br	819188 <__alt_data_end+0xff819188>
  8192ec:	008007c4 	movi	r2,31
  8192f0:	10c01816 	blt	r2,r3,819354 <__muldf3+0x694>
  8192f4:	29410784 	addi	r5,r5,1054
  8192f8:	8144983a 	sll	r2,r16,r5
  8192fc:	90c8d83a 	srl	r4,r18,r3
  819300:	914a983a 	sll	r5,r18,r5
  819304:	80c6d83a 	srl	r3,r16,r3
  819308:	2088b03a 	or	r4,r4,r2
  81930c:	2804c03a 	cmpne	r2,r5,zero
  819310:	2084b03a 	or	r2,r4,r2
  819314:	110001cc 	andi	r4,r2,7
  819318:	20000726 	beq	r4,zero,819338 <__muldf3+0x678>
  81931c:	114003cc 	andi	r5,r2,15
  819320:	01000104 	movi	r4,4
  819324:	29000426 	beq	r5,r4,819338 <__muldf3+0x678>
  819328:	11000104 	addi	r4,r2,4
  81932c:	2085803a 	cmpltu	r2,r4,r2
  819330:	1887883a 	add	r3,r3,r2
  819334:	2005883a 	mov	r2,r4
  819338:	1900202c 	andhi	r4,r3,128
  81933c:	20001826 	beq	r4,zero,8193a0 <__muldf3+0x6e0>
  819340:	b4c0004c 	andi	r19,r22,1
  819344:	01000044 	movi	r4,1
  819348:	0021883a 	mov	r16,zero
  81934c:	0025883a 	mov	r18,zero
  819350:	003eb506 	br	818e28 <__alt_data_end+0xff818e28>
  819354:	00bef884 	movi	r2,-1054
  819358:	1145c83a 	sub	r2,r2,r5
  81935c:	8088d83a 	srl	r4,r16,r2
  819360:	00800804 	movi	r2,32
  819364:	18801726 	beq	r3,r2,8193c4 <__muldf3+0x704>
  819368:	28810f84 	addi	r2,r5,1086
  81936c:	8084983a 	sll	r2,r16,r2
  819370:	1484b03a 	or	r2,r2,r18
  819374:	1004c03a 	cmpne	r2,r2,zero
  819378:	1104b03a 	or	r2,r2,r4
  81937c:	10c001cc 	andi	r3,r2,7
  819380:	18000b1e 	bne	r3,zero,8193b0 <__muldf3+0x6f0>
  819384:	0021883a 	mov	r16,zero
  819388:	1004d0fa 	srli	r2,r2,3
  81938c:	b4c0004c 	andi	r19,r22,1
  819390:	0009883a 	mov	r4,zero
  819394:	10e4b03a 	or	r18,r2,r3
  819398:	003ea306 	br	818e28 <__alt_data_end+0xff818e28>
  81939c:	0007883a 	mov	r3,zero
  8193a0:	1820927a 	slli	r16,r3,9
  8193a4:	1806977a 	slli	r3,r3,29
  8193a8:	8020d33a 	srli	r16,r16,12
  8193ac:	003ff606 	br	819388 <__alt_data_end+0xff819388>
  8193b0:	110003cc 	andi	r4,r2,15
  8193b4:	00c00104 	movi	r3,4
  8193b8:	20fff826 	beq	r4,r3,81939c <__alt_data_end+0xff81939c>
  8193bc:	0007883a 	mov	r3,zero
  8193c0:	003fd906 	br	819328 <__alt_data_end+0xff819328>
  8193c4:	0005883a 	mov	r2,zero
  8193c8:	003fe906 	br	819370 <__alt_data_end+0xff819370>
  8193cc:	00800434 	movhi	r2,16
  8193d0:	84000234 	orhi	r16,r16,8
  8193d4:	10bfffc4 	addi	r2,r2,-1
  8193d8:	e4c0004c 	andi	r19,fp,1
  8193dc:	80a0703a 	and	r16,r16,r2
  8193e0:	003ef606 	br	818fbc <__alt_data_end+0xff818fbc>

008193e4 <__subdf3>:
  8193e4:	00c00434 	movhi	r3,16
  8193e8:	18ffffc4 	addi	r3,r3,-1
  8193ec:	defffb04 	addi	sp,sp,-20
  8193f0:	28d2703a 	and	r9,r5,r3
  8193f4:	3814d53a 	srli	r10,r7,20
  8193f8:	38c6703a 	and	r3,r7,r3
  8193fc:	3004d77a 	srli	r2,r6,29
  819400:	dc800215 	stw	r18,8(sp)
  819404:	dc000015 	stw	r16,0(sp)
  819408:	2824d7fa 	srli	r18,r5,31
  81940c:	2820d53a 	srli	r16,r5,20
  819410:	481290fa 	slli	r9,r9,3
  819414:	200ad77a 	srli	r5,r4,29
  819418:	180690fa 	slli	r3,r3,3
  81941c:	dc400115 	stw	r17,4(sp)
  819420:	dfc00415 	stw	ra,16(sp)
  819424:	202290fa 	slli	r17,r4,3
  819428:	dcc00315 	stw	r19,12(sp)
  81942c:	5281ffcc 	andi	r10,r10,2047
  819430:	0101ffc4 	movi	r4,2047
  819434:	9011883a 	mov	r8,r18
  819438:	8401ffcc 	andi	r16,r16,2047
  81943c:	94803fcc 	andi	r18,r18,255
  819440:	494ab03a 	or	r5,r9,r5
  819444:	380ed7fa 	srli	r7,r7,31
  819448:	1886b03a 	or	r3,r3,r2
  81944c:	300c90fa 	slli	r6,r6,3
  819450:	51009026 	beq	r10,r4,819694 <__subdf3+0x2b0>
  819454:	39c0005c 	xori	r7,r7,1
  819458:	8285c83a 	sub	r2,r16,r10
  81945c:	91c06f26 	beq	r18,r7,81961c <__subdf3+0x238>
  819460:	0080b10e 	bge	zero,r2,819728 <__subdf3+0x344>
  819464:	50002a1e 	bne	r10,zero,819510 <__subdf3+0x12c>
  819468:	1988b03a 	or	r4,r3,r6
  81946c:	2000941e 	bne	r4,zero,8196c0 <__subdf3+0x2dc>
  819470:	888001cc 	andi	r2,r17,7
  819474:	10005b26 	beq	r2,zero,8195e4 <__subdf3+0x200>
  819478:	88c003cc 	andi	r3,r17,15
  81947c:	00800104 	movi	r2,4
  819480:	18805826 	beq	r3,r2,8195e4 <__subdf3+0x200>
  819484:	88c00104 	addi	r3,r17,4
  819488:	1c63803a 	cmpltu	r17,r3,r17
  81948c:	2c4b883a 	add	r5,r5,r17
  819490:	2880202c 	andhi	r2,r5,128
  819494:	9200004c 	andi	r8,r18,1
  819498:	1823883a 	mov	r17,r3
  81949c:	10005426 	beq	r2,zero,8195f0 <__subdf3+0x20c>
  8194a0:	84000044 	addi	r16,r16,1
  8194a4:	0081ffc4 	movi	r2,2047
  8194a8:	8080bf26 	beq	r16,r2,8197a8 <__subdf3+0x3c4>
  8194ac:	013fe034 	movhi	r4,65408
  8194b0:	213fffc4 	addi	r4,r4,-1
  8194b4:	290a703a 	and	r5,r5,r4
  8194b8:	2804977a 	slli	r2,r5,29
  8194bc:	280a927a 	slli	r5,r5,9
  8194c0:	8822d0fa 	srli	r17,r17,3
  8194c4:	8401ffcc 	andi	r16,r16,2047
  8194c8:	2808d33a 	srli	r4,r5,12
  8194cc:	1444b03a 	or	r2,r2,r17
  8194d0:	8401ffcc 	andi	r16,r16,2047
  8194d4:	800a953a 	slli	r5,r16,20
  8194d8:	40c03fcc 	andi	r3,r8,255
  8194dc:	04000434 	movhi	r16,16
  8194e0:	180697fa 	slli	r3,r3,31
  8194e4:	843fffc4 	addi	r16,r16,-1
  8194e8:	2420703a 	and	r16,r4,r16
  8194ec:	8160b03a 	or	r16,r16,r5
  8194f0:	80c6b03a 	or	r3,r16,r3
  8194f4:	dfc00417 	ldw	ra,16(sp)
  8194f8:	dcc00317 	ldw	r19,12(sp)
  8194fc:	dc800217 	ldw	r18,8(sp)
  819500:	dc400117 	ldw	r17,4(sp)
  819504:	dc000017 	ldw	r16,0(sp)
  819508:	dec00504 	addi	sp,sp,20
  81950c:	f800283a 	ret
  819510:	0101ffc4 	movi	r4,2047
  819514:	813fd626 	beq	r16,r4,819470 <__alt_data_end+0xff819470>
  819518:	18c02034 	orhi	r3,r3,128
  81951c:	01000e04 	movi	r4,56
  819520:	2080a416 	blt	r4,r2,8197b4 <__subdf3+0x3d0>
  819524:	010007c4 	movi	r4,31
  819528:	2080c716 	blt	r4,r2,819848 <__subdf3+0x464>
  81952c:	01000804 	movi	r4,32
  819530:	2089c83a 	sub	r4,r4,r2
  819534:	1910983a 	sll	r8,r3,r4
  819538:	308ed83a 	srl	r7,r6,r2
  81953c:	3108983a 	sll	r4,r6,r4
  819540:	1884d83a 	srl	r2,r3,r2
  819544:	41ccb03a 	or	r6,r8,r7
  819548:	2008c03a 	cmpne	r4,r4,zero
  81954c:	310cb03a 	or	r6,r6,r4
  819550:	898dc83a 	sub	r6,r17,r6
  819554:	89a3803a 	cmpltu	r17,r17,r6
  819558:	288bc83a 	sub	r5,r5,r2
  81955c:	2c4bc83a 	sub	r5,r5,r17
  819560:	3023883a 	mov	r17,r6
  819564:	2880202c 	andhi	r2,r5,128
  819568:	10006b26 	beq	r2,zero,819718 <__subdf3+0x334>
  81956c:	04c02034 	movhi	r19,128
  819570:	9cffffc4 	addi	r19,r19,-1
  819574:	2ce6703a 	and	r19,r5,r19
  819578:	98007c26 	beq	r19,zero,81976c <__subdf3+0x388>
  81957c:	9809883a 	mov	r4,r19
  819580:	0819eb00 	call	819eb0 <__clzsi2>
  819584:	10fffe04 	addi	r3,r2,-8
  819588:	010007c4 	movi	r4,31
  81958c:	20c07d16 	blt	r4,r3,819784 <__subdf3+0x3a0>
  819590:	01400a04 	movi	r5,40
  819594:	2885c83a 	sub	r2,r5,r2
  819598:	888ad83a 	srl	r5,r17,r2
  81959c:	98e6983a 	sll	r19,r19,r3
  8195a0:	88e2983a 	sll	r17,r17,r3
  8195a4:	2ce6b03a 	or	r19,r5,r19
  8195a8:	1c007a16 	blt	r3,r16,819794 <__subdf3+0x3b0>
  8195ac:	1c21c83a 	sub	r16,r3,r16
  8195b0:	81400044 	addi	r5,r16,1
  8195b4:	00c007c4 	movi	r3,31
  8195b8:	19409616 	blt	r3,r5,819814 <__subdf3+0x430>
  8195bc:	1c21c83a 	sub	r16,r3,r16
  8195c0:	8c08983a 	sll	r4,r17,r16
  8195c4:	8946d83a 	srl	r3,r17,r5
  8195c8:	9c20983a 	sll	r16,r19,r16
  8195cc:	2008c03a 	cmpne	r4,r4,zero
  8195d0:	994ad83a 	srl	r5,r19,r5
  8195d4:	1c06b03a 	or	r3,r3,r16
  8195d8:	1922b03a 	or	r17,r3,r4
  8195dc:	0021883a 	mov	r16,zero
  8195e0:	003fa306 	br	819470 <__alt_data_end+0xff819470>
  8195e4:	2880202c 	andhi	r2,r5,128
  8195e8:	9200004c 	andi	r8,r18,1
  8195ec:	103fac1e 	bne	r2,zero,8194a0 <__alt_data_end+0xff8194a0>
  8195f0:	2804977a 	slli	r2,r5,29
  8195f4:	8822d0fa 	srli	r17,r17,3
  8195f8:	00c1ffc4 	movi	r3,2047
  8195fc:	280ad0fa 	srli	r5,r5,3
  819600:	1444b03a 	or	r2,r2,r17
  819604:	80c02726 	beq	r16,r3,8196a4 <__subdf3+0x2c0>
  819608:	01000434 	movhi	r4,16
  81960c:	213fffc4 	addi	r4,r4,-1
  819610:	80e0703a 	and	r16,r16,r3
  819614:	2908703a 	and	r4,r5,r4
  819618:	003fad06 	br	8194d0 <__alt_data_end+0xff8194d0>
  81961c:	0080690e 	bge	zero,r2,8197c4 <__subdf3+0x3e0>
  819620:	50002f26 	beq	r10,zero,8196e0 <__subdf3+0x2fc>
  819624:	0101ffc4 	movi	r4,2047
  819628:	813f9126 	beq	r16,r4,819470 <__alt_data_end+0xff819470>
  81962c:	18c02034 	orhi	r3,r3,128
  819630:	01000e04 	movi	r4,56
  819634:	2080b00e 	bge	r4,r2,8198f8 <__subdf3+0x514>
  819638:	198cb03a 	or	r6,r3,r6
  81963c:	300ec03a 	cmpne	r7,r6,zero
  819640:	0005883a 	mov	r2,zero
  819644:	3c4f883a 	add	r7,r7,r17
  819648:	3c63803a 	cmpltu	r17,r7,r17
  81964c:	114b883a 	add	r5,r2,r5
  819650:	2c4b883a 	add	r5,r5,r17
  819654:	3823883a 	mov	r17,r7
  819658:	2880202c 	andhi	r2,r5,128
  81965c:	10002e26 	beq	r2,zero,819718 <__subdf3+0x334>
  819660:	84000044 	addi	r16,r16,1
  819664:	0081ffc4 	movi	r2,2047
  819668:	8080de26 	beq	r16,r2,8199e4 <__subdf3+0x600>
  81966c:	00bfe034 	movhi	r2,65408
  819670:	10bfffc4 	addi	r2,r2,-1
  819674:	288a703a 	and	r5,r5,r2
  819678:	880cd07a 	srli	r6,r17,1
  81967c:	280897fa 	slli	r4,r5,31
  819680:	88c0004c 	andi	r3,r17,1
  819684:	30e2b03a 	or	r17,r6,r3
  819688:	280ad07a 	srli	r5,r5,1
  81968c:	8922b03a 	or	r17,r17,r4
  819690:	003f7706 	br	819470 <__alt_data_end+0xff819470>
  819694:	1984b03a 	or	r2,r3,r6
  819698:	103f6e26 	beq	r2,zero,819454 <__alt_data_end+0xff819454>
  81969c:	39c03fcc 	andi	r7,r7,255
  8196a0:	003f6d06 	br	819458 <__alt_data_end+0xff819458>
  8196a4:	1146b03a 	or	r3,r2,r5
  8196a8:	18003f26 	beq	r3,zero,8197a8 <__subdf3+0x3c4>
  8196ac:	00c00434 	movhi	r3,16
  8196b0:	29000234 	orhi	r4,r5,8
  8196b4:	18ffffc4 	addi	r3,r3,-1
  8196b8:	20c8703a 	and	r4,r4,r3
  8196bc:	003f8406 	br	8194d0 <__alt_data_end+0xff8194d0>
  8196c0:	10bfffc4 	addi	r2,r2,-1
  8196c4:	1000501e 	bne	r2,zero,819808 <__subdf3+0x424>
  8196c8:	898fc83a 	sub	r7,r17,r6
  8196cc:	89e3803a 	cmpltu	r17,r17,r7
  8196d0:	28cbc83a 	sub	r5,r5,r3
  8196d4:	2c4bc83a 	sub	r5,r5,r17
  8196d8:	3823883a 	mov	r17,r7
  8196dc:	003fa106 	br	819564 <__alt_data_end+0xff819564>
  8196e0:	1988b03a 	or	r4,r3,r6
  8196e4:	203f6226 	beq	r4,zero,819470 <__alt_data_end+0xff819470>
  8196e8:	10bfffc4 	addi	r2,r2,-1
  8196ec:	10009b1e 	bne	r2,zero,81995c <__subdf3+0x578>
  8196f0:	344d883a 	add	r6,r6,r17
  8196f4:	3463803a 	cmpltu	r17,r6,r17
  8196f8:	194b883a 	add	r5,r3,r5
  8196fc:	2c4b883a 	add	r5,r5,r17
  819700:	3023883a 	mov	r17,r6
  819704:	003fd406 	br	819658 <__alt_data_end+0xff819658>
  819708:	1106b03a 	or	r3,r2,r4
  81970c:	1800b426 	beq	r3,zero,8199e0 <__subdf3+0x5fc>
  819710:	100b883a 	mov	r5,r2
  819714:	2023883a 	mov	r17,r4
  819718:	888001cc 	andi	r2,r17,7
  81971c:	103f561e 	bne	r2,zero,819478 <__alt_data_end+0xff819478>
  819720:	9200004c 	andi	r8,r18,1
  819724:	003fb206 	br	8195f0 <__alt_data_end+0xff8195f0>
  819728:	1000531e 	bne	r2,zero,819878 <__subdf3+0x494>
  81972c:	80800044 	addi	r2,r16,1
  819730:	1081ffcc 	andi	r2,r2,2047
  819734:	01000044 	movi	r4,1
  819738:	2080a00e 	bge	r4,r2,8199bc <__subdf3+0x5d8>
  81973c:	8985c83a 	sub	r2,r17,r6
  819740:	8889803a 	cmpltu	r4,r17,r2
  819744:	28e7c83a 	sub	r19,r5,r3
  819748:	9927c83a 	sub	r19,r19,r4
  81974c:	9900202c 	andhi	r4,r19,128
  819750:	20006226 	beq	r4,zero,8198dc <__subdf3+0x4f8>
  819754:	3463c83a 	sub	r17,r6,r17
  819758:	194bc83a 	sub	r5,r3,r5
  81975c:	344d803a 	cmpltu	r6,r6,r17
  819760:	29a7c83a 	sub	r19,r5,r6
  819764:	3825883a 	mov	r18,r7
  819768:	983f841e 	bne	r19,zero,81957c <__alt_data_end+0xff81957c>
  81976c:	8809883a 	mov	r4,r17
  819770:	0819eb00 	call	819eb0 <__clzsi2>
  819774:	10800804 	addi	r2,r2,32
  819778:	10fffe04 	addi	r3,r2,-8
  81977c:	010007c4 	movi	r4,31
  819780:	20ff830e 	bge	r4,r3,819590 <__alt_data_end+0xff819590>
  819784:	14fff604 	addi	r19,r2,-40
  819788:	8ce6983a 	sll	r19,r17,r19
  81978c:	0023883a 	mov	r17,zero
  819790:	1c3f860e 	bge	r3,r16,8195ac <__alt_data_end+0xff8195ac>
  819794:	017fe034 	movhi	r5,65408
  819798:	297fffc4 	addi	r5,r5,-1
  81979c:	80e1c83a 	sub	r16,r16,r3
  8197a0:	994a703a 	and	r5,r19,r5
  8197a4:	003f3206 	br	819470 <__alt_data_end+0xff819470>
  8197a8:	0009883a 	mov	r4,zero
  8197ac:	0005883a 	mov	r2,zero
  8197b0:	003f4706 	br	8194d0 <__alt_data_end+0xff8194d0>
  8197b4:	198cb03a 	or	r6,r3,r6
  8197b8:	300cc03a 	cmpne	r6,r6,zero
  8197bc:	0005883a 	mov	r2,zero
  8197c0:	003f6306 	br	819550 <__alt_data_end+0xff819550>
  8197c4:	10009d1e 	bne	r2,zero,819a3c <__subdf3+0x658>
  8197c8:	81c00044 	addi	r7,r16,1
  8197cc:	3881ffcc 	andi	r2,r7,2047
  8197d0:	02400044 	movi	r9,1
  8197d4:	4880680e 	bge	r9,r2,819978 <__subdf3+0x594>
  8197d8:	0081ffc4 	movi	r2,2047
  8197dc:	3880ae26 	beq	r7,r2,819a98 <__subdf3+0x6b4>
  8197e0:	344d883a 	add	r6,r6,r17
  8197e4:	3463803a 	cmpltu	r17,r6,r17
  8197e8:	194b883a 	add	r5,r3,r5
  8197ec:	2c4b883a 	add	r5,r5,r17
  8197f0:	282297fa 	slli	r17,r5,31
  8197f4:	300cd07a 	srli	r6,r6,1
  8197f8:	280ad07a 	srli	r5,r5,1
  8197fc:	3821883a 	mov	r16,r7
  819800:	89a2b03a 	or	r17,r17,r6
  819804:	003f1a06 	br	819470 <__alt_data_end+0xff819470>
  819808:	0101ffc4 	movi	r4,2047
  81980c:	813f431e 	bne	r16,r4,81951c <__alt_data_end+0xff81951c>
  819810:	003f1706 	br	819470 <__alt_data_end+0xff819470>
  819814:	80bff844 	addi	r2,r16,-31
  819818:	00c00804 	movi	r3,32
  81981c:	9884d83a 	srl	r2,r19,r2
  819820:	28c05126 	beq	r5,r3,819968 <__subdf3+0x584>
  819824:	00c00fc4 	movi	r3,63
  819828:	1c21c83a 	sub	r16,r3,r16
  81982c:	9c26983a 	sll	r19,r19,r16
  819830:	9c62b03a 	or	r17,r19,r17
  819834:	8822c03a 	cmpne	r17,r17,zero
  819838:	88a2b03a 	or	r17,r17,r2
  81983c:	000b883a 	mov	r5,zero
  819840:	0021883a 	mov	r16,zero
  819844:	003fb406 	br	819718 <__alt_data_end+0xff819718>
  819848:	113ff804 	addi	r4,r2,-32
  81984c:	01c00804 	movi	r7,32
  819850:	1908d83a 	srl	r4,r3,r4
  819854:	11c04626 	beq	r2,r7,819970 <__subdf3+0x58c>
  819858:	01c01004 	movi	r7,64
  81985c:	3885c83a 	sub	r2,r7,r2
  819860:	1884983a 	sll	r2,r3,r2
  819864:	118cb03a 	or	r6,r2,r6
  819868:	300cc03a 	cmpne	r6,r6,zero
  81986c:	310cb03a 	or	r6,r6,r4
  819870:	0005883a 	mov	r2,zero
  819874:	003f3606 	br	819550 <__alt_data_end+0xff819550>
  819878:	80002b26 	beq	r16,zero,819928 <__subdf3+0x544>
  81987c:	0101ffc4 	movi	r4,2047
  819880:	51006926 	beq	r10,r4,819a28 <__subdf3+0x644>
  819884:	0085c83a 	sub	r2,zero,r2
  819888:	29402034 	orhi	r5,r5,128
  81988c:	01000e04 	movi	r4,56
  819890:	20807d16 	blt	r4,r2,819a88 <__subdf3+0x6a4>
  819894:	010007c4 	movi	r4,31
  819898:	2080d916 	blt	r4,r2,819c00 <__subdf3+0x81c>
  81989c:	01000804 	movi	r4,32
  8198a0:	2089c83a 	sub	r4,r4,r2
  8198a4:	2912983a 	sll	r9,r5,r4
  8198a8:	8890d83a 	srl	r8,r17,r2
  8198ac:	8908983a 	sll	r4,r17,r4
  8198b0:	2884d83a 	srl	r2,r5,r2
  8198b4:	4a22b03a 	or	r17,r9,r8
  8198b8:	2008c03a 	cmpne	r4,r4,zero
  8198bc:	8922b03a 	or	r17,r17,r4
  8198c0:	3463c83a 	sub	r17,r6,r17
  8198c4:	1885c83a 	sub	r2,r3,r2
  8198c8:	344d803a 	cmpltu	r6,r6,r17
  8198cc:	118bc83a 	sub	r5,r2,r6
  8198d0:	5021883a 	mov	r16,r10
  8198d4:	3825883a 	mov	r18,r7
  8198d8:	003f2206 	br	819564 <__alt_data_end+0xff819564>
  8198dc:	9886b03a 	or	r3,r19,r2
  8198e0:	18001c1e 	bne	r3,zero,819954 <__subdf3+0x570>
  8198e4:	0011883a 	mov	r8,zero
  8198e8:	000b883a 	mov	r5,zero
  8198ec:	0023883a 	mov	r17,zero
  8198f0:	0021883a 	mov	r16,zero
  8198f4:	003f3e06 	br	8195f0 <__alt_data_end+0xff8195f0>
  8198f8:	010007c4 	movi	r4,31
  8198fc:	20803c16 	blt	r4,r2,8199f0 <__subdf3+0x60c>
  819900:	01000804 	movi	r4,32
  819904:	2089c83a 	sub	r4,r4,r2
  819908:	1912983a 	sll	r9,r3,r4
  81990c:	308ed83a 	srl	r7,r6,r2
  819910:	3108983a 	sll	r4,r6,r4
  819914:	1884d83a 	srl	r2,r3,r2
  819918:	49ceb03a 	or	r7,r9,r7
  81991c:	2008c03a 	cmpne	r4,r4,zero
  819920:	390eb03a 	or	r7,r7,r4
  819924:	003f4706 	br	819644 <__alt_data_end+0xff819644>
  819928:	2c48b03a 	or	r4,r5,r17
  81992c:	20003e26 	beq	r4,zero,819a28 <__subdf3+0x644>
  819930:	0084303a 	nor	r2,zero,r2
  819934:	10003a1e 	bne	r2,zero,819a20 <__subdf3+0x63c>
  819938:	3463c83a 	sub	r17,r6,r17
  81993c:	194bc83a 	sub	r5,r3,r5
  819940:	344d803a 	cmpltu	r6,r6,r17
  819944:	298bc83a 	sub	r5,r5,r6
  819948:	5021883a 	mov	r16,r10
  81994c:	3825883a 	mov	r18,r7
  819950:	003f0406 	br	819564 <__alt_data_end+0xff819564>
  819954:	1023883a 	mov	r17,r2
  819958:	003f0706 	br	819578 <__alt_data_end+0xff819578>
  81995c:	0101ffc4 	movi	r4,2047
  819960:	813f331e 	bne	r16,r4,819630 <__alt_data_end+0xff819630>
  819964:	003ec206 	br	819470 <__alt_data_end+0xff819470>
  819968:	0027883a 	mov	r19,zero
  81996c:	003fb006 	br	819830 <__alt_data_end+0xff819830>
  819970:	0005883a 	mov	r2,zero
  819974:	003fbb06 	br	819864 <__alt_data_end+0xff819864>
  819978:	2c44b03a 	or	r2,r5,r17
  81997c:	80008b1e 	bne	r16,zero,819bac <__subdf3+0x7c8>
  819980:	1000b526 	beq	r2,zero,819c58 <__subdf3+0x874>
  819984:	1984b03a 	or	r2,r3,r6
  819988:	103eb926 	beq	r2,zero,819470 <__alt_data_end+0xff819470>
  81998c:	3449883a 	add	r4,r6,r17
  819990:	2463803a 	cmpltu	r17,r4,r17
  819994:	194b883a 	add	r5,r3,r5
  819998:	2c4b883a 	add	r5,r5,r17
  81999c:	2880202c 	andhi	r2,r5,128
  8199a0:	2023883a 	mov	r17,r4
  8199a4:	103f5c26 	beq	r2,zero,819718 <__alt_data_end+0xff819718>
  8199a8:	00bfe034 	movhi	r2,65408
  8199ac:	10bfffc4 	addi	r2,r2,-1
  8199b0:	4821883a 	mov	r16,r9
  8199b4:	288a703a 	and	r5,r5,r2
  8199b8:	003ead06 	br	819470 <__alt_data_end+0xff819470>
  8199bc:	2c44b03a 	or	r2,r5,r17
  8199c0:	8000291e 	bne	r16,zero,819a68 <__subdf3+0x684>
  8199c4:	10004f1e 	bne	r2,zero,819b04 <__subdf3+0x720>
  8199c8:	1984b03a 	or	r2,r3,r6
  8199cc:	10000426 	beq	r2,zero,8199e0 <__subdf3+0x5fc>
  8199d0:	180b883a 	mov	r5,r3
  8199d4:	3023883a 	mov	r17,r6
  8199d8:	3825883a 	mov	r18,r7
  8199dc:	003ea406 	br	819470 <__alt_data_end+0xff819470>
  8199e0:	0011883a 	mov	r8,zero
  8199e4:	000b883a 	mov	r5,zero
  8199e8:	0023883a 	mov	r17,zero
  8199ec:	003f0006 	br	8195f0 <__alt_data_end+0xff8195f0>
  8199f0:	11fff804 	addi	r7,r2,-32
  8199f4:	19c8d83a 	srl	r4,r3,r7
  8199f8:	01c00804 	movi	r7,32
  8199fc:	11c07e26 	beq	r2,r7,819bf8 <__subdf3+0x814>
  819a00:	01c01004 	movi	r7,64
  819a04:	3885c83a 	sub	r2,r7,r2
  819a08:	1884983a 	sll	r2,r3,r2
  819a0c:	118cb03a 	or	r6,r2,r6
  819a10:	300ec03a 	cmpne	r7,r6,zero
  819a14:	390eb03a 	or	r7,r7,r4
  819a18:	0005883a 	mov	r2,zero
  819a1c:	003f0906 	br	819644 <__alt_data_end+0xff819644>
  819a20:	0101ffc4 	movi	r4,2047
  819a24:	513f991e 	bne	r10,r4,81988c <__alt_data_end+0xff81988c>
  819a28:	180b883a 	mov	r5,r3
  819a2c:	3023883a 	mov	r17,r6
  819a30:	5021883a 	mov	r16,r10
  819a34:	3825883a 	mov	r18,r7
  819a38:	003e8d06 	br	819470 <__alt_data_end+0xff819470>
  819a3c:	80001a1e 	bne	r16,zero,819aa8 <__subdf3+0x6c4>
  819a40:	2c48b03a 	or	r4,r5,r17
  819a44:	20005526 	beq	r4,zero,819b9c <__subdf3+0x7b8>
  819a48:	0084303a 	nor	r2,zero,r2
  819a4c:	1000511e 	bne	r2,zero,819b94 <__subdf3+0x7b0>
  819a50:	89a3883a 	add	r17,r17,r6
  819a54:	194b883a 	add	r5,r3,r5
  819a58:	898d803a 	cmpltu	r6,r17,r6
  819a5c:	298b883a 	add	r5,r5,r6
  819a60:	5021883a 	mov	r16,r10
  819a64:	003efc06 	br	819658 <__alt_data_end+0xff819658>
  819a68:	1000341e 	bne	r2,zero,819b3c <__subdf3+0x758>
  819a6c:	1984b03a 	or	r2,r3,r6
  819a70:	10006f26 	beq	r2,zero,819c30 <__subdf3+0x84c>
  819a74:	180b883a 	mov	r5,r3
  819a78:	3023883a 	mov	r17,r6
  819a7c:	3825883a 	mov	r18,r7
  819a80:	0401ffc4 	movi	r16,2047
  819a84:	003e7a06 	br	819470 <__alt_data_end+0xff819470>
  819a88:	2c62b03a 	or	r17,r5,r17
  819a8c:	8822c03a 	cmpne	r17,r17,zero
  819a90:	0005883a 	mov	r2,zero
  819a94:	003f8a06 	br	8198c0 <__alt_data_end+0xff8198c0>
  819a98:	3821883a 	mov	r16,r7
  819a9c:	000b883a 	mov	r5,zero
  819aa0:	0023883a 	mov	r17,zero
  819aa4:	003ed206 	br	8195f0 <__alt_data_end+0xff8195f0>
  819aa8:	0101ffc4 	movi	r4,2047
  819aac:	51003b26 	beq	r10,r4,819b9c <__subdf3+0x7b8>
  819ab0:	0085c83a 	sub	r2,zero,r2
  819ab4:	29402034 	orhi	r5,r5,128
  819ab8:	01000e04 	movi	r4,56
  819abc:	20806216 	blt	r4,r2,819c48 <__subdf3+0x864>
  819ac0:	010007c4 	movi	r4,31
  819ac4:	20806b16 	blt	r4,r2,819c74 <__subdf3+0x890>
  819ac8:	01000804 	movi	r4,32
  819acc:	2089c83a 	sub	r4,r4,r2
  819ad0:	2912983a 	sll	r9,r5,r4
  819ad4:	888ed83a 	srl	r7,r17,r2
  819ad8:	8908983a 	sll	r4,r17,r4
  819adc:	2884d83a 	srl	r2,r5,r2
  819ae0:	49e2b03a 	or	r17,r9,r7
  819ae4:	2008c03a 	cmpne	r4,r4,zero
  819ae8:	8922b03a 	or	r17,r17,r4
  819aec:	89a3883a 	add	r17,r17,r6
  819af0:	10c5883a 	add	r2,r2,r3
  819af4:	898d803a 	cmpltu	r6,r17,r6
  819af8:	118b883a 	add	r5,r2,r6
  819afc:	5021883a 	mov	r16,r10
  819b00:	003ed506 	br	819658 <__alt_data_end+0xff819658>
  819b04:	1984b03a 	or	r2,r3,r6
  819b08:	103e5926 	beq	r2,zero,819470 <__alt_data_end+0xff819470>
  819b0c:	8989c83a 	sub	r4,r17,r6
  819b10:	8911803a 	cmpltu	r8,r17,r4
  819b14:	28c5c83a 	sub	r2,r5,r3
  819b18:	1205c83a 	sub	r2,r2,r8
  819b1c:	1200202c 	andhi	r8,r2,128
  819b20:	403ef926 	beq	r8,zero,819708 <__alt_data_end+0xff819708>
  819b24:	3463c83a 	sub	r17,r6,r17
  819b28:	194bc83a 	sub	r5,r3,r5
  819b2c:	344d803a 	cmpltu	r6,r6,r17
  819b30:	298bc83a 	sub	r5,r5,r6
  819b34:	3825883a 	mov	r18,r7
  819b38:	003e4d06 	br	819470 <__alt_data_end+0xff819470>
  819b3c:	1984b03a 	or	r2,r3,r6
  819b40:	10002b26 	beq	r2,zero,819bf0 <__subdf3+0x80c>
  819b44:	2808d0fa 	srli	r4,r5,3
  819b48:	8822d0fa 	srli	r17,r17,3
  819b4c:	280a977a 	slli	r5,r5,29
  819b50:	2080022c 	andhi	r2,r4,8
  819b54:	2c62b03a 	or	r17,r5,r17
  819b58:	10000826 	beq	r2,zero,819b7c <__subdf3+0x798>
  819b5c:	1810d0fa 	srli	r8,r3,3
  819b60:	4080022c 	andhi	r2,r8,8
  819b64:	1000051e 	bne	r2,zero,819b7c <__subdf3+0x798>
  819b68:	300cd0fa 	srli	r6,r6,3
  819b6c:	1804977a 	slli	r2,r3,29
  819b70:	4009883a 	mov	r4,r8
  819b74:	3825883a 	mov	r18,r7
  819b78:	11a2b03a 	or	r17,r2,r6
  819b7c:	880ad77a 	srli	r5,r17,29
  819b80:	200890fa 	slli	r4,r4,3
  819b84:	882290fa 	slli	r17,r17,3
  819b88:	0401ffc4 	movi	r16,2047
  819b8c:	290ab03a 	or	r5,r5,r4
  819b90:	003e3706 	br	819470 <__alt_data_end+0xff819470>
  819b94:	0101ffc4 	movi	r4,2047
  819b98:	513fc71e 	bne	r10,r4,819ab8 <__alt_data_end+0xff819ab8>
  819b9c:	180b883a 	mov	r5,r3
  819ba0:	3023883a 	mov	r17,r6
  819ba4:	5021883a 	mov	r16,r10
  819ba8:	003e3106 	br	819470 <__alt_data_end+0xff819470>
  819bac:	10002d26 	beq	r2,zero,819c64 <__subdf3+0x880>
  819bb0:	1984b03a 	or	r2,r3,r6
  819bb4:	10000e26 	beq	r2,zero,819bf0 <__subdf3+0x80c>
  819bb8:	2808d0fa 	srli	r4,r5,3
  819bbc:	8822d0fa 	srli	r17,r17,3
  819bc0:	280a977a 	slli	r5,r5,29
  819bc4:	2080022c 	andhi	r2,r4,8
  819bc8:	2c62b03a 	or	r17,r5,r17
  819bcc:	103feb26 	beq	r2,zero,819b7c <__alt_data_end+0xff819b7c>
  819bd0:	180ed0fa 	srli	r7,r3,3
  819bd4:	3880022c 	andhi	r2,r7,8
  819bd8:	103fe81e 	bne	r2,zero,819b7c <__alt_data_end+0xff819b7c>
  819bdc:	300cd0fa 	srli	r6,r6,3
  819be0:	1804977a 	slli	r2,r3,29
  819be4:	3809883a 	mov	r4,r7
  819be8:	11a2b03a 	or	r17,r2,r6
  819bec:	003fe306 	br	819b7c <__alt_data_end+0xff819b7c>
  819bf0:	0401ffc4 	movi	r16,2047
  819bf4:	003e1e06 	br	819470 <__alt_data_end+0xff819470>
  819bf8:	0005883a 	mov	r2,zero
  819bfc:	003f8306 	br	819a0c <__alt_data_end+0xff819a0c>
  819c00:	113ff804 	addi	r4,r2,-32
  819c04:	02000804 	movi	r8,32
  819c08:	2908d83a 	srl	r4,r5,r4
  819c0c:	12002526 	beq	r2,r8,819ca4 <__subdf3+0x8c0>
  819c10:	02001004 	movi	r8,64
  819c14:	4085c83a 	sub	r2,r8,r2
  819c18:	288a983a 	sll	r5,r5,r2
  819c1c:	2c62b03a 	or	r17,r5,r17
  819c20:	8822c03a 	cmpne	r17,r17,zero
  819c24:	8922b03a 	or	r17,r17,r4
  819c28:	0005883a 	mov	r2,zero
  819c2c:	003f2406 	br	8198c0 <__alt_data_end+0xff8198c0>
  819c30:	01402034 	movhi	r5,128
  819c34:	0011883a 	mov	r8,zero
  819c38:	297fffc4 	addi	r5,r5,-1
  819c3c:	047ffe04 	movi	r17,-8
  819c40:	0401ffc4 	movi	r16,2047
  819c44:	003e6a06 	br	8195f0 <__alt_data_end+0xff8195f0>
  819c48:	2c62b03a 	or	r17,r5,r17
  819c4c:	8822c03a 	cmpne	r17,r17,zero
  819c50:	0005883a 	mov	r2,zero
  819c54:	003fa506 	br	819aec <__alt_data_end+0xff819aec>
  819c58:	180b883a 	mov	r5,r3
  819c5c:	3023883a 	mov	r17,r6
  819c60:	003e0306 	br	819470 <__alt_data_end+0xff819470>
  819c64:	180b883a 	mov	r5,r3
  819c68:	3023883a 	mov	r17,r6
  819c6c:	0401ffc4 	movi	r16,2047
  819c70:	003dff06 	br	819470 <__alt_data_end+0xff819470>
  819c74:	113ff804 	addi	r4,r2,-32
  819c78:	01c00804 	movi	r7,32
  819c7c:	2908d83a 	srl	r4,r5,r4
  819c80:	11c00a26 	beq	r2,r7,819cac <__subdf3+0x8c8>
  819c84:	01c01004 	movi	r7,64
  819c88:	3885c83a 	sub	r2,r7,r2
  819c8c:	288a983a 	sll	r5,r5,r2
  819c90:	2c62b03a 	or	r17,r5,r17
  819c94:	8822c03a 	cmpne	r17,r17,zero
  819c98:	8922b03a 	or	r17,r17,r4
  819c9c:	0005883a 	mov	r2,zero
  819ca0:	003f9206 	br	819aec <__alt_data_end+0xff819aec>
  819ca4:	000b883a 	mov	r5,zero
  819ca8:	003fdc06 	br	819c1c <__alt_data_end+0xff819c1c>
  819cac:	000b883a 	mov	r5,zero
  819cb0:	003ff706 	br	819c90 <__alt_data_end+0xff819c90>

00819cb4 <__fixdfsi>:
  819cb4:	2806d53a 	srli	r3,r5,20
  819cb8:	00800434 	movhi	r2,16
  819cbc:	10bfffc4 	addi	r2,r2,-1
  819cc0:	18c1ffcc 	andi	r3,r3,2047
  819cc4:	0180ff84 	movi	r6,1022
  819cc8:	2884703a 	and	r2,r5,r2
  819ccc:	280ad7fa 	srli	r5,r5,31
  819cd0:	30c0130e 	bge	r6,r3,819d20 <__fixdfsi+0x6c>
  819cd4:	01810744 	movi	r6,1053
  819cd8:	30c00d16 	blt	r6,r3,819d10 <__fixdfsi+0x5c>
  819cdc:	01810cc4 	movi	r6,1075
  819ce0:	30cdc83a 	sub	r6,r6,r3
  819ce4:	01c007c4 	movi	r7,31
  819ce8:	10800434 	orhi	r2,r2,16
  819cec:	39800e0e 	bge	r7,r6,819d28 <__fixdfsi+0x74>
  819cf0:	010104c4 	movi	r4,1043
  819cf4:	20c7c83a 	sub	r3,r4,r3
  819cf8:	10c6d83a 	srl	r3,r2,r3
  819cfc:	29403fcc 	andi	r5,r5,255
  819d00:	0145c83a 	sub	r2,zero,r5
  819d04:	1884f03a 	xor	r2,r3,r2
  819d08:	1145883a 	add	r2,r2,r5
  819d0c:	f800283a 	ret
  819d10:	00a00034 	movhi	r2,32768
  819d14:	10bfffc4 	addi	r2,r2,-1
  819d18:	2885883a 	add	r2,r5,r2
  819d1c:	f800283a 	ret
  819d20:	0005883a 	mov	r2,zero
  819d24:	f800283a 	ret
  819d28:	18fefb44 	addi	r3,r3,-1043
  819d2c:	2188d83a 	srl	r4,r4,r6
  819d30:	10c6983a 	sll	r3,r2,r3
  819d34:	20c6b03a 	or	r3,r4,r3
  819d38:	003ff006 	br	819cfc <__alt_data_end+0xff819cfc>

00819d3c <__floatsidf>:
  819d3c:	defffd04 	addi	sp,sp,-12
  819d40:	dc400115 	stw	r17,4(sp)
  819d44:	dfc00215 	stw	ra,8(sp)
  819d48:	dc000015 	stw	r16,0(sp)
  819d4c:	2023883a 	mov	r17,r4
  819d50:	20001426 	beq	r4,zero,819da4 <__floatsidf+0x68>
  819d54:	2020d7fa 	srli	r16,r4,31
  819d58:	80000126 	beq	r16,zero,819d60 <__floatsidf+0x24>
  819d5c:	0123c83a 	sub	r17,zero,r4
  819d60:	8809883a 	mov	r4,r17
  819d64:	0819eb00 	call	819eb0 <__clzsi2>
  819d68:	01410784 	movi	r5,1054
  819d6c:	00c00284 	movi	r3,10
  819d70:	288bc83a 	sub	r5,r5,r2
  819d74:	18801c16 	blt	r3,r2,819de8 <__floatsidf+0xac>
  819d78:	00c002c4 	movi	r3,11
  819d7c:	1887c83a 	sub	r3,r3,r2
  819d80:	88c8d83a 	srl	r4,r17,r3
  819d84:	00c00434 	movhi	r3,16
  819d88:	18ffffc4 	addi	r3,r3,-1
  819d8c:	10800544 	addi	r2,r2,21
  819d90:	20c8703a 	and	r4,r4,r3
  819d94:	8884983a 	sll	r2,r17,r2
  819d98:	28c1ffcc 	andi	r3,r5,2047
  819d9c:	800d883a 	mov	r6,r16
  819da0:	00000406 	br	819db4 <__floatsidf+0x78>
  819da4:	000d883a 	mov	r6,zero
  819da8:	0007883a 	mov	r3,zero
  819dac:	0009883a 	mov	r4,zero
  819db0:	0005883a 	mov	r2,zero
  819db4:	180a953a 	slli	r5,r3,20
  819db8:	31803fcc 	andi	r6,r6,255
  819dbc:	00c00434 	movhi	r3,16
  819dc0:	300c97fa 	slli	r6,r6,31
  819dc4:	18ffffc4 	addi	r3,r3,-1
  819dc8:	20c6703a 	and	r3,r4,r3
  819dcc:	1946b03a 	or	r3,r3,r5
  819dd0:	1986b03a 	or	r3,r3,r6
  819dd4:	dfc00217 	ldw	ra,8(sp)
  819dd8:	dc400117 	ldw	r17,4(sp)
  819ddc:	dc000017 	ldw	r16,0(sp)
  819de0:	dec00304 	addi	sp,sp,12
  819de4:	f800283a 	ret
  819de8:	10fffd44 	addi	r3,r2,-11
  819dec:	88c8983a 	sll	r4,r17,r3
  819df0:	00800434 	movhi	r2,16
  819df4:	10bfffc4 	addi	r2,r2,-1
  819df8:	2088703a 	and	r4,r4,r2
  819dfc:	28c1ffcc 	andi	r3,r5,2047
  819e00:	800d883a 	mov	r6,r16
  819e04:	0005883a 	mov	r2,zero
  819e08:	003fea06 	br	819db4 <__alt_data_end+0xff819db4>

00819e0c <__floatunsidf>:
  819e0c:	defffe04 	addi	sp,sp,-8
  819e10:	dc000015 	stw	r16,0(sp)
  819e14:	dfc00115 	stw	ra,4(sp)
  819e18:	2021883a 	mov	r16,r4
  819e1c:	20001026 	beq	r4,zero,819e60 <__floatunsidf+0x54>
  819e20:	0819eb00 	call	819eb0 <__clzsi2>
  819e24:	01410784 	movi	r5,1054
  819e28:	100d883a 	mov	r6,r2
  819e2c:	288bc83a 	sub	r5,r5,r2
  819e30:	00800284 	movi	r2,10
  819e34:	11801616 	blt	r2,r6,819e90 <__floatunsidf+0x84>
  819e38:	008002c4 	movi	r2,11
  819e3c:	1185c83a 	sub	r2,r2,r6
  819e40:	8084d83a 	srl	r2,r16,r2
  819e44:	00c00434 	movhi	r3,16
  819e48:	31c00544 	addi	r7,r6,21
  819e4c:	18ffffc4 	addi	r3,r3,-1
  819e50:	81e0983a 	sll	r16,r16,r7
  819e54:	10cc703a 	and	r6,r2,r3
  819e58:	2941ffcc 	andi	r5,r5,2047
  819e5c:	00000206 	br	819e68 <__floatunsidf+0x5c>
  819e60:	000b883a 	mov	r5,zero
  819e64:	000d883a 	mov	r6,zero
  819e68:	280a953a 	slli	r5,r5,20
  819e6c:	00c00434 	movhi	r3,16
  819e70:	18ffffc4 	addi	r3,r3,-1
  819e74:	30c6703a 	and	r3,r6,r3
  819e78:	8005883a 	mov	r2,r16
  819e7c:	1946b03a 	or	r3,r3,r5
  819e80:	dfc00117 	ldw	ra,4(sp)
  819e84:	dc000017 	ldw	r16,0(sp)
  819e88:	dec00204 	addi	sp,sp,8
  819e8c:	f800283a 	ret
  819e90:	31bffd44 	addi	r6,r6,-11
  819e94:	818c983a 	sll	r6,r16,r6
  819e98:	00800434 	movhi	r2,16
  819e9c:	10bfffc4 	addi	r2,r2,-1
  819ea0:	2941ffcc 	andi	r5,r5,2047
  819ea4:	0021883a 	mov	r16,zero
  819ea8:	308c703a 	and	r6,r6,r2
  819eac:	003fee06 	br	819e68 <__alt_data_end+0xff819e68>

00819eb0 <__clzsi2>:
  819eb0:	00bfffd4 	movui	r2,65535
  819eb4:	11000b36 	bltu	r2,r4,819ee4 <__clzsi2+0x34>
  819eb8:	00803fc4 	movi	r2,255
  819ebc:	1100122e 	bgeu	r2,r4,819f08 <__clzsi2+0x58>
  819ec0:	00c00204 	movi	r3,8
  819ec4:	01400604 	movi	r5,24
  819ec8:	20c8d83a 	srl	r4,r4,r3
  819ecc:	008020b4 	movhi	r2,130
  819ed0:	10b09f04 	addi	r2,r2,-15748
  819ed4:	1109883a 	add	r4,r2,r4
  819ed8:	20800003 	ldbu	r2,0(r4)
  819edc:	2885c83a 	sub	r2,r5,r2
  819ee0:	f800283a 	ret
  819ee4:	00804034 	movhi	r2,256
  819ee8:	10bfffc4 	addi	r2,r2,-1
  819eec:	11000336 	bltu	r2,r4,819efc <__clzsi2+0x4c>
  819ef0:	00c00404 	movi	r3,16
  819ef4:	180b883a 	mov	r5,r3
  819ef8:	003ff306 	br	819ec8 <__alt_data_end+0xff819ec8>
  819efc:	00c00604 	movi	r3,24
  819f00:	01400204 	movi	r5,8
  819f04:	003ff006 	br	819ec8 <__alt_data_end+0xff819ec8>
  819f08:	0007883a 	mov	r3,zero
  819f0c:	01400804 	movi	r5,32
  819f10:	003fed06 	br	819ec8 <__alt_data_end+0xff819ec8>

00819f14 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  819f14:	defff504 	addi	sp,sp,-44
  819f18:	df000a15 	stw	fp,40(sp)
  819f1c:	df000a04 	addi	fp,sp,40
  819f20:	e13ffc15 	stw	r4,-16(fp)
  819f24:	e17ffd15 	stw	r5,-12(fp)
  819f28:	e1bffe15 	stw	r6,-8(fp)
  819f2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  819f30:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  819f34:	008020b4 	movhi	r2,130
  819f38:	10bfc704 	addi	r2,r2,-228
  819f3c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  819f40:	10003f26 	beq	r2,zero,81a040 <alt_alarm_start+0x12c>
  {
    if (alarm)
  819f44:	e0bffc17 	ldw	r2,-16(fp)
  819f48:	10003b26 	beq	r2,zero,81a038 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  819f4c:	e0bffc17 	ldw	r2,-16(fp)
  819f50:	e0fffe17 	ldw	r3,-8(fp)
  819f54:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  819f58:	e0bffc17 	ldw	r2,-16(fp)
  819f5c:	e0ffff17 	ldw	r3,-4(fp)
  819f60:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819f64:	0005303a 	rdctl	r2,status
  819f68:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819f6c:	e0fff817 	ldw	r3,-32(fp)
  819f70:	00bfff84 	movi	r2,-2
  819f74:	1884703a 	and	r2,r3,r2
  819f78:	1001703a 	wrctl	status,r2
  
  return context;
  819f7c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  819f80:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  819f84:	008020b4 	movhi	r2,130
  819f88:	10bfc804 	addi	r2,r2,-224
  819f8c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  819f90:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  819f94:	e0fffd17 	ldw	r3,-12(fp)
  819f98:	e0bff617 	ldw	r2,-40(fp)
  819f9c:	1885883a 	add	r2,r3,r2
  819fa0:	10c00044 	addi	r3,r2,1
  819fa4:	e0bffc17 	ldw	r2,-16(fp)
  819fa8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  819fac:	e0bffc17 	ldw	r2,-16(fp)
  819fb0:	10c00217 	ldw	r3,8(r2)
  819fb4:	e0bff617 	ldw	r2,-40(fp)
  819fb8:	1880042e 	bgeu	r3,r2,819fcc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  819fbc:	e0bffc17 	ldw	r2,-16(fp)
  819fc0:	00c00044 	movi	r3,1
  819fc4:	10c00405 	stb	r3,16(r2)
  819fc8:	00000206 	br	819fd4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  819fcc:	e0bffc17 	ldw	r2,-16(fp)
  819fd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  819fd4:	e0fffc17 	ldw	r3,-16(fp)
  819fd8:	008020b4 	movhi	r2,130
  819fdc:	10b84c04 	addi	r2,r2,-7888
  819fe0:	e0bff915 	stw	r2,-28(fp)
  819fe4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  819fe8:	e0bffa17 	ldw	r2,-24(fp)
  819fec:	e0fff917 	ldw	r3,-28(fp)
  819ff0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  819ff4:	e0bff917 	ldw	r2,-28(fp)
  819ff8:	10c00017 	ldw	r3,0(r2)
  819ffc:	e0bffa17 	ldw	r2,-24(fp)
  81a000:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81a004:	e0bff917 	ldw	r2,-28(fp)
  81a008:	10800017 	ldw	r2,0(r2)
  81a00c:	e0fffa17 	ldw	r3,-24(fp)
  81a010:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81a014:	e0bff917 	ldw	r2,-28(fp)
  81a018:	e0fffa17 	ldw	r3,-24(fp)
  81a01c:	10c00015 	stw	r3,0(r2)
  81a020:	e0bff717 	ldw	r2,-36(fp)
  81a024:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a028:	e0bffb17 	ldw	r2,-20(fp)
  81a02c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81a030:	0005883a 	mov	r2,zero
  81a034:	00000306 	br	81a044 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  81a038:	00bffa84 	movi	r2,-22
  81a03c:	00000106 	br	81a044 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  81a040:	00bfde84 	movi	r2,-134
  }
}
  81a044:	e037883a 	mov	sp,fp
  81a048:	df000017 	ldw	fp,0(sp)
  81a04c:	dec00104 	addi	sp,sp,4
  81a050:	f800283a 	ret

0081a054 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81a054:	defffe04 	addi	sp,sp,-8
  81a058:	dfc00115 	stw	ra,4(sp)
  81a05c:	df000015 	stw	fp,0(sp)
  81a060:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81a064:	008020b4 	movhi	r2,130
  81a068:	10b84904 	addi	r2,r2,-7900
  81a06c:	10800017 	ldw	r2,0(r2)
  81a070:	10000526 	beq	r2,zero,81a088 <alt_get_errno+0x34>
  81a074:	008020b4 	movhi	r2,130
  81a078:	10b84904 	addi	r2,r2,-7900
  81a07c:	10800017 	ldw	r2,0(r2)
  81a080:	103ee83a 	callr	r2
  81a084:	00000206 	br	81a090 <alt_get_errno+0x3c>
  81a088:	008020b4 	movhi	r2,130
  81a08c:	10bfbc04 	addi	r2,r2,-272
}
  81a090:	e037883a 	mov	sp,fp
  81a094:	dfc00117 	ldw	ra,4(sp)
  81a098:	df000017 	ldw	fp,0(sp)
  81a09c:	dec00204 	addi	sp,sp,8
  81a0a0:	f800283a 	ret

0081a0a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  81a0a4:	defffb04 	addi	sp,sp,-20
  81a0a8:	dfc00415 	stw	ra,16(sp)
  81a0ac:	df000315 	stw	fp,12(sp)
  81a0b0:	df000304 	addi	fp,sp,12
  81a0b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  81a0b8:	e0bfff17 	ldw	r2,-4(fp)
  81a0bc:	10000616 	blt	r2,zero,81a0d8 <close+0x34>
  81a0c0:	e0bfff17 	ldw	r2,-4(fp)
  81a0c4:	10c00324 	muli	r3,r2,12
  81a0c8:	008020b4 	movhi	r2,130
  81a0cc:	10b33004 	addi	r2,r2,-13120
  81a0d0:	1885883a 	add	r2,r3,r2
  81a0d4:	00000106 	br	81a0dc <close+0x38>
  81a0d8:	0005883a 	mov	r2,zero
  81a0dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  81a0e0:	e0bffd17 	ldw	r2,-12(fp)
  81a0e4:	10001926 	beq	r2,zero,81a14c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  81a0e8:	e0bffd17 	ldw	r2,-12(fp)
  81a0ec:	10800017 	ldw	r2,0(r2)
  81a0f0:	10800417 	ldw	r2,16(r2)
  81a0f4:	10000626 	beq	r2,zero,81a110 <close+0x6c>
  81a0f8:	e0bffd17 	ldw	r2,-12(fp)
  81a0fc:	10800017 	ldw	r2,0(r2)
  81a100:	10800417 	ldw	r2,16(r2)
  81a104:	e13ffd17 	ldw	r4,-12(fp)
  81a108:	103ee83a 	callr	r2
  81a10c:	00000106 	br	81a114 <close+0x70>
  81a110:	0005883a 	mov	r2,zero
  81a114:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  81a118:	e13fff17 	ldw	r4,-4(fp)
  81a11c:	081ac540 	call	81ac54 <alt_release_fd>
    if (rval < 0)
  81a120:	e0bffe17 	ldw	r2,-8(fp)
  81a124:	1000070e 	bge	r2,zero,81a144 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  81a128:	081a0540 	call	81a054 <alt_get_errno>
  81a12c:	1007883a 	mov	r3,r2
  81a130:	e0bffe17 	ldw	r2,-8(fp)
  81a134:	0085c83a 	sub	r2,zero,r2
  81a138:	18800015 	stw	r2,0(r3)
      return -1;
  81a13c:	00bfffc4 	movi	r2,-1
  81a140:	00000706 	br	81a160 <close+0xbc>
    }
    return 0;
  81a144:	0005883a 	mov	r2,zero
  81a148:	00000506 	br	81a160 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81a14c:	081a0540 	call	81a054 <alt_get_errno>
  81a150:	1007883a 	mov	r3,r2
  81a154:	00801444 	movi	r2,81
  81a158:	18800015 	stw	r2,0(r3)
    return -1;
  81a15c:	00bfffc4 	movi	r2,-1
  }
}
  81a160:	e037883a 	mov	sp,fp
  81a164:	dfc00117 	ldw	ra,4(sp)
  81a168:	df000017 	ldw	fp,0(sp)
  81a16c:	dec00204 	addi	sp,sp,8
  81a170:	f800283a 	ret

0081a174 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  81a174:	defffc04 	addi	sp,sp,-16
  81a178:	df000315 	stw	fp,12(sp)
  81a17c:	df000304 	addi	fp,sp,12
  81a180:	e13ffd15 	stw	r4,-12(fp)
  81a184:	e17ffe15 	stw	r5,-8(fp)
  81a188:	e1bfff15 	stw	r6,-4(fp)
  return len;
  81a18c:	e0bfff17 	ldw	r2,-4(fp)
}
  81a190:	e037883a 	mov	sp,fp
  81a194:	df000017 	ldw	fp,0(sp)
  81a198:	dec00104 	addi	sp,sp,4
  81a19c:	f800283a 	ret

0081a1a0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81a1a0:	defffa04 	addi	sp,sp,-24
  81a1a4:	dfc00515 	stw	ra,20(sp)
  81a1a8:	df000415 	stw	fp,16(sp)
  81a1ac:	df000404 	addi	fp,sp,16
  81a1b0:	e13ffe15 	stw	r4,-8(fp)
  81a1b4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81a1b8:	e0bfff17 	ldw	r2,-4(fp)
  81a1bc:	10800017 	ldw	r2,0(r2)
  81a1c0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81a1c4:	e13ffe17 	ldw	r4,-8(fp)
  81a1c8:	080e8b40 	call	80e8b4 <strlen>
  81a1cc:	10800044 	addi	r2,r2,1
  81a1d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81a1d4:	00000d06 	br	81a20c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81a1d8:	e0bffc17 	ldw	r2,-16(fp)
  81a1dc:	10c00217 	ldw	r3,8(r2)
  81a1e0:	e0bffd17 	ldw	r2,-12(fp)
  81a1e4:	1809883a 	mov	r4,r3
  81a1e8:	e17ffe17 	ldw	r5,-8(fp)
  81a1ec:	100d883a 	mov	r6,r2
  81a1f0:	081b9a00 	call	81b9a0 <memcmp>
  81a1f4:	1000021e 	bne	r2,zero,81a200 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81a1f8:	e0bffc17 	ldw	r2,-16(fp)
  81a1fc:	00000706 	br	81a21c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81a200:	e0bffc17 	ldw	r2,-16(fp)
  81a204:	10800017 	ldw	r2,0(r2)
  81a208:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81a20c:	e0fffc17 	ldw	r3,-16(fp)
  81a210:	e0bfff17 	ldw	r2,-4(fp)
  81a214:	18bff01e 	bne	r3,r2,81a1d8 <__alt_data_end+0xff81a1d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81a218:	0005883a 	mov	r2,zero
}
  81a21c:	e037883a 	mov	sp,fp
  81a220:	dfc00117 	ldw	ra,4(sp)
  81a224:	df000017 	ldw	fp,0(sp)
  81a228:	dec00204 	addi	sp,sp,8
  81a22c:	f800283a 	ret

0081a230 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81a230:	defffe04 	addi	sp,sp,-8
  81a234:	dfc00115 	stw	ra,4(sp)
  81a238:	df000015 	stw	fp,0(sp)
  81a23c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81a240:	008020b4 	movhi	r2,130
  81a244:	10b84904 	addi	r2,r2,-7900
  81a248:	10800017 	ldw	r2,0(r2)
  81a24c:	10000526 	beq	r2,zero,81a264 <alt_get_errno+0x34>
  81a250:	008020b4 	movhi	r2,130
  81a254:	10b84904 	addi	r2,r2,-7900
  81a258:	10800017 	ldw	r2,0(r2)
  81a25c:	103ee83a 	callr	r2
  81a260:	00000206 	br	81a26c <alt_get_errno+0x3c>
  81a264:	008020b4 	movhi	r2,130
  81a268:	10bfbc04 	addi	r2,r2,-272
}
  81a26c:	e037883a 	mov	sp,fp
  81a270:	dfc00117 	ldw	ra,4(sp)
  81a274:	df000017 	ldw	fp,0(sp)
  81a278:	dec00204 	addi	sp,sp,8
  81a27c:	f800283a 	ret

0081a280 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  81a280:	defffb04 	addi	sp,sp,-20
  81a284:	dfc00415 	stw	ra,16(sp)
  81a288:	df000315 	stw	fp,12(sp)
  81a28c:	df000304 	addi	fp,sp,12
  81a290:	e13ffe15 	stw	r4,-8(fp)
  81a294:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81a298:	e0bffe17 	ldw	r2,-8(fp)
  81a29c:	10000616 	blt	r2,zero,81a2b8 <fstat+0x38>
  81a2a0:	e0bffe17 	ldw	r2,-8(fp)
  81a2a4:	10c00324 	muli	r3,r2,12
  81a2a8:	008020b4 	movhi	r2,130
  81a2ac:	10b33004 	addi	r2,r2,-13120
  81a2b0:	1885883a 	add	r2,r3,r2
  81a2b4:	00000106 	br	81a2bc <fstat+0x3c>
  81a2b8:	0005883a 	mov	r2,zero
  81a2bc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  81a2c0:	e0bffd17 	ldw	r2,-12(fp)
  81a2c4:	10001026 	beq	r2,zero,81a308 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  81a2c8:	e0bffd17 	ldw	r2,-12(fp)
  81a2cc:	10800017 	ldw	r2,0(r2)
  81a2d0:	10800817 	ldw	r2,32(r2)
  81a2d4:	10000726 	beq	r2,zero,81a2f4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  81a2d8:	e0bffd17 	ldw	r2,-12(fp)
  81a2dc:	10800017 	ldw	r2,0(r2)
  81a2e0:	10800817 	ldw	r2,32(r2)
  81a2e4:	e13ffd17 	ldw	r4,-12(fp)
  81a2e8:	e17fff17 	ldw	r5,-4(fp)
  81a2ec:	103ee83a 	callr	r2
  81a2f0:	00000a06 	br	81a31c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  81a2f4:	e0bfff17 	ldw	r2,-4(fp)
  81a2f8:	00c80004 	movi	r3,8192
  81a2fc:	10c00115 	stw	r3,4(r2)
      return 0;
  81a300:	0005883a 	mov	r2,zero
  81a304:	00000506 	br	81a31c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81a308:	081a2300 	call	81a230 <alt_get_errno>
  81a30c:	1007883a 	mov	r3,r2
  81a310:	00801444 	movi	r2,81
  81a314:	18800015 	stw	r2,0(r3)
    return -1;
  81a318:	00bfffc4 	movi	r2,-1
  }
}
  81a31c:	e037883a 	mov	sp,fp
  81a320:	dfc00117 	ldw	ra,4(sp)
  81a324:	df000017 	ldw	fp,0(sp)
  81a328:	dec00204 	addi	sp,sp,8
  81a32c:	f800283a 	ret

0081a330 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  81a330:	defff004 	addi	sp,sp,-64
  81a334:	df000f15 	stw	fp,60(sp)
  81a338:	df000f04 	addi	fp,sp,60
  81a33c:	e13ffd15 	stw	r4,-12(fp)
  81a340:	e17ffe15 	stw	r5,-8(fp)
  81a344:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  81a348:	00bffa84 	movi	r2,-22
  81a34c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81a350:	e0bffd17 	ldw	r2,-12(fp)
  81a354:	10800828 	cmpgeui	r2,r2,32
  81a358:	10005c1e 	bne	r2,zero,81a4cc <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a35c:	0005303a 	rdctl	r2,status
  81a360:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a364:	e0fff317 	ldw	r3,-52(fp)
  81a368:	00bfff84 	movi	r2,-2
  81a36c:	1884703a 	and	r2,r3,r2
  81a370:	1001703a 	wrctl	status,r2
  
  return context;
  81a374:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  81a378:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
  81a37c:	008020b4 	movhi	r2,130
  81a380:	108a3d04 	addi	r2,r2,10484
  81a384:	e0fffd17 	ldw	r3,-12(fp)
  81a388:	180690fa 	slli	r3,r3,3
  81a38c:	10c5883a 	add	r2,r2,r3
  81a390:	e0ffff17 	ldw	r3,-4(fp)
  81a394:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  81a398:	008020b4 	movhi	r2,130
  81a39c:	108a3d04 	addi	r2,r2,10484
  81a3a0:	e0fffd17 	ldw	r3,-12(fp)
  81a3a4:	180690fa 	slli	r3,r3,3
  81a3a8:	18c00104 	addi	r3,r3,4
  81a3ac:	10c5883a 	add	r2,r2,r3
  81a3b0:	e0fffe17 	ldw	r3,-8(fp)
  81a3b4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  81a3b8:	e0bfff17 	ldw	r2,-4(fp)
  81a3bc:	10001f26 	beq	r2,zero,81a43c <alt_irq_register+0x10c>
  81a3c0:	e0bffd17 	ldw	r2,-12(fp)
  81a3c4:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a3c8:	0005303a 	rdctl	r2,status
  81a3cc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a3d0:	e0fff517 	ldw	r3,-44(fp)
  81a3d4:	00bfff84 	movi	r2,-2
  81a3d8:	1884703a 	and	r2,r3,r2
  81a3dc:	1001703a 	wrctl	status,r2
  
  return context;
  81a3e0:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81a3e4:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
  81a3e8:	e0bff417 	ldw	r2,-48(fp)
  81a3ec:	00c00044 	movi	r3,1
  81a3f0:	1884983a 	sll	r2,r3,r2
  81a3f4:	1007883a 	mov	r3,r2
  81a3f8:	008020b4 	movhi	r2,130
  81a3fc:	10bfc304 	addi	r2,r2,-244
  81a400:	10800017 	ldw	r2,0(r2)
  81a404:	1886b03a 	or	r3,r3,r2
  81a408:	008020b4 	movhi	r2,130
  81a40c:	10bfc304 	addi	r2,r2,-244
  81a410:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81a414:	008020b4 	movhi	r2,130
  81a418:	10bfc304 	addi	r2,r2,-244
  81a41c:	10800017 	ldw	r2,0(r2)
  81a420:	100170fa 	wrctl	ienable,r2
  81a424:	e0bff617 	ldw	r2,-40(fp)
  81a428:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a42c:	e0bff717 	ldw	r2,-36(fp)
  81a430:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81a434:	0005883a 	mov	r2,zero
  81a438:	00001f06 	br	81a4b8 <alt_irq_register+0x188>
  81a43c:	e0bffd17 	ldw	r2,-12(fp)
  81a440:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a444:	0005303a 	rdctl	r2,status
  81a448:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a44c:	e0fff917 	ldw	r3,-28(fp)
  81a450:	00bfff84 	movi	r2,-2
  81a454:	1884703a 	and	r2,r3,r2
  81a458:	1001703a 	wrctl	status,r2
  
  return context;
  81a45c:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81a460:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
  81a464:	e0bff817 	ldw	r2,-32(fp)
  81a468:	00c00044 	movi	r3,1
  81a46c:	1884983a 	sll	r2,r3,r2
  81a470:	0084303a 	nor	r2,zero,r2
  81a474:	1007883a 	mov	r3,r2
  81a478:	008020b4 	movhi	r2,130
  81a47c:	10bfc304 	addi	r2,r2,-244
  81a480:	10800017 	ldw	r2,0(r2)
  81a484:	1886703a 	and	r3,r3,r2
  81a488:	008020b4 	movhi	r2,130
  81a48c:	10bfc304 	addi	r2,r2,-244
  81a490:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81a494:	008020b4 	movhi	r2,130
  81a498:	10bfc304 	addi	r2,r2,-244
  81a49c:	10800017 	ldw	r2,0(r2)
  81a4a0:	100170fa 	wrctl	ienable,r2
  81a4a4:	e0bffa17 	ldw	r2,-24(fp)
  81a4a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a4ac:	e0bffb17 	ldw	r2,-20(fp)
  81a4b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81a4b4:	0005883a 	mov	r2,zero
  81a4b8:	e0bff115 	stw	r2,-60(fp)
  81a4bc:	e0bff217 	ldw	r2,-56(fp)
  81a4c0:	e0bffc15 	stw	r2,-16(fp)
  81a4c4:	e0bffc17 	ldw	r2,-16(fp)
  81a4c8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  81a4cc:	e0bff117 	ldw	r2,-60(fp)
}
  81a4d0:	e037883a 	mov	sp,fp
  81a4d4:	df000017 	ldw	fp,0(sp)
  81a4d8:	dec00104 	addi	sp,sp,4
  81a4dc:	f800283a 	ret

0081a4e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81a4e0:	defffe04 	addi	sp,sp,-8
  81a4e4:	dfc00115 	stw	ra,4(sp)
  81a4e8:	df000015 	stw	fp,0(sp)
  81a4ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81a4f0:	008020b4 	movhi	r2,130
  81a4f4:	10b84904 	addi	r2,r2,-7900
  81a4f8:	10800017 	ldw	r2,0(r2)
  81a4fc:	10000526 	beq	r2,zero,81a514 <alt_get_errno+0x34>
  81a500:	008020b4 	movhi	r2,130
  81a504:	10b84904 	addi	r2,r2,-7900
  81a508:	10800017 	ldw	r2,0(r2)
  81a50c:	103ee83a 	callr	r2
  81a510:	00000206 	br	81a51c <alt_get_errno+0x3c>
  81a514:	008020b4 	movhi	r2,130
  81a518:	10bfbc04 	addi	r2,r2,-272
}
  81a51c:	e037883a 	mov	sp,fp
  81a520:	dfc00117 	ldw	ra,4(sp)
  81a524:	df000017 	ldw	fp,0(sp)
  81a528:	dec00204 	addi	sp,sp,8
  81a52c:	f800283a 	ret

0081a530 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  81a530:	deffed04 	addi	sp,sp,-76
  81a534:	dfc01215 	stw	ra,72(sp)
  81a538:	df001115 	stw	fp,68(sp)
  81a53c:	df001104 	addi	fp,sp,68
  81a540:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81a544:	e0bfff17 	ldw	r2,-4(fp)
  81a548:	10000616 	blt	r2,zero,81a564 <isatty+0x34>
  81a54c:	e0bfff17 	ldw	r2,-4(fp)
  81a550:	10c00324 	muli	r3,r2,12
  81a554:	008020b4 	movhi	r2,130
  81a558:	10b33004 	addi	r2,r2,-13120
  81a55c:	1885883a 	add	r2,r3,r2
  81a560:	00000106 	br	81a568 <isatty+0x38>
  81a564:	0005883a 	mov	r2,zero
  81a568:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  81a56c:	e0bfef17 	ldw	r2,-68(fp)
  81a570:	10000e26 	beq	r2,zero,81a5ac <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  81a574:	e0bfef17 	ldw	r2,-68(fp)
  81a578:	10800017 	ldw	r2,0(r2)
  81a57c:	10800817 	ldw	r2,32(r2)
  81a580:	1000021e 	bne	r2,zero,81a58c <isatty+0x5c>
    {
      return 1;
  81a584:	00800044 	movi	r2,1
  81a588:	00000d06 	br	81a5c0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  81a58c:	e0bff004 	addi	r2,fp,-64
  81a590:	e13fff17 	ldw	r4,-4(fp)
  81a594:	100b883a 	mov	r5,r2
  81a598:	081a2800 	call	81a280 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  81a59c:	e0bff117 	ldw	r2,-60(fp)
  81a5a0:	10880020 	cmpeqi	r2,r2,8192
  81a5a4:	10803fcc 	andi	r2,r2,255
  81a5a8:	00000506 	br	81a5c0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81a5ac:	081a4e00 	call	81a4e0 <alt_get_errno>
  81a5b0:	1007883a 	mov	r3,r2
  81a5b4:	00801444 	movi	r2,81
  81a5b8:	18800015 	stw	r2,0(r3)
    return 0;
  81a5bc:	0005883a 	mov	r2,zero
  }
}
  81a5c0:	e037883a 	mov	sp,fp
  81a5c4:	dfc00117 	ldw	ra,4(sp)
  81a5c8:	df000017 	ldw	fp,0(sp)
  81a5cc:	dec00204 	addi	sp,sp,8
  81a5d0:	f800283a 	ret

0081a5d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  81a5d4:	defffc04 	addi	sp,sp,-16
  81a5d8:	df000315 	stw	fp,12(sp)
  81a5dc:	df000304 	addi	fp,sp,12
  81a5e0:	e13ffd15 	stw	r4,-12(fp)
  81a5e4:	e17ffe15 	stw	r5,-8(fp)
  81a5e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  81a5ec:	e0fffe17 	ldw	r3,-8(fp)
  81a5f0:	e0bffd17 	ldw	r2,-12(fp)
  81a5f4:	18800c26 	beq	r3,r2,81a628 <alt_load_section+0x54>
  {
    while( to != end )
  81a5f8:	00000806 	br	81a61c <alt_load_section+0x48>
    {
      *to++ = *from++;
  81a5fc:	e0bffe17 	ldw	r2,-8(fp)
  81a600:	10c00104 	addi	r3,r2,4
  81a604:	e0fffe15 	stw	r3,-8(fp)
  81a608:	e0fffd17 	ldw	r3,-12(fp)
  81a60c:	19000104 	addi	r4,r3,4
  81a610:	e13ffd15 	stw	r4,-12(fp)
  81a614:	18c00017 	ldw	r3,0(r3)
  81a618:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  81a61c:	e0fffe17 	ldw	r3,-8(fp)
  81a620:	e0bfff17 	ldw	r2,-4(fp)
  81a624:	18bff51e 	bne	r3,r2,81a5fc <__alt_data_end+0xff81a5fc>
    {
      *to++ = *from++;
    }
  }
}
  81a628:	e037883a 	mov	sp,fp
  81a62c:	df000017 	ldw	fp,0(sp)
  81a630:	dec00104 	addi	sp,sp,4
  81a634:	f800283a 	ret

0081a638 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  81a638:	defffe04 	addi	sp,sp,-8
  81a63c:	dfc00115 	stw	ra,4(sp)
  81a640:	df000015 	stw	fp,0(sp)
  81a644:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  81a648:	010020b4 	movhi	r4,130
  81a64c:	21384e04 	addi	r4,r4,-7880
  81a650:	014020b4 	movhi	r5,130
  81a654:	2970fd04 	addi	r5,r5,-15372
  81a658:	018020b4 	movhi	r6,130
  81a65c:	31b84e04 	addi	r6,r6,-7880
  81a660:	081a5d40 	call	81a5d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  81a664:	01002034 	movhi	r4,128
  81a668:	21000804 	addi	r4,r4,32
  81a66c:	01402034 	movhi	r5,128
  81a670:	29400804 	addi	r5,r5,32
  81a674:	01802034 	movhi	r6,128
  81a678:	31809104 	addi	r6,r6,580
  81a67c:	081a5d40 	call	81a5d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  81a680:	010020b4 	movhi	r4,130
  81a684:	212f3e04 	addi	r4,r4,-17160
  81a688:	014020b4 	movhi	r5,130
  81a68c:	296f3e04 	addi	r5,r5,-17160
  81a690:	018020b4 	movhi	r6,130
  81a694:	31b0fd04 	addi	r6,r6,-15372
  81a698:	081a5d40 	call	81a5d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  81a69c:	081b2ec0 	call	81b2ec <alt_dcache_flush_all>
  alt_icache_flush_all();
  81a6a0:	081b6a40 	call	81b6a4 <alt_icache_flush_all>
}
  81a6a4:	e037883a 	mov	sp,fp
  81a6a8:	dfc00117 	ldw	ra,4(sp)
  81a6ac:	df000017 	ldw	fp,0(sp)
  81a6b0:	dec00204 	addi	sp,sp,8
  81a6b4:	f800283a 	ret

0081a6b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81a6b8:	defffe04 	addi	sp,sp,-8
  81a6bc:	dfc00115 	stw	ra,4(sp)
  81a6c0:	df000015 	stw	fp,0(sp)
  81a6c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81a6c8:	008020b4 	movhi	r2,130
  81a6cc:	10b84904 	addi	r2,r2,-7900
  81a6d0:	10800017 	ldw	r2,0(r2)
  81a6d4:	10000526 	beq	r2,zero,81a6ec <alt_get_errno+0x34>
  81a6d8:	008020b4 	movhi	r2,130
  81a6dc:	10b84904 	addi	r2,r2,-7900
  81a6e0:	10800017 	ldw	r2,0(r2)
  81a6e4:	103ee83a 	callr	r2
  81a6e8:	00000206 	br	81a6f4 <alt_get_errno+0x3c>
  81a6ec:	008020b4 	movhi	r2,130
  81a6f0:	10bfbc04 	addi	r2,r2,-272
}
  81a6f4:	e037883a 	mov	sp,fp
  81a6f8:	dfc00117 	ldw	ra,4(sp)
  81a6fc:	df000017 	ldw	fp,0(sp)
  81a700:	dec00204 	addi	sp,sp,8
  81a704:	f800283a 	ret

0081a708 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  81a708:	defff904 	addi	sp,sp,-28
  81a70c:	dfc00615 	stw	ra,24(sp)
  81a710:	df000515 	stw	fp,20(sp)
  81a714:	df000504 	addi	fp,sp,20
  81a718:	e13ffd15 	stw	r4,-12(fp)
  81a71c:	e17ffe15 	stw	r5,-8(fp)
  81a720:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  81a724:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81a728:	e0bffd17 	ldw	r2,-12(fp)
  81a72c:	10000616 	blt	r2,zero,81a748 <lseek+0x40>
  81a730:	e0bffd17 	ldw	r2,-12(fp)
  81a734:	10c00324 	muli	r3,r2,12
  81a738:	008020b4 	movhi	r2,130
  81a73c:	10b33004 	addi	r2,r2,-13120
  81a740:	1885883a 	add	r2,r3,r2
  81a744:	00000106 	br	81a74c <lseek+0x44>
  81a748:	0005883a 	mov	r2,zero
  81a74c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  81a750:	e0bffc17 	ldw	r2,-16(fp)
  81a754:	10001026 	beq	r2,zero,81a798 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  81a758:	e0bffc17 	ldw	r2,-16(fp)
  81a75c:	10800017 	ldw	r2,0(r2)
  81a760:	10800717 	ldw	r2,28(r2)
  81a764:	10000926 	beq	r2,zero,81a78c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  81a768:	e0bffc17 	ldw	r2,-16(fp)
  81a76c:	10800017 	ldw	r2,0(r2)
  81a770:	10800717 	ldw	r2,28(r2)
  81a774:	e13ffc17 	ldw	r4,-16(fp)
  81a778:	e17ffe17 	ldw	r5,-8(fp)
  81a77c:	e1bfff17 	ldw	r6,-4(fp)
  81a780:	103ee83a 	callr	r2
  81a784:	e0bffb15 	stw	r2,-20(fp)
  81a788:	00000506 	br	81a7a0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  81a78c:	00bfde84 	movi	r2,-134
  81a790:	e0bffb15 	stw	r2,-20(fp)
  81a794:	00000206 	br	81a7a0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  81a798:	00bfebc4 	movi	r2,-81
  81a79c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  81a7a0:	e0bffb17 	ldw	r2,-20(fp)
  81a7a4:	1000070e 	bge	r2,zero,81a7c4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  81a7a8:	081a6b80 	call	81a6b8 <alt_get_errno>
  81a7ac:	1007883a 	mov	r3,r2
  81a7b0:	e0bffb17 	ldw	r2,-20(fp)
  81a7b4:	0085c83a 	sub	r2,zero,r2
  81a7b8:	18800015 	stw	r2,0(r3)
    rc = -1;
  81a7bc:	00bfffc4 	movi	r2,-1
  81a7c0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  81a7c4:	e0bffb17 	ldw	r2,-20(fp)
}
  81a7c8:	e037883a 	mov	sp,fp
  81a7cc:	dfc00117 	ldw	ra,4(sp)
  81a7d0:	df000017 	ldw	fp,0(sp)
  81a7d4:	dec00204 	addi	sp,sp,8
  81a7d8:	f800283a 	ret

0081a7dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  81a7dc:	defffd04 	addi	sp,sp,-12
  81a7e0:	dfc00215 	stw	ra,8(sp)
  81a7e4:	df000115 	stw	fp,4(sp)
  81a7e8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  81a7ec:	0009883a 	mov	r4,zero
  81a7f0:	081b0b00 	call	81b0b0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  81a7f4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  81a7f8:	081b0e40 	call	81b0e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  81a7fc:	010020b4 	movhi	r4,130
  81a800:	2130e204 	addi	r4,r4,-15480
  81a804:	014020b4 	movhi	r5,130
  81a808:	2970e204 	addi	r5,r5,-15480
  81a80c:	018020b4 	movhi	r6,130
  81a810:	31b0e204 	addi	r6,r6,-15480
  81a814:	081b7940 	call	81b794 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  81a818:	081b4240 	call	81b424 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  81a81c:	010020b4 	movhi	r4,130
  81a820:	212d2004 	addi	r4,r4,-19328
  81a824:	081b9540 	call	81b954 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  81a828:	d1278b17 	ldw	r4,-25044(gp)
  81a82c:	d0e78c17 	ldw	r3,-25040(gp)
  81a830:	d0a78d17 	ldw	r2,-25036(gp)
  81a834:	180b883a 	mov	r5,r3
  81a838:	100d883a 	mov	r6,r2
  81a83c:	080ba140 	call	80ba14 <main>
  81a840:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  81a844:	01000044 	movi	r4,1
  81a848:	081a0a40 	call	81a0a4 <close>
  exit (result);
  81a84c:	e13fff17 	ldw	r4,-4(fp)
  81a850:	081b9680 	call	81b968 <exit>

0081a854 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  81a854:	defffe04 	addi	sp,sp,-8
  81a858:	df000115 	stw	fp,4(sp)
  81a85c:	df000104 	addi	fp,sp,4
  81a860:	e13fff15 	stw	r4,-4(fp)
}
  81a864:	e037883a 	mov	sp,fp
  81a868:	df000017 	ldw	fp,0(sp)
  81a86c:	dec00104 	addi	sp,sp,4
  81a870:	f800283a 	ret

0081a874 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  81a874:	defffe04 	addi	sp,sp,-8
  81a878:	df000115 	stw	fp,4(sp)
  81a87c:	df000104 	addi	fp,sp,4
  81a880:	e13fff15 	stw	r4,-4(fp)
}
  81a884:	e037883a 	mov	sp,fp
  81a888:	df000017 	ldw	fp,0(sp)
  81a88c:	dec00104 	addi	sp,sp,4
  81a890:	f800283a 	ret

0081a894 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81a894:	defffe04 	addi	sp,sp,-8
  81a898:	dfc00115 	stw	ra,4(sp)
  81a89c:	df000015 	stw	fp,0(sp)
  81a8a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81a8a4:	008020b4 	movhi	r2,130
  81a8a8:	10b84904 	addi	r2,r2,-7900
  81a8ac:	10800017 	ldw	r2,0(r2)
  81a8b0:	10000526 	beq	r2,zero,81a8c8 <alt_get_errno+0x34>
  81a8b4:	008020b4 	movhi	r2,130
  81a8b8:	10b84904 	addi	r2,r2,-7900
  81a8bc:	10800017 	ldw	r2,0(r2)
  81a8c0:	103ee83a 	callr	r2
  81a8c4:	00000206 	br	81a8d0 <alt_get_errno+0x3c>
  81a8c8:	008020b4 	movhi	r2,130
  81a8cc:	10bfbc04 	addi	r2,r2,-272
}
  81a8d0:	e037883a 	mov	sp,fp
  81a8d4:	dfc00117 	ldw	ra,4(sp)
  81a8d8:	df000017 	ldw	fp,0(sp)
  81a8dc:	dec00204 	addi	sp,sp,8
  81a8e0:	f800283a 	ret

0081a8e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81a8e4:	defffd04 	addi	sp,sp,-12
  81a8e8:	df000215 	stw	fp,8(sp)
  81a8ec:	df000204 	addi	fp,sp,8
  81a8f0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81a8f4:	e0bfff17 	ldw	r2,-4(fp)
  81a8f8:	10800217 	ldw	r2,8(r2)
  81a8fc:	10d00034 	orhi	r3,r2,16384
  81a900:	e0bfff17 	ldw	r2,-4(fp)
  81a904:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81a908:	e03ffe15 	stw	zero,-8(fp)
  81a90c:	00001d06 	br	81a984 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81a910:	008020b4 	movhi	r2,130
  81a914:	10b33004 	addi	r2,r2,-13120
  81a918:	e0fffe17 	ldw	r3,-8(fp)
  81a91c:	18c00324 	muli	r3,r3,12
  81a920:	10c5883a 	add	r2,r2,r3
  81a924:	10c00017 	ldw	r3,0(r2)
  81a928:	e0bfff17 	ldw	r2,-4(fp)
  81a92c:	10800017 	ldw	r2,0(r2)
  81a930:	1880111e 	bne	r3,r2,81a978 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81a934:	008020b4 	movhi	r2,130
  81a938:	10b33004 	addi	r2,r2,-13120
  81a93c:	e0fffe17 	ldw	r3,-8(fp)
  81a940:	18c00324 	muli	r3,r3,12
  81a944:	18c00204 	addi	r3,r3,8
  81a948:	10c5883a 	add	r2,r2,r3
  81a94c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81a950:	1000090e 	bge	r2,zero,81a978 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  81a954:	e0bffe17 	ldw	r2,-8(fp)
  81a958:	10c00324 	muli	r3,r2,12
  81a95c:	008020b4 	movhi	r2,130
  81a960:	10b33004 	addi	r2,r2,-13120
  81a964:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81a968:	e0bfff17 	ldw	r2,-4(fp)
  81a96c:	18800226 	beq	r3,r2,81a978 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81a970:	00bffcc4 	movi	r2,-13
  81a974:	00000a06 	br	81a9a0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81a978:	e0bffe17 	ldw	r2,-8(fp)
  81a97c:	10800044 	addi	r2,r2,1
  81a980:	e0bffe15 	stw	r2,-8(fp)
  81a984:	008020b4 	movhi	r2,130
  81a988:	10b84804 	addi	r2,r2,-7904
  81a98c:	10800017 	ldw	r2,0(r2)
  81a990:	1007883a 	mov	r3,r2
  81a994:	e0bffe17 	ldw	r2,-8(fp)
  81a998:	18bfdd2e 	bgeu	r3,r2,81a910 <__alt_data_end+0xff81a910>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81a99c:	0005883a 	mov	r2,zero
}
  81a9a0:	e037883a 	mov	sp,fp
  81a9a4:	df000017 	ldw	fp,0(sp)
  81a9a8:	dec00104 	addi	sp,sp,4
  81a9ac:	f800283a 	ret

0081a9b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81a9b0:	defff604 	addi	sp,sp,-40
  81a9b4:	dfc00915 	stw	ra,36(sp)
  81a9b8:	df000815 	stw	fp,32(sp)
  81a9bc:	df000804 	addi	fp,sp,32
  81a9c0:	e13ffd15 	stw	r4,-12(fp)
  81a9c4:	e17ffe15 	stw	r5,-8(fp)
  81a9c8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81a9cc:	00bfffc4 	movi	r2,-1
  81a9d0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  81a9d4:	00bffb44 	movi	r2,-19
  81a9d8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  81a9dc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81a9e0:	e13ffd17 	ldw	r4,-12(fp)
  81a9e4:	014020b4 	movhi	r5,130
  81a9e8:	29784604 	addi	r5,r5,-7912
  81a9ec:	081a1a00 	call	81a1a0 <alt_find_dev>
  81a9f0:	e0bff815 	stw	r2,-32(fp)
  81a9f4:	e0bff817 	ldw	r2,-32(fp)
  81a9f8:	1000051e 	bne	r2,zero,81aa10 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81a9fc:	e13ffd17 	ldw	r4,-12(fp)
  81aa00:	081b4dc0 	call	81b4dc <alt_find_file>
  81aa04:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  81aa08:	00800044 	movi	r2,1
  81aa0c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81aa10:	e0bff817 	ldw	r2,-32(fp)
  81aa14:	10002926 	beq	r2,zero,81aabc <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81aa18:	e13ff817 	ldw	r4,-32(fp)
  81aa1c:	081b5f00 	call	81b5f0 <alt_get_fd>
  81aa20:	e0bff915 	stw	r2,-28(fp)
  81aa24:	e0bff917 	ldw	r2,-28(fp)
  81aa28:	1000030e 	bge	r2,zero,81aa38 <open+0x88>
    {
      status = index;
  81aa2c:	e0bff917 	ldw	r2,-28(fp)
  81aa30:	e0bffa15 	stw	r2,-24(fp)
  81aa34:	00002306 	br	81aac4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  81aa38:	e0bff917 	ldw	r2,-28(fp)
  81aa3c:	10c00324 	muli	r3,r2,12
  81aa40:	008020b4 	movhi	r2,130
  81aa44:	10b33004 	addi	r2,r2,-13120
  81aa48:	1885883a 	add	r2,r3,r2
  81aa4c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81aa50:	e0fffe17 	ldw	r3,-8(fp)
  81aa54:	00900034 	movhi	r2,16384
  81aa58:	10bfffc4 	addi	r2,r2,-1
  81aa5c:	1886703a 	and	r3,r3,r2
  81aa60:	e0bffc17 	ldw	r2,-16(fp)
  81aa64:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81aa68:	e0bffb17 	ldw	r2,-20(fp)
  81aa6c:	1000051e 	bne	r2,zero,81aa84 <open+0xd4>
  81aa70:	e13ffc17 	ldw	r4,-16(fp)
  81aa74:	081a8e40 	call	81a8e4 <alt_file_locked>
  81aa78:	e0bffa15 	stw	r2,-24(fp)
  81aa7c:	e0bffa17 	ldw	r2,-24(fp)
  81aa80:	10001016 	blt	r2,zero,81aac4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81aa84:	e0bff817 	ldw	r2,-32(fp)
  81aa88:	10800317 	ldw	r2,12(r2)
  81aa8c:	10000826 	beq	r2,zero,81aab0 <open+0x100>
  81aa90:	e0bff817 	ldw	r2,-32(fp)
  81aa94:	10800317 	ldw	r2,12(r2)
  81aa98:	e13ffc17 	ldw	r4,-16(fp)
  81aa9c:	e17ffd17 	ldw	r5,-12(fp)
  81aaa0:	e1bffe17 	ldw	r6,-8(fp)
  81aaa4:	e1ffff17 	ldw	r7,-4(fp)
  81aaa8:	103ee83a 	callr	r2
  81aaac:	00000106 	br	81aab4 <open+0x104>
  81aab0:	0005883a 	mov	r2,zero
  81aab4:	e0bffa15 	stw	r2,-24(fp)
  81aab8:	00000206 	br	81aac4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81aabc:	00bffb44 	movi	r2,-19
  81aac0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81aac4:	e0bffa17 	ldw	r2,-24(fp)
  81aac8:	1000090e 	bge	r2,zero,81aaf0 <open+0x140>
  {
    alt_release_fd (index);  
  81aacc:	e13ff917 	ldw	r4,-28(fp)
  81aad0:	081ac540 	call	81ac54 <alt_release_fd>
    ALT_ERRNO = -status;
  81aad4:	081a8940 	call	81a894 <alt_get_errno>
  81aad8:	1007883a 	mov	r3,r2
  81aadc:	e0bffa17 	ldw	r2,-24(fp)
  81aae0:	0085c83a 	sub	r2,zero,r2
  81aae4:	18800015 	stw	r2,0(r3)
    return -1;
  81aae8:	00bfffc4 	movi	r2,-1
  81aaec:	00000106 	br	81aaf4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  81aaf0:	e0bff917 	ldw	r2,-28(fp)
}
  81aaf4:	e037883a 	mov	sp,fp
  81aaf8:	dfc00117 	ldw	ra,4(sp)
  81aafc:	df000017 	ldw	fp,0(sp)
  81ab00:	dec00204 	addi	sp,sp,8
  81ab04:	f800283a 	ret

0081ab08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81ab08:	defffe04 	addi	sp,sp,-8
  81ab0c:	dfc00115 	stw	ra,4(sp)
  81ab10:	df000015 	stw	fp,0(sp)
  81ab14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81ab18:	008020b4 	movhi	r2,130
  81ab1c:	10b84904 	addi	r2,r2,-7900
  81ab20:	10800017 	ldw	r2,0(r2)
  81ab24:	10000526 	beq	r2,zero,81ab3c <alt_get_errno+0x34>
  81ab28:	008020b4 	movhi	r2,130
  81ab2c:	10b84904 	addi	r2,r2,-7900
  81ab30:	10800017 	ldw	r2,0(r2)
  81ab34:	103ee83a 	callr	r2
  81ab38:	00000206 	br	81ab44 <alt_get_errno+0x3c>
  81ab3c:	008020b4 	movhi	r2,130
  81ab40:	10bfbc04 	addi	r2,r2,-272
}
  81ab44:	e037883a 	mov	sp,fp
  81ab48:	dfc00117 	ldw	ra,4(sp)
  81ab4c:	df000017 	ldw	fp,0(sp)
  81ab50:	dec00204 	addi	sp,sp,8
  81ab54:	f800283a 	ret

0081ab58 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  81ab58:	defff904 	addi	sp,sp,-28
  81ab5c:	dfc00615 	stw	ra,24(sp)
  81ab60:	df000515 	stw	fp,20(sp)
  81ab64:	df000504 	addi	fp,sp,20
  81ab68:	e13ffd15 	stw	r4,-12(fp)
  81ab6c:	e17ffe15 	stw	r5,-8(fp)
  81ab70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81ab74:	e0bffd17 	ldw	r2,-12(fp)
  81ab78:	10000616 	blt	r2,zero,81ab94 <read+0x3c>
  81ab7c:	e0bffd17 	ldw	r2,-12(fp)
  81ab80:	10c00324 	muli	r3,r2,12
  81ab84:	008020b4 	movhi	r2,130
  81ab88:	10b33004 	addi	r2,r2,-13120
  81ab8c:	1885883a 	add	r2,r3,r2
  81ab90:	00000106 	br	81ab98 <read+0x40>
  81ab94:	0005883a 	mov	r2,zero
  81ab98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  81ab9c:	e0bffb17 	ldw	r2,-20(fp)
  81aba0:	10002226 	beq	r2,zero,81ac2c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  81aba4:	e0bffb17 	ldw	r2,-20(fp)
  81aba8:	10800217 	ldw	r2,8(r2)
  81abac:	108000cc 	andi	r2,r2,3
  81abb0:	10800060 	cmpeqi	r2,r2,1
  81abb4:	1000181e 	bne	r2,zero,81ac18 <read+0xc0>
        (fd->dev->read))
  81abb8:	e0bffb17 	ldw	r2,-20(fp)
  81abbc:	10800017 	ldw	r2,0(r2)
  81abc0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  81abc4:	10001426 	beq	r2,zero,81ac18 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  81abc8:	e0bffb17 	ldw	r2,-20(fp)
  81abcc:	10800017 	ldw	r2,0(r2)
  81abd0:	10800517 	ldw	r2,20(r2)
  81abd4:	e0ffff17 	ldw	r3,-4(fp)
  81abd8:	e13ffb17 	ldw	r4,-20(fp)
  81abdc:	e17ffe17 	ldw	r5,-8(fp)
  81abe0:	180d883a 	mov	r6,r3
  81abe4:	103ee83a 	callr	r2
  81abe8:	e0bffc15 	stw	r2,-16(fp)
  81abec:	e0bffc17 	ldw	r2,-16(fp)
  81abf0:	1000070e 	bge	r2,zero,81ac10 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  81abf4:	081ab080 	call	81ab08 <alt_get_errno>
  81abf8:	1007883a 	mov	r3,r2
  81abfc:	e0bffc17 	ldw	r2,-16(fp)
  81ac00:	0085c83a 	sub	r2,zero,r2
  81ac04:	18800015 	stw	r2,0(r3)
          return -1;
  81ac08:	00bfffc4 	movi	r2,-1
  81ac0c:	00000c06 	br	81ac40 <read+0xe8>
        }
        return rval;
  81ac10:	e0bffc17 	ldw	r2,-16(fp)
  81ac14:	00000a06 	br	81ac40 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  81ac18:	081ab080 	call	81ab08 <alt_get_errno>
  81ac1c:	1007883a 	mov	r3,r2
  81ac20:	00800344 	movi	r2,13
  81ac24:	18800015 	stw	r2,0(r3)
  81ac28:	00000406 	br	81ac3c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  81ac2c:	081ab080 	call	81ab08 <alt_get_errno>
  81ac30:	1007883a 	mov	r3,r2
  81ac34:	00801444 	movi	r2,81
  81ac38:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81ac3c:	00bfffc4 	movi	r2,-1
}
  81ac40:	e037883a 	mov	sp,fp
  81ac44:	dfc00117 	ldw	ra,4(sp)
  81ac48:	df000017 	ldw	fp,0(sp)
  81ac4c:	dec00204 	addi	sp,sp,8
  81ac50:	f800283a 	ret

0081ac54 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  81ac54:	defffe04 	addi	sp,sp,-8
  81ac58:	df000115 	stw	fp,4(sp)
  81ac5c:	df000104 	addi	fp,sp,4
  81ac60:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  81ac64:	e0bfff17 	ldw	r2,-4(fp)
  81ac68:	108000d0 	cmplti	r2,r2,3
  81ac6c:	10000d1e 	bne	r2,zero,81aca4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  81ac70:	008020b4 	movhi	r2,130
  81ac74:	10b33004 	addi	r2,r2,-13120
  81ac78:	e0ffff17 	ldw	r3,-4(fp)
  81ac7c:	18c00324 	muli	r3,r3,12
  81ac80:	18c00204 	addi	r3,r3,8
  81ac84:	10c5883a 	add	r2,r2,r3
  81ac88:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  81ac8c:	008020b4 	movhi	r2,130
  81ac90:	10b33004 	addi	r2,r2,-13120
  81ac94:	e0ffff17 	ldw	r3,-4(fp)
  81ac98:	18c00324 	muli	r3,r3,12
  81ac9c:	10c5883a 	add	r2,r2,r3
  81aca0:	10000015 	stw	zero,0(r2)
  }
}
  81aca4:	e037883a 	mov	sp,fp
  81aca8:	df000017 	ldw	fp,0(sp)
  81acac:	dec00104 	addi	sp,sp,4
  81acb0:	f800283a 	ret

0081acb4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  81acb4:	defff904 	addi	sp,sp,-28
  81acb8:	df000615 	stw	fp,24(sp)
  81acbc:	df000604 	addi	fp,sp,24
  81acc0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81acc4:	0005303a 	rdctl	r2,status
  81acc8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81accc:	e0fffc17 	ldw	r3,-16(fp)
  81acd0:	00bfff84 	movi	r2,-2
  81acd4:	1884703a 	and	r2,r3,r2
  81acd8:	1001703a 	wrctl	status,r2
  
  return context;
  81acdc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  81ace0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  81ace4:	d0a01217 	ldw	r2,-32696(gp)
  81ace8:	10c000c4 	addi	r3,r2,3
  81acec:	00bfff04 	movi	r2,-4
  81acf0:	1884703a 	and	r2,r3,r2
  81acf4:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  81acf8:	d0e01217 	ldw	r3,-32696(gp)
  81acfc:	e0bfff17 	ldw	r2,-4(fp)
  81ad00:	1887883a 	add	r3,r3,r2
  81ad04:	00804034 	movhi	r2,256
  81ad08:	10800004 	addi	r2,r2,0
  81ad0c:	10c0062e 	bgeu	r2,r3,81ad28 <sbrk+0x74>
  81ad10:	e0bffa17 	ldw	r2,-24(fp)
  81ad14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ad18:	e0bffd17 	ldw	r2,-12(fp)
  81ad1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  81ad20:	00bfffc4 	movi	r2,-1
  81ad24:	00000b06 	br	81ad54 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  81ad28:	d0a01217 	ldw	r2,-32696(gp)
  81ad2c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
  81ad30:	d0e01217 	ldw	r3,-32696(gp)
  81ad34:	e0bfff17 	ldw	r2,-4(fp)
  81ad38:	1885883a 	add	r2,r3,r2
  81ad3c:	d0a01215 	stw	r2,-32696(gp)
  81ad40:	e0bffa17 	ldw	r2,-24(fp)
  81ad44:	e0bffe15 	stw	r2,-8(fp)
  81ad48:	e0bffe17 	ldw	r2,-8(fp)
  81ad4c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  81ad50:	e0bffb17 	ldw	r2,-20(fp)
} 
  81ad54:	e037883a 	mov	sp,fp
  81ad58:	df000017 	ldw	fp,0(sp)
  81ad5c:	dec00104 	addi	sp,sp,4
  81ad60:	f800283a 	ret

0081ad64 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81ad64:	defffa04 	addi	sp,sp,-24
  81ad68:	df000515 	stw	fp,20(sp)
  81ad6c:	df000504 	addi	fp,sp,20
  81ad70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ad74:	0005303a 	rdctl	r2,status
  81ad78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ad7c:	e0fffc17 	ldw	r3,-16(fp)
  81ad80:	00bfff84 	movi	r2,-2
  81ad84:	1884703a 	and	r2,r3,r2
  81ad88:	1001703a 	wrctl	status,r2
  
  return context;
  81ad8c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81ad90:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  81ad94:	e0bfff17 	ldw	r2,-4(fp)
  81ad98:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81ad9c:	e0bffd17 	ldw	r2,-12(fp)
  81ada0:	10800017 	ldw	r2,0(r2)
  81ada4:	e0fffd17 	ldw	r3,-12(fp)
  81ada8:	18c00117 	ldw	r3,4(r3)
  81adac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  81adb0:	e0bffd17 	ldw	r2,-12(fp)
  81adb4:	10800117 	ldw	r2,4(r2)
  81adb8:	e0fffd17 	ldw	r3,-12(fp)
  81adbc:	18c00017 	ldw	r3,0(r3)
  81adc0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81adc4:	e0bffd17 	ldw	r2,-12(fp)
  81adc8:	e0fffd17 	ldw	r3,-12(fp)
  81adcc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  81add0:	e0bffd17 	ldw	r2,-12(fp)
  81add4:	e0fffd17 	ldw	r3,-12(fp)
  81add8:	10c00015 	stw	r3,0(r2)
  81addc:	e0bffb17 	ldw	r2,-20(fp)
  81ade0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ade4:	e0bffe17 	ldw	r2,-8(fp)
  81ade8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81adec:	e037883a 	mov	sp,fp
  81adf0:	df000017 	ldw	fp,0(sp)
  81adf4:	dec00104 	addi	sp,sp,4
  81adf8:	f800283a 	ret

0081adfc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81adfc:	defffb04 	addi	sp,sp,-20
  81ae00:	dfc00415 	stw	ra,16(sp)
  81ae04:	df000315 	stw	fp,12(sp)
  81ae08:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81ae0c:	d0a01317 	ldw	r2,-32692(gp)
  81ae10:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81ae14:	d0a78f17 	ldw	r2,-25028(gp)
  81ae18:	10800044 	addi	r2,r2,1
  81ae1c:	d0a78f15 	stw	r2,-25028(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81ae20:	00002e06 	br	81aedc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  81ae24:	e0bffd17 	ldw	r2,-12(fp)
  81ae28:	10800017 	ldw	r2,0(r2)
  81ae2c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81ae30:	e0bffd17 	ldw	r2,-12(fp)
  81ae34:	10800403 	ldbu	r2,16(r2)
  81ae38:	10803fcc 	andi	r2,r2,255
  81ae3c:	10000426 	beq	r2,zero,81ae50 <alt_tick+0x54>
  81ae40:	d0a78f17 	ldw	r2,-25028(gp)
  81ae44:	1000021e 	bne	r2,zero,81ae50 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  81ae48:	e0bffd17 	ldw	r2,-12(fp)
  81ae4c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81ae50:	e0bffd17 	ldw	r2,-12(fp)
  81ae54:	10800217 	ldw	r2,8(r2)
  81ae58:	d0e78f17 	ldw	r3,-25028(gp)
  81ae5c:	18801d36 	bltu	r3,r2,81aed4 <alt_tick+0xd8>
  81ae60:	e0bffd17 	ldw	r2,-12(fp)
  81ae64:	10800403 	ldbu	r2,16(r2)
  81ae68:	10803fcc 	andi	r2,r2,255
  81ae6c:	1000191e 	bne	r2,zero,81aed4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  81ae70:	e0bffd17 	ldw	r2,-12(fp)
  81ae74:	10800317 	ldw	r2,12(r2)
  81ae78:	e0fffd17 	ldw	r3,-12(fp)
  81ae7c:	18c00517 	ldw	r3,20(r3)
  81ae80:	1809883a 	mov	r4,r3
  81ae84:	103ee83a 	callr	r2
  81ae88:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81ae8c:	e0bfff17 	ldw	r2,-4(fp)
  81ae90:	1000031e 	bne	r2,zero,81aea0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  81ae94:	e13ffd17 	ldw	r4,-12(fp)
  81ae98:	081ad640 	call	81ad64 <alt_alarm_stop>
  81ae9c:	00000d06 	br	81aed4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  81aea0:	e0bffd17 	ldw	r2,-12(fp)
  81aea4:	10c00217 	ldw	r3,8(r2)
  81aea8:	e0bfff17 	ldw	r2,-4(fp)
  81aeac:	1887883a 	add	r3,r3,r2
  81aeb0:	e0bffd17 	ldw	r2,-12(fp)
  81aeb4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81aeb8:	e0bffd17 	ldw	r2,-12(fp)
  81aebc:	10c00217 	ldw	r3,8(r2)
  81aec0:	d0a78f17 	ldw	r2,-25028(gp)
  81aec4:	1880032e 	bgeu	r3,r2,81aed4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  81aec8:	e0bffd17 	ldw	r2,-12(fp)
  81aecc:	00c00044 	movi	r3,1
  81aed0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  81aed4:	e0bffe17 	ldw	r2,-8(fp)
  81aed8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81aedc:	e0fffd17 	ldw	r3,-12(fp)
  81aee0:	d0a01304 	addi	r2,gp,-32692
  81aee4:	18bfcf1e 	bne	r3,r2,81ae24 <__alt_data_end+0xff81ae24>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81aee8:	0001883a 	nop
}
  81aeec:	e037883a 	mov	sp,fp
  81aef0:	dfc00117 	ldw	ra,4(sp)
  81aef4:	df000017 	ldw	fp,0(sp)
  81aef8:	dec00204 	addi	sp,sp,8
  81aefc:	f800283a 	ret

0081af00 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  81af00:	defffd04 	addi	sp,sp,-12
  81af04:	dfc00215 	stw	ra,8(sp)
  81af08:	df000115 	stw	fp,4(sp)
  81af0c:	df000104 	addi	fp,sp,4
  81af10:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  81af14:	e13fff17 	ldw	r4,-4(fp)
  81af18:	081b1940 	call	81b194 <alt_busy_sleep>
}
  81af1c:	e037883a 	mov	sp,fp
  81af20:	dfc00117 	ldw	ra,4(sp)
  81af24:	df000017 	ldw	fp,0(sp)
  81af28:	dec00204 	addi	sp,sp,8
  81af2c:	f800283a 	ret

0081af30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81af30:	defffe04 	addi	sp,sp,-8
  81af34:	dfc00115 	stw	ra,4(sp)
  81af38:	df000015 	stw	fp,0(sp)
  81af3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81af40:	008020b4 	movhi	r2,130
  81af44:	10b84904 	addi	r2,r2,-7900
  81af48:	10800017 	ldw	r2,0(r2)
  81af4c:	10000526 	beq	r2,zero,81af64 <alt_get_errno+0x34>
  81af50:	008020b4 	movhi	r2,130
  81af54:	10b84904 	addi	r2,r2,-7900
  81af58:	10800017 	ldw	r2,0(r2)
  81af5c:	103ee83a 	callr	r2
  81af60:	00000206 	br	81af6c <alt_get_errno+0x3c>
  81af64:	008020b4 	movhi	r2,130
  81af68:	10bfbc04 	addi	r2,r2,-272
}
  81af6c:	e037883a 	mov	sp,fp
  81af70:	dfc00117 	ldw	ra,4(sp)
  81af74:	df000017 	ldw	fp,0(sp)
  81af78:	dec00204 	addi	sp,sp,8
  81af7c:	f800283a 	ret

0081af80 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  81af80:	defff904 	addi	sp,sp,-28
  81af84:	dfc00615 	stw	ra,24(sp)
  81af88:	df000515 	stw	fp,20(sp)
  81af8c:	df000504 	addi	fp,sp,20
  81af90:	e13ffd15 	stw	r4,-12(fp)
  81af94:	e17ffe15 	stw	r5,-8(fp)
  81af98:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81af9c:	e0bffd17 	ldw	r2,-12(fp)
  81afa0:	10000616 	blt	r2,zero,81afbc <write+0x3c>
  81afa4:	e0bffd17 	ldw	r2,-12(fp)
  81afa8:	10c00324 	muli	r3,r2,12
  81afac:	008020b4 	movhi	r2,130
  81afb0:	10b33004 	addi	r2,r2,-13120
  81afb4:	1885883a 	add	r2,r3,r2
  81afb8:	00000106 	br	81afc0 <write+0x40>
  81afbc:	0005883a 	mov	r2,zero
  81afc0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  81afc4:	e0bffb17 	ldw	r2,-20(fp)
  81afc8:	10002126 	beq	r2,zero,81b050 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  81afcc:	e0bffb17 	ldw	r2,-20(fp)
  81afd0:	10800217 	ldw	r2,8(r2)
  81afd4:	108000cc 	andi	r2,r2,3
  81afd8:	10001826 	beq	r2,zero,81b03c <write+0xbc>
  81afdc:	e0bffb17 	ldw	r2,-20(fp)
  81afe0:	10800017 	ldw	r2,0(r2)
  81afe4:	10800617 	ldw	r2,24(r2)
  81afe8:	10001426 	beq	r2,zero,81b03c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  81afec:	e0bffb17 	ldw	r2,-20(fp)
  81aff0:	10800017 	ldw	r2,0(r2)
  81aff4:	10800617 	ldw	r2,24(r2)
  81aff8:	e0ffff17 	ldw	r3,-4(fp)
  81affc:	e13ffb17 	ldw	r4,-20(fp)
  81b000:	e17ffe17 	ldw	r5,-8(fp)
  81b004:	180d883a 	mov	r6,r3
  81b008:	103ee83a 	callr	r2
  81b00c:	e0bffc15 	stw	r2,-16(fp)
  81b010:	e0bffc17 	ldw	r2,-16(fp)
  81b014:	1000070e 	bge	r2,zero,81b034 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  81b018:	081af300 	call	81af30 <alt_get_errno>
  81b01c:	1007883a 	mov	r3,r2
  81b020:	e0bffc17 	ldw	r2,-16(fp)
  81b024:	0085c83a 	sub	r2,zero,r2
  81b028:	18800015 	stw	r2,0(r3)
        return -1;
  81b02c:	00bfffc4 	movi	r2,-1
  81b030:	00000c06 	br	81b064 <write+0xe4>
      }
      return rval;
  81b034:	e0bffc17 	ldw	r2,-16(fp)
  81b038:	00000a06 	br	81b064 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  81b03c:	081af300 	call	81af30 <alt_get_errno>
  81b040:	1007883a 	mov	r3,r2
  81b044:	00800344 	movi	r2,13
  81b048:	18800015 	stw	r2,0(r3)
  81b04c:	00000406 	br	81b060 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  81b050:	081af300 	call	81af30 <alt_get_errno>
  81b054:	1007883a 	mov	r3,r2
  81b058:	00801444 	movi	r2,81
  81b05c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81b060:	00bfffc4 	movi	r2,-1
}
  81b064:	e037883a 	mov	sp,fp
  81b068:	dfc00117 	ldw	ra,4(sp)
  81b06c:	df000017 	ldw	fp,0(sp)
  81b070:	dec00204 	addi	sp,sp,8
  81b074:	f800283a 	ret

0081b078 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  81b078:	defffd04 	addi	sp,sp,-12
  81b07c:	dfc00215 	stw	ra,8(sp)
  81b080:	df000115 	stw	fp,4(sp)
  81b084:	df000104 	addi	fp,sp,4
  81b088:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  81b08c:	e13fff17 	ldw	r4,-4(fp)
  81b090:	014020b4 	movhi	r5,130
  81b094:	29784604 	addi	r5,r5,-7912
  81b098:	081b3800 	call	81b380 <alt_dev_llist_insert>
}
  81b09c:	e037883a 	mov	sp,fp
  81b0a0:	dfc00117 	ldw	ra,4(sp)
  81b0a4:	df000017 	ldw	fp,0(sp)
  81b0a8:	dec00204 	addi	sp,sp,8
  81b0ac:	f800283a 	ret

0081b0b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  81b0b0:	defffd04 	addi	sp,sp,-12
  81b0b4:	dfc00215 	stw	ra,8(sp)
  81b0b8:	df000115 	stw	fp,4(sp)
  81b0bc:	df000104 	addi	fp,sp,4
  81b0c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  81b0c4:	081b80c0 	call	81b80c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  81b0c8:	00800044 	movi	r2,1
  81b0cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  81b0d0:	e037883a 	mov	sp,fp
  81b0d4:	dfc00117 	ldw	ra,4(sp)
  81b0d8:	df000017 	ldw	fp,0(sp)
  81b0dc:	dec00204 	addi	sp,sp,8
  81b0e0:	f800283a 	ret

0081b0e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  81b0e4:	defffe04 	addi	sp,sp,-8
  81b0e8:	dfc00115 	stw	ra,4(sp)
  81b0ec:	df000015 	stw	fp,0(sp)
  81b0f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  81b0f4:	01004034 	movhi	r4,256
  81b0f8:	21042004 	addi	r4,r4,4224
  81b0fc:	000b883a 	mov	r5,zero
  81b100:	01800104 	movi	r6,4
  81b104:	01c0fa04 	movi	r7,1000
  81b108:	0801c1c0 	call	801c1c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  81b10c:	010020b4 	movhi	r4,130
  81b110:	21339a04 	addi	r4,r4,-12696
  81b114:	000b883a 	mov	r5,zero
  81b118:	000d883a 	mov	r6,zero
  81b11c:	08003f40 	call	8003f4 <altera_avalon_jtag_uart_init>
  81b120:	010020b4 	movhi	r4,130
  81b124:	21339004 	addi	r4,r4,-12736
  81b128:	081b0780 	call	81b078 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  81b12c:	010020b4 	movhi	r4,130
  81b130:	2137b204 	addi	r4,r4,-8504
  81b134:	0801a0c0 	call	801a0c <altera_avalon_lcd_16207_init>
  81b138:	010020b4 	movhi	r4,130
  81b13c:	2137a804 	addi	r4,r4,-8544
  81b140:	081b0780 	call	81b078 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  81b144:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  81b148:	010020b4 	movhi	r4,130
  81b14c:	2137fa04 	addi	r4,r4,-8216
  81b150:	000b883a 	mov	r5,zero
  81b154:	018000c4 	movi	r6,3
  81b158:	0801dac0 	call	801dac <altera_avalon_uart_init>
  81b15c:	010020b4 	movhi	r4,130
  81b160:	2137f004 	addi	r4,r4,-8256
  81b164:	081b0780 	call	81b078 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  81b168:	010020b4 	movhi	r4,130
  81b16c:	21382104 	addi	r4,r4,-8060
  81b170:	081b0780 	call	81b078 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  81b174:	010020b4 	movhi	r4,130
  81b178:	21382d04 	addi	r4,r4,-8012
  81b17c:	081b0780 	call	81b078 <alt_dev_reg>
}
  81b180:	e037883a 	mov	sp,fp
  81b184:	dfc00117 	ldw	ra,4(sp)
  81b188:	df000017 	ldw	fp,0(sp)
  81b18c:	dec00204 	addi	sp,sp,8
  81b190:	f800283a 	ret

0081b194 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81b194:	defffa04 	addi	sp,sp,-24
  81b198:	dfc00515 	stw	ra,20(sp)
  81b19c:	df000415 	stw	fp,16(sp)
  81b1a0:	df000404 	addi	fp,sp,16
  81b1a4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81b1a8:	008000c4 	movi	r2,3
  81b1ac:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  81b1b0:	e0fffd17 	ldw	r3,-12(fp)
  81b1b4:	008003f4 	movhi	r2,15
  81b1b8:	10909004 	addi	r2,r2,16960
  81b1bc:	1885383a 	mul	r2,r3,r2
  81b1c0:	0100bef4 	movhi	r4,763
  81b1c4:	213c2004 	addi	r4,r4,-3968
  81b1c8:	100b883a 	mov	r5,r2
  81b1cc:	080c6300 	call	80c630 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  81b1d0:	01200034 	movhi	r4,32768
  81b1d4:	213fffc4 	addi	r4,r4,-1
  81b1d8:	100b883a 	mov	r5,r2
  81b1dc:	080c6300 	call	80c630 <__udivsi3>
  81b1e0:	e13fff17 	ldw	r4,-4(fp)
  81b1e4:	100b883a 	mov	r5,r2
  81b1e8:	080c6300 	call	80c630 <__udivsi3>
  81b1ec:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  81b1f0:	e0bffe17 	ldw	r2,-8(fp)
  81b1f4:	10002a26 	beq	r2,zero,81b2a0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  81b1f8:	e03ffc15 	stw	zero,-16(fp)
  81b1fc:	00001706 	br	81b25c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81b200:	00a00034 	movhi	r2,32768
  81b204:	10bfffc4 	addi	r2,r2,-1
  81b208:	10bfffc4 	addi	r2,r2,-1
  81b20c:	103ffe1e 	bne	r2,zero,81b208 <__alt_data_end+0xff81b208>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  81b210:	e0fffd17 	ldw	r3,-12(fp)
  81b214:	008003f4 	movhi	r2,15
  81b218:	10909004 	addi	r2,r2,16960
  81b21c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81b220:	0100bef4 	movhi	r4,763
  81b224:	213c2004 	addi	r4,r4,-3968
  81b228:	100b883a 	mov	r5,r2
  81b22c:	080c6300 	call	80c630 <__udivsi3>
  81b230:	01200034 	movhi	r4,32768
  81b234:	213fffc4 	addi	r4,r4,-1
  81b238:	100b883a 	mov	r5,r2
  81b23c:	080c6300 	call	80c630 <__udivsi3>
  81b240:	1007883a 	mov	r3,r2
  81b244:	e0bfff17 	ldw	r2,-4(fp)
  81b248:	10c5c83a 	sub	r2,r2,r3
  81b24c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  81b250:	e0bffc17 	ldw	r2,-16(fp)
  81b254:	10800044 	addi	r2,r2,1
  81b258:	e0bffc15 	stw	r2,-16(fp)
  81b25c:	e0fffc17 	ldw	r3,-16(fp)
  81b260:	e0bffe17 	ldw	r2,-8(fp)
  81b264:	18bfe616 	blt	r3,r2,81b200 <__alt_data_end+0xff81b200>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  81b268:	e0fffd17 	ldw	r3,-12(fp)
  81b26c:	008003f4 	movhi	r2,15
  81b270:	10909004 	addi	r2,r2,16960
  81b274:	1885383a 	mul	r2,r3,r2
  81b278:	0100bef4 	movhi	r4,763
  81b27c:	213c2004 	addi	r4,r4,-3968
  81b280:	100b883a 	mov	r5,r2
  81b284:	080c6300 	call	80c630 <__udivsi3>
  81b288:	1007883a 	mov	r3,r2
  81b28c:	e0bfff17 	ldw	r2,-4(fp)
  81b290:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81b294:	10bfffc4 	addi	r2,r2,-1
  81b298:	103ffe1e 	bne	r2,zero,81b294 <__alt_data_end+0xff81b294>
  81b29c:	00000d06 	br	81b2d4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  81b2a0:	e0fffd17 	ldw	r3,-12(fp)
  81b2a4:	008003f4 	movhi	r2,15
  81b2a8:	10909004 	addi	r2,r2,16960
  81b2ac:	1885383a 	mul	r2,r3,r2
  81b2b0:	0100bef4 	movhi	r4,763
  81b2b4:	213c2004 	addi	r4,r4,-3968
  81b2b8:	100b883a 	mov	r5,r2
  81b2bc:	080c6300 	call	80c630 <__udivsi3>
  81b2c0:	1007883a 	mov	r3,r2
  81b2c4:	e0bfff17 	ldw	r2,-4(fp)
  81b2c8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81b2cc:	10bfffc4 	addi	r2,r2,-1
  81b2d0:	00bffe16 	blt	zero,r2,81b2cc <__alt_data_end+0xff81b2cc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81b2d4:	0005883a 	mov	r2,zero
}
  81b2d8:	e037883a 	mov	sp,fp
  81b2dc:	dfc00117 	ldw	ra,4(sp)
  81b2e0:	df000017 	ldw	fp,0(sp)
  81b2e4:	dec00204 	addi	sp,sp,8
  81b2e8:	f800283a 	ret

0081b2ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81b2ec:	defffe04 	addi	sp,sp,-8
  81b2f0:	df000115 	stw	fp,4(sp)
  81b2f4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81b2f8:	e03fff15 	stw	zero,-4(fp)
  81b2fc:	00000506 	br	81b314 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81b300:	e0bfff17 	ldw	r2,-4(fp)
  81b304:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81b308:	e0bfff17 	ldw	r2,-4(fp)
  81b30c:	10800804 	addi	r2,r2,32
  81b310:	e0bfff15 	stw	r2,-4(fp)
  81b314:	e0bfff17 	ldw	r2,-4(fp)
  81b318:	10820030 	cmpltui	r2,r2,2048
  81b31c:	103ff81e 	bne	r2,zero,81b300 <__alt_data_end+0xff81b300>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81b320:	e037883a 	mov	sp,fp
  81b324:	df000017 	ldw	fp,0(sp)
  81b328:	dec00104 	addi	sp,sp,4
  81b32c:	f800283a 	ret

0081b330 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81b330:	defffe04 	addi	sp,sp,-8
  81b334:	dfc00115 	stw	ra,4(sp)
  81b338:	df000015 	stw	fp,0(sp)
  81b33c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81b340:	008020b4 	movhi	r2,130
  81b344:	10b84904 	addi	r2,r2,-7900
  81b348:	10800017 	ldw	r2,0(r2)
  81b34c:	10000526 	beq	r2,zero,81b364 <alt_get_errno+0x34>
  81b350:	008020b4 	movhi	r2,130
  81b354:	10b84904 	addi	r2,r2,-7900
  81b358:	10800017 	ldw	r2,0(r2)
  81b35c:	103ee83a 	callr	r2
  81b360:	00000206 	br	81b36c <alt_get_errno+0x3c>
  81b364:	008020b4 	movhi	r2,130
  81b368:	10bfbc04 	addi	r2,r2,-272
}
  81b36c:	e037883a 	mov	sp,fp
  81b370:	dfc00117 	ldw	ra,4(sp)
  81b374:	df000017 	ldw	fp,0(sp)
  81b378:	dec00204 	addi	sp,sp,8
  81b37c:	f800283a 	ret

0081b380 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81b380:	defffa04 	addi	sp,sp,-24
  81b384:	dfc00515 	stw	ra,20(sp)
  81b388:	df000415 	stw	fp,16(sp)
  81b38c:	df000404 	addi	fp,sp,16
  81b390:	e13ffe15 	stw	r4,-8(fp)
  81b394:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81b398:	e0bffe17 	ldw	r2,-8(fp)
  81b39c:	10000326 	beq	r2,zero,81b3ac <alt_dev_llist_insert+0x2c>
  81b3a0:	e0bffe17 	ldw	r2,-8(fp)
  81b3a4:	10800217 	ldw	r2,8(r2)
  81b3a8:	1000061e 	bne	r2,zero,81b3c4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  81b3ac:	081b3300 	call	81b330 <alt_get_errno>
  81b3b0:	1007883a 	mov	r3,r2
  81b3b4:	00800584 	movi	r2,22
  81b3b8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81b3bc:	00bffa84 	movi	r2,-22
  81b3c0:	00001306 	br	81b410 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81b3c4:	e0bffe17 	ldw	r2,-8(fp)
  81b3c8:	e0ffff17 	ldw	r3,-4(fp)
  81b3cc:	e0fffc15 	stw	r3,-16(fp)
  81b3d0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81b3d4:	e0bffd17 	ldw	r2,-12(fp)
  81b3d8:	e0fffc17 	ldw	r3,-16(fp)
  81b3dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81b3e0:	e0bffc17 	ldw	r2,-16(fp)
  81b3e4:	10c00017 	ldw	r3,0(r2)
  81b3e8:	e0bffd17 	ldw	r2,-12(fp)
  81b3ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81b3f0:	e0bffc17 	ldw	r2,-16(fp)
  81b3f4:	10800017 	ldw	r2,0(r2)
  81b3f8:	e0fffd17 	ldw	r3,-12(fp)
  81b3fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81b400:	e0bffc17 	ldw	r2,-16(fp)
  81b404:	e0fffd17 	ldw	r3,-12(fp)
  81b408:	10c00015 	stw	r3,0(r2)

  return 0;  
  81b40c:	0005883a 	mov	r2,zero
}
  81b410:	e037883a 	mov	sp,fp
  81b414:	dfc00117 	ldw	ra,4(sp)
  81b418:	df000017 	ldw	fp,0(sp)
  81b41c:	dec00204 	addi	sp,sp,8
  81b420:	f800283a 	ret

0081b424 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81b424:	defffd04 	addi	sp,sp,-12
  81b428:	dfc00215 	stw	ra,8(sp)
  81b42c:	df000115 	stw	fp,4(sp)
  81b430:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81b434:	008020b4 	movhi	r2,130
  81b438:	10af3d04 	addi	r2,r2,-17164
  81b43c:	e0bfff15 	stw	r2,-4(fp)
  81b440:	00000606 	br	81b45c <_do_ctors+0x38>
        (*ctor) (); 
  81b444:	e0bfff17 	ldw	r2,-4(fp)
  81b448:	10800017 	ldw	r2,0(r2)
  81b44c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81b450:	e0bfff17 	ldw	r2,-4(fp)
  81b454:	10bfff04 	addi	r2,r2,-4
  81b458:	e0bfff15 	stw	r2,-4(fp)
  81b45c:	e0ffff17 	ldw	r3,-4(fp)
  81b460:	008020b4 	movhi	r2,130
  81b464:	10af3e04 	addi	r2,r2,-17160
  81b468:	18bff62e 	bgeu	r3,r2,81b444 <__alt_data_end+0xff81b444>
        (*ctor) (); 
}
  81b46c:	e037883a 	mov	sp,fp
  81b470:	dfc00117 	ldw	ra,4(sp)
  81b474:	df000017 	ldw	fp,0(sp)
  81b478:	dec00204 	addi	sp,sp,8
  81b47c:	f800283a 	ret

0081b480 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81b480:	defffd04 	addi	sp,sp,-12
  81b484:	dfc00215 	stw	ra,8(sp)
  81b488:	df000115 	stw	fp,4(sp)
  81b48c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81b490:	008020b4 	movhi	r2,130
  81b494:	10af3d04 	addi	r2,r2,-17164
  81b498:	e0bfff15 	stw	r2,-4(fp)
  81b49c:	00000606 	br	81b4b8 <_do_dtors+0x38>
        (*dtor) (); 
  81b4a0:	e0bfff17 	ldw	r2,-4(fp)
  81b4a4:	10800017 	ldw	r2,0(r2)
  81b4a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81b4ac:	e0bfff17 	ldw	r2,-4(fp)
  81b4b0:	10bfff04 	addi	r2,r2,-4
  81b4b4:	e0bfff15 	stw	r2,-4(fp)
  81b4b8:	e0ffff17 	ldw	r3,-4(fp)
  81b4bc:	008020b4 	movhi	r2,130
  81b4c0:	10af3e04 	addi	r2,r2,-17160
  81b4c4:	18bff62e 	bgeu	r3,r2,81b4a0 <__alt_data_end+0xff81b4a0>
        (*dtor) (); 
}
  81b4c8:	e037883a 	mov	sp,fp
  81b4cc:	dfc00117 	ldw	ra,4(sp)
  81b4d0:	df000017 	ldw	fp,0(sp)
  81b4d4:	dec00204 	addi	sp,sp,8
  81b4d8:	f800283a 	ret

0081b4dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81b4dc:	defffb04 	addi	sp,sp,-20
  81b4e0:	dfc00415 	stw	ra,16(sp)
  81b4e4:	df000315 	stw	fp,12(sp)
  81b4e8:	df000304 	addi	fp,sp,12
  81b4ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81b4f0:	008020b4 	movhi	r2,130
  81b4f4:	10b84404 	addi	r2,r2,-7920
  81b4f8:	10800017 	ldw	r2,0(r2)
  81b4fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81b500:	00003106 	br	81b5c8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  81b504:	e0bffd17 	ldw	r2,-12(fp)
  81b508:	10800217 	ldw	r2,8(r2)
  81b50c:	1009883a 	mov	r4,r2
  81b510:	080e8b40 	call	80e8b4 <strlen>
  81b514:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  81b518:	e0bffd17 	ldw	r2,-12(fp)
  81b51c:	10c00217 	ldw	r3,8(r2)
  81b520:	e0bffe17 	ldw	r2,-8(fp)
  81b524:	10bfffc4 	addi	r2,r2,-1
  81b528:	1885883a 	add	r2,r3,r2
  81b52c:	10800003 	ldbu	r2,0(r2)
  81b530:	10803fcc 	andi	r2,r2,255
  81b534:	1080201c 	xori	r2,r2,128
  81b538:	10bfe004 	addi	r2,r2,-128
  81b53c:	10800bd8 	cmpnei	r2,r2,47
  81b540:	1000031e 	bne	r2,zero,81b550 <alt_find_file+0x74>
    {
      len -= 1;
  81b544:	e0bffe17 	ldw	r2,-8(fp)
  81b548:	10bfffc4 	addi	r2,r2,-1
  81b54c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81b550:	e0bffe17 	ldw	r2,-8(fp)
  81b554:	e0ffff17 	ldw	r3,-4(fp)
  81b558:	1885883a 	add	r2,r3,r2
  81b55c:	10800003 	ldbu	r2,0(r2)
  81b560:	10803fcc 	andi	r2,r2,255
  81b564:	1080201c 	xori	r2,r2,128
  81b568:	10bfe004 	addi	r2,r2,-128
  81b56c:	10800be0 	cmpeqi	r2,r2,47
  81b570:	1000081e 	bne	r2,zero,81b594 <alt_find_file+0xb8>
  81b574:	e0bffe17 	ldw	r2,-8(fp)
  81b578:	e0ffff17 	ldw	r3,-4(fp)
  81b57c:	1885883a 	add	r2,r3,r2
  81b580:	10800003 	ldbu	r2,0(r2)
  81b584:	10803fcc 	andi	r2,r2,255
  81b588:	1080201c 	xori	r2,r2,128
  81b58c:	10bfe004 	addi	r2,r2,-128
  81b590:	10000a1e 	bne	r2,zero,81b5bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  81b594:	e0bffd17 	ldw	r2,-12(fp)
  81b598:	10c00217 	ldw	r3,8(r2)
  81b59c:	e0bffe17 	ldw	r2,-8(fp)
  81b5a0:	1809883a 	mov	r4,r3
  81b5a4:	e17fff17 	ldw	r5,-4(fp)
  81b5a8:	100d883a 	mov	r6,r2
  81b5ac:	081b9a00 	call	81b9a0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81b5b0:	1000021e 	bne	r2,zero,81b5bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81b5b4:	e0bffd17 	ldw	r2,-12(fp)
  81b5b8:	00000806 	br	81b5dc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  81b5bc:	e0bffd17 	ldw	r2,-12(fp)
  81b5c0:	10800017 	ldw	r2,0(r2)
  81b5c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81b5c8:	e0fffd17 	ldw	r3,-12(fp)
  81b5cc:	008020b4 	movhi	r2,130
  81b5d0:	10b84404 	addi	r2,r2,-7920
  81b5d4:	18bfcb1e 	bne	r3,r2,81b504 <__alt_data_end+0xff81b504>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81b5d8:	0005883a 	mov	r2,zero
}
  81b5dc:	e037883a 	mov	sp,fp
  81b5e0:	dfc00117 	ldw	ra,4(sp)
  81b5e4:	df000017 	ldw	fp,0(sp)
  81b5e8:	dec00204 	addi	sp,sp,8
  81b5ec:	f800283a 	ret

0081b5f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81b5f0:	defffc04 	addi	sp,sp,-16
  81b5f4:	df000315 	stw	fp,12(sp)
  81b5f8:	df000304 	addi	fp,sp,12
  81b5fc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81b600:	00bffa04 	movi	r2,-24
  81b604:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81b608:	e03ffd15 	stw	zero,-12(fp)
  81b60c:	00001d06 	br	81b684 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  81b610:	008020b4 	movhi	r2,130
  81b614:	10b33004 	addi	r2,r2,-13120
  81b618:	e0fffd17 	ldw	r3,-12(fp)
  81b61c:	18c00324 	muli	r3,r3,12
  81b620:	10c5883a 	add	r2,r2,r3
  81b624:	10800017 	ldw	r2,0(r2)
  81b628:	1000131e 	bne	r2,zero,81b678 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  81b62c:	008020b4 	movhi	r2,130
  81b630:	10b33004 	addi	r2,r2,-13120
  81b634:	e0fffd17 	ldw	r3,-12(fp)
  81b638:	18c00324 	muli	r3,r3,12
  81b63c:	10c5883a 	add	r2,r2,r3
  81b640:	e0ffff17 	ldw	r3,-4(fp)
  81b644:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  81b648:	008020b4 	movhi	r2,130
  81b64c:	10b84804 	addi	r2,r2,-7904
  81b650:	10c00017 	ldw	r3,0(r2)
  81b654:	e0bffd17 	ldw	r2,-12(fp)
  81b658:	1880040e 	bge	r3,r2,81b66c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  81b65c:	008020b4 	movhi	r2,130
  81b660:	10b84804 	addi	r2,r2,-7904
  81b664:	e0fffd17 	ldw	r3,-12(fp)
  81b668:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  81b66c:	e0bffd17 	ldw	r2,-12(fp)
  81b670:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  81b674:	00000606 	br	81b690 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81b678:	e0bffd17 	ldw	r2,-12(fp)
  81b67c:	10800044 	addi	r2,r2,1
  81b680:	e0bffd15 	stw	r2,-12(fp)
  81b684:	e0bffd17 	ldw	r2,-12(fp)
  81b688:	10800810 	cmplti	r2,r2,32
  81b68c:	103fe01e 	bne	r2,zero,81b610 <__alt_data_end+0xff81b610>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  81b690:	e0bffe17 	ldw	r2,-8(fp)
}
  81b694:	e037883a 	mov	sp,fp
  81b698:	df000017 	ldw	fp,0(sp)
  81b69c:	dec00104 	addi	sp,sp,4
  81b6a0:	f800283a 	ret

0081b6a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81b6a4:	defffe04 	addi	sp,sp,-8
  81b6a8:	dfc00115 	stw	ra,4(sp)
  81b6ac:	df000015 	stw	fp,0(sp)
  81b6b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81b6b4:	0009883a 	mov	r4,zero
  81b6b8:	01440004 	movi	r5,4096
  81b6bc:	081b82c0 	call	81b82c <alt_icache_flush>
#endif
}
  81b6c0:	e037883a 	mov	sp,fp
  81b6c4:	dfc00117 	ldw	ra,4(sp)
  81b6c8:	df000017 	ldw	fp,0(sp)
  81b6cc:	dec00204 	addi	sp,sp,8
  81b6d0:	f800283a 	ret

0081b6d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81b6d4:	defff904 	addi	sp,sp,-28
  81b6d8:	dfc00615 	stw	ra,24(sp)
  81b6dc:	df000515 	stw	fp,20(sp)
  81b6e0:	df000504 	addi	fp,sp,20
  81b6e4:	e13ffc15 	stw	r4,-16(fp)
  81b6e8:	e17ffd15 	stw	r5,-12(fp)
  81b6ec:	e1bffe15 	stw	r6,-8(fp)
  81b6f0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81b6f4:	e13ffd17 	ldw	r4,-12(fp)
  81b6f8:	e17ffe17 	ldw	r5,-8(fp)
  81b6fc:	e1bfff17 	ldw	r6,-4(fp)
  81b700:	081a9b00 	call	81a9b0 <open>
  81b704:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81b708:	e0bffb17 	ldw	r2,-20(fp)
  81b70c:	10001c16 	blt	r2,zero,81b780 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  81b710:	008020b4 	movhi	r2,130
  81b714:	10b33004 	addi	r2,r2,-13120
  81b718:	e0fffb17 	ldw	r3,-20(fp)
  81b71c:	18c00324 	muli	r3,r3,12
  81b720:	10c5883a 	add	r2,r2,r3
  81b724:	10c00017 	ldw	r3,0(r2)
  81b728:	e0bffc17 	ldw	r2,-16(fp)
  81b72c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81b730:	008020b4 	movhi	r2,130
  81b734:	10b33004 	addi	r2,r2,-13120
  81b738:	e0fffb17 	ldw	r3,-20(fp)
  81b73c:	18c00324 	muli	r3,r3,12
  81b740:	18c00104 	addi	r3,r3,4
  81b744:	10c5883a 	add	r2,r2,r3
  81b748:	10c00017 	ldw	r3,0(r2)
  81b74c:	e0bffc17 	ldw	r2,-16(fp)
  81b750:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81b754:	008020b4 	movhi	r2,130
  81b758:	10b33004 	addi	r2,r2,-13120
  81b75c:	e0fffb17 	ldw	r3,-20(fp)
  81b760:	18c00324 	muli	r3,r3,12
  81b764:	18c00204 	addi	r3,r3,8
  81b768:	10c5883a 	add	r2,r2,r3
  81b76c:	10c00017 	ldw	r3,0(r2)
  81b770:	e0bffc17 	ldw	r2,-16(fp)
  81b774:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81b778:	e13ffb17 	ldw	r4,-20(fp)
  81b77c:	081ac540 	call	81ac54 <alt_release_fd>
  }
} 
  81b780:	e037883a 	mov	sp,fp
  81b784:	dfc00117 	ldw	ra,4(sp)
  81b788:	df000017 	ldw	fp,0(sp)
  81b78c:	dec00204 	addi	sp,sp,8
  81b790:	f800283a 	ret

0081b794 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81b794:	defffb04 	addi	sp,sp,-20
  81b798:	dfc00415 	stw	ra,16(sp)
  81b79c:	df000315 	stw	fp,12(sp)
  81b7a0:	df000304 	addi	fp,sp,12
  81b7a4:	e13ffd15 	stw	r4,-12(fp)
  81b7a8:	e17ffe15 	stw	r5,-8(fp)
  81b7ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81b7b0:	010020b4 	movhi	r4,130
  81b7b4:	21333304 	addi	r4,r4,-13108
  81b7b8:	e17ffd17 	ldw	r5,-12(fp)
  81b7bc:	01800044 	movi	r6,1
  81b7c0:	01c07fc4 	movi	r7,511
  81b7c4:	081b6d40 	call	81b6d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81b7c8:	010020b4 	movhi	r4,130
  81b7cc:	21333004 	addi	r4,r4,-13120
  81b7d0:	e17ffe17 	ldw	r5,-8(fp)
  81b7d4:	000d883a 	mov	r6,zero
  81b7d8:	01c07fc4 	movi	r7,511
  81b7dc:	081b6d40 	call	81b6d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81b7e0:	010020b4 	movhi	r4,130
  81b7e4:	21333604 	addi	r4,r4,-13096
  81b7e8:	e17fff17 	ldw	r5,-4(fp)
  81b7ec:	01800044 	movi	r6,1
  81b7f0:	01c07fc4 	movi	r7,511
  81b7f4:	081b6d40 	call	81b6d4 <alt_open_fd>
}  
  81b7f8:	e037883a 	mov	sp,fp
  81b7fc:	dfc00117 	ldw	ra,4(sp)
  81b800:	df000017 	ldw	fp,0(sp)
  81b804:	dec00204 	addi	sp,sp,8
  81b808:	f800283a 	ret

0081b80c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  81b80c:	deffff04 	addi	sp,sp,-4
  81b810:	df000015 	stw	fp,0(sp)
  81b814:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81b818:	000170fa 	wrctl	ienable,zero
}
  81b81c:	e037883a 	mov	sp,fp
  81b820:	df000017 	ldw	fp,0(sp)
  81b824:	dec00104 	addi	sp,sp,4
  81b828:	f800283a 	ret

0081b82c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81b82c:	defffb04 	addi	sp,sp,-20
  81b830:	df000415 	stw	fp,16(sp)
  81b834:	df000404 	addi	fp,sp,16
  81b838:	e13ffe15 	stw	r4,-8(fp)
  81b83c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81b840:	e0bfff17 	ldw	r2,-4(fp)
  81b844:	10840070 	cmpltui	r2,r2,4097
  81b848:	1000021e 	bne	r2,zero,81b854 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81b84c:	00840004 	movi	r2,4096
  81b850:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81b854:	e0fffe17 	ldw	r3,-8(fp)
  81b858:	e0bfff17 	ldw	r2,-4(fp)
  81b85c:	1885883a 	add	r2,r3,r2
  81b860:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81b864:	e0bffe17 	ldw	r2,-8(fp)
  81b868:	e0bffc15 	stw	r2,-16(fp)
  81b86c:	00000506 	br	81b884 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81b870:	e0bffc17 	ldw	r2,-16(fp)
  81b874:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81b878:	e0bffc17 	ldw	r2,-16(fp)
  81b87c:	10800804 	addi	r2,r2,32
  81b880:	e0bffc15 	stw	r2,-16(fp)
  81b884:	e0fffc17 	ldw	r3,-16(fp)
  81b888:	e0bffd17 	ldw	r2,-12(fp)
  81b88c:	18bff836 	bltu	r3,r2,81b870 <__alt_data_end+0xff81b870>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81b890:	e0bffe17 	ldw	r2,-8(fp)
  81b894:	108007cc 	andi	r2,r2,31
  81b898:	10000226 	beq	r2,zero,81b8a4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81b89c:	e0bffc17 	ldw	r2,-16(fp)
  81b8a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81b8a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81b8a8:	e037883a 	mov	sp,fp
  81b8ac:	df000017 	ldw	fp,0(sp)
  81b8b0:	dec00104 	addi	sp,sp,4
  81b8b4:	f800283a 	ret

0081b8b8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  81b8b8:	defffe04 	addi	sp,sp,-8
  81b8bc:	df000115 	stw	fp,4(sp)
  81b8c0:	df000104 	addi	fp,sp,4
  81b8c4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  81b8c8:	e0bfff17 	ldw	r2,-4(fp)
  81b8cc:	10bffe84 	addi	r2,r2,-6
  81b8d0:	10c00428 	cmpgeui	r3,r2,16
  81b8d4:	18001a1e 	bne	r3,zero,81b940 <alt_exception_cause_generated_bad_addr+0x88>
  81b8d8:	100690ba 	slli	r3,r2,2
  81b8dc:	008020b4 	movhi	r2,130
  81b8e0:	10ae3c04 	addi	r2,r2,-18192
  81b8e4:	1885883a 	add	r2,r3,r2
  81b8e8:	10800017 	ldw	r2,0(r2)
  81b8ec:	1000683a 	jmp	r2
  81b8f0:	0081b930 	cmpltui	r2,zero,1764
  81b8f4:	0081b930 	cmpltui	r2,zero,1764
  81b8f8:	0081b940 	call	81b94 <__alt_mem_sdram_0-0x77e46c>
  81b8fc:	0081b940 	call	81b94 <__alt_mem_sdram_0-0x77e46c>
  81b900:	0081b940 	call	81b94 <__alt_mem_sdram_0-0x77e46c>
  81b904:	0081b930 	cmpltui	r2,zero,1764
  81b908:	0081b938 	rdprs	r2,zero,1764
  81b90c:	0081b940 	call	81b94 <__alt_mem_sdram_0-0x77e46c>
  81b910:	0081b930 	cmpltui	r2,zero,1764
  81b914:	0081b930 	cmpltui	r2,zero,1764
  81b918:	0081b940 	call	81b94 <__alt_mem_sdram_0-0x77e46c>
  81b91c:	0081b930 	cmpltui	r2,zero,1764
  81b920:	0081b938 	rdprs	r2,zero,1764
  81b924:	0081b940 	call	81b94 <__alt_mem_sdram_0-0x77e46c>
  81b928:	0081b940 	call	81b94 <__alt_mem_sdram_0-0x77e46c>
  81b92c:	0081b930 	cmpltui	r2,zero,1764
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  81b930:	00800044 	movi	r2,1
  81b934:	00000306 	br	81b944 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  81b938:	0005883a 	mov	r2,zero
  81b93c:	00000106 	br	81b944 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  81b940:	0005883a 	mov	r2,zero
  }
}
  81b944:	e037883a 	mov	sp,fp
  81b948:	df000017 	ldw	fp,0(sp)
  81b94c:	dec00104 	addi	sp,sp,4
  81b950:	f800283a 	ret

0081b954 <atexit>:
  81b954:	200b883a 	mov	r5,r4
  81b958:	000d883a 	mov	r6,zero
  81b95c:	0009883a 	mov	r4,zero
  81b960:	000f883a 	mov	r7,zero
  81b964:	081ba1c1 	jmpi	81ba1c <__register_exitproc>

0081b968 <exit>:
  81b968:	defffe04 	addi	sp,sp,-8
  81b96c:	000b883a 	mov	r5,zero
  81b970:	dc000015 	stw	r16,0(sp)
  81b974:	dfc00115 	stw	ra,4(sp)
  81b978:	2021883a 	mov	r16,r4
  81b97c:	081bb300 	call	81bb30 <__call_exitprocs>
  81b980:	008020b4 	movhi	r2,130
  81b984:	10b83e04 	addi	r2,r2,-7944
  81b988:	11000017 	ldw	r4,0(r2)
  81b98c:	20800f17 	ldw	r2,60(r4)
  81b990:	10000126 	beq	r2,zero,81b998 <exit+0x30>
  81b994:	103ee83a 	callr	r2
  81b998:	8009883a 	mov	r4,r16
  81b99c:	081bcc40 	call	81bcc4 <_exit>

0081b9a0 <memcmp>:
  81b9a0:	01c000c4 	movi	r7,3
  81b9a4:	3980192e 	bgeu	r7,r6,81ba0c <memcmp+0x6c>
  81b9a8:	2144b03a 	or	r2,r4,r5
  81b9ac:	11c4703a 	and	r2,r2,r7
  81b9b0:	10000f26 	beq	r2,zero,81b9f0 <memcmp+0x50>
  81b9b4:	20800003 	ldbu	r2,0(r4)
  81b9b8:	28c00003 	ldbu	r3,0(r5)
  81b9bc:	10c0151e 	bne	r2,r3,81ba14 <memcmp+0x74>
  81b9c0:	31bfff84 	addi	r6,r6,-2
  81b9c4:	01ffffc4 	movi	r7,-1
  81b9c8:	00000406 	br	81b9dc <memcmp+0x3c>
  81b9cc:	20800003 	ldbu	r2,0(r4)
  81b9d0:	28c00003 	ldbu	r3,0(r5)
  81b9d4:	31bfffc4 	addi	r6,r6,-1
  81b9d8:	10c00e1e 	bne	r2,r3,81ba14 <memcmp+0x74>
  81b9dc:	21000044 	addi	r4,r4,1
  81b9e0:	29400044 	addi	r5,r5,1
  81b9e4:	31fff91e 	bne	r6,r7,81b9cc <__alt_data_end+0xff81b9cc>
  81b9e8:	0005883a 	mov	r2,zero
  81b9ec:	f800283a 	ret
  81b9f0:	20c00017 	ldw	r3,0(r4)
  81b9f4:	28800017 	ldw	r2,0(r5)
  81b9f8:	1880041e 	bne	r3,r2,81ba0c <memcmp+0x6c>
  81b9fc:	31bfff04 	addi	r6,r6,-4
  81ba00:	21000104 	addi	r4,r4,4
  81ba04:	29400104 	addi	r5,r5,4
  81ba08:	39bff936 	bltu	r7,r6,81b9f0 <__alt_data_end+0xff81b9f0>
  81ba0c:	303fe91e 	bne	r6,zero,81b9b4 <__alt_data_end+0xff81b9b4>
  81ba10:	003ff506 	br	81b9e8 <__alt_data_end+0xff81b9e8>
  81ba14:	10c5c83a 	sub	r2,r2,r3
  81ba18:	f800283a 	ret

0081ba1c <__register_exitproc>:
  81ba1c:	008020b4 	movhi	r2,130
  81ba20:	defffa04 	addi	sp,sp,-24
  81ba24:	10b83e04 	addi	r2,r2,-7944
  81ba28:	dc000315 	stw	r16,12(sp)
  81ba2c:	14000017 	ldw	r16,0(r2)
  81ba30:	dc400415 	stw	r17,16(sp)
  81ba34:	dfc00515 	stw	ra,20(sp)
  81ba38:	80805217 	ldw	r2,328(r16)
  81ba3c:	2023883a 	mov	r17,r4
  81ba40:	10003626 	beq	r2,zero,81bb1c <__register_exitproc+0x100>
  81ba44:	10c00117 	ldw	r3,4(r2)
  81ba48:	010007c4 	movi	r4,31
  81ba4c:	20c00e16 	blt	r4,r3,81ba88 <__register_exitproc+0x6c>
  81ba50:	1a400044 	addi	r9,r3,1
  81ba54:	8800211e 	bne	r17,zero,81badc <__register_exitproc+0xc0>
  81ba58:	18c00084 	addi	r3,r3,2
  81ba5c:	18c7883a 	add	r3,r3,r3
  81ba60:	18c7883a 	add	r3,r3,r3
  81ba64:	12400115 	stw	r9,4(r2)
  81ba68:	10c7883a 	add	r3,r2,r3
  81ba6c:	19400015 	stw	r5,0(r3)
  81ba70:	0005883a 	mov	r2,zero
  81ba74:	dfc00517 	ldw	ra,20(sp)
  81ba78:	dc400417 	ldw	r17,16(sp)
  81ba7c:	dc000317 	ldw	r16,12(sp)
  81ba80:	dec00604 	addi	sp,sp,24
  81ba84:	f800283a 	ret
  81ba88:	00800034 	movhi	r2,0
  81ba8c:	10800004 	addi	r2,r2,0
  81ba90:	10002526 	beq	r2,zero,81bb28 <__register_exitproc+0x10c>
  81ba94:	01006404 	movi	r4,400
  81ba98:	d9400015 	stw	r5,0(sp)
  81ba9c:	d9800115 	stw	r6,4(sp)
  81baa0:	d9c00215 	stw	r7,8(sp)
  81baa4:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  81baa8:	d9400017 	ldw	r5,0(sp)
  81baac:	d9800117 	ldw	r6,4(sp)
  81bab0:	d9c00217 	ldw	r7,8(sp)
  81bab4:	10001c26 	beq	r2,zero,81bb28 <__register_exitproc+0x10c>
  81bab8:	80c05217 	ldw	r3,328(r16)
  81babc:	10000115 	stw	zero,4(r2)
  81bac0:	02400044 	movi	r9,1
  81bac4:	10c00015 	stw	r3,0(r2)
  81bac8:	80805215 	stw	r2,328(r16)
  81bacc:	10006215 	stw	zero,392(r2)
  81bad0:	10006315 	stw	zero,396(r2)
  81bad4:	0007883a 	mov	r3,zero
  81bad8:	883fdf26 	beq	r17,zero,81ba58 <__alt_data_end+0xff81ba58>
  81badc:	18d1883a 	add	r8,r3,r3
  81bae0:	4211883a 	add	r8,r8,r8
  81bae4:	1211883a 	add	r8,r2,r8
  81bae8:	41802215 	stw	r6,136(r8)
  81baec:	01000044 	movi	r4,1
  81baf0:	11806217 	ldw	r6,392(r2)
  81baf4:	20c8983a 	sll	r4,r4,r3
  81baf8:	310cb03a 	or	r6,r6,r4
  81bafc:	11806215 	stw	r6,392(r2)
  81bb00:	41c04215 	stw	r7,264(r8)
  81bb04:	01800084 	movi	r6,2
  81bb08:	89bfd31e 	bne	r17,r6,81ba58 <__alt_data_end+0xff81ba58>
  81bb0c:	11806317 	ldw	r6,396(r2)
  81bb10:	3108b03a 	or	r4,r6,r4
  81bb14:	11006315 	stw	r4,396(r2)
  81bb18:	003fcf06 	br	81ba58 <__alt_data_end+0xff81ba58>
  81bb1c:	80805304 	addi	r2,r16,332
  81bb20:	80805215 	stw	r2,328(r16)
  81bb24:	003fc706 	br	81ba44 <__alt_data_end+0xff81ba44>
  81bb28:	00bfffc4 	movi	r2,-1
  81bb2c:	003fd106 	br	81ba74 <__alt_data_end+0xff81ba74>

0081bb30 <__call_exitprocs>:
  81bb30:	008020b4 	movhi	r2,130
  81bb34:	10b83e04 	addi	r2,r2,-7944
  81bb38:	10800017 	ldw	r2,0(r2)
  81bb3c:	defff404 	addi	sp,sp,-48
  81bb40:	dd800815 	stw	r22,32(sp)
  81bb44:	d8800015 	stw	r2,0(sp)
  81bb48:	10805204 	addi	r2,r2,328
  81bb4c:	dd000615 	stw	r20,24(sp)
  81bb50:	dc800415 	stw	r18,16(sp)
  81bb54:	dfc00b15 	stw	ra,44(sp)
  81bb58:	df000a15 	stw	fp,40(sp)
  81bb5c:	ddc00915 	stw	r23,36(sp)
  81bb60:	dd400715 	stw	r21,28(sp)
  81bb64:	dcc00515 	stw	r19,20(sp)
  81bb68:	dc400315 	stw	r17,12(sp)
  81bb6c:	dc000215 	stw	r16,8(sp)
  81bb70:	2025883a 	mov	r18,r4
  81bb74:	2829883a 	mov	r20,r5
  81bb78:	d8800115 	stw	r2,4(sp)
  81bb7c:	05bfffc4 	movi	r22,-1
  81bb80:	d8800017 	ldw	r2,0(sp)
  81bb84:	14c05217 	ldw	r19,328(r2)
  81bb88:	98001d26 	beq	r19,zero,81bc00 <__call_exitprocs+0xd0>
  81bb8c:	dd400117 	ldw	r21,4(sp)
  81bb90:	98800117 	ldw	r2,4(r19)
  81bb94:	173fffc4 	addi	fp,r2,-1
  81bb98:	e0000d16 	blt	fp,zero,81bbd0 <__call_exitprocs+0xa0>
  81bb9c:	14000044 	addi	r16,r2,1
  81bba0:	8421883a 	add	r16,r16,r16
  81bba4:	8421883a 	add	r16,r16,r16
  81bba8:	84402004 	addi	r17,r16,128
  81bbac:	9c63883a 	add	r17,r19,r17
  81bbb0:	9c21883a 	add	r16,r19,r16
  81bbb4:	a0001e26 	beq	r20,zero,81bc30 <__call_exitprocs+0x100>
  81bbb8:	80804017 	ldw	r2,256(r16)
  81bbbc:	15001c26 	beq	r2,r20,81bc30 <__call_exitprocs+0x100>
  81bbc0:	e73fffc4 	addi	fp,fp,-1
  81bbc4:	843fff04 	addi	r16,r16,-4
  81bbc8:	8c7fff04 	addi	r17,r17,-4
  81bbcc:	e5bff91e 	bne	fp,r22,81bbb4 <__alt_data_end+0xff81bbb4>
  81bbd0:	00800034 	movhi	r2,0
  81bbd4:	10800004 	addi	r2,r2,0
  81bbd8:	10000926 	beq	r2,zero,81bc00 <__call_exitprocs+0xd0>
  81bbdc:	98800117 	ldw	r2,4(r19)
  81bbe0:	1000311e 	bne	r2,zero,81bca8 <__call_exitprocs+0x178>
  81bbe4:	98800017 	ldw	r2,0(r19)
  81bbe8:	10003426 	beq	r2,zero,81bcbc <__call_exitprocs+0x18c>
  81bbec:	9809883a 	mov	r4,r19
  81bbf0:	a8800015 	stw	r2,0(r21)
  81bbf4:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  81bbf8:	acc00017 	ldw	r19,0(r21)
  81bbfc:	983fe41e 	bne	r19,zero,81bb90 <__alt_data_end+0xff81bb90>
  81bc00:	dfc00b17 	ldw	ra,44(sp)
  81bc04:	df000a17 	ldw	fp,40(sp)
  81bc08:	ddc00917 	ldw	r23,36(sp)
  81bc0c:	dd800817 	ldw	r22,32(sp)
  81bc10:	dd400717 	ldw	r21,28(sp)
  81bc14:	dd000617 	ldw	r20,24(sp)
  81bc18:	dcc00517 	ldw	r19,20(sp)
  81bc1c:	dc800417 	ldw	r18,16(sp)
  81bc20:	dc400317 	ldw	r17,12(sp)
  81bc24:	dc000217 	ldw	r16,8(sp)
  81bc28:	dec00c04 	addi	sp,sp,48
  81bc2c:	f800283a 	ret
  81bc30:	98800117 	ldw	r2,4(r19)
  81bc34:	80c00017 	ldw	r3,0(r16)
  81bc38:	10bfffc4 	addi	r2,r2,-1
  81bc3c:	17001526 	beq	r2,fp,81bc94 <__call_exitprocs+0x164>
  81bc40:	80000015 	stw	zero,0(r16)
  81bc44:	183fde26 	beq	r3,zero,81bbc0 <__alt_data_end+0xff81bbc0>
  81bc48:	00800044 	movi	r2,1
  81bc4c:	1708983a 	sll	r4,r2,fp
  81bc50:	98806217 	ldw	r2,392(r19)
  81bc54:	9dc00117 	ldw	r23,4(r19)
  81bc58:	2084703a 	and	r2,r4,r2
  81bc5c:	1000061e 	bne	r2,zero,81bc78 <__call_exitprocs+0x148>
  81bc60:	183ee83a 	callr	r3
  81bc64:	98800117 	ldw	r2,4(r19)
  81bc68:	15ffc51e 	bne	r2,r23,81bb80 <__alt_data_end+0xff81bb80>
  81bc6c:	a8800017 	ldw	r2,0(r21)
  81bc70:	14ffd326 	beq	r2,r19,81bbc0 <__alt_data_end+0xff81bbc0>
  81bc74:	003fc206 	br	81bb80 <__alt_data_end+0xff81bb80>
  81bc78:	98806317 	ldw	r2,396(r19)
  81bc7c:	2084703a 	and	r2,r4,r2
  81bc80:	1000061e 	bne	r2,zero,81bc9c <__call_exitprocs+0x16c>
  81bc84:	89400017 	ldw	r5,0(r17)
  81bc88:	9009883a 	mov	r4,r18
  81bc8c:	183ee83a 	callr	r3
  81bc90:	003ff406 	br	81bc64 <__alt_data_end+0xff81bc64>
  81bc94:	9f000115 	stw	fp,4(r19)
  81bc98:	003fea06 	br	81bc44 <__alt_data_end+0xff81bc44>
  81bc9c:	89000017 	ldw	r4,0(r17)
  81bca0:	183ee83a 	callr	r3
  81bca4:	003fef06 	br	81bc64 <__alt_data_end+0xff81bc64>
  81bca8:	98800017 	ldw	r2,0(r19)
  81bcac:	982b883a 	mov	r21,r19
  81bcb0:	1027883a 	mov	r19,r2
  81bcb4:	983fb61e 	bne	r19,zero,81bb90 <__alt_data_end+0xff81bb90>
  81bcb8:	003fd106 	br	81bc00 <__alt_data_end+0xff81bc00>
  81bcbc:	0005883a 	mov	r2,zero
  81bcc0:	003ffa06 	br	81bcac <__alt_data_end+0xff81bcac>

0081bcc4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81bcc4:	defffd04 	addi	sp,sp,-12
  81bcc8:	df000215 	stw	fp,8(sp)
  81bccc:	df000204 	addi	fp,sp,8
  81bcd0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81bcd4:	0001883a 	nop
  81bcd8:	e0bfff17 	ldw	r2,-4(fp)
  81bcdc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  81bce0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81bce4:	10000226 	beq	r2,zero,81bcf0 <_exit+0x2c>
    ALT_SIM_FAIL();
  81bce8:	002af070 	cmpltui	zero,zero,43969
  81bcec:	00000106 	br	81bcf4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  81bcf0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81bcf4:	003fff06 	br	81bcf4 <__alt_data_end+0xff81bcf4>
